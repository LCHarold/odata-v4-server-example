{"version":3,"sources":["jaydata.js","node_modules/acorn/dist/acorn.js","node_modules/jaydata-dynamic-metadata/lib/metadata.js","node_modules/jaydata-dynamic-metadata/lib/metadataHandler.js","node_modules/jaydata-dynamic-metadata/lib/service.js","node_modules/jaydata-dynamic-metadata/node_modules/extend/index.js","node_modules/jaydata-error-handler/lib/errorHandler.js","node_modules/jaydata-promise-handler/lib/promise.js","node_modules/jaydata-promise-handler/lib/promiseHandlerBase.js","node_modules/odata-metadata/lib/edm.js","node_modules/odata-metadata/lib/metacode.js","node_modules/process/browser.js","node_modules/reflect-metadata/Reflect.js","package.json","src/JaySvcUtil/index.js","src/TypeSystem/Container.js","src/TypeSystem/Extensions.js","src/TypeSystem/Trace/Logger.js","src/TypeSystem/Trace/Trace.js","src/TypeSystem/src/TypeSystem/TypeSystem.js","src/TypeSystem/Types/src/TypeSystem/Types/Blob.js","src/TypeSystem/Types/Converter.js","src/TypeSystem/Types/EdmTypes.js","src/TypeSystem/Types/Geography.js","src/TypeSystem/Types/Geometry.js","src/TypeSystem/Types/Geospatial.js","src/TypeSystem/Types/Guid.js","src/TypeSystem/Types/SimpleBase.js","src/TypeSystem/Types/Types.js","src/TypeSystem/index.js","src/TypeSystem/initializeJayData.js","src/TypeSystem/initializeJayDataClient.js","src/Types/Access.js","src/Types/Ajax/AjaxStub.js","src/Types/Ajax/ExtJSAjaxWrapper.js","src/Types/Ajax/WinJSAjaxWrapper.js","src/Types/Ajax/jQueryAjaxWrapper.js","src/Types/Authentication/Anonymous.js","src/Types/Authentication/AuthenticationBase.js","src/Types/Authentication/BasicAuth.js","src/Types/Authentication/FacebookAuth.js","src/Types/Entity.js","src/Types/EntityAttachModes.js","src/Types/EntityContext.js","src/Types/EntitySet.js","src/Types/EntityState.js","src/Types/EntityStateManager.js","src/Types/EntityWrapper.js","src/Types/Enum.js","src/Types/Expressions/ArrayLiteralExpression.js","src/Types/Expressions/CallExpression.js","src/Types/Expressions/CodeParser.js","src/Types/Expressions/ConstantExpression.js","src/Types/Expressions/ContinuationExpressionBuilder.js","src/Types/Expressions/EntityExpressions/AssociationInfoExpression.js","src/Types/Expressions/EntityExpressions/CodeExpression.js","src/Types/Expressions/EntityExpressions/CodeToEntityConverter.js","src/Types/Expressions/EntityExpressions/ComplexTypeExpression.js","src/Types/Expressions/EntityExpressions/EntityContextExpression.js","src/Types/Expressions/EntityExpressions/EntityExpression.js","src/Types/Expressions/EntityExpressions/EntityExpressionVisitor.js","src/Types/Expressions/EntityExpressions/EntityFieldExpression.js","src/Types/Expressions/EntityExpressions/EntityFieldOperationExpression.js","src/Types/Expressions/EntityExpressions/EntitySetExpression.js","src/Types/Expressions/EntityExpressions/ExpressionMonitor.js","src/Types/Expressions/EntityExpressions/FilterExpression.js","src/Types/Expressions/EntityExpressions/FrameOperationExpression.js","src/Types/Expressions/EntityExpressions/IncludeExpression.js","src/Types/Expressions/EntityExpressions/MemberInfoExpression.js","src/Types/Expressions/EntityExpressions/OrderExpression.js","src/Types/Expressions/EntityExpressions/ParametricQueryExpression.js","src/Types/Expressions/EntityExpressions/ProjectionExpression.js","src/Types/Expressions/EntityExpressions/QueryExpressionCreator.js","src/Types/Expressions/EntityExpressions/QueryParameterExpression.js","src/Types/Expressions/EntityExpressions/RepresentationExpression.js","src/Types/Expressions/EntityExpressions/ServiceOperationExpression.js","src/Types/Expressions/ExpressionBuilder.js","src/Types/Expressions/ExpressionNode2.js","src/Types/Expressions/FunctionExpression.js","src/Types/Expressions/ObjectFieldExpression.js","src/Types/Expressions/ObjectLiteralExpression.js","src/Types/Expressions/PagingExpression.js","src/Types/Expressions/ParameterExpression.js","src/Types/Expressions/PropertyExpression.js","src/Types/Expressions/SimpleBinaryExpression.js","src/Types/Expressions/ThisExpression.js","src/Types/Expressions/Visitors/ExecutorVisitor.js","src/Types/Expressions/Visitors/ExpTreeVisitor.js","src/Types/Expressions/Visitors/ExpressionVisitor.js","src/Types/Expressions/Visitors/GlobalContextProcessor.js","src/Types/Expressions/Visitors/LambdaParameterProcessor.js","src/Types/Expressions/Visitors/LocalContextProcessor.js","src/Types/Expressions/Visitors/LogicalSchemaBinderVisitor.js","src/Types/Expressions/Visitors/ParameterProcessor.js","src/Types/Expressions/Visitors/ParameterResolverVisitor.js","src/Types/Expressions/Visitors/SetExecutableVisitor.js","src/Types/Expressions/index.js","src/Types/ItemStore.js","src/Types/ModelBinder.js","src/Types/Notifications/ChangeCollector.js","src/Types/Notifications/ChangeCollectorBase.js","src/Types/Notifications/ChangeDistributor.js","src/Types/Notifications/ChangeDistributorBase.js","src/Types/Query.js","src/Types/QueryBuilder.js","src/Types/QueryProvider.js","src/Types/Queryable.js","src/Types/RelatedEntityProxy.js","src/Types/ServiceOperation.js","src/Types/StorageProviderBase.js","src/Types/src/Types/StorageProviderLoader.js","src/Types/StorageProviders/modelBinderConfigCompiler.js","src/Types/Transaction.js","src/Types/Validation/EntityValidation.js","src/Types/Validation/EntityValidationBase.js","src/Types/index.js","src/index.js"],"names":["require","e","t","n","r","s","o","u","a","i","f","Error","code","l","exports","call","length",1,"_dereq_","module","global","define","amd","g","window","self","this","acorn","_tokentype","_state","pp","Parser","prototype","checkPropClash","prop","propHash","options","ecmaVersion","computed","method","shorthand","key","name","undefined","type","String","value","kind","proto","raise","start","other","isGetSet","strict","init","get","set","parseExpression","noIn","refDestructuringErrors","startPos","startLoc","expr","parseMaybeAssign","types","comma","node","startNodeAt","expressions","eat","push","finishNode","afterLeftParse","_yield","inGenerator","parseYield","validateDestructuring","shorthandAssign","trailingComma","parenL","potentialArrowAt","left","parseMaybeConditional","isAssign","checkPatternErrors","operator","eq","toAssignable","checkLVal","next","right","checkExpressionErrors","parseExprOps","question","test","consequent","expect","colon","alternate","parseMaybeUnary","parseExprOp","leftStartPos","leftStartLoc","minPrec","prec","binop","_in","op","logicalOR","logicalAND","prefix","startNode","update","incDec","argument","parseExprSubscripts","postfix","canInsertSemicolon","parseExprAtom","skipArrowSubscripts","input","slice","lastTokStart","lastTokEnd","parseSubscripts","base","noCalls","dot","object","property","parseIdent","bracketL","bracketR","callee","arguments","parseExprList","parenR","backQuote","tag","quasi","parseTemplate","canBeArrow","_super","inFunction","_this","unexpected","id","arrow","parseArrowExpression","regexp","parseLiteral","regex","pattern","flags","num","string","_null","_true","_false","raw","keyword","parseParenAndDistinguishExpression","_for","parseComprehension","elements","braceL","parseObj","_function","parseFunction","_class","parseClass","_new","parseNew","end","parseParenExpression","val","innerStartPos","innerStartLoc","exprList","first","spreadStart","innerParenStart","ellipsis","parseParenItem","parseRest","innerEndPos","innerEndLoc","parseParenArrowList","finishNodeAt","preserveParens","par","expression","item","empty","meta","parseTemplateElement","elem","replace","cooked","tail","curElt","quasis","dollarBraceL","braceR","isPattern","properties","afterTrailingComma","isGenerator","star","parsePropertyName","parsePropertyValue","parseMaybeDefault","parseMethod","paramCount","params","keywords","reservedWordsStrictBind","reservedWords","initFunction","generator","parseBindingList","parseFunctionBody","toAssignableList","isArrowFunction","isExpression","body","oldInFunc","oldInGen","oldLabels","labels","parseBlock","isUseStrict","oldStrict","checkParams","nameHash","close","allowTrailingComma","allowEmpty","elts","elt","parseSpread","liberal","allowReserved","reservedWordsStrict","indexOf","semi","startsExpr","delegate","blocks","block","parseBindingAtom","expectContextual","filter","_if","./state","./tokentype",2,"isInAstralSet","pos","isIdentifierStart","astral","nonASCIIidentifierStart","fromCharCode","astralIdentifierStartCodes","isIdentifierChar","nonASCIIidentifier","astralIdentifierCodes","__esModule",3,5,6,"strictBind","ecma5AndLessKeywords","nonASCIIidentifierStartChars","nonASCIIidentifierChars","RegExp","parse","parseExpressionAt","p","nextToken","tokenizer","plugins","_options","defaultOptions","_locutil","Position","SourceLocation","getLineInfo","_node","Node","TokenType","tokTypes","_tokencontext","TokContext","tokContexts","_identifier","_tokenize","Token","_whitespace","isNewLine","lineBreak","lineBreakG","version","./expression","./identifier","./location","./locutil","./lval","./node","./options","./parseutil","./statement","./tokencontext","./tokenize","./whitespace",4,"message","loc","line","column","err","SyntaxError","raisedAt","curPosition","locations","curLine","lineStart","_classCallCheck","instance","Constructor","TypeError","offset","cur","lastIndex","match","exec","index","col","sourceFile","source","_util","isBinding","last","arg","allowNonIdent","rest","parseBindingListItem","param","checkClashes","has","./util",7,"ranges","range","parser","directSourceFile","lastTokEndLoc",8,"getOptions","opts","opt","isArray","onToken","tokens","token","onComment","pushComment","array","text","endLoc","comment","sourceType","onInsertedSemicolon","onTrailingComma","allowReturnOutsideFunction","allowImportExportEverywhere","allowHashBang","program",9,"stmt","isContextual","eatContextual","eof","insertSemicolon","semicolon","tokType","lastTokStartLoc","andThrow",10,"keywordRegexp","words","reserved","reservedStrict","containsEsc","loadPlugins","Math","max","lastIndexOf","split","context","initialContext","exprAllowed","inModule","skipLineComment","isKeyword","word","isReservedWord","extend","pluginConfigs","_name","plugin","parseTopLevel",11,"parseStatement","setStrict","loopLabel","switchLabel","declaration","topLevel","starttype","_break","_continue","parseBreakContinueStatement","_debugger","parseDebuggerStatement","_do","parseDoStatement","parseForStatement","parseFunctionStatement","parseIfStatement","_return","parseReturnStatement","_switch","parseSwitchStatement","_throw","parseThrowStatement","_try","parseTryStatement","_let","_const","_var","parseVarStatement","_while","parseWhileStatement","_with","parseWithStatement","parseEmptyStatement","_export","_import","parseImport","parseExport","maybeName","parseLabeledStatement","parseExpressionStatement","isBreak","label","lab","pop","parseFor","_init","varKind","parseVar","declarations","parseForIn","_else","discriminant","cases","sawDefault","_case","_default","isCase","handler","_catch","clause","finalizer","_finally","isLoop","statementStart","allowStrict","isFor","decl","parseVarId","isStatement","allowExpressionBody","parseFunctionParams","parseClassId","parseClassSuper","classBody","hadConstructor","isMaybeStatic","parseClassMethod","superClass","_extends","needsSemi","shouldParseExportStatement","specifiers","parseExportSpecifiers","local","nodes","exported","parseImportSpecifiers","imported",12,"isExpr","preserveSpace","override","b_stat","b_expr","b_tmpl","p_stat","p_expr","q_tmpl","readTmplToken","f_expr","braceIsBlock","prevType","_parent","curContext","updateContext","beforeExpr","out","statementParens",13,"tryCreateRegexp","src","throwErrorAt","codePointToString","isRhino","Packages","Object","toString","getToken","Symbol","iterator","done","skipSpace","finishToken","readToken","fullCharCodeAtPos","readWord","getTokenFromCode","charCodeAt","skipBlockComment","startSkip","ch","loop","nonASCIIwhitespace","readToken_dot","readNumber","next2","readToken_slash","readRegexp","finishOp","assign","slash","readToken_mult_modulo","modulo","readToken_pipe_amp","bitwiseOR","bitwiseAND","readToken_caret","bitwiseXOR","readToken_plus_min","plusMin","readToken_lt_gt","size","bitShift","relational","readToken_eq_excl","equality","readRadixNumber","readString","str","regexpUnicodeSupport","escaped","inClass","charAt","content","mods","readWord1","tmp","validFlags","_match","Number","readInt","radix","len","total","Infinity","startsWithDot","isFloat","octal","parseFloat","parseInt","readCodePoint","codePos","readHexChar","quote","chunkStart","readEscapedChar","template","inTemplate","octalStr","substr","escStart","esc",14,"kw","conf",15,"obj","propName","hasOwnProperty",16,"containsField","field","cb","parsebool","b","d","_collectionRegex","Metadata","$data","metadata","container","Container","_getMaxValue","maxValue","MAX_VALUE","createTypeDefinition","propertySchema","definition","v","collectionBaseType","elementType","createReturnTypeDefinition","returnType","createProperty","entitySchema","nullable","required","maxLength","keys","propertyRefs","some","pr","concurrencyMode","ConcurrencyMode","createNavigationProperty","inverseProperty","createEntityDefinition","props","map","bind","navigationProps","navigationProperties","concat","result","reduce","c","createEntityType","namespace","baseType","Entity","entityFullName","staticDefinition","openType","typeName","createEnumOption","isNaN","createEnumDefinition","enumSchema","members","createEnumType","enumFullName","Enum","underlyingType","createEntitySetProperty","entitySetSchema","contextSchema","entityType","entitySetType","indexBy","fieldName","pick","createContextDefinition","entitySets","es","apply","createContextType","Array","contextType","EntityContext","contextImportMethods","actionImports","functionImports","createMethodParameter","parameter","paramDef","applyBoundMethod","actionInfo","ns","typeDefinitions","parameters","forEach","isBound","bindingParameter","shift","filteredContextDefinitions","ctx","setName","actions","filteredTypeDefinitions","methodFullName","methodImportInfo","action","processMetadata","createdTypes","serviceMethods","dataServices","schemas","schema","enumTypes","ct","complexTypes","entityTypes","et","m","defs","functions","entityContainer","contexts","srcPart","dp","JSON","stringify","join","resolveName","debug","console","log","resolveType","url","withCredentials","maxDataServiceVersion","autoCreateContext","contextName","odata_metadata_1","metadata_1","odatajs","MetadataHandler","prepareRequest","oData","error","edmMetadata","Edm","Edmx","metadataParser","isAssignableTo","factory","_createFactoryFunc","load","Promise","resolve","reject","serviceUrl","metadataUrl","serivceUri","requestData","requestUri","headers","data","metadataHandler","_appendBasicAuth","user","password","request","ctxType","config","cfg","oDataServiceHost","Authorization","__encodeBase64","chr1","chr2","chr3","enc1","enc2","enc3","enc4","b64array","base64","./metadata","odata-metadata","metadataHandler_1","jaydata_error_handler_1","jaydata_promise_handler_1","metadataHandler_2","ServiceParams","DynamicMetadata","service","serviceUri","callback","getParam","pHandler","PromiseHandler","_callback","createCallback","then","storeAlias","serviceName","addStore","isDefault","success","getPromise","initService","onReady","Exception","use","dynamicMetadata","paramValue","./metadataHandler","jaydata-error-handler","jaydata-promise-handler","hasOwn","toStr","arr","isPlainObject","hasOwnConstructor","hasIsPrototypeOf","constructor","copy","copyIsArray","clone","target","deep","__extends","__","create","captureStackTrace","_getStackTrace","Guard","requireValue","requireType","typeOrTypes","exception","intellisense","isNullOrUndefined","promiseHandlerBase_1","promise","deferred","settings","PromiseHandlerBase","createCallbackSettings","CallbackSettings","notify","compatibilityMode","onReject","reason","onResolveOrReject","PromiseNotImplemented","./promiseHandlerBase","always","fail","isRejected","isResolved","pipe","progress","state","defaultSuccessCallback","defaultNotifyCallback","defaultErrorCallback","defaultSettings","wrapCode","fn","dup","__decorate","decorators","desc","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","k","metacode","PrimitiveType","className","Binary","Boolean","Byte","Date","DateTimeOffset","Decimal","Double","Duration","Guid","Int16","Int32","Int64","SByte","Single","Stream","TimeOfDay","Geography","GeographyPoint","GeographyLineString","GeographyPolygon","GeographyMultiPoint","GeographyMultiLineString","GeographyMultiPolygon","GeographyCollection","Geometry","GeometryPoint","GeometryLineString","GeometryPolygon","GeometryMultiPoint","GeometryMultiLineString","GeometryMultiPolygon","GeometryCollection","MemberAttribute","defaultValue","parseAs","AttributeFunctionChain","mapArray","sourceField","EdmItemBase","parent","loadFrom","getPrototypeOf","getMembers","membername","getAttributeValue","invoke","Property","NavigationProperty","ReferentialConstraint","PropertyRef","Key","EntityType","ComplexType","Parameter","ReturnType","Invokable","Action","rt","Function","Member","EnumType","EntitySet","ActionImport","FunctionImport","EntityContainer","Schema","DataServices","edm","./metacode","isFunction","isUndefined","attributeName","registerMember","md","getMetadata","defineMetadata","getDecoratorValue","presentedValue","descriptor","decoratorValue","enumerable","configurable","isApplied","memberName","getMetadataKeys","getAttributeNames","steps","_i","ParseAttribute","defaultValueAttribute","parseAttribute","decorator","typeArgument","reflect-metadata","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","fun","noop","process","nextTick","args","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","targetKey","targetDescriptor","IsUndefined","IsArray","IsConstructor","DecorateConstructor","IsObject","ToPropertyKey","DecoratePropertyWithoutDescriptor","DecoratePropertyWithDescriptor","metadataKey","metadataValue","OrdinaryDefineOwnMetadata","hasMetadata","OrdinaryHasMetadata","hasOwnMetadata","OrdinaryHasOwnMetadata","OrdinaryGetMetadata","getOwnMetadata","OrdinaryGetOwnMetadata","OrdinaryMetadataKeys","getOwnMetadataKeys","OrdinaryOwnMetadataKeys","deleteMetadata","metadataMap","GetOrCreateMetadataMap","targetMetadata","__Metadata__","decorated","propertyKey","_Map","keyMetadata","MetadataKey","O","P","GetPrototypeOf","MetadataValue","ownKeys","parentKeys","_Set","hasKey","add","_a","_","x","IsSymbol","functionPrototype","prototypeProto","CreateMapPolyfill","Map","_keys","_values","_cache","cacheSentinel","_find","delete","splice","clear","thisArg","CreateSetPolyfill","Set","_map","CreateWeakMapPolyfill","WeakMap","_key","CreateUniqueKey","FillRandomBytes","buffer","random","GenRandomBytes","nodeCrypto","randomBytes","Uint8Array","crypto","getRandomValues","msCrypto","CreateUUID","UUID_SIZE","byte","toLowerCase","GetOrCreateWeakMapTable","rootKey","isNode","table","_WeakMap","__global","WorkerGlobalScope","description","homepage","author","dependencies","atob","btoa","jaydata-dynamic-metadata","jaydata-odatajs","xmldom","contributors","repository","engines","license","devDependencies","babel","babel-eslint","babel-plugin-add-module-exports","babel-preset-es2015","babel-register","babelify","browserify","browserify-derequire","browserify-shim","chai","del","google-closure-compiler","gulp","gulp-babel","gulp-browserify","gulp-closure-compiler","gulp-concat","gulp-derequire","gulp-eslint","gulp-footer","gulp-header","gulp-nightwatch","gulp-nuget-pack","gulp-rename","gulp-replace","gulp-sourcemaps","gulp-uglify","gulp-vinyl-zip","gulp-webserver","istanbul","jaguarjs-jsdoc","jsdoc","minimist","nightwatch","npm","selenium-standalone","vinyl-buffer","vinyl-source-stream","yargs","jquery","angular","Handlebars","kendo","ko","q","Ext","scripts",17,"_interopRequireDefault","default","_index","_index2","_jaydataDynamicMetadata","../TypeSystem/index.js",18,"ContainerCtor","parentContainer","addPendingResolution","onResolved","pendingResolutions","addChildContainer","classNames","consolidatedClassNames","classTypes","mappedTo","IoC","inst","createInstance","mapType","aliasTypeOrName","realTypeOrName","_jaydataErrorHandler","aliasT","getType","realT","aliasPos","realPos","isPrimitiveType","_initializeJayData2","Integer","Float","Time","Day","SimpleBase","Geospatial","GeographyBase","GeometryBase","tPos","typeOrName","posT","doNotThrow","tp","getName","getTypes","ret","getTypeName","_typeof","fullName","toHexString","isTypeRegistered","unregisterType","getDefault","getIndex","resolveByIndex","registerType","nameOrNamesArray","factoryFunc","namesArray","parts","shortName","creatorFnc","annotate","typePos","pending","_converters","from","to","converters","convertTo","tType","eType","sourceTypeName","targetType","targetTypeName","registerConverter","sourceOrToConverters","toConverterOrFromConverters","fromConverter","targetName","sourceName","typeSystem","createOrGetNamespace","root","part","__namespace","ContainerInstance","_initializeJayData","./Extensions.js","./initializeJayData.js",19,"StringFunctions","startsWith","valueOf","endsWith","contains",20,"_TypeSystem","_TypeSystem2","Class","TraceBase","unshift","getDateFormat","warn","date","getHours","getMinutes","getSeconds","getMilliseconds","../TypeSystem.js",21,"Trace",22,"MemberDefinition","$C","_Extensions","_Container","_modelHolder","setModelContainer","modelHolder","defaults","openTypeDefaultPropertyName","openTypeDefaultType","openTypeDefaultValue","setGlobal","memberDefinitionData","definedClass","MemberTypes","writable","asFunction","dataType","originalType","originalElementType","MemberDefinitionCollection","ClassEngineBase","createPropertyDescriptor","classFunction","pd","storeProperty","retrieveProperty","createStorePropertyDescriptor","createGetMethod","tran","getProperty","createSetMethod","_value","setProperty","translateDefinition","memDef","addChildThunk","referencedType","childResolverThunks","resolveForwardDeclarations","memberDefinition","holder","resolverThunks","thunk","toJSON","memberDefinitionPrefix","clearCache","arrayCache","pubMapPropsCache","keyPropsCache","propByTypeCache","pubMapMethodsCache","pubMapPropNamesCache","asArray","getPublicMappedProperties","notMapped","getPublicMappedPropertyNames","getKeyProperties","getPublicMappedMethods","getPropertyByType","getMember","setMember","__enum","navProperty","complexProperty","baseClass","instanceDefinition","classDefinition","defineEx","baseClasses","Base","classNameParts","shortClassName","models","classFunctionBuilder","buildType","_classNameParts","_root","innerNS","baseCount","baseTypes","inheritedTypeProcessor","bodyBuilder","bases","mixin","propagation","propagateTo","memberDefinitions","$constructor","inheritsFrom","staticDefs","staticDefinitions","buildMember","openTypeDefinition","buildStaticMembers","classConstructor","openTypePropertyName","definedOpenTypeMember","getMemberDefinition","memberType","buildInstanceMembers","mixins","buildInstanceMixins","__class","addMethod","addProperty","propertyDescriptor","origGet","origSet","addField","buildMethod","classMember","buildProperty","__setPropertyfunctions","withoutGetSetMethod","pdGetMethod","pdSetMethod","memberCollectionName","memberListDefinition","copyMembers","il","msg","logMessage","mixinList","propagations","buildInstancePropagation","buildInstanceMixin","typeObj","memberDefs","itemName","ContainerClass","createContainer","backingFieldName","getterOrType","setterOrGetter","setter","_type","_getter","_setter","propDef","storeOnObject","addMember","isClassMember","describeField","from$data.Object","ConstructorParameter","paramIndex","createCallbackSetting","callBack","defaultSetting","setting","createCtorParams","indexes","thisObj","paramArray","writePropertyValues","writeProperties","prototypeProperty","defines","defineProperties","writeProperty","member","debugWith","cArgs","fdebug","./Container.js","_process",23,"_btoa","_btoa2","bufferOrArray","eval","Blob","createFromHexString","j","toBase64","toArray","toUpperCase","toDataURL","$data.String","blob","$data.Array","$data.Number","packIEEE754","reverse","$data.Boolean","req","XMLHttpRequest","open","URL","createObjectURL","send","response","ArrayBuffer",24,"POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_VALUE","$data.Date","parseFromString","matches","time","metrics","ms","parseFromDate","getFullYear","getMonth","getDate","day","ebits","fbits","ln","bits","bytes","bias","pow","abs","min","floor","LN2","round","substring","unpackIEEE754","NaN","IEEE754","toISOString","$data.ObjectID","$data.Function","proxyConverter","defaultConverter",25,"Edm_Boolean","Edm_Binary","Edm_DateTime","Edm_DateTimeOffset","Edm_Time","Edm_TimeOfDay","Edm_Date","Edm_Duration","Edm_Decimal","Edm_Float","Edm_Single","Edm_Double","Edm_Guid","Edm_Int16","Edm_Int32","Edm_Int64","Edm_Byte","Edm_SByte","Edm_String","Edm_GeographyPoint","Edm_GeographyLineString","Edm_GeographyPolygon","Edm_GeographyMultiPoint","Edm_GeographyMultiLineString","Edm_GeographyMultiPolygon","Edm_GeographyCollection","Edm_GeometryPoint","Edm_GeometryLineString","Edm_GeometryPolygon","Edm_GeometryMultiPoint","Edm_GeometryMultiLineString","Edm_GeometryMultiPolygon","Edm_GeometryCollection","oDataEdmMapping","$data.Byte","$data.SByte","$data.Decimal","$data.Float","$data.Int16","$data.Int64","$data.DateTimeOffset","$data.Time","$data.Day","$data.Duration","$data.Blob","$data.Integer","$data.Int32","$data.GeographyPoint","$data.GeographyLineString","$data.GeographyPolygon","$data.GeographyMultiPoint","$data.GeographyMultiLineString","$data.GeographyMultiPolygon","$data.GeographyCollection","$data.GeometryPoint","$data.GeometryLineString","$data.GeometryPolygon","$data.GeometryMultiPoint","$data.GeometryMultiLineString","$data.GeometryMultiPolygon","$data.GeometryCollection","$data.Guid",26,"crs","defaultCrs","validateGeoJSON","disableSRID","strData","lparenIdx","registered","stringifyToUrl","geoData","validMembers","_ret","getSRID","buildArray","coordinates","geoType","isValid","lon","lat","longitude","latitude","lng","values","point","tl","tr","bl","br","topLeft","bottomRight","topRight","bottomLeft","polygon","rings","polyPoints","pairs","polygons","geometries","geometry",27,"y",28,29,"parseGuid","NewGuid","createGuid","guid","CHARS","guidString","chars","uuid",30,31,"ObjectID","mongoDBDriver",32,"_Types","_Trace","_Logger","_SimpleBase","_Geospatial","_Geography","_Geometry","_Guid","_Blob","_EdmTypes","_Converter","./Trace/Logger.js","./Trace/Trace.js","./TypeSystem.js","./Types/Blob.js","./Types/Converter.js","./Types/EdmTypes.js","./Types/Geography.js","./Types/Geometry.js","./Types/Geospatial.js","./Types/Guid.js","./Types/SimpleBase.js","./Types/Types.js",33,"_interopRequireWildcard","newObj","_initializeJayDataClient","_initializeJayDataClient2","_acorn","_package","pkg","timeEnd","versionNumber","Acorn","../../package.json","./initializeJayDataClient.js",34,"_data_handler",35,"isAuthorized","access","sets","clbWrapper","pHandlerResult","getAccessBitmaskFromPermission","Access","None","Create","Read","Update","Delete","DeleteBatch","Execute",36,"ajax","clb","../../TypeSystem/index.js",37,"Ajax",38,"WinJS","xhr","dataTypes","json","accept","convert","html","xml","dataTypeContext","Accept","successClb","errorClb","progressClb","responseText",39,"jQuery",40,"Authentication","AuthenticationBase","configuration","Authenticated","Login","callbacks","Logout","CreateRequest",41,42,"Username","Password","origBeforeSend","beforeSend","setRequestHeader",43,"Url_code","type_code","scope","Url_token","type_token","access_token","app_id","provider","stateCallbacks","_processRequestToken","andChar","verification_data","abort",44,"Event","EventSubscriber","sender","detachHandler","list","subscriberList","attach","detach","fire","eventData","snder","snd","subscriber","ex","fireCancelAble","EventData","eventName","PropertyChangeEventData","propertyName","oldValue","newValue","PropertyValidationEventData","errors","cancel","initData","newInstanceOptions","thisType","__copyPropertiesToInstance","setDefaultValues","typeMemDefs","memDefNames","memberDef","Fixed","converter","entityBuilder","changedProperties","entityState","Id","Name","equals","entity","entityPk","propertyChanging","monitorChanges","_propertyChanging","propertyChanged","_propertyChanged","propertyValidationError","_propertyValidationError","origValue","Validation","ValidateEntityField","errorEventData","isValidated","EntityState","Unchanged","Modified","_setPropertyChanged","Transaction","loadItemProperty","that","storeToken","ValidationErrors","ValidateEntity","ValidationError","resetChanges","_changedProperties","remove","ItemStore","EntityInstanceRemove","save","EntityInstanceSave","refresh","EntityInstanceRefresh","getFieldUrl","_getContextPromise","EntityInheritedTypeProcessor","defaultValues","dv","addEventListener","delegateName","removeEventListener","raiseEvent","getFieldNames","_def","keyFields","keyProp","implementation",45,"defaultMode","AllChanged","memDefs","KeepChanges","Default",46,"defaultDatabaseName","enableRelatedEntityReadMethods","relatedEntityReadMethodPrefix","relatedEntityProxyPrefix","ComplexTypes","Enums","Associations","LogicalType","LogicalTypeName","PhysicalType","PhysicalTypeName","EventHandlers","TableName","TableOptions","ContextType","Roles","initParam","From","FromType","FromMultiplicity","FromPropertyName","To","ToType","ToMultiplicity","ToPropertyName","Association","storageProviderCfg","ContextRegister","queryCache","databaseName","lazyLoad","trackChanges","_entitySetReferences","_storageModel","_isOK","origSuccessInitProvider","_successInitProvider","errorOrContext","getStorageModel","providerList","_initStorageModelSync","_initializeEntitySets","StorageProviderLoader","providerType","storageProvider","setContext","stateManager","EntityStateManager","_storageModelCache","_applyRelatedEntityMethodsToTypes","_initializeStorageModel","_applyRelatedEntityMethodsToContext","checkPermission","_initializeStore","ready","beginTransaction","readParam","isWrite","tables","_beginTran","_isReturnTransaction","transaction","_applyTransaction","isReturnTransaction","getDataType","memDef_dataType","ctor","storageModel","ItemName","sm","tableName","tableOptions","eventHandlers","_initializeActions","initializeStore","_memDefArray","itemResolvedDataType","StorageModel","_convertLogicalTypeNameToPhysical","roles","indices","beforeCreate","beforeRead","beforeUpdate","beforeDelete","afterCreate","afterRead","afterUpdate","afterDelete","dbEntityInstanceDefinition","memDefResolvedDataType","supportedDataTypes","_build_EnumDefinition","_buildDbType_navigationPropertyComplite","_buildDbType_Collection_OneManyDefinition","_buildDbType_ElementType_OneManyDefinition","fields","referealResolvedType","_buildDbType_ElementType_OneOneDefinition","_buildDbType_addComplexTypePropertyDefinition","_buildDbType_modifyInstanceDefinition","dbEntityClassDefinition","_buildDbType_generateConvertToFunction","_buildDbType_modifyClassDefinition","esDef","actionKeys","actionName","actionDef","refStorageModel","refMemDefs","pubDefs","refMemDef","_addNavigationPropertyDefinition","complexType","_createComplexElement","refereedType","refereedStorageModel","associationType","association","_addAssociationElement","refereedMemberDefinition","associationName","fromType","fromMultiplicity","fromPropName","toType","toMultiplicity","toPropName","converterGroups","fieldConverter","createEnumConverter","converterGroup","onReadyFunction","getEntitySetFromElementType","executeQuery","queryable","query","Query","defaultType","returnTransaction","executeQuerySuccess","executeQueryError","getEntitySets","authorizedFn","readyFn","QueryCache","isInCache","rawDataList","callbackFn","nodeType","Expressions","ExpressionType","BatchDelete","isCacheable","addToCache","buildResultSet","QueryResultModifier","successResult","Find","Count","Some","Every","First","__count","totalCount","_buildContinuationFunction","batchExecuteQuery","queryableOptions","cbWrapper","methodOperationMappings","count","single","every","removeAll","methodFrameMappings","returnFunc","qOptions","queryOption","Queryable","entityContext","_checkOperation","executableQueries","frameExpressionName","FrameOperator","queryExpression","preparator","createQueryExpressionCreator","Visit","event","createQueryable","queryResults","supportedContextOperation","batchExecuteQueryExpression","createBatchExecuteQueryExpression","results","batchResult","hasError","errorValue","readIterator","queries","iteratorCallback","itTransaction","lastTran","saveChanges","reset","changedEntities","trackedEntities","skipItems","additionalEntities","entityCachedItem","sModel","skipSave","changeStoredProperty","pMemDef","multiplicity","processEntityTypeBeforeEventHandler","smPhyMemDefs","ism","navProp","navPropertyName","connectedDataList","dependentOn","discoverDependentItemEntityState","entitySet","temp","additionalDependentOn","Added","memDefType","isDependentProperty","it","createAll","modifyAll","Deleted","deleteAll","cancelEvent","innerCallback","_postProcessSavedItems","ies","getOwnPropertyNames","cmd","cmdAll","ed","all","im","ix","onbeforeCreate","onbeforeUpdate","onbeforeDelete","processEntityTypeAfterEventHandler","onafterCreate","onafterUpdate","onafterDelete","bulkInsert","datas","currentEntitySet","entitySetName","actualEntitySet","ChangeCollector","Notifications","ChangeCollectorBase","processChangedData","oes","physicalData","forEachEntitySet","isSingleSide","associations","assoc","filterFunc","filterParams","memDefKey","getTraceString","logInfo","resolveBinaryOperator","frameType","resolveUnaryOperator","resolveFieldOperation","operation","resolveSetOperations","resolveTypeOperations","resolveContextOperations","_generateServiceOperationQueryable","functionName","returnEntitySet","tempOperation","generateServiceOperation","mode","EntityWrapper","getEntity","attachOrGet","addMany","entities","collection","keyDef","esName","newMemberName","_relatedEntityGetMethod","memberElementType","_createRelatedEntityProxyClass","proxyClassName","RelatedEntityProxy","navigation","keyValue","proxyClass","keyV","serviceMethod","lastParam","boundItem","virtualEntitySet","paramConstExpression","createConstantExpression","ec","createEntityContextExpression","memberdef","createServiceOperationExpression","createMemberInfoExpression","isTerminated","_runQuery","__storageModelCache",47,"EntitySchemaConfig","entitySetState","created","defined","active","collectionName","createNew","addNew","_item","on_ready","_trackEntity","current","EntityAttachMode","attachMode","existsItem","trackedEnt","idx","Detached","getter","_expression","createEntitySetExpression",48,49,50,51,"createEnum","enumType","enumDefinition","__enumType","getEnumDef","enumMember","isValueCalculation","hasIndex","enumDef","enumValA","enumName","enumValO","sort","enumOptions","enumVal","enumClass",52,"ExpressionNode","items","ArrayLiteral",53,"Call",54,"scopeContext","lambdaParams","resolver","errorMessage","errorDetails","ParserBuild","Esprima","AST","ASTParser","parseCode","Build2","tree","createExpression","ParserExpressionStatement","ParserBlockStatement","ParserReturnStatement","ParserMemberExpression","PropertyExpression","ConstantExpression","ParserIdentifier","ParserParameter","LambdaParameterReference","ParameterReference","ParserObjectExpression","ParserProperty","ObjectLiteralExpression","ParserArrayExpression","ArrayLiteralExpression","ObjectFieldExpression","ParserArrowFunctionExpression","ParserFunctionExpression","parameterResolutionCompatibility","LambdaParameter","owningFunction","FunctionExpression","ParameterExpression","ParserLogicalExpression","ParserBinaryExpression","ParserOperators","==","expressionType","Equal","===","EqualTyped","!=","NotEqual","!==","NotEqualTyped",">","GreaterThen",">=","GreaterThenOrEqual","<=","LessThenOrEqual","<","LessThen","&&","And","||","Or","&","AndBitwise","|","OrBitwise","+","Add","-","Subtract","/","Divide","%","Modulo","*","Multiply","[","ArrayIndex","in","In","ParserUnaryOperators","arity","Positive","operand","Negative","++true","Increment","--true","Decrement","++false","!","Not","--false","ParserUnaryExpression","UnaryExpression","ParserUpdateExpression","SimpleBinaryExpression","ParserThisExpression","ThisExpression","ParserLiteral","ParserCallExpression","CallExpression",55,"Constant",56,"EntityExpressionVisitor","compile","findContext","skipExists","skip","skipSize","take","pageSize","append","VisitPagingExpression","Take","amount","Skip","constExp","createPagingExpression",57,"associationInfo","AssociationInfo","../../../TypeSystem/index.js",58,"Code",59,"ExpressionVisitor","VisitBinary","refExpression","constExpr","memInfo","selector","MemberInfoExpression","fieldType","constExprType","resultExp","operatorResolution","createSimpleBinaryExpression","VisitUnary","createUnaryExpression","VisitParameter","createEntityExpression","lambdaParameters","lambda","VisitThis","createQueryParameterExpression","queryParameters","VisitFunction","VisitCall","exp","EntitySetExpression","FrameOperationExpression","getJSON","setExpr","res","frameTypeFactory","QueryParameterExpression","argValues","EntityFieldExpression","EntityFieldOperationExpression","createEntityFieldOperationExpression","_resolveFunctionArguments","createFrameOperationExpression","EntityExpression","createEntityFunctionOperationExpression","EntityContextExpression","createContextFunctionOperationExpression","VisitProperty","memberDefinitionExp","storageField","createEntityFieldExpression","assocInfo","setExpression","createAssociationInfoExpression","ee","createComplexTypeExpression","ComplexTypeExpression","memDefExp",60,"dt","Com",61,62,"ServiceOperationExpression","memdef",63,"lambdaTypes","canVisit","visitorName","VisitToArrayExpression","createToArrayExpression","VisitForEachExpression","createForEachExpression","VisitMemberInfoExpression","VisitSingleExpression","createSingleExpression","VisitFirstExpression","createFirstExpression","VisitSomeExpression","createSomeExpression","VisitFindExpression","createFindExpression","VisitEveryExpression","createEveryExpression","VisitCountExpression","createCountExpression","VisitBatchDeleteExpression","createBatchDeleteExpression","VisitBatchExecuteQueryExpression","newQueries","equal","VisitObjectLiteralExpression","newValues","ofe","createObjectLiteralExpression","VisitObjectFieldExpression","newExpression","createObjectFieldExpression","VisitIncludeExpression","createIncludeExpression","VisitUnaryExpression","resolution","VisitSimpleBinaryExpression","VisitEntityContextExpression","VisitCodeExpression","VisitComplexTypeExpression","VisitEntityExpression","VisitEntityFieldExpression","VisitEntityFieldOperationExpression","VisitParametricQueryExpression","createParametricQueryExpression","VisitEntitySetExpression","VisitInlineCountExpression","createInlineCountExpression","VisitFilterExpression","createFilterExpression","VisitProjectionExpression","createProjectionExpression","projectionAs","VisitOrderExpression","createOrderExpression",64,"EntityField",65,"EntityFieldOperation",66,"CodeExpression","ParametricQueryExpression","storage_type","AssociationInfoExpression",67,"monitorDefinition","methodName","VisitExpressionNode","expressionTypeName","MonitorExpressionNode","MutateExpressionNode",68,"resultType","Filter","InlineCount","BatchExecuteQuery","subMember","ForEach","ToArray",69,"FrameOperation","EntityFunctionOperation","ContextFunctionOperation",70,"Include",71,"MemberInfo",72,"nType","OrderBy",73,"ParametricQuery",74,"Projection",75,"VisitServiceOperationExpression","jsCodeTree","createCodeParser","constantResolver","createConstantValueResolver","parameterProcessor","createParameterResolverVisitor","code2entity","createCodeToEntityConverter","entityExpression",76,"QueryParameter",77,78,"ServiceOperation",79,"_isLambdaParam","_isParam","paramContext","_isParamRoot","paramsName","Build","expNode","BuildMethodCall","BuildMember","BuildEquality","BuildBinary","BuildArrayAccess","BuildUnary","BuildIncDec","BuildNewExpression","BuildLiteral","BuildDecision","BuildVariable","BuildBoolLiteral","ExpressionNodeTypes","NewExpressionNode","LiteralExpressionNode","MEMBERACCESS","subType","operationName","missingParameterName","VariableExpressionNode","jsonAssign","JsonAssignExpressionNode","JSONASSIGN","MemberAccessExpressionNode","second","UnaryExpressionNode","IncDecExpressionNode","BinaryExpressionNode","EqualityExpressionNode","DecisionExpressionNode","third","MethodcallExpressionNode","argNodes","ArrayAccessExpressionNode",80,"jsonify","Variable","MemberAccess","New","This","ObjectLiteral","ObjectField","Unknown","EntityMember","EntityBinary","ComplexEntityField","OrderByDescending","IndexedPhysicalAnd","IndexedLogicalAnd","IndexedLogicalOr","IndexedLogicalIn","BinaryOperator","binaryOperators","getOperator","unaryOperators","timeIt","iterations","OperatorTypes","UNARY","INCDEC","DECISION","METHODCALL","NEW","ARRAYACCESS","UNKNOWN","executable","_expressionType",81,"paramStrings","bodyString",82,83,"namesAndValues",84,85,86,87,88,89,"ExpTreeVisitor","VisitVariable","eNode","VisitMember","chain","GetMemberChain","operandValue","valueType","VisitIncDec","suffix","leftValue","rightValue","VisitEquality","VisitDecision","VisitMethodCall","VisitArray","VisitArrayAccess","arrayNode","indexNode",90,"_deep","LITERAL","VisitLiteral","VARIABLE","BINARY","EQUALITY","VisitNew","VisitJsonAssign","eNodes","ok","memberAccess",91,"VisitConstant","VisitObjectLiteral","VisitObjectField","VisitArrayLiteral","VisitEntityContext","createArrayLiteralExpression",92,"ParameterProcessor","canResolve","paramExpression","resultValue","paramsObject","globalResolver","createGlobalContextProcessor","paramResolver",93,"lambdaParameterTypeInfos","paramIndices","fnParams","lambdaParamType","createParameterExpression",94,"GlobalContextProcessor","evalMethod",95,"binder","mem","memberResolver","createPropertyExpression",96,97,"lambdaParamCache","paramCache","allLocal","paramNode","lambdaParam","isExecutable","convertToValue","visitors",98,"firstMember","isLambdaParam","isLocalParam",99,"_ExpressionNode","_ArrayLiteralExpression","_CallExpression","_CodeParser","_ConstantExpression","_FunctionExpression","_ObjectFieldExpression","_ObjectLiteralExpression","_PagingExpression","_ParameterExpression","_PropertyExpression","_SimpleBinaryExpression","_ThisExpression","_ExpressionVisitor","_ParameterProcessor","_GlobalContextProcessor","_LocalContextProcessor","_LambdaParameterProcessor","_ParameterResolverVisitor","_LogicalSchemaBinderVisitor","_ExpTreeVisitor","_SetExecutableVisitor","_ExecutorVisitor","_ExpressionBuilder","_AssociationInfoExpression","_CodeExpression","_CodeToEntityConverter","_ComplexTypeExpression","_EntityContextExpression","_EntityExpression","_EntityExpressionVisitor","_ExpressionMonitor","_EntityFieldExpression","_EntityFieldOperationExpression","_EntitySetExpression","_FrameOperationExpression","_FilterExpression","_IncludeExpression","_MemberInfoExpression","_OrderExpression","_ParametricQueryExpression","_ProjectionExpression","_QueryExpressionCreator","_QueryParameterExpression","_RepresentationExpression","_ServiceOperationExpression","_ContinuationExpressionBuilder","./ArrayLiteralExpression.js","./CallExpression.js","./CodeParser.js","./ConstantExpression.js","./ContinuationExpressionBuilder.js","./EntityExpressions/AssociationInfoExpression.js","./EntityExpressions/CodeExpression.js","./EntityExpressions/CodeToEntityConverter.js","./EntityExpressions/ComplexTypeExpression.js","./EntityExpressions/EntityContextExpression.js","./EntityExpressions/EntityExpression.js","./EntityExpressions/EntityExpressionVisitor.js","./EntityExpressions/EntityFieldExpression.js","./EntityExpressions/EntityFieldOperationExpression.js","./EntityExpressions/EntitySetExpression.js","./EntityExpressions/ExpressionMonitor.js","./EntityExpressions/FilterExpression.js","./EntityExpressions/FrameOperationExpression.js","./EntityExpressions/IncludeExpression.js","./EntityExpressions/MemberInfoExpression.js","./EntityExpressions/OrderExpression.js","./EntityExpressions/ParametricQueryExpression.js","./EntityExpressions/ProjectionExpression.js","./EntityExpressions/QueryExpressionCreator.js","./EntityExpressions/QueryParameterExpression.js","./EntityExpressions/RepresentationExpression.js","./EntityExpressions/ServiceOperationExpression.js","./ExpressionBuilder.js","./ExpressionNode2.js","./FunctionExpression.js","./ObjectFieldExpression.js","./ObjectLiteralExpression.js","./PagingExpression.js","./ParameterExpression.js","./PropertyExpression.js","./SimpleBinaryExpression.js","./ThisExpression.js","./Visitors/ExecutorVisitor.js","./Visitors/ExpTreeVisitor.js","./Visitors/ExpressionVisitor.js","./Visitors/GlobalContextProcessor.js","./Visitors/LambdaParameterProcessor.js","./Visitors/LocalContextProcessor.js","./Visitors/LogicalSchemaBinderVisitor.js","./Visitors/ParameterProcessor.js","./Visitors/ParameterResolverVisitor.js","./Visitors/SetExecutableVisitor.js",100,"itemStoreConfig","aliases","contextTypes","resetStoreToDefault","addItemStoreAlias","storeConfigs","stores","_setTypeStoreConfig","contextFactoryOrToken","contextPromise","preContext","_getDefaultItemStoreFactory","_setStoreAlias","_getStoreAlias","alias","_getStoreContext","aliasOrToken","nullIfInvalid","_getStoreEntitySet","instanceOrType","initStoreConfig","storeConfig","contextDef","inMemoryType","_storeToken","contextOrAlias","_resolveFromContext","hint","_getSaveMode","keepStore","_getKeyObjectFromEntity","read","loadedEntity","readAll","EntityTypeReadAll","EntityTypeRead","EntityTypeRemoveAll","EntityTypeRemove","EntityTypeGet","EntityTypeSave","EntityTypeAddMany","itemCount","EntityTypeItemCount","EntityTypeQuery","takeFirst","EntityTypeTakeFirst","setStore","EntityTypeSetStore","singleParam","_findByIdQueryable","predicate","thisArgs","initDatas","defStoreConfig","dataSource","ds","parsedApiUrl","apiUrl","keysProps","keyDefs","modelBinderConfig","$type","$item","navProps","ItemStoreClass","def","definedBy","MemberWrapper","setKey","setComputed","setRequired","setNullable","changeDefinition","attr",101,"providerName","references","providerConfiguration","modelBinderOptimization","RegisteredStorageProviders","_deepExtend","_finalize","_buildSelector","$selector","path","iter","_buildKey","typeIndex","$source","build","$value","fromDb","$keys","keycacheName","itemForKey","resolvedType","isEntityType","isPrimitive","openTypeProperty","entityTypeIndex",102,"buildData","element","resObj","enumerableMemDefCollection",103,"entityContextData","entityData","Distrbutor","distributeData","ChangeDistributorBase",104,"broadcastUrl","succes",105,"collectorData",106,"ModelBinder",107,"_fragments","selectedFragment","_binderConfig","_binderConfigPropertyStack","selectTextPart","getTextPart","addText","textParticle","addParameter","selectModelBinderProperty","popModelBinderProperty","resetModelBinderProperty","addKeyField",108,"requiresExpressions","resultHandler",109,"rootExpression","createCodeExpression","expressionSource","FilterExpression","where","projection","codeExpression","select","onResult","countExpression","iteratorFunc","forEachExpression","onResult_items","toArrayExpression","toLiveArray","doAction","successFunc","prev","filterPredicate","singleExpression","someExpression","everyExpression","takeExp","order","orderString","orderByDescending","orderBy","firstExpression","find","supportedSetOperations","findExpression","include","include2","includeExp","withInlineCount","inlineCountExp","withCount","batchDeleteExpression","toTraceString","invokable",110,"entityKeyObject","navigationProperty","_entityKeyObject","_navigationProperty","_context","_ctxFactory","proxyChains","_chainToArray","firstProxy",111,"propertyDef","argObj","paramConfig",112,"storageProviders","DbCreationType","Merge","DropTableIfChanged","DropTableIfChange","DropAllExistingTables","ErrorIfChange","DropDbIfChange","schemaConfiguration","providers","loadRawData","buildIndependentBlocks","changedItems","edgesTo","edgesFrom","currentDependency","ixDependendOn","referredBy","independentBlocks","currentBlock","cbix","dependentNodes","_buildPagingMethod","continuation","ContinuationExpressionBuilder","continuationResult","buildDbType_modifyInstanceDefinition","buildDbType_copyPropertyDefinition","propertyDefinition","refProp","cPropertyDef","buildDbType_createConstrain","foreignType","keyPropertyName","constrain","addToEntityDef","foreignPropName","keyProperties","constraint","dependentMemDef","navigationPropertyName","buildDbType_generateConvertToFunction","logicalEntity","dbInstance","complexInstance","cmpType","supportedFieldOperations","allowedIn","allowedType","supportedBinaryOperators","mapTo","supportedUnaryOperators","not","makePhysicalTypeDefinition","entityDefinition","supportedAutoincrementKeys","onRegisterProvider","registerProvider","getProvider","isSupported",113,"supported","indexedDB","webkitIndexedDB","mozIndexedDB","msIndexedDB","location","href","localStorage","scriptLoadTimeout","scriptLoadInterval","npmModules","indexedDb","InMemory","LocalStore","mongoDB","webApi","sqLite","webSql","storm","ProviderNames","cacheKey","_fallbackCache","selectedProvider","currentProvider","getVirtual","loadProvider","loadNpmModule","mappedName","getUrl","loader","loadScript","document","createElement","loadScriptElement","successful","jaydataScriptMin","querySelector","jaydataScript","getHttpRequest","ActiveXObject","oXmlHttp","onreadystatechange","readyState","status","watcher","iteration","loadInterval","head","getElementsByTagName","documentElement","script","appendChild","ceil","virtualProviders","fallbacks","StorageProviderLoaderBase",114,"includes","_includes","projectionExpression","selectorContext","hasIncludeProjectionExpression","includePath","includeProjectionExpression","VisitFrameOperationExpression","opDef","ProjectionExpression","paramCounter","visitor","modelBinder","FindProjectionVisitor","_inculdes","visitorContext","VisitAssociationInfoExpression","oDataProvider","_query","_isoDataProvider","depth","_defaultModelBinder","builder","createqueryBuilder","VisitExpression","VisitConstantExpression","projVisitor","createFindProjectionVisitor","projContext","DefaultSelection","_addPropertyToModelBinderConfig","arrayElementType","_addComplexTypeProperties","allIncludes","custom","excludeDeepInclude","incName","tmpStorageModel","hasProjection","VisitEntityAsProjection","mapping","currentInclude","inc","tmpIncludes","tmpDepth","of",115,"_objectId","getTime","oncomplete","onerror",116,"validators","definedValue","customValidator","minValue","minLength","_getGroupValidations","validations","validator","EntityValidationBase","valueNotSet","fieldValidate","getValidationValue","validationName","convertableValidation","typeToConvert","getValidationMessage","defaultMessage","eMessage","createValidationError","supportedValidations","Defaults","$data.Object","validationTypeName","validatonGroup","validation","EntityValidation",117,"Message","PropertyDefinition","Type",118,"_index3","_EntityValidationBase","_EntityValidation","_ChangeDistributorBase","_ChangeCollectorBase","_ChangeDistributor","_ChangeCollector","_Transaction","_Access","_Entity","_Enum","_RelatedEntityProxy","_EntityContext","_QueryProvider","_ModelBinder","_QueryBuilder","_Query","_Queryable","_EntitySet","_EntityState","_EntityAttachModes","_EntityStateManager","_ItemStore","_StorageProviderLoader","_StorageProviderBase","_ServiceOperation","_EntityWrapper","_jQueryAjaxWrapper","_WinJSAjaxWrapper","_ExtJSAjaxWrapper","_AjaxStub","_modelBinderConfigCompiler","_AuthenticationBase","_Anonymous","_FacebookAuth","_BasicAuth","_jaydataPromiseHandler","./Access.js","./Ajax/AjaxStub.js","./Ajax/ExtJSAjaxWrapper.js","./Ajax/WinJSAjaxWrapper.js","./Ajax/jQueryAjaxWrapper.js","./Authentication/Anonymous.js","./Authentication/AuthenticationBase.js","./Authentication/BasicAuth.js","./Authentication/FacebookAuth.js","./Entity.js","./EntityAttachModes.js","./EntityContext.js","./EntitySet.js","./EntityState.js","./EntityStateManager.js","./EntityWrapper.js","./Enum.js","./Expressions/index.js","./ItemStore.js","./ModelBinder.js","./Notifications/ChangeCollector.js","./Notifications/ChangeCollectorBase.js","./Notifications/ChangeDistributor.js","./Notifications/ChangeDistributorBase.js","./Query.js","./QueryBuilder.js","./QueryProvider.js","./Queryable.js","./RelatedEntityProxy.js","./ServiceOperation.js","./StorageProviderBase.js","./StorageProviderLoader.js","./StorageProviders/modelBinderConfigCompiler.js","./Transaction.js","./Validation/EntityValidation.js","./Validation/EntityValidationBase.js","jaydata/core","_index5","_index7","./JaySvcUtil/index.js","./TypeSystem/index.js","./Types/Expressions/index.js","./Types/index.js","interopRequire"],"mappings":"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GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,KAAA,IAAA,IAAA,IAAA,KAAA,KAAA,MAAA,IAAA,EAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,EAAA,GAAA,GAAA,EAAA,GAAA,IAAA,GAAA,GAAA,EAAA,GAAA,GAAA,MAAA,EAAA,KAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,KAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,KAAA,IAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,KAAA,MAAA,GAAA,KAAA,GAAA,IAAA,MAAA,KACAG,GAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA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","file":"jaydata.min.js","sourcesContent":["﻿// JayData 1.5.1 CTP\r\n// Dual licensed under MIT and GPL v2\r\n// Copyright JayStack Technologies (http://jaydata.org/licensing)\r\n//\r\n// JayData is a standards-based, cross-platform Javascript library and a set of\r\n// practices to access and manipulate data from various online and offline sources.\r\n//\r\n// Credits:\r\n//     Hajnalka Battancs, Dániel József, János Roden, László Horváth, Péter Nochta\r\n//     Péter Zentai, Róbert Bónay, Szabolcs Czinege, Viktor Borza, Viktor Lázár,\r\n//     Zoltán Gyebrovszki, Gábor Dolla\r\n//\r\n// More info: http://jaydata.org\r\n(function(){\r\n\r\nvar \r\nrequire=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.acorn = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof _dereq_==\"function\"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_==\"function\"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar pp = _state.Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp.checkPropClash = function (prop, propHash) {\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;\n  var key = prop.key;var name = undefined;\n  switch (key.type) {\n    case \"Identifier\":\n      name = key.name;break;\n    case \"Literal\":\n      name = String(key.value);break;\n    default:\n      return;\n  }\n  var kind = prop.kind;\n\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n      propHash.proto = true;\n    }\n    return;\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var isGetSet = kind !== \"init\";\n    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init)) this.raise(key.start, \"Redefinition of property\");\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp.parseExpression = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === _tokentype.types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(_tokentype.types.comma)) node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.type == _tokentype.types._yield && this.inGenerator) return this.parseYield();\n\n  var validateDestructuring = false;\n  if (!refDestructuringErrors) {\n    refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n    validateDestructuring = true;\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  if (this.type == _tokentype.types.parenL || this.type == _tokentype.types.name) this.potentialArrowAt = this.start;\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.type.isAssign) {\n    if (validateDestructuring) this.checkPatternErrors(refDestructuringErrors, true);\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === _tokentype.types.eq ? this.toAssignable(left) : left;\n    refDestructuringErrors.shorthandAssign = 0; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else {\n    if (validateDestructuring) this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp.parseMaybeConditional = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  if (this.eat(_tokentype.types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(_tokentype.types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp.parseExprOps = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.left = left;\n      node.operator = this.value;\n      var op = this.type;\n      this.next();\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n      this.finishNode(node, op === _tokentype.types.logicalOR || op === _tokentype.types.logicalAND ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp.parseMaybeUnary = function (refDestructuringErrors) {\n  if (this.type.prefix) {\n    var node = this.startNode(),\n        update = this.type === _tokentype.types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary();\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raise(node.start, \"Deleting local variable in strict mode\");\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprSubscripts(refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  while (this.type.postfix && !this.canInsertSemicolon()) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.prefix = false;\n    node.argument = expr;\n    this.checkLVal(expr);\n    this.next();\n    expr = this.finishNode(node, \"UpdateExpression\");\n  }\n  return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp.parseExprSubscripts = function (refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  for (;;) {\n    if (this.eat(_tokentype.types.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseIdent(true);\n      node.computed = false;\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(_tokentype.types.bracketL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(_tokentype.types.bracketR);\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(_tokentype.types.parenL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseExprList(_tokentype.types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (this.type === _tokentype.types.backQuote) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate();\n      base = this.finishNode(node, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp.parseExprAtom = function (refDestructuringErrors) {\n  var node = undefined,\n      canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n    case _tokentype.types._super:\n      if (!this.inFunction) this.raise(this.start, \"'super' outside of function or class\");\n    case _tokentype.types._this:\n      var type = this.type === _tokentype.types._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type);\n\n    case _tokentype.types._yield:\n      if (this.inGenerator) this.unexpected();\n\n    case _tokentype.types.name:\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var id = this.parseIdent(this.type !== _tokentype.types.name);\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id]);\n      return id;\n\n    case _tokentype.types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = { pattern: value.pattern, flags: value.flags };\n      return node;\n\n    case _tokentype.types.num:case _tokentype.types.string:\n      return this.parseLiteral(this.value);\n\n    case _tokentype.types._null:case _tokentype.types._true:case _tokentype.types._false:\n      node = this.startNode();\n      node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case _tokentype.types.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow);\n\n    case _tokentype.types.bracketL:\n      node = this.startNode();\n      this.next();\n      // check whether this is array comprehension or regular array\n      if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {\n        return this.parseComprehension(node, false);\n      }\n      node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(false, refDestructuringErrors);\n\n    case _tokentype.types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case _tokentype.types._class:\n      return this.parseClass(this.startNode(), false);\n\n    case _tokentype.types._new:\n      return this.parseNew();\n\n    case _tokentype.types.backQuote:\n      return this.parseTemplate();\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseLiteral = function (value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\");\n};\n\npp.parseParenExpression = function () {\n  this.expect(_tokentype.types.parenL);\n  var val = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  return val;\n};\n\npp.parseParenAndDistinguishExpression = function (canBeArrow) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      val = undefined;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {\n      return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);\n    }\n\n    var innerStartPos = this.start,\n        innerStartLoc = this.startLoc;\n    var exprList = [],\n        first = true;\n    var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 },\n        spreadStart = undefined,\n        innerParenStart = undefined;\n    while (this.type !== _tokentype.types.parenR) {\n      first ? first = false : this.expect(_tokentype.types.comma);\n      if (this.type === _tokentype.types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRest()));\n        break;\n      } else {\n        if (this.type === _tokentype.types.parenL && !innerParenStart) {\n          innerParenStart = this.start;\n        }\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start,\n        innerEndLoc = this.startLoc;\n    this.expect(_tokentype.types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, true);\n      if (innerParenStart) this.unexpected(innerParenStart);\n      return this.parseParenArrowList(startPos, startLoc, exprList);\n    }\n\n    if (!exprList.length) this.unexpected(this.lastTokStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\");\n  } else {\n    return val;\n  }\n};\n\npp.parseParenItem = function (item) {\n  return item;\n};\n\npp.parseParenArrowList = function (startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\") this.raise(node.property.start, \"The only valid meta property for new is new.target\");\n    if (!this.inFunction) this.raise(node.start, \"new.target can only be used in functions\");\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(_tokentype.types.parenL)) node.arguments = this.parseExprList(_tokentype.types.parenR, false);else node.arguments = empty;\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp.parseTemplateElement = function () {\n  var elem = this.startNode();\n  elem.value = {\n    raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.value\n  };\n  this.next();\n  elem.tail = this.type === _tokentype.types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp.parseTemplate = function () {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(_tokentype.types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(_tokentype.types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement());\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp.parseObj = function (isPattern, refDestructuringErrors) {\n  var node = this.startNode(),\n      first = true,\n      propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var prop = this.startNode(),\n        isGenerator = undefined,\n        startPos = undefined,\n        startLoc = undefined;\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern) isGenerator = this.eat(_tokentype.types.star);\n    }\n    this.parsePropertyName(prop);\n    this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors);\n    this.checkPropClash(prop, propHash);\n    node.properties.push(this.finishNode(prop, \"Property\"));\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp.parsePropertyValue = function (prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n  if (this.eat(_tokentype.types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator);\n  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.type != _tokentype.types.comma && this.type != _tokentype.types.braceR)) {\n    if (isGenerator || isPattern) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\") this.raise(start, \"getter should have no params\");else this.raise(start, \"setter should have exactly one param\");\n    }\n    if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") this.raise(prop.value.params[0].start, \"Setter cannot use rest params\");\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    prop.kind = \"init\";\n    if (isPattern) {\n      if (this.keywords.test(prop.key.name) || (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name)) this.raise(prop.key.start, \"Binding \" + prop.key.name);\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {\n      if (!refDestructuringErrors.shorthandAssign) refDestructuringErrors.shorthandAssign = this.start;\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else this.unexpected();\n};\n\npp.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(_tokentype.types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(_tokentype.types.bracketR);\n      return prop.key;\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);\n};\n\n// Initialize empty function node.\n\npp.initFunction = function (node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n};\n\n// Parse object or class method.\n\npp.parseMethod = function (isGenerator) {\n  var node = this.startNode();\n  this.initFunction(node);\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false);\n  if (this.options.ecmaVersion >= 6) node.generator = isGenerator;\n  this.parseFunctionBody(node, false);\n  return this.finishNode(node, \"FunctionExpression\");\n};\n\n// Parse arrow function expression with given parameters.\n\npp.parseArrowExpression = function (node, params) {\n  this.initFunction(node);\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\n// Parse function body and check parameters.\n\npp.parseFunctionBody = function (node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.inFunction,\n        oldInGen = this.inGenerator,\n        oldLabels = this.labels;\n    this.inFunction = true;this.inGenerator = node.generator;this.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.inFunction = oldInFunc;this.inGenerator = oldInGen;this.labels = oldLabels;\n  }\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {\n    var oldStrict = this.strict;\n    this.strict = true;\n    if (node.id) this.checkLVal(node.id, true);\n    this.checkParams(node);\n    this.strict = oldStrict;\n  } else if (isArrowFunction) {\n    this.checkParams(node);\n  }\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp.checkParams = function (node) {\n  var nameHash = {};\n  for (var i = 0; i < node.params.length; i++) {\n    this.checkLVal(node.params[i], true, nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.type === close && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n        refDestructuringErrors.trailingComma = this.lastTokStart;\n      }\n      if (allowTrailingComma && this.afterTrailingComma(close)) break;\n    } else first = false;\n\n    var elt = undefined;\n    if (allowEmpty && this.type === _tokentype.types.comma) elt = null;else if (this.type === _tokentype.types.ellipsis) elt = this.parseSpread(refDestructuringErrors);else elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    elts.push(elt);\n  }\n  return elts;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp.parseIdent = function (liberal) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") liberal = false;\n  if (this.type === _tokentype.types.name) {\n    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1)) this.raise(this.start, \"The keyword '\" + this.value + \"' is reserved\");\n    node.name = this.value;\n  } else if (liberal && this.type.keyword) {\n    node.name = this.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\n// Parses yield expression inside generator.\n\npp.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.type == _tokentype.types.semi || this.canInsertSemicolon() || this.type != _tokentype.types.star && !this.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(_tokentype.types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n// Parses array and generator comprehensions.\n\npp.parseComprehension = function (node, isGenerator) {\n  node.blocks = [];\n  while (this.type === _tokentype.types._for) {\n    var block = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    block.left = this.parseBindingAtom();\n    this.checkLVal(block.left, true);\n    this.expectContextual(\"of\");\n    block.right = this.parseExpression();\n    this.expect(_tokentype.types.parenR);\n    node.blocks.push(this.finishNode(block, \"ComprehensionBlock\"));\n  }\n  node.filter = this.eat(_tokentype.types._if) ? this.parseParenExpression() : null;\n  node.body = this.parseExpression();\n  this.expect(isGenerator ? _tokentype.types.parenR : _tokentype.types.bracketR);\n  node.generator = isGenerator;\n  return this.finishNode(node, \"ComprehensionExpression\");\n};\n\n},{\"./state\":10,\"./tokentype\":14}],2:[function(_dereq_,module,exports){\n// This is a trick taken from Esprima. It turns out that, on\n// non-Chrome browsers, to check whether a string is in a set, a\n// predicate containing a big ugly `switch` statement is faster than\n// a regular expression, and on Chrome the two are about on par.\n// This function uses `eval` (non-lexical) to produce such a\n// predicate from a space-separated string of words.\n//\n// It starts by sorting the words by length.\n\n// Reserved word lists for various dialects of the language\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isIdentifierStart = isIdentifierStart;\nexports.isIdentifierChar = isIdentifierChar;\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\nexports.reservedWords = reservedWords;\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" let const class extends export import yield super\"\n};\n\nexports.keywords = keywords;\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\nvar nonASCIIidentifierChars = \"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by tools/generate-identifier-regex.js\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.parse = parse;\nexports.parseExpressionAt = parseExpressionAt;\nexports.tokenizer = tokenizer;\n\nvar _state = _dereq_(\"./state\");\n\n_dereq_(\"./parseutil\");\n\n_dereq_(\"./statement\");\n\n_dereq_(\"./lval\");\n\n_dereq_(\"./expression\");\n\n_dereq_(\"./location\");\n\nexports.Parser = _state.Parser;\nexports.plugins = _state.plugins;\n\nvar _options = _dereq_(\"./options\");\n\nexports.defaultOptions = _options.defaultOptions;\n\nvar _locutil = _dereq_(\"./locutil\");\n\nexports.Position = _locutil.Position;\nexports.SourceLocation = _locutil.SourceLocation;\nexports.getLineInfo = _locutil.getLineInfo;\n\nvar _node = _dereq_(\"./node\");\n\nexports.Node = _node.Node;\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nexports.TokenType = _tokentype.TokenType;\nexports.tokTypes = _tokentype.types;\n\nvar _tokencontext = _dereq_(\"./tokencontext\");\n\nexports.TokContext = _tokencontext.TokContext;\nexports.tokContexts = _tokencontext.types;\n\nvar _identifier = _dereq_(\"./identifier\");\n\nexports.isIdentifierChar = _identifier.isIdentifierChar;\nexports.isIdentifierStart = _identifier.isIdentifierStart;\n\nvar _tokenize = _dereq_(\"./tokenize\");\n\nexports.Token = _tokenize.Token;\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nexports.isNewLine = _whitespace.isNewLine;\nexports.lineBreak = _whitespace.lineBreak;\nexports.lineBreakG = _whitespace.lineBreakG;\nvar version = \"2.7.0\";\n\nexports.version = version;\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new _state.Parser(options, input).parse();\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new _state.Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression();\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new _state.Parser(options, input);\n}\n\n},{\"./expression\":1,\"./identifier\":2,\"./location\":4,\"./locutil\":5,\"./lval\":6,\"./node\":7,\"./options\":8,\"./parseutil\":9,\"./state\":10,\"./statement\":11,\"./tokencontext\":12,\"./tokenize\":13,\"./tokentype\":14,\"./whitespace\":16}],4:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar pp = _state.Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp.raise = function (pos, message) {\n  var loc = _locutil.getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;err.loc = loc;err.raisedAt = this.pos;\n  throw err;\n};\n\npp.curPosition = function () {\n  if (this.options.locations) {\n    return new _locutil.Position(this.curLine, this.pos - this.lineStart);\n  }\n};\n\n},{\"./locutil\":5,\"./state\":10}],5:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getLineInfo = getLineInfo;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = (function () {\n  function Position(line, col) {\n    _classCallCheck(this, Position);\n\n    this.line = line;\n    this.column = col;\n  }\n\n  Position.prototype.offset = function offset(n) {\n    return new Position(this.line, this.column + n);\n  };\n\n  return Position;\n})();\n\nexports.Position = Position;\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) this.source = p.sourceFile;\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\n;\n\nexports.SourceLocation = SourceLocation;\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    _whitespace.lineBreakG.lastIndex = cur;\n    var match = _whitespace.lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\n},{\"./whitespace\":16}],6:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _util = _dereq_(\"./util\");\n\nvar pp = _state.Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp.toAssignable = function (node, isBinding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i];\n          if (prop.kind !== \"init\") this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          this.toAssignable(prop.value, isBinding);\n        }\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          // falls through to AssignmentPattern\n        } else {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n            break;\n          }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\") this.raise(node.right.start, \"Yield expression cannot be a default value\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding);\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp.toAssignableList = function (exprList, isBinding) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type == \"RestElement\") {\n      --end;\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") this.unexpected(arg.start);\n      --end;\n    }\n\n    if (isBinding && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") this.unexpected(last.argument.start);\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding);\n  }\n  return exprList;\n};\n\n// Parses spread element.\n\npp.parseSpread = function (refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp.parseRest = function (allowNonIdent) {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (allowNonIdent) node.argument = this.type === _tokentype.types.name ? this.parseIdent() : this.unexpected();else node.argument = this.type === _tokentype.types.name || this.type === _tokentype.types.bracketL ? this.parseBindingAtom() : this.unexpected();\n\n  return this.finishNode(node, \"RestElement\");\n};\n\n// Parses lvalue (assignable) atom.\n\npp.parseBindingAtom = function () {\n  if (this.options.ecmaVersion < 6) return this.parseIdent();\n  switch (this.type) {\n    case _tokentype.types.name:\n      return this.parseIdent();\n\n    case _tokentype.types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseBindingList = function (close, allowEmpty, allowTrailingComma, allowNonIdent) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (first) first = false;else this.expect(_tokentype.types.comma);\n    if (allowEmpty && this.type === _tokentype.types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break;\n    } else if (this.type === _tokentype.types.ellipsis) {\n      var rest = this.parseRest(allowNonIdent);\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      this.expect(close);\n      break;\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts;\n};\n\npp.parseBindingListItem = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp.parseMaybeDefault = function (startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq)) return left;\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp.checkLVal = function (expr, isBinding, checkClashes) {\n  switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raise(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n      if (checkClashes) {\n        if (_util.has(checkClashes, expr.name)) this.raise(expr.start, \"Argument name clash\");\n        checkClashes[expr.name] = true;\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++) {\n        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n      }break;\n\n    case \"ArrayPattern\":\n      for (var i = 0; i < expr.elements.length; i++) {\n        var elem = expr.elements[i];\n        if (elem) this.checkLVal(elem, isBinding, checkClashes);\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes);\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes);\n      break;\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes);\n      break;\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./util\":15}],7:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar Node = function Node(parser, pos, loc) {\n  _classCallCheck(this, Node);\n\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations) this.loc = new _locutil.SourceLocation(parser, loc);\n  if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;\n  if (parser.options.ranges) this.range = [pos, 0];\n}\n\n// Start an AST node, attaching a start offset.\n\n;\n\nexports.Node = Node;\nvar pp = _state.Parser.prototype;\n\npp.startNode = function () {\n  return new Node(this, this.start, this.startLoc);\n};\n\npp.startNodeAt = function (pos, loc) {\n  return new Node(this, pos, loc);\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations) node.loc.end = loc;\n  if (this.options.ranges) node.range[1] = pos;\n  return node;\n}\n\npp.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n};\n\n// Finish node at given position\n\npp.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n};\n\n},{\"./locutil\":5,\"./state\":10}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getOptions = getOptions;\n\nvar _util = _dereq_(\"./util\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, or 5, or 6. This influences support for strict\n  // mode, the set of reserved words, support for getters and\n  // setters and other features.\n  ecmaVersion: 5,\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\nexports.defaultOptions = defaultOptions;\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var opt in defaultOptions) {\n    options[opt] = opts && _util.has(opts, opt) ? opts[opt] : defaultOptions[opt];\n  }if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;\n\n  if (_util.isArray(options.onToken)) {\n    (function () {\n      var tokens = options.onToken;\n      options.onToken = function (token) {\n        return tokens.push(token);\n      };\n    })();\n  }\n  if (_util.isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);\n\n  return options;\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? 'Block' : 'Line',\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations) comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);\n    if (options.ranges) comment.range = [start, end];\n    array.push(comment);\n  };\n}\n\n},{\"./locutil\":5,\"./util\":15}],9:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ## Parser utilities\n\n// Test whether a statement node is the string literal `\"use strict\"`.\n\npp.isUseStrict = function (stmt) {\n  return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && stmt.expression.raw.slice(1, -1) === \"use strict\";\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function (type) {\n  if (this.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.type === _tokentype.types.name && this.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.value === name && this.eat(_tokentype.types.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name) {\n  if (!this.eatContextual(name)) this.unexpected();\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n\npp.insertSemicolon = function () {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    return true;\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon()) this.unexpected();\n};\n\npp.afterTrailingComma = function (tokType) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    this.next();\n    return true;\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function (type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function (pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\npp.checkPatternErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.trailingComma;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Trailing comma is not permitted in destructuring patterns\");\n};\n\npp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\");\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],10:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar _options = _dereq_(\"./options\");\n\n// Registered plugins\nvar plugins = {};\n\nexports.plugins = plugins;\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\");\n}\n\nvar Parser = (function () {\n  function Parser(options, input, startPos) {\n    _classCallCheck(this, Parser);\n\n    this.options = options = _options.getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = keywordRegexp(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n    var reserved = options.allowReserved ? \"\" : _identifier.reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\");\n    this.reservedWords = keywordRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + _identifier.reservedWords.strict;\n    this.reservedWordsStrict = keywordRegexp(reservedStrict);\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + _identifier.reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Load plugins\n    this.loadPlugins(options.plugins);\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos));\n      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = _tokentype.types.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\";\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false;\n    // Labels in scope.\n    this.labels = [];\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!') this.skipLineComment(2);\n  }\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n\n  Parser.prototype.isKeyword = function isKeyword(word) {\n    return this.keywords.test(word);\n  };\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    return this.reservedWords.test(word);\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n    for (var _name in pluginConfigs) {\n      var plugin = plugins[_name];\n      if (!plugin) throw new Error(\"Plugin '\" + _name + \"' not found\");\n      plugin(this, pluginConfigs[_name]);\n    }\n  };\n\n  Parser.prototype.parse = function parse() {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node);\n  };\n\n  return Parser;\n})();\n\nexports.Parser = Parser;\n\n},{\"./identifier\":2,\"./options\":8,\"./tokentype\":14,\"./whitespace\":16}],11:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp.parseTopLevel = function (node) {\n  var first = true;\n  if (!node.body) node.body = [];\n  while (this.type !== _tokentype.types.eof) {\n    var stmt = this.parseStatement(true, true);\n    node.body.push(stmt);\n    if (first) {\n      if (this.isUseStrict(stmt)) this.setStrict(true);\n      first = false;\n    }\n  }\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\");\n};\n\nvar loopLabel = { kind: \"loop\" },\n    switchLabel = { kind: \"switch\" };\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp.parseStatement = function (declaration, topLevel) {\n  var starttype = this.type,\n      node = this.startNode();\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case _tokentype.types._break:case _tokentype.types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case _tokentype.types._debugger:\n      return this.parseDebuggerStatement(node);\n    case _tokentype.types._do:\n      return this.parseDoStatement(node);\n    case _tokentype.types._for:\n      return this.parseForStatement(node);\n    case _tokentype.types._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();\n      return this.parseFunctionStatement(node);\n    case _tokentype.types._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n    case _tokentype.types._if:\n      return this.parseIfStatement(node);\n    case _tokentype.types._return:\n      return this.parseReturnStatement(node);\n    case _tokentype.types._switch:\n      return this.parseSwitchStatement(node);\n    case _tokentype.types._throw:\n      return this.parseThrowStatement(node);\n    case _tokentype.types._try:\n      return this.parseTryStatement(node);\n    case _tokentype.types._let:case _tokentype.types._const:\n      if (!declaration) this.unexpected(); // NOTE: falls through to _var\n    case _tokentype.types._var:\n      return this.parseVarStatement(node, starttype);\n    case _tokentype.types._while:\n      return this.parseWhileStatement(node);\n    case _tokentype.types._with:\n      return this.parseWithStatement(node);\n    case _tokentype.types.braceL:\n      return this.parseBlock();\n    case _tokentype.types.semi:\n      return this.parseEmptyStatement(node);\n    case _tokentype.types._export:\n    case _tokentype.types._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n        if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n      }\n      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node);\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value,\n          expr = this.parseExpression();\n      if (starttype === _tokentype.types.name && expr.type === \"Identifier\" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp.parseDoStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(_tokentype.types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp.parseForStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  this.expect(_tokentype.types.parenL);\n  if (this.type === _tokentype.types.semi) return this.parseFor(node, null);\n  if (this.type === _tokentype.types._var || this.type === _tokentype.types._let || this.type === _tokentype.types._const) {\n    var _init = this.startNode(),\n        varKind = this.type;\n    this.next();\n    this.parseVar(_init, true, varKind);\n    this.finishNode(_init, \"VariableDeclaration\");\n    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && _init.declarations.length === 1 && !(varKind !== _tokentype.types._var && _init.declarations[0].init)) return this.parseForIn(node, _init);\n    return this.parseFor(node, _init);\n  }\n  var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n    this.toAssignable(init);\n    this.checkLVal(init);\n    return this.parseForIn(node, init);\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return this.parseFor(node, init);\n};\n\npp.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp.parseReturnStatement = function (node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {\n    node.argument = this.parseExpression();this.semicolon();\n  }\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(_tokentype.types.braceL);\n  this.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault = false; this.type != _tokentype.types.braceR;) {\n    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {\n      var isCase = this.type === _tokentype.types._case;\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raise(this.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(_tokentype.types.colon);\n    } else {\n      if (!cur) this.unexpected();\n      cur.consequent.push(this.parseStatement(true));\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp.parseThrowStatement = function (node) {\n  this.next();\n  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp.parseTryStatement = function (node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === _tokentype.types._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true);\n    this.expect(_tokentype.types.parenR);\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp.parseWithStatement = function (node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var i = 0; i < this.labels.length; ++i) {\n    if (this.labels[i].name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  }var kind = this.type.isLoop ? \"loop\" : this.type === _tokentype.types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label = this.labels[i];\n    if (label.statementStart == node.start) {\n      label.statementStart = this.start;\n      label.kind = kind;\n    } else break;\n  }\n  this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });\n  node.body = this.parseStatement(true);\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp.parseBlock = function (allowStrict) {\n  var node = this.startNode(),\n      first = true,\n      oldStrict = undefined;\n  node.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    var stmt = this.parseStatement(true);\n    node.body.push(stmt);\n    if (first && allowStrict && this.isUseStrict(stmt)) {\n      oldStrict = this.strict;\n      this.setStrict(this.strict = true);\n    }\n    first = false;\n  }\n  if (oldStrict === false) this.setStrict(false);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(_tokentype.types.semi);\n  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();\n  this.expect(_tokentype.types.semi);\n  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp.parseForIn = function (node, init) {\n  var type = this.type === _tokentype.types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind.keyword;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl);\n    if (this.eat(_tokentype.types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === _tokentype.types._const && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this.type === _tokentype.types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(_tokentype.types.comma)) break;\n  }\n  return node;\n};\n\npp.parseVarId = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseFunction = function (node, isStatement, allowExpressionBody) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6) node.generator = this.eat(_tokentype.types.star);\n  if (isStatement || this.type === _tokentype.types.name) node.id = this.parseIdent();\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp.parseFunctionParams = function (node) {\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false, true);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseClass = function (node, isStatement) {\n  this.next();\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (this.eat(_tokentype.types.semi)) continue;\n    var method = this.startNode();\n    var isGenerator = this.eat(_tokentype.types.star);\n    var isMaybeStatic = this.type === _tokentype.types.name && this.value === \"static\";\n    this.parsePropertyName(method);\n    method[\"static\"] = isMaybeStatic && this.type !== _tokentype.types.parenL;\n    if (method[\"static\"]) {\n      if (isGenerator) this.unexpected();\n      isGenerator = this.eat(_tokentype.types.star);\n      this.parsePropertyName(method);\n    }\n    method.kind = \"method\";\n    var isGetSet = false;\n    if (!method.computed) {\n      var key = method.key;\n\n      if (!isGenerator && key.type === \"Identifier\" && this.type !== _tokentype.types.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true;\n        method.kind = key.name;\n        key = this.parsePropertyName(method);\n      }\n      if (!method[\"static\"] && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this.raise(key.start, \"Duplicate constructor in the same class\");\n        if (isGetSet) this.raise(key.start, \"Constructor can't have get/set modifier\");\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\");\n        method.kind = \"constructor\";\n        hadConstructor = true;\n      }\n    }\n    this.parseClassMethod(classBody, method, isGenerator);\n    if (isGetSet) {\n      var paramCount = method.kind === \"get\" ? 0 : 1;\n      if (method.value.params.length !== paramCount) {\n        var start = method.value.start;\n        if (method.kind === \"get\") this.raise(start, \"getter should have no params\");else this.raise(start, \"setter should have exactly one param\");\n      }\n      if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") this.raise(method.value.params[0].start, \"Setter cannot use rest params\");\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp.parseClassMethod = function (classBody, method, isGenerator) {\n  method.value = this.parseMethod(isGenerator);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp.parseClassId = function (node, isStatement) {\n  node.id = this.type === _tokentype.types.name ? this.parseIdent() : isStatement ? this.unexpected() : null;\n};\n\npp.parseClassSuper = function (node) {\n  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.eat(_tokentype.types.star)) {\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n  if (this.eat(_tokentype.types._default)) {\n    // export default ...\n    var expr = this.parseMaybeAssign();\n    var needsSemi = true;\n    if (expr.type == \"FunctionExpression\" || expr.type == \"ClassExpression\") {\n      needsSemi = false;\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\" ? \"FunctionDeclaration\" : \"ClassDeclaration\";\n      }\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0; i < node.specifiers.length; i++) {\n        if (this.keywords.test(node.specifiers[i].local.name) || this.reservedWords.test(node.specifiers[i].local.name)) {\n          this.unexpected(node.specifiers[i].local.start);\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp.shouldParseExportStatement = function () {\n  return this.type.keyword;\n};\n\n// Parses a comma-separated list of module exports.\n\npp.parseExportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  // export { x, y as z } [from '...']\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.local = this.parseIdent(this.type === _tokentype.types._default);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes;\n};\n\n// Parses import declaration.\n\npp.parseImport = function (node) {\n  this.next();\n  // import '...'\n  if (this.type === _tokentype.types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp.parseImportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  if (this.type === _tokentype.types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(_tokentype.types.comma)) return nodes;\n  }\n  if (this.type === _tokentype.types.star) {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportNamespaceSpecifier\"));\n    return nodes;\n  }\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node.local = this.parseIdent();\n    } else {\n      node.local = node.imported;\n      if (this.isKeyword(node.local.name)) this.unexpected(node.local.start);\n      if (this.reservedWordsStrict.test(node.local.name)) this.raise(node.local.start, \"The keyword '\" + node.local.name + \"' is reserved\");\n    }\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportSpecifier\"));\n  }\n  return nodes;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],12:[function(_dereq_,module,exports){\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  _classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nexports.TokContext = TokContext;\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  f_expr: new TokContext(\"function\", true)\n};\n\nexports.types = types;\nvar pp = _state.Parser.prototype;\n\npp.initialContext = function () {\n  return [types.b_stat];\n};\n\npp.braceIsBlock = function (prevType) {\n  if (prevType === _tokentype.types.colon) {\n    var _parent = this.curContext();\n    if (_parent === types.b_stat || _parent === types.b_expr) return !_parent.isExpr;\n  }\n  if (prevType === _tokentype.types._return) return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR) return true;\n  if (prevType == _tokentype.types.braceL) return this.curContext() === types.b_stat;\n  return !this.exprAllowed;\n};\n\npp.updateContext = function (prevType) {\n  var update = undefined,\n      type = this.type;\n  if (type.keyword && prevType == _tokentype.types.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;\n};\n\n// Token-specific context update code\n\n_tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return;\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop();\n    this.exprAllowed = false;\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true;\n  } else {\n    this.exprAllowed = !out.isExpr;\n  }\n};\n\n_tokentype.types.braceL.updateContext = function (prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.dollarBraceL.updateContext = function () {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\n_tokentype.types._function.updateContext = function () {\n  if (this.curContext() !== types.b_stat) this.context.push(types.f_expr);\n  this.exprAllowed = false;\n};\n\n_tokentype.types.backQuote.updateContext = function () {\n  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);\n  this.exprAllowed = false;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],13:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  _classCallCheck(this, Token);\n\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations) this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);\n  if (p.options.ranges) this.range = [p.start, p.end];\n}\n\n// ## Tokenizer\n\n;\n\nexports.Token = Token;\nvar pp = _state.Parser.prototype;\n\n// Are we running under Rhino?\nvar isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\";\n\n// Move to the next token\n\npp.next = function () {\n  if (this.options.onToken) this.options.onToken(new Token(this));\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function () {\n  this.next();\n  return new Token(this);\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\") pp[Symbol.iterator] = function () {\n  var self = this;\n  return { next: function next() {\n      var token = self.getToken();\n      return {\n        done: token.type === _tokentype.types.eof,\n        value: token\n      };\n    } };\n};\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function (strict) {\n  this.strict = strict;\n  if (this.type !== _tokentype.types.num && this.type !== _tokentype.types.string) return;\n  this.pos = this.start;\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n      --this.curLine;\n    }\n  }\n  this.nextToken();\n};\n\npp.curContext = function () {\n  return this.context[this.context.length - 1];\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function () {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n  this.start = this.pos;\n  if (this.options.locations) this.startLoc = this.curPosition();\n  if (this.pos >= this.input.length) return this.finishToken(_tokentype.types.eof);\n\n  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());\n};\n\npp.readToken = function (code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (_identifier.isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */) return this.readWord();\n\n  return this.getTokenFromCode(code);\n};\n\npp.fullCharCodeAtPos = function () {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) return code;\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00;\n};\n\npp.skipBlockComment = function () {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos,\n      end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n  this.pos = end + 2;\n  if (this.options.locations) {\n    _whitespace.lineBreakG.lastIndex = start;\n    var match = undefined;\n    while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n};\n\npp.skipLineComment = function (startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos;\n    ch = this.input.charCodeAt(this.pos);\n  }\n  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function () {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n      case 32:case 160:\n        // ' '\n        ++this.pos;\n        break;\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10:case 8232:case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break;\n      case 47:\n        // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n          case 42:\n            // '*'\n            this.skipBlockComment();\n            break;\n          case 47:\n            this.skipLineComment(2);\n            break;\n          default:\n            break loop;\n        }\n        break;\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop;\n        }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function (type, val) {\n  this.end = this.pos;\n  if (this.options.locations) this.endLoc = this.curPosition();\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function () {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) return this.readNumber(true);\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n    // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(_tokentype.types.ellipsis);\n  } else {\n    ++this.pos;\n    return this.finishToken(_tokentype.types.dot);\n  }\n};\n\npp.readToken_slash = function () {\n  // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) {\n    ++this.pos;return this.readRegexp();\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.slash, 1);\n};\n\npp.readToken_mult_modulo = function (code) {\n  // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 42 ? _tokentype.types.star : _tokentype.types.modulo, 1);\n};\n\npp.readToken_pipe_amp = function (code) {\n  // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);\n};\n\npp.readToken_caret = function () {\n  // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.bitwiseXOR, 1);\n};\n\npp.readToken_plus_min = function (code) {\n  // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken();\n    }\n    return this.finishOp(_tokentype.types.incDec, 2);\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.plusMin, 1);\n};\n\npp.readToken_lt_gt = function (code) {\n  // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(_tokentype.types.assign, size + 1);\n    return this.finishOp(_tokentype.types.bitShift, size);\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected();\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken();\n  }\n  if (next === 61) size = this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2;\n  return this.finishOp(_tokentype.types.relational, size);\n};\n\npp.readToken_eq_excl = function (code) {\n  // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n    // '=>'\n    this.pos += 2;\n    return this.finishToken(_tokentype.types.arrow);\n  }\n  return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);\n};\n\npp.getTokenFromCode = function (code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46:\n      // '.'\n      return this.readToken_dot();\n\n    // Punctuation tokens.\n    case 40:\n      ++this.pos;return this.finishToken(_tokentype.types.parenL);\n    case 41:\n      ++this.pos;return this.finishToken(_tokentype.types.parenR);\n    case 59:\n      ++this.pos;return this.finishToken(_tokentype.types.semi);\n    case 44:\n      ++this.pos;return this.finishToken(_tokentype.types.comma);\n    case 91:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketL);\n    case 93:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketR);\n    case 123:\n      ++this.pos;return this.finishToken(_tokentype.types.braceL);\n    case 125:\n      ++this.pos;return this.finishToken(_tokentype.types.braceR);\n    case 58:\n      ++this.pos;return this.finishToken(_tokentype.types.colon);\n    case 63:\n      ++this.pos;return this.finishToken(_tokentype.types.question);\n\n    case 96:\n      // '`'\n      if (this.options.ecmaVersion < 6) break;\n      ++this.pos;\n      return this.finishToken(_tokentype.types.backQuote);\n\n    case 48:\n      // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n      // 1-9\n      return this.readNumber(false);\n\n    // Quotes produce strings.\n    case 34:case 39:\n      // '\"', \"'\"\n      return this.readString(code);\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47:\n      // '/'\n      return this.readToken_slash();\n\n    case 37:case 42:\n      // '%*'\n      return this.readToken_mult_modulo(code);\n\n    case 124:case 38:\n      // '|&'\n      return this.readToken_pipe_amp(code);\n\n    case 94:\n      // '^'\n      return this.readToken_caret();\n\n    case 43:case 45:\n      // '+-'\n      return this.readToken_plus_min(code);\n\n    case 60:case 62:\n      // '<>'\n      return this.readToken_lt_gt(code);\n\n    case 61:case 33:\n      // '=!'\n      return this.readToken_eq_excl(code);\n\n    case 126:\n      // '~'\n      return this.finishOp(_tokentype.types.prefix, 1);\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function (type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str);\n};\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags);\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message);\n      throw e;\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"￿\", \"u\");\n\npp.readRegexp = function () {\n  var _this = this;\n\n  var escaped = undefined,\n      inClass = undefined,\n      start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n    var ch = this.input.charAt(this.pos);\n    if (_whitespace.lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\");\n    if (!escaped) {\n      if (ch === \"[\") inClass = true;else if (ch === \"]\" && inClass) inClass = false;else if (ch === \"/\" && !inClass) break;\n      escaped = ch === \"\\\\\";\n    } else escaped = false;\n    ++this.pos;\n  }\n  var content = this.input.slice(start, this.pos);\n  ++this.pos;\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  var mods = this.readWord1();\n  var tmp = content;\n  if (mods) {\n    var validFlags = /^[gim]*$/;\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/;\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {\n      // Replace each astral symbol and every Unicode escape sequence that\n      // possibly represents an astral symbol or a paired surrogate with a\n      // single ASCII symbol to avoid throwing on regular expressions that\n      // are only valid in combination with the `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n      // be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n        code = Number(\"0x\" + code);\n        if (code > 0x10FFFF) _this.raise(start + offset + 3, \"Code point out of bounds\");\n        return \"x\";\n      });\n      tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\");\n    }\n  }\n  // Detect invalid regular expressions.\n  var value = null;\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, undefined, start, this);\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods);\n  }\n  return this.finishToken(_tokentype.types.regexp, { pattern: content, flags: mods, value: value });\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function (radix, len) {\n  var start = this.pos,\n      total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this.input.charCodeAt(this.pos),\n        val = undefined;\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n      else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n        else val = Infinity;\n    if (val >= radix) break;\n    ++this.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null;\n\n  return total;\n};\n\npp.readRadixNumber = function (radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function (startsWithDot) {\n  var start = this.pos,\n      isFloat = false,\n      octal = this.input.charCodeAt(this.pos) === 48;\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46) {\n    // '.'\n    ++this.pos;\n    this.readInt(10);\n    isFloat = true;\n    next = this.input.charCodeAt(this.pos);\n  }\n  if (next === 69 || next === 101) {\n    // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    isFloat = true;\n  }\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n\n  var str = this.input.slice(start, this.pos),\n      val = undefined;\n  if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\");else val = parseInt(str, 8);\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function () {\n  var ch = this.input.charCodeAt(this.pos),\n      code = undefined;\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected();\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\");\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code;\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code);\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\n\npp.readString = function (quote) {\n  var out = \"\",\n      chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) break;\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (_whitespace.isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\");\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(_tokentype.types.string, out);\n};\n\n// Reads template string tokens.\n\npp.readTmplToken = function () {\n  var out = \"\",\n      chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n      // '`', '${'\n      if (this.pos === this.start && this.type === _tokentype.types.template) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(_tokentype.types.dollarBraceL);\n        } else {\n          ++this.pos;\n          return this.finishToken(_tokentype.types.backQuote);\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(_tokentype.types.template, out);\n    }\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (_whitespace.isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n        case 10:\n          out += \"\\n\";\n          break;\n        default:\n          out += String.fromCharCode(ch);\n          break;\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function (inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n    case 110:\n      return \"\\n\"; // 'n' -> '\\n'\n    case 114:\n      return \"\\r\"; // 'r' -> '\\r'\n    case 120:\n      return String.fromCharCode(this.readHexChar(2)); // 'x'\n    case 117:\n      return codePointToString(this.readCodePoint()); // 'u'\n    case 116:\n      return \"\\t\"; // 't' -> '\\t'\n    case 98:\n      return \"\\b\"; // 'b' -> '\\b'\n    case 118:\n      return \"\\u000b\"; // 'v' -> '\\u000b'\n    case 102:\n      return \"\\f\"; // 'f' -> '\\f'\n    case 13:\n      if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n    case 10:\n      // ' \\n'\n      if (this.options.locations) {\n        this.lineStart = this.pos;++this.curLine;\n      }\n      return \"\";\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\");\n        }\n        this.pos += octalStr.length - 1;\n        return String.fromCharCode(octal);\n      }\n      return String.fromCharCode(ch);\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function (len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\");\n  return n;\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function () {\n  this.containsEsc = false;\n  var word = \"\",\n      first = true,\n      chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (_identifier.isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) {\n      // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral)) this.raise(escStart, \"Invalid Unicode escape\");\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break;\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos);\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function () {\n  var word = this.readWord1();\n  var type = _tokentype.types.name;\n  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word)) type = _tokentype.keywords[word];\n  return this.finishToken(type, word);\n};\n\n},{\"./identifier\":2,\"./locutil\":5,\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],14:[function(_dereq_,module,exports){\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  _classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nexports.TokenType = TokenType;\n\nfunction binop(name, prec) {\n  return new TokenType(name, { beforeExpr: true, binop: prec });\n}\nvar beforeExpr = { beforeExpr: true },\n    startsExpr = { startsExpr: true };\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: true, startsExpr: true }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: true, startsExpr: true }),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: true, startsExpr: true }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: true, startsExpr: true }),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: true, isAssign: true }),\n  assign: new TokenType(\"_=\", { beforeExpr: true, isAssign: true }),\n  incDec: new TokenType(\"++/--\", { prefix: true, postfix: true, startsExpr: true }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: true, prefix: true, startsExpr: true }),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10)\n};\n\nexports.types = types;\n// Map keyword names to token types.\n\nvar keywords = {};\n\nexports.keywords = keywords;\n// Succinct definitions of keyword token types\nfunction kw(name) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  options.keyword = name;\n  keywords[name] = types[\"_\" + name] = new TokenType(name, options);\n}\n\nkw(\"break\");\nkw(\"case\", beforeExpr);\nkw(\"catch\");\nkw(\"continue\");\nkw(\"debugger\");\nkw(\"default\", beforeExpr);\nkw(\"do\", { isLoop: true, beforeExpr: true });\nkw(\"else\", beforeExpr);\nkw(\"finally\");\nkw(\"for\", { isLoop: true });\nkw(\"function\", startsExpr);\nkw(\"if\");\nkw(\"return\", beforeExpr);\nkw(\"switch\");\nkw(\"throw\", beforeExpr);\nkw(\"try\");\nkw(\"var\");\nkw(\"let\");\nkw(\"const\");\nkw(\"while\", { isLoop: true });\nkw(\"with\");\nkw(\"new\", { beforeExpr: true, startsExpr: true });\nkw(\"this\", startsExpr);\nkw(\"super\", startsExpr);\nkw(\"class\");\nkw(\"extends\", beforeExpr);\nkw(\"export\");\nkw(\"import\");\nkw(\"yield\", { beforeExpr: true, startsExpr: true });\nkw(\"null\", startsExpr);\nkw(\"true\", startsExpr);\nkw(\"false\", startsExpr);\nkw(\"in\", { beforeExpr: true, binop: 7 });\nkw(\"instanceof\", { beforeExpr: true, binop: 7 });\nkw(\"typeof\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"void\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"delete\", { beforeExpr: true, prefix: true, startsExpr: true });\n\n},{}],15:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.isArray = isArray;\nexports.has = has;\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\";\n}\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return Object.prototype.hasOwnProperty.call(obj, propName);\n}\n\n},{}],16:[function(_dereq_,module,exports){\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isNewLine = isNewLine;\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nexports.lineBreak = lineBreak;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nexports.lineBreakG = lineBreakG;\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code == 0x2029;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\nexports.nonASCIIwhitespace = nonASCIIwhitespace;\n\n},{}]},{},[3])(3)\n});\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],2:[function(_dereq_,module,exports){\n\n},{}],3:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar containsField = function (obj, field, cb) {\r\n    // if (field in (obj || {})) {\r\n    //     cb(obj[field])\r\n    // }\r\n    if (obj && field in obj && typeof obj[field] !== \"undefined\") {\r\n        cb(obj[field]);\r\n    }\r\n};\r\nvar parsebool = function (b, d) {\r\n    if (\"boolean\" === typeof b) {\r\n        return b;\r\n    }\r\n    switch (b) {\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return d;\r\n    }\r\n};\r\nvar _collectionRegex = /^Collection\\((.*)\\)$/;\r\nvar Metadata = (function () {\r\n    function Metadata($data, options, metadata) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.metadata = metadata;\r\n        this.options.container = this.$data.Container; //this.options.container || $data.createContainer()\r\n    }\r\n    Metadata.prototype._getMaxValue = function (maxValue) {\r\n        if (\"number\" === typeof maxValue)\r\n            return maxValue;\r\n        if (\"max\" === maxValue)\r\n            return Number.MAX_VALUE;\r\n        return parseInt(maxValue);\r\n    };\r\n    Metadata.prototype.createTypeDefinition = function (propertySchema, definition) {\r\n        var _this = this;\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.type = _this.options.collectionBaseType || 'Array';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.type = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createReturnTypeDefinition = function (propertySchema, definition) {\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.returnType = '$data.Queryable';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.returnType = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createProperty = function (entitySchema, propertySchema) {\r\n        var _this = this;\r\n        var self = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"maxLength\", function (v) {\r\n            definition.maxLength = _this._getMaxValue(v);\r\n        });\r\n        containsField(entitySchema, \"key\", function (keys) {\r\n            if (keys.propertyRefs.some(function (pr) { return pr.name === propertySchema.name; })) {\r\n                definition.key = true;\r\n            }\r\n        });\r\n        containsField(propertySchema, \"concurrencyMode\", function (v) {\r\n            definition.concurrencyMode = self.$data.ConcurrencyMode[v];\r\n        });\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createNavigationProperty = function (entitySchema, propertySchema) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"partner\", function (p) {\r\n            definition.inverseProperty = p;\r\n        });\r\n        if (!definition.inverseProperty) {\r\n            definition.inverseProperty = '$$unbound';\r\n        }\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createEntityDefinition = function (entitySchema) {\r\n        var props = (entitySchema.properties || []).map(this.createProperty.bind(this, entitySchema));\r\n        var navigationProps = (entitySchema.navigationProperties || []).map(this.createNavigationProperty.bind(this, entitySchema));\r\n        props = props.concat(navigationProps);\r\n        var result = props.reduce(function (p, c) {\r\n            p[c.name] = c.definition;\r\n            return p;\r\n        }, {});\r\n        return result;\r\n    };\r\n    Metadata.prototype.createEntityType = function (entitySchema, namespace) {\r\n        var baseType = (entitySchema.baseType ? entitySchema.baseType : this.options.baseType) || this.$data.Entity;\r\n        var definition = this.createEntityDefinition(entitySchema);\r\n        var entityFullName = namespace + \".\" + entitySchema.name;\r\n        var staticDefinition = {};\r\n        containsField(entitySchema, \"openType\", function (v) {\r\n            if (parsebool(v, false)) {\r\n                staticDefinition.openType = { value: true };\r\n            }\r\n        });\r\n        return {\r\n            namespace: namespace,\r\n            typeName: entityFullName,\r\n            baseType: baseType,\r\n            params: [entityFullName, this.options.container, definition, staticDefinition],\r\n            definition: definition,\r\n            type: 'entity'\r\n        };\r\n    };\r\n    Metadata.prototype.createEnumOption = function (entitySchema, propertySchema, i) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {\r\n            name: propertySchema.name,\r\n            index: i\r\n        };\r\n        containsField(propertySchema, \"value\", function (value) {\r\n            var v = +value;\r\n            if (!isNaN(v)) {\r\n                definition.value = v;\r\n            }\r\n        });\r\n        return definition;\r\n    };\r\n    Metadata.prototype.createEnumDefinition = function (enumSchema) {\r\n        var props = (enumSchema.members || []).map(this.createEnumOption.bind(this, enumSchema));\r\n        return props;\r\n    };\r\n    Metadata.prototype.createEnumType = function (enumSchema, namespace) {\r\n        var self = this;\r\n        var definition = this.createEnumDefinition(enumSchema);\r\n        var enumFullName = namespace + \".\" + enumSchema.name;\r\n        return {\r\n            namespace: namespace,\r\n            typeName: enumFullName,\r\n            baseType: self.$data.Enum,\r\n            params: [enumFullName, this.options.container, enumSchema.underlyingType, definition],\r\n            definition: definition,\r\n            type: 'enum'\r\n        };\r\n    };\r\n    Metadata.prototype.createEntitySetProperty = function (entitySetSchema, contextSchema) {\r\n        //var c = this.options.container\r\n        var t = entitySetSchema.entityType; //c.classTypes[c.classNames[entitySetSchema.entityType]] // || entitySetSchema.entityType\r\n        var prop = {\r\n            name: entitySetSchema.name,\r\n            definition: {\r\n                type: this.options.entitySetType || '$data.EntitySet',\r\n                elementType: t\r\n            }\r\n        };\r\n        return prop;\r\n    };\r\n    Metadata.prototype.indexBy = function (fieldName, pick) {\r\n        return [function (p, c) { p[c[fieldName]] = c[pick]; return p; }, {}];\r\n    };\r\n    Metadata.prototype.createContextDefinition = function (contextSchema, namespace) {\r\n        var _this = this;\r\n        var props = (contextSchema.entitySets || []).map(function (es) { return _this.createEntitySetProperty(es, contextSchema); });\r\n        var result = props.reduce.apply(props, this.indexBy(\"name\", \"definition\"));\r\n        return result;\r\n    };\r\n    Metadata.prototype.createContextType = function (contextSchema, namespace) {\r\n        if (Array.isArray(contextSchema)) {\r\n            throw new Error(\"Array type is not supported here\");\r\n        }\r\n        var definition = this.createContextDefinition(contextSchema, namespace);\r\n        var baseType = this.options.contextType || this.$data.EntityContext;\r\n        var typeName = namespace + \".\" + contextSchema.name;\r\n        var contextImportMethods = [];\r\n        contextSchema.actionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.actionImports);\r\n        contextSchema.functionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.functionImports);\r\n        return {\r\n            namespace: namespace,\r\n            typeName: typeName,\r\n            baseType: baseType,\r\n            params: [typeName, this.options.container, definition],\r\n            definition: definition,\r\n            type: 'context',\r\n            contextImportMethods: contextImportMethods\r\n        };\r\n    };\r\n    Metadata.prototype.createMethodParameter = function (parameter, definition) {\r\n        var paramDef = {\r\n            name: parameter.name\r\n        };\r\n        this.createTypeDefinition(parameter, paramDef);\r\n        definition.params.push(paramDef);\r\n    };\r\n    Metadata.prototype.applyBoundMethod = function (actionInfo, ns, typeDefinitions, type) {\r\n        var _this = this;\r\n        var definition = {\r\n            type: type,\r\n            namespace: ns,\r\n            returnType: null,\r\n            params: []\r\n        };\r\n        containsField(actionInfo, \"returnType\", function (value) {\r\n            _this.createReturnTypeDefinition(value, definition);\r\n        });\r\n        var parameters = [].concat(actionInfo.parameters);\r\n        parameters.forEach(function (p) { return _this.createMethodParameter(p, definition); });\r\n        if (parsebool(actionInfo.isBound, false)) {\r\n            var bindingParameter = definition.params.shift();\r\n            if (bindingParameter.type === (this.options.collectionBaseType || 'Array')) {\r\n                var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.namespace === ns && d.type === 'context'; });\r\n                filteredContextDefinitions.forEach(function (ctx) {\r\n                    for (var setName in ctx.definition) {\r\n                        var set = ctx.definition[setName];\r\n                        if (set.elementType === bindingParameter.elementType) {\r\n                            set.actions = set.actions = {};\r\n                            set.actions[actionInfo.name] = definition;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                var filteredTypeDefinitions = typeDefinitions.filter(function (d) { return d.typeName === bindingParameter.type && d.type === 'entity'; });\r\n                filteredTypeDefinitions.forEach(function (t) {\r\n                    t.definition[actionInfo.name] = definition;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            delete definition.namespace;\r\n            var methodFullName = ns + '.' + actionInfo.name;\r\n            var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.type === 'context'; });\r\n            filteredContextDefinitions.forEach(function (ctx) {\r\n                ctx.contextImportMethods.forEach(function (methodImportInfo) {\r\n                    if (methodImportInfo.action === methodFullName || methodImportInfo.function === methodFullName) {\r\n                        ctx.definition[actionInfo.name] = definition;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    Metadata.prototype.processMetadata = function (createdTypes) {\r\n        var _this = this;\r\n        var types = createdTypes || [];\r\n        var typeDefinitions = [];\r\n        var serviceMethods = [];\r\n        var self = this;\r\n        this.metadata.dataServices.schemas.forEach(function (schema) {\r\n            var ns = schema.namespace;\r\n            if (schema.enumTypes) {\r\n                var enumTypes = schema.enumTypes.map(function (ct) { return _this.createEnumType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, enumTypes);\r\n            }\r\n            if (schema.complexTypes) {\r\n                var complexTypes = schema.complexTypes.map(function (ct) { return _this.createEntityType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, complexTypes);\r\n            }\r\n            if (schema.entityTypes) {\r\n                var entityTypes = schema.entityTypes.map(function (et) { return _this.createEntityType(et, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, entityTypes);\r\n            }\r\n            if (schema.actions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.actions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceAction'); }; }));\r\n            }\r\n            if (schema.functions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.functions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceFunction'); }; }));\r\n            }\r\n            if (schema.entityContainer) {\r\n                var contexts = schema.entityContainer.map(function (ctx) { return _this.createContextType(ctx, self.options.namespace || ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, contexts);\r\n            }\r\n        });\r\n        serviceMethods.forEach(function (m) { return m(typeDefinitions); });\r\n        types.src = '(function(mod) {\\n' +\r\n            '  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports, require(\"jaydata/core\")); // CommonJS\\n' +\r\n            '  if (typeof define == \"function\" && define.amd) return define([\"exports\"], mod); // AMD\\n' +\r\n            '  mod($data.generatedContext || ($data.generatedContext = {}), $data); // Plain browser env\\n' +\r\n            '})(function(exports, $data) {\\n\\n' +\r\n            'var types = {};\\n\\n';\r\n        types.push.apply(types, typeDefinitions.map(function (d) {\r\n            var srcPart = '';\r\n            if (d.baseType == self.$data.Enum) {\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = $data.createEnum(\"' + d.params[0] + '\", [\\n' +\r\n                    Object.keys(d.params[3]).map(function (dp) { return '  ' + JSON.stringify(d.params[3][dp]); }).join(',\\n') +\r\n                    '\\n]);\\n\\n';\r\n            }\r\n            else {\r\n                var typeName = _this.options.container.resolveName(d.baseType);\r\n                if (d.baseType == self.$data.EntityContext)\r\n                    srcPart += 'exports.type = ';\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = ' +\r\n                    (typeName == '$data.Entity' || typeName == '$data.EntityContext' ? typeName : 'types[\"' + typeName + '\"]') +\r\n                    '.extend(\"' + d.params[0] + '\", ';\r\n                if (d.params[2] && Object.keys(d.params[2]).length > 0)\r\n                    srcPart += '{\\n' + Object.keys(d.params[2]).map(function (dp) { return '  ' + dp + ': ' + JSON.stringify(d.params[2][dp]); }).join(',\\n') + '\\n}';\r\n                else\r\n                    srcPart += 'null';\r\n                if (d.params[3] && Object.keys(d.params[3]).length > 0)\r\n                    srcPart += ', {\\n' + Object.keys(d.params[3]).map(function (dp) { return '  ' + dp + ': ' + JSON.stringify(d.params[3][dp]); }).join(',\\n') + '\\n}';\r\n                srcPart += ');\\n\\n';\r\n            }\r\n            types.src += srcPart;\r\n            if (_this.options.debug)\r\n                console.log('Type generated:', d.params[0]);\r\n            var baseType = _this.options.container.resolveType(d.baseType);\r\n            return baseType.extend.apply(baseType, d.params);\r\n        }));\r\n        types.src += 'var ctxType = exports.type;\\n' +\r\n            'exports.factory = function(config){\\n' +\r\n            '  if (ctxType){\\n' +\r\n            '    var cfg = $data.typeSystem.extend({\\n' +\r\n            '      name: \"oData\",\\n' +\r\n            '      oDataServiceHost: \"' + this.options.url.replace('/$metadata', '') + '\",\\n' +\r\n            '      withCredentials: ' + (this.options.withCredentials || false) + ',\\n' +\r\n            '      maxDataServiceVersion: \"' + (this.options.maxDataServiceVersion || '4.0') + '\"\\n' +\r\n            '    }, config);\\n' +\r\n            '    return new ctxType(cfg);\\n' +\r\n            '  }else{\\n' +\r\n            '    return null;\\n' +\r\n            '  }\\n' +\r\n            '};\\n\\n';\r\n        if (this.options.autoCreateContext) {\r\n            var contextName = typeof this.options.autoCreateContext == 'string' ? this.options.autoCreateContext : 'context';\r\n            types.src += 'exports[\"' + contextName + '\"] = exports.factory();\\n\\n';\r\n        }\r\n        types.src += '});';\r\n        return types;\r\n    };\r\n    return Metadata;\r\n}());\r\nexports.Metadata = Metadata;\r\n\n},{}],4:[function(_dereq_,module,exports){\n(function (global){\n\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar odata_metadata_1 = _dereq_('odata-metadata');\r\nvar metadata_1 = _dereq_('./metadata');\r\nvar odatajs = (typeof window !== \"undefined\" ? window['odatajs'] : typeof global !== \"undefined\" ? global['odatajs'] : null);\r\nvar extend = _dereq_('extend');\r\nvar MetadataHandler = (function () {\r\n    function MetadataHandler($data, options) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.prepareRequest = options.prepareRequest || function () { };\r\n        if (typeof odatajs === 'undefined' || typeof odatajs.oData === 'undefined') {\r\n            console.error('Not Found!:', 'odatajs is required');\r\n        }\r\n        else {\r\n            this.oData = odatajs.oData;\r\n        }\r\n    }\r\n    MetadataHandler.prototype.parse = function (text) {\r\n        var _this = this;\r\n        var edmMetadata = new odata_metadata_1.Edm.Edmx(this.oData.metadata.metadataParser(null, text));\r\n        var metadata = new metadata_1.Metadata(this.$data, this.options, edmMetadata);\r\n        var types = metadata.processMetadata();\r\n        var contextType = types.filter(function (t) { return t.isAssignableTo(_this.$data.EntityContext); })[0];\r\n        var factory = this._createFactoryFunc(contextType);\r\n        factory.type = contextType;\r\n        factory.src = types.src;\r\n        return factory;\r\n    };\r\n    MetadataHandler.prototype.load = function () {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var serviceUrl = self.options.url.replace('/$metadata', '');\r\n            var metadataUrl = serviceUrl.replace(/\\/+$/, '') + '/$metadata';\r\n            self.options.serivceUri = serviceUrl;\r\n            var requestData = [\r\n                {\r\n                    requestUri: metadataUrl,\r\n                    method: self.options.method || \"GET\",\r\n                    headers: self.options.headers || {}\r\n                },\r\n                function (data) {\r\n                    var edmMetadata = new odata_metadata_1.Edm.Edmx(data);\r\n                    var metadata = new metadata_1.Metadata(self.$data, self.options, edmMetadata);\r\n                    var types = metadata.processMetadata();\r\n                    var contextType = types.filter(function (t) { return t.isAssignableTo(self.$data.EntityContext); })[0];\r\n                    var factory = self._createFactoryFunc(contextType);\r\n                    factory.type = contextType;\r\n                    factory.src = types.src;\r\n                    resolve(factory);\r\n                },\r\n                reject,\r\n                self.oData.metadataHandler\r\n            ];\r\n            self._appendBasicAuth(requestData[0], self.options.user, self.options.password, self.options.withCredentials);\r\n            self.prepareRequest.call(self, requestData);\r\n            self.oData.request.apply(self.oData, requestData);\r\n        });\r\n    };\r\n    MetadataHandler.prototype._createFactoryFunc = function (ctxType) {\r\n        var _this = this;\r\n        return function (config) {\r\n            if (ctxType) {\r\n                var cfg = extend({\r\n                    name: 'oData',\r\n                    oDataServiceHost: _this.options.url.replace('/$metadata', ''),\r\n                    user: _this.options.user,\r\n                    password: _this.options.password,\r\n                    withCredentials: _this.options.withCredentials,\r\n                    maxDataServiceVersion: _this.options.maxDataServiceVersion || '4.0'\r\n                }, config);\r\n                return new ctxType(cfg);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n    };\r\n    MetadataHandler.prototype._appendBasicAuth = function (request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n        }\r\n        if (withCredentials) {\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    };\r\n    MetadataHandler.prototype.__encodeBase64 = function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n            \"QRSTUVWXYZabcdef\" +\r\n            \"ghijklmnopqrstuv\" +\r\n            \"wxyz0123456789+/\" +\r\n            \"=\";\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            }\r\n            else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n            base64 = base64 +\r\n                b64array.charAt(enc1) +\r\n                b64array.charAt(enc2) +\r\n                b64array.charAt(enc3) +\r\n                b64array.charAt(enc4);\r\n        } while (i < input.length);\r\n        return base64;\r\n    };\r\n    return MetadataHandler;\r\n}());\r\nexports.MetadataHandler = MetadataHandler;\r\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./metadata\":3,\"extend\":6,\"odata-metadata\":12}],5:[function(_dereq_,module,exports){\n\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = _dereq_('extend');\r\nvar metadataHandler_1 = _dereq_('./metadataHandler');\r\nvar jaydata_error_handler_1 = _dereq_('jaydata-error-handler');\r\nvar jaydata_promise_handler_1 = _dereq_('jaydata-promise-handler');\r\nvar metadataHandler_2 = _dereq_('./metadataHandler');\r\nexports.MetadataHandler = metadataHandler_2.MetadataHandler;\r\nvar ServiceParams = (function () {\r\n    function ServiceParams() {\r\n        this.config = {};\r\n    }\r\n    return ServiceParams;\r\n}());\r\nexports.ServiceParams = ServiceParams;\r\nvar DynamicMetadata = (function () {\r\n    function DynamicMetadata($data) {\r\n        this.$data = $data;\r\n    }\r\n    DynamicMetadata.prototype.service = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        var self = this;\r\n        new metadataHandler_1.MetadataHandler(this.$data, params.config).load().then(function (factory) {\r\n            var type = factory.type;\r\n            //register to local store\r\n            var storeAlias = params.config.serviceName || params.config.storeAlias;\r\n            if (storeAlias && 'addStore' in self.$data) {\r\n                self.$data.addStore(storeAlias, factory, params.config.isDefault === undefined || params.config.isDefault);\r\n            }\r\n            _callback.success(factory, type);\r\n        }, function (err) {\r\n            _callback.error(err);\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.prototype.initService = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        this.service(params.config.url, params.config, {\r\n            success: function (factory) {\r\n                var ctx = factory();\r\n                if (ctx) {\r\n                    return ctx.onReady(_callback);\r\n                }\r\n                return _callback.error(new jaydata_error_handler_1.Exception(\"Missing Context Type\"));\r\n            },\r\n            error: _callback.error\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.use = function ($data) {\r\n        var dynamicMetadata = new DynamicMetadata($data);\r\n        $data.service = dynamicMetadata.service;\r\n        $data.initService = dynamicMetadata.initService;\r\n    };\r\n    DynamicMetadata.getParam = function (paramValue, params) {\r\n        switch (typeof paramValue) {\r\n            case 'object':\r\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\r\n                    params.callback = paramValue;\r\n                }\r\n                else {\r\n                    params.config = paramValue;\r\n                }\r\n                break;\r\n            case 'function':\r\n                params.callback = paramValue;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    return DynamicMetadata;\r\n}());\r\nexports.DynamicMetadata = DynamicMetadata;\r\n\n},{\"./metadataHandler\":4,\"extend\":6,\"jaydata-error-handler\":7,\"jaydata-promise-handler\":8}],6:[function(_dereq_,module,exports){\n'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n},{}],7:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Exception = (function (_super) {\r\n    __extends(Exception, _super);\r\n    function Exception(message, name, data) {\r\n        _super.call(this);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, this.constructor);\r\n        }\r\n        this.name = name || \"Exception\";\r\n        this.message = message;\r\n        this.data = data;\r\n    }\r\n    Exception.prototype._getStackTrace = function () { };\r\n    return Exception;\r\n}(Error));\r\nexports.Exception = Exception;\r\nvar Guard = (function () {\r\n    function Guard() {\r\n    }\r\n    Guard.requireValue = function (name, value) {\r\n        if (typeof value === 'undefined' || value === null) {\r\n            Guard.raise(name + \" requires a value other than undefined or null\");\r\n        }\r\n    };\r\n    Guard.requireType = function (name, value, typeOrTypes) {\r\n        var types = typeOrTypes instanceof Array ? typeOrTypes : [typeOrTypes];\r\n        return types.some(function (item) {\r\n            switch (typeof item) {\r\n                case \"string\":\r\n                    return typeof value === item;\r\n                case \"function\":\r\n                    return value instanceof item;\r\n                default:\r\n                    Guard.raise(\"Unknown type format : \" + typeof item + \" for: \" + name);\r\n            }\r\n        });\r\n    };\r\n    Guard.raise = function (exception) {\r\n        if (typeof exports.intellisense === 'undefined') {\r\n            if (exception instanceof Exception) {\r\n                console.error(exception.name + ':', exception.message + '\\n', exception);\r\n            }\r\n            else {\r\n                console.error(exception);\r\n            }\r\n            throw exception;\r\n        }\r\n    };\r\n    Guard.isNullOrUndefined = function (value) {\r\n        return value === undefined || value === null;\r\n    };\r\n    return Guard;\r\n}());\r\nexports.Guard = Guard;\r\n\n},{}],8:[function(_dereq_,module,exports){\n\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = _dereq_('extend');\r\nvar promiseHandlerBase_1 = _dereq_('./promiseHandlerBase');\r\nvar PromiseHandler = (function (_super) {\r\n    __extends(PromiseHandler, _super);\r\n    function PromiseHandler() {\r\n        _super.call(this);\r\n        var self = this;\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.resolve = resolve;\r\n            self.reject = reject;\r\n        });\r\n        this.deferred = {\r\n            resolve: function () { self.resolve.apply(promise, arguments); },\r\n            reject: function () { self.reject.apply(promise, arguments); },\r\n            promise: promise\r\n        };\r\n    }\r\n    PromiseHandler.prototype.createCallback = function (callback) {\r\n        var settings = promiseHandlerBase_1.PromiseHandlerBase.createCallbackSettings(callback);\r\n        var self = this;\r\n        var result = new promiseHandlerBase_1.CallbackSettings();\r\n        result = extend(result, {\r\n            success: function () {\r\n                settings.success.apply(self.deferred, arguments);\r\n                self.resolve.apply(self.deferred, arguments);\r\n            },\r\n            error: function () {\r\n                Array.prototype.push.call(arguments, self.deferred);\r\n                settings.error.apply(self.deferred, arguments);\r\n            },\r\n            notify: function () {\r\n                settings.notify.apply(self.deferred, arguments);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    PromiseHandler.prototype.getPromise = function () {\r\n        return this.deferred.promise;\r\n    };\r\n    PromiseHandler.compatibilityMode = function () {\r\n        Promise.prototype['fail'] = function (onReject) {\r\n            return this.then(null, function (reason) {\r\n                onReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n        Promise.prototype['always'] = function (onResolveOrReject) {\r\n            return this.then(onResolveOrReject, function (reason) {\r\n                onResolveOrReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n    };\r\n    PromiseHandler.use = function ($data) {\r\n        $data.PromiseHandler = typeof Promise == 'function' ? PromiseHandler : promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.PromiseHandlerBase = promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.Promise = promiseHandlerBase_1.PromiseNotImplemented;\r\n    };\r\n    return PromiseHandler;\r\n}(promiseHandlerBase_1.PromiseHandlerBase));\r\nexports.PromiseHandler = PromiseHandler;\r\n\n},{\"./promiseHandlerBase\":9,\"extend\":10}],9:[function(_dereq_,module,exports){\n\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = _dereq_('extend');\r\nvar jaydata_error_handler_1 = _dereq_('jaydata-error-handler');\r\nvar CallbackSettings = (function () {\r\n    function CallbackSettings() {\r\n    }\r\n    return CallbackSettings;\r\n}());\r\nexports.CallbackSettings = CallbackSettings;\r\nvar PromiseNotImplemented = (function () {\r\n    function PromiseNotImplemented() {\r\n    }\r\n    PromiseNotImplemented.prototype.always = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.always', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.done = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.done', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.fail = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.fail', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isRejected = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isRejected', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isResolved = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isResolved', 'Not implemented!')); };\r\n    //notify() { Guard.raise(new Exception('$data.Promise.notify', 'Not implemented!')); }\r\n    //notifyWith() { Guard.raise(new Exception('$data.Promise.notifyWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.pipe = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.pipe', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.progress = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.progress', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.promise = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.promise', 'Not implemented!')); };\r\n    //reject() { Guard.raise(new Exception('$data.Promise.reject', 'Not implemented!')); }\r\n    //rejectWith() { Guard.raise(new Exception('$data.Promise.rejectWith', 'Not implemented!')); }\r\n    //resolve() { Guard.raise(new Exception('$data.Promise.resolve', 'Not implemented!')); }\r\n    //resolveWith() { Guard.raise(new Exception('$data.Promise.resolveWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.state = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.state', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.then = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.then', 'Not implemented!')); };\r\n    return PromiseNotImplemented;\r\n}());\r\nexports.PromiseNotImplemented = PromiseNotImplemented;\r\nvar PromiseHandlerBase = (function () {\r\n    function PromiseHandlerBase() {\r\n    }\r\n    PromiseHandlerBase.defaultSuccessCallback = function () { };\r\n    PromiseHandlerBase.defaultNotifyCallback = function () { };\r\n    PromiseHandlerBase.defaultErrorCallback = function () {\r\n        if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n            (console.error || console.log).call(console, arguments[0]);\r\n            arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n        }\r\n        else {\r\n            if (arguments[0] instanceof Error) {\r\n                console.error(arguments[0]);\r\n            }\r\n            else {\r\n                console.error(\"DefaultError:\", \"DEFAULT ERROR CALLBACK!\", arguments);\r\n            }\r\n        }\r\n    };\r\n    PromiseHandlerBase.createCallbackSettings = function (callback, defaultSettings) {\r\n        var settings = defaultSettings || {\r\n            success: PromiseHandlerBase.defaultSuccessCallback,\r\n            error: PromiseHandlerBase.defaultErrorCallback,\r\n            notify: PromiseHandlerBase.defaultNotifyCallback\r\n        };\r\n        var result = new CallbackSettings();\r\n        if (callback == null || callback == undefined) {\r\n            result = settings;\r\n        }\r\n        else if (typeof callback == 'function') {\r\n            result = extend(settings, {\r\n                success: callback\r\n            });\r\n        }\r\n        else {\r\n            result = extend(settings, callback);\r\n        }\r\n        var wrapCode = function (fn) {\r\n            var t = this;\r\n            function r() {\r\n                fn.apply(t, arguments);\r\n                fn = function () { };\r\n            }\r\n            return r;\r\n        };\r\n        if (typeof result.error === 'function')\r\n            result.error = wrapCode(result.error);\r\n        return result;\r\n    };\r\n    PromiseHandlerBase.prototype.createCallback = function (callback) {\r\n        return PromiseHandlerBase.createCallbackSettings(callback);\r\n    };\r\n    PromiseHandlerBase.prototype.getPromise = function () {\r\n        return new PromiseNotImplemented();\r\n    };\r\n    return PromiseHandlerBase;\r\n}());\r\nexports.PromiseHandlerBase = PromiseHandlerBase;\r\n\n},{\"extend\":10,\"jaydata-error-handler\":11}],10:[function(_dereq_,module,exports){\narguments[4][6][0].apply(exports,arguments)\n},{\"dup\":6}],11:[function(_dereq_,module,exports){\narguments[4][7][0].apply(exports,arguments)\n},{\"dup\":7}],12:[function(_dereq_,module,exports){\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar metacode = _dereq_('./metacode');\r\nvar Edm;\r\n(function (Edm) {\r\n    var PrimitiveType = (function () {\r\n        function PrimitiveType(className) {\r\n            this.className = className;\r\n        }\r\n        PrimitiveType.prototype.toString = function () { return this.className; };\r\n        return PrimitiveType;\r\n    })();\r\n    Edm.PrimitiveType = PrimitiveType;\r\n    Edm.Binary = new PrimitiveType('Edm.Binary');\r\n    Edm.Boolean = new PrimitiveType('Edm.Boolean');\r\n    Edm.Byte = new PrimitiveType('Edm.Byte');\r\n    Edm.Date = new PrimitiveType('Edm.Date');\r\n    Edm.DateTimeOffset = new PrimitiveType('Edm.DateTimeOffset');\r\n    Edm.Decimal = new PrimitiveType('Edm.Decimal');\r\n    Edm.Double = new PrimitiveType('Edm.Double');\r\n    Edm.Duration = new PrimitiveType('Edm.Duration');\r\n    Edm.Guid = new PrimitiveType('Edm.Guid');\r\n    Edm.Int16 = new PrimitiveType('Edm.Int16');\r\n    Edm.Int32 = new PrimitiveType('Edm.Int32');\r\n    Edm.Int64 = new PrimitiveType('Edm.Int64');\r\n    Edm.SByte = new PrimitiveType('Edm.SByte');\r\n    Edm.Single = new PrimitiveType('Edm.Single');\r\n    Edm.Stream = new PrimitiveType('Edm.Stream');\r\n    Edm.String = new PrimitiveType('Edm.String');\r\n    Edm.TimeOfDay = new PrimitiveType('Edm.TimeOfDay');\r\n    Edm.Geography = new PrimitiveType('Edm.Geography');\r\n    Edm.GeographyPoint = new PrimitiveType('Edm.GeographyPoint');\r\n    Edm.GeographyLineString = new PrimitiveType('Edm.GeographyLineString');\r\n    Edm.GeographyPolygon = new PrimitiveType('Edm.GeographyPolygon');\r\n    Edm.GeographyMultiPoint = new PrimitiveType('Edm.GeographyMultiPoint');\r\n    Edm.GeographyMultiLineString = new PrimitiveType('Edm.GeographyMultiLineString');\r\n    Edm.GeographyMultiPolygon = new PrimitiveType('Edm.GeographyMultiPolygon');\r\n    Edm.GeographyCollection = new PrimitiveType('Edm.GeographyCollection');\r\n    Edm.Geometry = new PrimitiveType('Edm.Geometry');\r\n    Edm.GeometryPoint = new PrimitiveType('Edm.GeometryPoint');\r\n    Edm.GeometryLineString = new PrimitiveType('Edm.GeometryLineString');\r\n    Edm.GeometryPolygon = new PrimitiveType('Edm.GeometryPolygon');\r\n    Edm.GeometryMultiPoint = new PrimitiveType('Edm.GeometryMultiPoint');\r\n    Edm.GeometryMultiLineString = new PrimitiveType('Edm.GeometryMultiLineString');\r\n    Edm.GeometryMultiPolygon = new PrimitiveType('Edm.GeometryMultiPolygon');\r\n    Edm.GeometryCollection = new PrimitiveType('Edm.GeometryCollection');\r\n    var MemberAttribute = metacode.MemberAttribute;\r\n    var parse = metacode.parse;\r\n    var required = metacode.required;\r\n    var defaultValue = metacode.defaultValue;\r\n    var parseAs = metacode.parseAs;\r\n    var AttributeFunctionChain = metacode.AttributeFunctionChain;\r\n    var mapArray = function (sourceField, factory) { return new metacode.AttributeFunctionChain(function (d, i) { return d[sourceField]; }, function (props, i) { return Array.isArray(props) ? props : (props ? [props] : []); }, function (props, i) { return props.map(function (prop) { return factory(prop, i); }); }); };\r\n    var EdmItemBase = (function () {\r\n        function EdmItemBase(definition, parent) {\r\n            this.parent = parent;\r\n            definition && this.loadFrom(definition);\r\n        }\r\n        EdmItemBase.prototype.loadFrom = function (definition) {\r\n            var _this = this;\r\n            var proto = Object.getPrototypeOf(this);\r\n            MemberAttribute.getMembers(proto).forEach(function (membername) {\r\n                var parser = MemberAttribute.getAttributeValue(proto, membername, \"serialize\");\r\n                var v = parser.invoke(definition, _this);\r\n                _this[membername] = v;\r\n            });\r\n        };\r\n        return EdmItemBase;\r\n    })();\r\n    Edm.EdmItemBase = EdmItemBase;\r\n    var Property = (function (_super) {\r\n        __extends(Property, _super);\r\n        function Property() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"defaultValue\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"concurrencyMode\", void 0);\r\n        return Property;\r\n    })(EdmItemBase);\r\n    Edm.Property = Property;\r\n    var NavigationProperty = (function (_super) {\r\n        __extends(NavigationProperty, _super);\r\n        function NavigationProperty() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"partner\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"containsTarget\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"referentialConstraint\", function (prop, i) { return new ReferentialConstraint(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"referentialConstraints\", void 0);\r\n        return NavigationProperty;\r\n    })(EdmItemBase);\r\n    Edm.NavigationProperty = NavigationProperty;\r\n    var ReferentialConstraint = (function (_super) {\r\n        __extends(ReferentialConstraint, _super);\r\n        function ReferentialConstraint() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"property\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"referencedProperty\", void 0);\r\n        return ReferentialConstraint;\r\n    })(EdmItemBase);\r\n    Edm.ReferentialConstraint = ReferentialConstraint;\r\n    var PropertyRef = (function (_super) {\r\n        __extends(PropertyRef, _super);\r\n        function PropertyRef() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"alias\", void 0);\r\n        return PropertyRef;\r\n    })(EdmItemBase);\r\n    Edm.PropertyRef = PropertyRef;\r\n    var Key = (function (_super) {\r\n        __extends(Key, _super);\r\n        function Key() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"propertyRef\", function (prop, i) { return new PropertyRef(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Key.prototype, \"propertyRefs\", void 0);\r\n        return Key;\r\n    })(EdmItemBase);\r\n    Edm.Key = Key;\r\n    var EntityType = (function (_super) {\r\n        __extends(EntityType, _super);\r\n        function EntityType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.key; }, function (props, i) { return props || []; }, function (props, i) { return props.map(function (prop) { return new Key(prop, i); }); }, function (props) { return props[0]; })), \r\n            __metadata('design:type', Key)\r\n        ], EntityType.prototype, \"key\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"navigationProperties\", void 0);\r\n        return EntityType;\r\n    })(EdmItemBase);\r\n    Edm.EntityType = EntityType;\r\n    var ComplexType = (function (_super) {\r\n        __extends(ComplexType, _super);\r\n        function ComplexType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"navigationProperties\", void 0);\r\n        return ComplexType;\r\n    })(EdmItemBase);\r\n    Edm.ComplexType = ComplexType;\r\n    var Parameter = (function (_super) {\r\n        __extends(Parameter, _super);\r\n        function Parameter() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"SRID\", void 0);\r\n        return Parameter;\r\n    })(EdmItemBase);\r\n    Edm.Parameter = Parameter;\r\n    var ReturnType = (function (_super) {\r\n        __extends(ReturnType, _super);\r\n        function ReturnType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReturnType.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], ReturnType.prototype, \"nullable\", void 0);\r\n        return ReturnType;\r\n    })(EdmItemBase);\r\n    Edm.ReturnType = ReturnType;\r\n    var Invokable = (function (_super) {\r\n        __extends(Invokable, _super);\r\n        function Invokable() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        return Invokable;\r\n    })(EdmItemBase);\r\n    Edm.Invokable = Invokable;\r\n    var Action = (function (_super) {\r\n        __extends(Action, _super);\r\n        function Action() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Action.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Action.prototype, \"returnType\", void 0);\r\n        return Action;\r\n    })(Invokable);\r\n    Edm.Action = Action;\r\n    var Function = (function (_super) {\r\n        __extends(Function, _super);\r\n        function Function() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Function.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isComposable\", void 0);\r\n        return Function;\r\n    })(Invokable);\r\n    Edm.Function = Function;\r\n    var Member = (function (_super) {\r\n        __extends(Member, _super);\r\n        function Member() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Member.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Member.prototype, \"value\", void 0);\r\n        return Member;\r\n    })(EdmItemBase);\r\n    Edm.Member = Member;\r\n    var EnumType = (function (_super) {\r\n        __extends(EnumType, _super);\r\n        function EnumType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(Edm.Int32), \r\n            __metadata('design:type', PrimitiveType)\r\n        ], EnumType.prototype, \"underlyingType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EnumType.prototype, \"isFlags\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"member\", function (prop, i) { return new Member(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"members\", void 0);\r\n        return EnumType;\r\n    })(EdmItemBase);\r\n    Edm.EnumType = EnumType;\r\n    var EntitySet = (function (_super) {\r\n        __extends(EntitySet, _super);\r\n        function EntitySet() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"entityType\", void 0);\r\n        return EntitySet;\r\n    })(EdmItemBase);\r\n    Edm.EntitySet = EntitySet;\r\n    var ActionImport = (function (_super) {\r\n        __extends(ActionImport, _super);\r\n        function ActionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"action\", void 0);\r\n        return ActionImport;\r\n    })(EdmItemBase);\r\n    Edm.ActionImport = ActionImport;\r\n    var FunctionImport = (function (_super) {\r\n        __extends(FunctionImport, _super);\r\n        function FunctionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"function\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(false), \r\n            __metadata('design:type', Boolean)\r\n        ], FunctionImport.prototype, \"includeInServiceDocument\", void 0);\r\n        return FunctionImport;\r\n    })(EdmItemBase);\r\n    Edm.FunctionImport = FunctionImport;\r\n    var EntityContainer = (function (_super) {\r\n        __extends(EntityContainer, _super);\r\n        function EntityContainer() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityContainer.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entitySet\", function (prop, i) { return new EntitySet(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"entitySets\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"actionImport\", function (prop, i) { return new ActionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"actionImports\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"functionImport\", function (prop, i) { return new FunctionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"functionImports\", void 0);\r\n        return EntityContainer;\r\n    })(EdmItemBase);\r\n    Edm.EntityContainer = EntityContainer;\r\n    var Schema = (function (_super) {\r\n        __extends(Schema, _super);\r\n        function Schema() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"alias\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"enumType\", function (prop, i) { return new EnumType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"enumTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"complexType\", function (prop, i) { return new ComplexType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"complexTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityType\", function (prop, i) { return new EntityType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"action\", function (prop, i) { return new Action(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"actions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"function\", function (prop, i) { return new Edm.Function(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"functions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityContainer\", function (prop, i) { return new Edm.EntityContainer(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityContainer\", void 0);\r\n        return Schema;\r\n    })(EdmItemBase);\r\n    Edm.Schema = Schema;\r\n    var DataServices = (function (_super) {\r\n        __extends(DataServices, _super);\r\n        function DataServices() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"schema\", function (prop, i) { return new Schema(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], DataServices.prototype, \"schemas\", void 0);\r\n        return DataServices;\r\n    })(EdmItemBase);\r\n    Edm.DataServices = DataServices;\r\n    var Edmx = (function (_super) {\r\n        __extends(Edmx, _super);\r\n        function Edmx() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (edm) { return new Edm.DataServices(edm.dataServices); })), \r\n            __metadata('design:type', Array)\r\n        ], Edmx.prototype, \"dataServices\", void 0);\r\n        return Edmx;\r\n    })(EdmItemBase);\r\n    Edm.Edmx = Edmx;\r\n})(Edm = exports.Edm || (exports.Edm = {}));\r\n\n},{\"./metacode\":13}],13:[function(_dereq_,module,exports){\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../node_modules/reflect-metadata/reflect-metadata.d.ts\" />\r\n_dereq_('reflect-metadata');\r\nfunction isFunction(o) {\r\n    return \"function\" === typeof o;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === undefined;\r\n}\r\nvar MemberAttribute = (function () {\r\n    function MemberAttribute(attributeName) {\r\n        this.attributeName = attributeName;\r\n    }\r\n    MemberAttribute.prototype.registerMember = function (target, key) {\r\n        var md = (Reflect.getMetadata(\"members\", target) || []);\r\n        if (md.indexOf(key) < 0) {\r\n            md.push(key);\r\n        }\r\n        Reflect.defineMetadata(\"members\", md, target);\r\n    };\r\n    MemberAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        return presentedValue;\r\n    };\r\n    MemberAttribute.prototype.decorate = function (value) {\r\n        var _this = this;\r\n        return function (target, key, descriptor) {\r\n            _this.registerMember(target, key);\r\n            var decoratorValue = _this.getDecoratorValue(target, key, value);\r\n            //console.log(\"decorator runs\",key, this.attributeName, decoratorValue, value)\r\n            Reflect.defineMetadata(_this.attributeName, decoratorValue, target, key);\r\n        };\r\n    };\r\n    Object.defineProperty(MemberAttribute.prototype, \"decorator\", {\r\n        get: function () {\r\n            return this.decorate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MemberAttribute.prototype.isApplied = function (instance, memberName) {\r\n        return Reflect.getMetadataKeys(Object.getPrototypeOf(instance), memberName).indexOf(this.attributeName) > -1;\r\n    };\r\n    MemberAttribute.getMembers = function (target) {\r\n        return Reflect.getMetadata(\"members\", isFunction(target) ? target.prototype : target);\r\n    };\r\n    MemberAttribute.getAttributeNames = function (target, memberName) {\r\n        return Reflect.getMetadataKeys(target, memberName);\r\n    };\r\n    MemberAttribute.getAttributeValue = function (target, memberName, attributeName) {\r\n        return Reflect.getMetadata(attributeName, target, memberName);\r\n    };\r\n    return MemberAttribute;\r\n})();\r\nexports.MemberAttribute = MemberAttribute;\r\nvar AttributeFunctionChain = (function () {\r\n    function AttributeFunctionChain() {\r\n        var steps = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            steps[_i - 0] = arguments[_i];\r\n        }\r\n        this.steps = [];\r\n        this.steps = steps;\r\n    }\r\n    AttributeFunctionChain.prototype.invoke = function (definition, instance) {\r\n        var result = definition;\r\n        this.steps.forEach(function (fn) {\r\n            result = fn(result, instance);\r\n        });\r\n        return result;\r\n    };\r\n    return AttributeFunctionChain;\r\n})();\r\nexports.AttributeFunctionChain = AttributeFunctionChain;\r\nvar ParseAttribute = (function (_super) {\r\n    __extends(ParseAttribute, _super);\r\n    function ParseAttribute() {\r\n        _super.call(this, \"serialize\");\r\n    }\r\n    ParseAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        if (!isUndefined(presentedValue)) {\r\n            return presentedValue;\r\n        }\r\n        return new AttributeFunctionChain(function (d) { return d[key]; });\r\n    };\r\n    return ParseAttribute;\r\n})(MemberAttribute);\r\nexports.ParseAttribute = ParseAttribute;\r\nexports.required = new MemberAttribute(\"required\").decorate(true);\r\nexports.defaultValueAttribute = new MemberAttribute(\"defaultValue\");\r\nexports.defaultValue = exports.defaultValueAttribute.decorate.bind(exports.defaultValueAttribute);\r\nexports.parseAttribute = new ParseAttribute();\r\nexports.parse = exports.parseAttribute.decorator;\r\nexports.parseAs = exports.parseAttribute.decorate.bind(exports.parseAttribute);\r\nexports.typeArgument = new MemberAttribute(\"typeArgument\");\r\n\n},{\"reflect-metadata\":15}],14:[function(_dereq_,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],15:[function(_dereq_,module,exports){\n(function (global){\n/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\nvar Reflect;\r\n(function (Reflect) {\r\n    \"use strict\";\r\n    // Load global or shim versions of Map, Set, and WeakMap\r\n    var functionPrototype = Object.getPrototypeOf(Function);\r\n    var _Map = typeof Map === \"function\" ? Map : CreateMapPolyfill();\r\n    var _Set = typeof Set === \"function\" ? Set : CreateSetPolyfill();\r\n    var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\r\n    // [[Metadata]] internal slot\r\n    var __Metadata__ = new _WeakMap();\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param targetKey (Optional) The property key to decorate.\r\n      * @param targetDescriptor (Optional) The property descriptor for the target key\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     C = Reflect.decorate(decoratorsArray, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(C, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, C, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(C, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(C.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, C.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(C.prototype, \"method\")));\r\n      *\r\n      */\r\n    function decorate(decorators, target, targetKey, targetDescriptor) {\r\n        if (!IsUndefined(targetDescriptor)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (IsUndefined(targetKey)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(targetDescriptor)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);\r\n        }\r\n        else {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsConstructor(target)) {\r\n                throw new TypeError();\r\n            }\r\n            return DecorateConstructor(decorators, target);\r\n        }\r\n    }\r\n    Reflect.decorate = decorate;\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class C {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    function metadata(metadataKey, metadataValue) {\r\n        function decorator(target, targetKey) {\r\n            if (!IsUndefined(targetKey)) {\r\n                if (!IsObject(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                targetKey = ToPropertyKey(targetKey);\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n            }\r\n            else {\r\n                if (!IsConstructor(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);\r\n            }\r\n        }\r\n        return decorator;\r\n    }\r\n    Reflect.metadata = metadata;\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): Decorator {\r\n      *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    function defineMetadata(metadataKey, metadataValue, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n    }\r\n    Reflect.defineMetadata = defineMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasMetadata = hasMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasOwnMetadata = hasOwnMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getMetadata = getMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadata = getOwnMetadata;\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getMetadataKeys = getMetadataKeys;\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryOwnMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function deleteMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        if (IsUndefined(metadataMap)) {\r\n            return false;\r\n        }\r\n        if (!metadataMap.delete(metadataKey)) {\r\n            return false;\r\n        }\r\n        if (metadataMap.size > 0) {\r\n            return true;\r\n        }\r\n        var targetMetadata = __Metadata__.get(target);\r\n        targetMetadata.delete(targetKey);\r\n        if (targetMetadata.size > 0) {\r\n            return true;\r\n        }\r\n        __Metadata__.delete(target);\r\n        return true;\r\n    }\r\n    Reflect.deleteMetadata = deleteMetadata;\r\n    function DecorateConstructor(decorators, target) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsConstructor(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                target = decorated;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target, propertyKey, descriptor);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsObject(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                descriptor = decorated;\r\n            }\r\n        }\r\n        return descriptor;\r\n    }\r\n    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            decorator(target, propertyKey);\r\n        }\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-\r\n    function GetOrCreateMetadataMap(target, targetKey, create) {\r\n        var targetMetadata = __Metadata__.get(target);\r\n        if (!targetMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            targetMetadata = new _Map();\r\n            __Metadata__.set(target, targetMetadata);\r\n        }\r\n        var keyMetadata = targetMetadata.get(targetKey);\r\n        if (!keyMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            keyMetadata = new _Map();\r\n            targetMetadata.set(targetKey, keyMetadata);\r\n        }\r\n        return keyMetadata;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-\r\n    function OrdinaryHasMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return true;\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n        }\r\n        return false;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-\r\n    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return false;\r\n        }\r\n        return Boolean(metadataMap.has(MetadataKey));\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-\r\n    function OrdinaryGetMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n        }\r\n        return undefined;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-\r\n    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return undefined;\r\n        }\r\n        return metadataMap.get(MetadataKey);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-\r\n    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);\r\n        metadataMap.set(MetadataKey, MetadataValue);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-\r\n    function OrdinaryMetadataKeys(O, P) {\r\n        var ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent === null) {\r\n            return ownKeys;\r\n        }\r\n        var parentKeys = OrdinaryMetadataKeys(parent, P);\r\n        if (parentKeys.length <= 0) {\r\n            return ownKeys;\r\n        }\r\n        if (ownKeys.length <= 0) {\r\n            return parentKeys;\r\n        }\r\n        var set = new _Set();\r\n        var keys = [];\r\n        for (var _i = 0; _i < ownKeys.length; _i++) {\r\n            var key = ownKeys[_i];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        for (var _a = 0; _a < parentKeys.length; _a++) {\r\n            var key = parentKeys[_a];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-\r\n    function OrdinaryOwnMetadataKeys(target, targetKey) {\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        var keys = [];\r\n        if (metadataMap) {\r\n            metadataMap.forEach(function (_, key) { return keys.push(key); });\r\n        }\r\n        return keys;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type\r\n    function IsUndefined(x) {\r\n        return x === undefined;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray\r\n    function IsArray(x) {\r\n        return Array.isArray(x);\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type\r\n    function IsObject(x) {\r\n        return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor\r\n    function IsConstructor(x) {\r\n        return typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type\r\n    function IsSymbol(x) {\r\n        return typeof x === \"symbol\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey\r\n    function ToPropertyKey(value) {\r\n        if (IsSymbol(value)) {\r\n            return value;\r\n        }\r\n        return String(value);\r\n    }\r\n    function GetPrototypeOf(O) {\r\n        var proto = Object.getPrototypeOf(O);\r\n        if (typeof O !== \"function\" || O === functionPrototype) {\r\n            return proto;\r\n        }\r\n        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. \r\n        // Try to determine the superclass constructor. Compatible implementations\r\n        // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n        // or ensure each class has a valid `constructor` property on its prototype that\r\n        // points back to the constructor.\r\n        // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n        // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n        if (proto !== functionPrototype) {\r\n            return proto;\r\n        }\r\n        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n        var prototype = O.prototype;\r\n        var prototypeProto = Object.getPrototypeOf(prototype);\r\n        if (prototypeProto == null || prototypeProto === Object.prototype) {\r\n            return proto;\r\n        }\r\n        // if the constructor was not a function, then we cannot determine the heritage.\r\n        var constructor = prototypeProto.constructor;\r\n        if (typeof constructor !== \"function\") {\r\n            return proto;\r\n        }\r\n        // if we have some kind of self-reference, then we cannot determine the heritage.\r\n        if (constructor === O) {\r\n            return proto;\r\n        }\r\n        // we have a pretty good guess at the heritage.\r\n        return constructor;\r\n    }\r\n    // naive Map shim\r\n    function CreateMapPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Map() {\r\n            this._keys = [];\r\n            this._values = [];\r\n            this._cache = cacheSentinel;\r\n        }\r\n        Map.prototype = {\r\n            get size() {\r\n                return this._keys.length;\r\n            },\r\n            has: function (key) {\r\n                if (key === this._cache) {\r\n                    return true;\r\n                }\r\n                if (this._find(key) >= 0) {\r\n                    this._cache = key;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._cache = key;\r\n                    return this._values[index];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (key, value) {\r\n                this.delete(key);\r\n                this._keys.push(key);\r\n                this._values.push(value);\r\n                this._cache = key;\r\n                return this;\r\n            },\r\n            delete: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._keys.splice(index, 1);\r\n                    this._values.splice(index, 1);\r\n                    this._cache = cacheSentinel;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                this._keys.length = 0;\r\n                this._values.length = 0;\r\n                this._cache = cacheSentinel;\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                var size = this.size;\r\n                for (var i = 0; i < size; ++i) {\r\n                    var key = this._keys[i];\r\n                    var value = this._values[i];\r\n                    this._cache = key;\r\n                    callback.call(this, value, key, this);\r\n                }\r\n            },\r\n            _find: function (key) {\r\n                var keys = this._keys;\r\n                var size = keys.length;\r\n                for (var i = 0; i < size; ++i) {\r\n                    if (keys[i] === key) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            }\r\n        };\r\n        return Map;\r\n    }\r\n    // naive Set shim\r\n    function CreateSetPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Set() {\r\n            this._map = new _Map();\r\n        }\r\n        Set.prototype = {\r\n            get size() {\r\n                return this._map.length;\r\n            },\r\n            has: function (value) {\r\n                return this._map.has(value);\r\n            },\r\n            add: function (value) {\r\n                this._map.set(value, value);\r\n                return this;\r\n            },\r\n            delete: function (value) {\r\n                return this._map.delete(value);\r\n            },\r\n            clear: function () {\r\n                this._map.clear();\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                this._map.forEach(callback, thisArg);\r\n            }\r\n        };\r\n        return Set;\r\n    }\r\n    // naive WeakMap shim\r\n    function CreateWeakMapPolyfill() {\r\n        var UUID_SIZE = 16;\r\n        var isNode = typeof global !== \"undefined\" && Object.prototype.toString.call(global.process) === '[object process]';\r\n        var nodeCrypto = isNode && _dereq_(\"crypto\");\r\n        var hasOwn = Object.prototype.hasOwnProperty;\r\n        var keys = {};\r\n        var rootKey = CreateUniqueKey();\r\n        function WeakMap() {\r\n            this._key = CreateUniqueKey();\r\n        }\r\n        WeakMap.prototype = {\r\n            has: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return this._key in table;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return table[this._key];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (target, value) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ true);\r\n                table[this._key] = value;\r\n                return this;\r\n            },\r\n            delete: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table && this._key in table) {\r\n                    return delete table[this._key];\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                // NOTE: not a real clear, just makes the previous data unreachable\r\n                this._key = CreateUniqueKey();\r\n            }\r\n        };\r\n        function FillRandomBytes(buffer, size) {\r\n            for (var i = 0; i < size; ++i) {\r\n                buffer[i] = Math.random() * 255 | 0;\r\n            }\r\n        }\r\n        function GenRandomBytes(size) {\r\n            if (nodeCrypto) {\r\n                var data = nodeCrypto.randomBytes(size);\r\n                return data;\r\n            }\r\n            else if (typeof Uint8Array === \"function\") {\r\n                var data = new Uint8Array(size);\r\n                if (typeof crypto !== \"undefined\") {\r\n                    crypto.getRandomValues(data);\r\n                }\r\n                else if (typeof msCrypto !== \"undefined\") {\r\n                    msCrypto.getRandomValues(data);\r\n                }\r\n                else {\r\n                    FillRandomBytes(data, size);\r\n                }\r\n                return data;\r\n            }\r\n            else {\r\n                var data = new Array(size);\r\n                FillRandomBytes(data, size);\r\n                return data;\r\n            }\r\n        }\r\n        function CreateUUID() {\r\n            var data = GenRandomBytes(UUID_SIZE);\r\n            // mark as random - RFC 4122 § 4.4\r\n            data[6] = data[6] & 0x4f | 0x40;\r\n            data[8] = data[8] & 0xbf | 0x80;\r\n            var result = \"\";\r\n            for (var offset = 0; offset < UUID_SIZE; ++offset) {\r\n                var byte = data[offset];\r\n                if (offset === 4 || offset === 6 || offset === 8) {\r\n                    result += \"-\";\r\n                }\r\n                if (byte < 16) {\r\n                    result += \"0\";\r\n                }\r\n                result += byte.toString(16).toLowerCase();\r\n            }\r\n            return result;\r\n        }\r\n        function CreateUniqueKey() {\r\n            var key;\r\n            do {\r\n                key = \"@@WeakMap@@\" + CreateUUID();\r\n            } while (hasOwn.call(keys, key));\r\n            keys[key] = true;\r\n            return key;\r\n        }\r\n        function GetOrCreateWeakMapTable(target, create) {\r\n            if (!hasOwn.call(target, rootKey)) {\r\n                if (!create) {\r\n                    return undefined;\r\n                }\r\n                Object.defineProperty(target, rootKey, { value: Object.create(null) });\r\n            }\r\n            return target[rootKey];\r\n        }\r\n        return WeakMap;\r\n    }\r\n    // hook global Reflect\r\n    (function (__global) {\r\n        if (typeof __global.Reflect !== \"undefined\") {\r\n            if (__global.Reflect !== Reflect) {\r\n                for (var p in Reflect) {\r\n                    __global.Reflect[p] = Reflect[p];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            __global.Reflect = Reflect;\r\n        }\r\n    })(typeof window !== \"undefined\" ? window :\r\n        typeof WorkerGlobalScope !== \"undefined\" ? self :\r\n            typeof global !== \"undefined\" ? global :\r\n                Function(\"return this;\")());\r\n})(Reflect || (Reflect = {}));\r\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"crypto\":2}],16:[function(_dereq_,module,exports){\nmodule.exports={\r\n  \"name\": \"jaydata\",\r\n  \"description\": \"Cross-platform HTML5 data-management, JavaScript Language Query (JSLQ) support for OData, SQLite, WebSQL, IndexedDB, YQL and Facebook (packaged for Node.JS)\",\r\n  \"keywords\": [\r\n    \"HTML5 data management\",\r\n    \"JavaScript\",\r\n    \"JavaScript Language Query\",\r\n    \"JSLQ\",\r\n    \"OData\",\r\n    \"SQLite\",\r\n    \"WebSQL\",\r\n    \"IndexedDB\",\r\n    \"YQL\",\r\n    \"Facebook\",\r\n    \"cross-platform\",\r\n    \"iPhone\",\r\n    \"Android\"\r\n  ],\r\n  \"version\": \"1.5.1\",\r\n  \"homepage\": \"http://jaydata.org\",\r\n  \"author\": {\r\n    \"name\": \"JayData\",\r\n    \"url\": \"http://jaydata.org\"\r\n  },\r\n  \"dependencies\": {\r\n    \"acorn\": \"^3.0.2\",\r\n    \"atob\": \"^2.0.0\",\r\n    \"btoa\": \"^1.1.2\",\r\n    \"dot\": \"^1.0.3\",\r\n    \"jaydata-dynamic-metadata\": \"^0.0.5\",\r\n    \"jaydata-error-handler\": \"^0.0.1\",\r\n    \"jaydata-odatajs\": \"^4.0.0\",\r\n    \"jaydata-promise-handler\": \"^0.0.1\",\r\n    \"odata-metadata\": \"^0.1.0\",\r\n    \"xmldom\": \"^0.1.19\"\r\n  },\r\n  \"contributors\": [\r\n    {\r\n      \"name\": \"Dániel József\"\r\n    },\r\n    {\r\n      \"name\": \"Hajnalka Battancs\"\r\n    },\r\n    {\r\n      \"name\": \"János Roden\"\r\n    },\r\n    {\r\n      \"name\": \"László Horváth\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Zentai\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Nochta\"\r\n    },\r\n    {\r\n      \"name\": \"Róbert Bónay\"\r\n    },\r\n    {\r\n      \"name\": \"Szabolcs Czinege\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Borza\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Lázár\"\r\n    },\r\n    {\r\n      \"name\": \"Zoltán Gyebrovszki\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/jaydata/jaydata.git\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=0.6.0\"\r\n  },\r\n  \"license\": \"(MIT OR GPL-2.0)\",\r\n  \"devDependencies\": {\r\n    \"babel\": \"^6.1.18\",\r\n    \"babel-eslint\": \"^5.0.0-beta4\",\r\n    \"babel-plugin-add-module-exports\": \"^0.1.1\",\r\n    \"babel-preset-es2015\": \"^6.1.18\",\r\n    \"babel-register\": \"^6.2.0\",\r\n    \"babelify\": \"^7.2.0\",\r\n    \"browserify\": \"^12.0.1\",\r\n    \"browserify-derequire\": \"^0.9.4\",\r\n    \"browserify-shim\": \"^3.8.11\",\r\n    \"chai\": \"^3.4.1\",\r\n    \"del\": \"^2.2.0\",\r\n    \"google-closure-compiler\": \"^20151015.0.0\",\r\n    \"gulp\": \"^3.9.0\",\r\n    \"gulp-babel\": \"^6.1.1\",\r\n    \"gulp-browserify\": \"^0.5.1\",\r\n    \"gulp-closure-compiler\": \"^0.3.1\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-derequire\": \"^2.1.0\",\r\n    \"gulp-eslint\": \"^1.1.1\",\r\n    \"gulp-footer\": \"^1.0.5\",\r\n    \"gulp-header\": \"^1.7.1\",\r\n    \"gulp-nightwatch\": \"^0.2.6\",\r\n    \"gulp-nuget-pack\": \"0.0.6\",\r\n    \"gulp-rename\": \"^1.2.2\",\r\n    \"gulp-replace\": \"^0.5.4\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-uglify\": \"^1.5.1\",\r\n    \"gulp-vinyl-zip\": \"^1.1.2\",\r\n    \"gulp-webserver\": \"^0.9.1\",\r\n    \"istanbul\": \"^0.4.1\",\r\n    \"jaguarjs-jsdoc\": \"0.0.1\",\r\n    \"jsdoc\": \"^3.4.0\",\r\n    \"minimist\": \"^1.2.0\",\r\n    \"nightwatch\": \"^0.8.8\",\r\n    \"npm\": \"^3.5.2\",\r\n    \"selenium-standalone\": \"^4.7.2\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"^1.1.0\",\r\n    \"yargs\": \"^3.31.0\"\r\n  },\r\n  \"browserify-shim\": {\r\n    \"atob\": \"global:atob\",\r\n    \"btoa\": \"global:btoa\",\r\n    \"jquery\": \"global:jQuery\",\r\n    \"jaydata-odatajs\": \"global:odatajs\",\r\n    \"angular\": \"global:angular\",\r\n    \"Handlebars\": \"global:Handlebars\",\r\n    \"kendo\": \"global:kendo\",\r\n    \"ko\": \"global:ko\",\r\n    \"q\": \"global:Q\",\r\n    \"Ext\": \"global:Ext\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"mocha --compilers js:babel-register\"\r\n  }\r\n}\r\n\n},{}],17:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _jaydataDynamicMetadata = _dereq_('jaydata-dynamic-metadata');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.DynamicMetadata = _jaydataDynamicMetadata.DynamicMetadata;\nvar dynamicMetadata = new _jaydataDynamicMetadata.DynamicMetadata(_index2.default);\n_index2.default.service = dynamicMetadata.service.bind(dynamicMetadata);\n_index2.default.initService = dynamicMetadata.initService.bind(dynamicMetadata);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32,\"jaydata-dynamic-metadata\":5}],18:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContainerInstance = undefined;\nexports.ContainerCtor = ContainerCtor;\n\nvar _initializeJayData = _dereq_('./initializeJayData.js');\n\nvar _initializeJayData2 = _interopRequireDefault(_initializeJayData);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nvar _Extensions = _dereq_('./Extensions.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Container = new ContainerCtor();\n\nvar ContainerInstance = exports.ContainerInstance = Container;\n\nfunction ContainerCtor(parentContainer) {\n  var parent = parentContainer;\n  if (parent) {\n    parent.addChildContainer(this);\n  }\n\n  var classNames = {};\n  var consolidatedClassNames = [];\n  var classTypes = [];\n\n  this.classNames = classNames;\n  this.consolidatedClassNames = consolidatedClassNames;\n  this.classTypes = classTypes;\n\n  var mappedTo = [];\n  this.mappedTo = mappedTo;\n\n  var self = this;\n\n  this[\"holder\"] = null;\n\n  var IoC = function IoC(type, parameters) {\n    var t = self.resolveType(type);\n    var inst = Object.create(t.prototype);\n    t.apply(inst, parameters);\n    return inst;\n  };\n\n  var pendingResolutions = {};\n  this.pendingResolutions = pendingResolutions;\n\n  function addPendingResolution(name, onResolved) {\n    pendingResolutions[name] = pendingResolutions[name] || [];\n    pendingResolutions[name].push(onResolved);\n  }\n\n  this.addChildContainer = function (container) {\n    //children.push(container);\n  };\n\n  this.createInstance = function (type, parameters) {\n    return IoC(type, parameters);\n  };\n\n  this.mapType = function (aliasTypeOrName, realTypeOrName) {\n    _jaydataErrorHandler.Guard.requireValue(\"aliasType\", aliasTypeOrName);\n    _jaydataErrorHandler.Guard.requireValue(\"realType\", realTypeOrName);\n    var aliasT = this.getType(aliasTypeOrName);\n    var realT = this.getType(realTypeOrName);\n    var aliasPos = classTypes.indexOf(aliasT);\n    var realPos = classTypes.indexOf(realT);\n    mappedTo[aliasPos] = realPos;\n  },\n\n  //this.resolve = function (type, parameters) {\n  //    var classFunction = this.resolveType(type, parameters);\n  //    return new classFunction(parameters);\n  //};\n\n  this.isPrimitiveType = function (type) {\n    var t = this.resolveType(type);\n\n    switch (true) {\n      case t === Number:\n      case t === String:\n      case t === Date:\n      case t === Boolean:\n      case t === Array:\n      case t === Object:\n\n      case t === _initializeJayData2.default.Number:\n      case t === _initializeJayData2.default.Integer:\n      case t === _initializeJayData2.default.Date:\n      case t === _initializeJayData2.default.String:\n      case t === _initializeJayData2.default.Boolean:\n      case t === _initializeJayData2.default.Array:\n      case t === _initializeJayData2.default.Object:\n      case t === _initializeJayData2.default.Guid:\n\n      case t === _initializeJayData2.default.Byte:\n      case t === _initializeJayData2.default.SByte:\n      case t === _initializeJayData2.default.Decimal:\n      case t === _initializeJayData2.default.Float:\n      case t === _initializeJayData2.default.Int16:\n      case t === _initializeJayData2.default.Int32:\n      case t === _initializeJayData2.default.Int64:\n      case t === _initializeJayData2.default.DateTimeOffset:\n      case t === _initializeJayData2.default.Time:\n      case t === _initializeJayData2.default.Day:\n      case t === _initializeJayData2.default.Duration:\n\n      case t === _initializeJayData2.default.SimpleBase:\n      case t === _initializeJayData2.default.Geospatial:\n      case t === _initializeJayData2.default.GeographyBase:\n      case t === _initializeJayData2.default.GeographyPoint:\n      case t === _initializeJayData2.default.GeographyLineString:\n      case t === _initializeJayData2.default.GeographyPolygon:\n      case t === _initializeJayData2.default.GeographyMultiPoint:\n      case t === _initializeJayData2.default.GeographyMultiLineString:\n      case t === _initializeJayData2.default.GeographyMultiPolygon:\n      case t === _initializeJayData2.default.GeographyCollection:\n      case t === _initializeJayData2.default.GeometryBase:\n      case t === _initializeJayData2.default.GeometryPoint:\n      case t === _initializeJayData2.default.GeometryLineString:\n      case t === _initializeJayData2.default.GeometryPolygon:\n      case t === _initializeJayData2.default.GeometryMultiPoint:\n      case t === _initializeJayData2.default.GeometryMultiLineString:\n      case t === _initializeJayData2.default.GeometryMultiPolygon:\n      case t === _initializeJayData2.default.GeometryCollection:\n\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  this.resolveName = function (type) {\n    var t = this.resolveType(type);\n    var tPos = classTypes.indexOf(t);\n    return consolidatedClassNames[tPos];\n  };\n\n  this.resolveType = function (typeOrName, onResolved) {\n    var t = typeOrName;\n    t = this.getType(t, onResolved ? true : false, onResolved);\n    var posT = classTypes.indexOf(t);\n    return typeof mappedTo[posT] === 'undefined' ? t : classTypes[mappedTo[posT]];\n  };\n\n  this.getType = function (typeOrName, doNotThrow, onResolved) {\n    _jaydataErrorHandler.Guard.requireValue(\"typeOrName\", typeOrName);\n    if (typeof typeOrName === 'function') {\n      return typeOrName;\n    };\n\n    if (!(typeOrName in classNames)) {\n      if (parent) {\n        var tp = parent.getType(typeOrName, true);\n        if (tp) return tp;\n      }\n      if (onResolved) {\n        addPendingResolution(typeOrName, onResolved);\n        return;\n      } else if (doNotThrow) {\n        return undefined;\n      } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Unable to resolve type:\" + typeOrName));\n      }\n    };\n    var result = classTypes[classNames[typeOrName]];\n    if (onResolved) {\n      onResolved(result);\n    }\n    return result;\n  };\n\n  this.getName = function (typeOrName) {\n    var t = this.getType(typeOrName);\n    var tPos = classTypes.indexOf(t);\n    if (tPos == -1) _jaydataErrorHandler.Guard.raise(\"unknown type to request name for: \" + typeOrName);\n    return consolidatedClassNames[tPos];\n  };\n\n  this.getTypes = function () {\n    var keys = Object.keys(classNames);\n    var ret = [];\n    for (var i = 0; i < keys.length; i++) {\n      var className = keys[i];\n      ret.push({\n        name: className,\n        type: classTypes[classNames[className]],\n        toString: function toString() {\n          return this.name;\n        }\n      });\n    }\n    return ret;\n  };\n\n  //this.getTypeName( in type);\n  //this.resolveType()\n  //this.inferTypeFromValue = function (value) {\n\n  this.getTypeName = function (value) {\n    //TODO refactor\n    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n      case 'object':\n        if (value == null) return '$data.Object';\n        if (value instanceof Array) return '$data.Array';\n        if (value.getType) return value.getType().fullName;\n        if (value instanceof Date) return '$data.Date';\n        if (value instanceof _initializeJayData2.default.Guid) return '$data.Guid';\n        if (value instanceof _initializeJayData2.default.DateTimeOffset) return '$data.DateTimeOffset';\n        if (value instanceof _initializeJayData2.default.GeographyPoint) return '$data.GeographyPoint';\n        if (value instanceof _initializeJayData2.default.GeographyLineString) return '$data.GeographyLineString';\n        if (value instanceof _initializeJayData2.default.GeographyPolygon) return '$data.GeographyPolygon';\n        if (value instanceof _initializeJayData2.default.GeographyMultiPoint) return '$data.GeographyMultiPoint';\n        if (value instanceof _initializeJayData2.default.GeographyMultiLineString) return '$data.GeographyMultiLineString';\n        if (value instanceof _initializeJayData2.default.GeographyMultiPolygon) return '$data.GeographyMultiPolygon';\n        if (value instanceof _initializeJayData2.default.GeographyCollection) return '$data.GeographyCollection';\n        if (value instanceof _initializeJayData2.default.GeographyBase) return '$data.GeographyBase';\n        if (value instanceof _initializeJayData2.default.GeometryPoint) return '$data.GeometryPoint';\n        if (value instanceof _initializeJayData2.default.GeometryLineString) return '$data.GeometryLineString';\n        if (value instanceof _initializeJayData2.default.GeometryPolygon) return '$data.GeometryPolygon';\n        if (value instanceof _initializeJayData2.default.GeometryMultiPoint) return '$data.GeometryMultiPoint';\n        if (value instanceof _initializeJayData2.default.GeometryMultiLineString) return '$data.GeometryMultiLineString';\n        if (value instanceof _initializeJayData2.default.GeometryMultiPolygon) return '$data.GeometryMultiPolygon';\n        if (value instanceof _initializeJayData2.default.GeometryCollection) return '$data.GeometryCollection';\n        if (value instanceof _initializeJayData2.default.GeometryBase) return '$data.GeometryBase';\n        if (value instanceof _initializeJayData2.default.Geospatial) return '$data.Geospatial';\n        if (value instanceof _initializeJayData2.default.SimpleBase) return '$data.SimpleBase';\n        if (typeof value.toHexString === 'function') return '$data.ObjectID';\n      //if(value instanceof \"number\") return\n      default:\n        return typeof value === 'undefined' ? 'undefined' : _typeof(value);\n    }\n  };\n\n  this.isTypeRegistered = function (typeOrName) {\n    if (typeof typeOrName === 'function') {\n      return classTypes.indexOf(typeOrName) > -1;\n    } else {\n      return typeOrName in classNames;\n    }\n  };\n\n  this.unregisterType = function (type) {\n    _jaydataErrorHandler.Guard.raise(\"Unimplemented\");\n  };\n\n  this.getDefault = function (typeOrName) {\n    var t = this.resolveType(typeOrName);\n    switch (t) {\n      case _initializeJayData2.default.Number:\n        return 0.0;\n      case _initializeJayData2.default.Float:\n        return 0.0;\n      case _initializeJayData2.default.Decimal:\n        return '0.0';\n      case _initializeJayData2.default.Integer:\n        return 0;\n      case _initializeJayData2.default.Int16:\n        return 0;\n      case _initializeJayData2.default.Int32:\n        return 0;\n      case _initializeJayData2.default.Int64:\n        return '0';\n      case _initializeJayData2.default.Byte:\n        return 0;\n      case _initializeJayData2.default.SByte:\n        return 0;\n      case _initializeJayData2.default.String:\n        return null;\n      case _initializeJayData2.default.Boolean:\n        return false;\n      default:\n        return null;\n    }\n  };\n\n  //name array ['', '', '']\n  this.getIndex = function (typeOrName) {\n    var t = this.resolveType(typeOrName);\n    return classTypes.indexOf(t);\n  };\n\n  this.resolveByIndex = function (index) {\n    return classTypes[index];\n  };\n\n  this.registerType = function (nameOrNamesArray, type, factoryFunc) {\n    ///<signature>\n    ///<summary>Registers a type and optionally a lifetimeManager with a name\n    ///that can be used to later resolve the type or create new instances</summary>\n    ///<param name=\"nameOrNamesArray\" type=\"Array\">The names of the type</param>\n    ///<param name=\"type\" type=\"Function\">The type to register</param>\n    ///<param name=\"instanceManager\" type=\"Function\"></param>\n    ///</signature>\n    ///<signature>\n    ///<summary>Registers a new type that </summary>\n    ///<param name=\"aliasType\" type=\"Function\">The name of the type</param>\n    ///<param name=\"actualType\" type=\"Function\">The type to register</param>\n    ///</signature>\n\n    ///TODO remove\n    /*if (typeof typeNameOrAlias === 'string') {\r\n        if (classNames.indexOf(typeNameOrAlias) > -1) {\r\n            Guard.raise(\"Type already registered. Remove first\");\r\n        }\r\n    }*/\n\n    if (!nameOrNamesArray) {\n      return;\n    }\n\n    //todo add ('number', 'number')\n    if (typeof type === \"string\") {\n      type = self.resolveType(type);\n    }\n\n    var namesArray = [];\n    if (typeof nameOrNamesArray === 'string') {\n      var tmp = [];\n      tmp.push(nameOrNamesArray);\n      namesArray = tmp;\n    } else {\n      namesArray = nameOrNamesArray;\n    }\n\n    for (var i = 0; i < namesArray.length; i++) {\n      var parts = namesArray[i].split('.');\n      var item = {};\n      item.shortName = parts[parts.length - 1];\n      item.fullName = namesArray[i];\n      namesArray[i] = item;\n    }\n\n    //if (type.\n\n    var creatorFnc = function creatorFnc() {\n      return IoC(type, arguments);\n    };\n\n    if (typeof intellisense !== 'undefined') {\n      intellisense.annotate(creatorFnc, type);\n    }\n\n    for (var i = 0, l = namesArray.length; i < l; i++) {\n      var item = namesArray[i];\n      if (!(\"create\" + item.shortName in self)) {\n        if (typeof factoryFunc === 'function') {\n          self[\"create\" + item.shortName] = factoryFunc;\n        } else {\n          self[\"create\" + item.shortName] = creatorFnc;\n        }\n      }\n\n      var typePos = classTypes.indexOf(type);\n      if (typePos == -1) {\n        //new type\n        typePos = classTypes.push(type) - 1;\n        var fn = item.fullName;\n        consolidatedClassNames[typePos] = item.fullName;\n      };\n\n      classNames[item.fullName] = typePos;\n\n      var pending = pendingResolutions[item.fullName] || [];\n      if (pending.length > 0) {\n        pending.forEach(function (t) {\n          t(type);\n        });\n        pendingResolutions[item.fullName] = [];\n      }\n    }\n    if (parent) {\n      parent.registerType.apply(parent, arguments);\n    }\n    if (!type.name) {\n      try {\n        type.name = namesArray[0].shortName;\n      } catch (err) {}\n    }\n  };\n\n  var _converters = {\n    from: {},\n    to: {}\n  };\n  this.converters = _converters;\n\n  this.convertTo = function (value, tType, eType /*if Array*/, options) {\n    _jaydataErrorHandler.Guard.requireValue(\"typeOrName\", tType);\n\n    if (_jaydataErrorHandler.Guard.isNullOrUndefined(value)) return value;\n\n    var sourceTypeName = Container.getTypeName(value);\n    var sourceType = Container.resolveType(sourceTypeName);\n    var sourceTypeName = Container.resolveName(sourceType);\n    var targetType = Container.resolveType(tType);\n    var targetTypeName = Container.resolveName(targetType);\n\n    var result;\n    try {\n      if (typeof targetType['from' + sourceTypeName] === 'function') {\n        // target from\n        result = targetType['from' + sourceTypeName].apply(targetType, arguments);\n      } else if (typeof sourceType['to' + targetTypeName] === 'function') {\n        // source to\n        result = sourceType['to' + targetTypeName].apply(sourceType, arguments);\n      } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName][sourceTypeName]) {\n        // target from source\n        result = _converters.to[targetTypeName][sourceTypeName].apply(_converters, arguments);\n      } else if (_converters.from[sourceTypeName] && _converters.from[sourceTypeName][targetTypeName]) {\n        // source to target\n        result = _converters.from[sourceTypeName][targetTypeName].apply(_converters, arguments);\n      } else if (targetTypeName === sourceTypeName || value instanceof targetType) {\n        result = value;\n      } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName]['default']) {\n        // target from anything\n        result = _converters.to[targetTypeName]['default'].apply(_converters, arguments);\n      } else {\n        throw \"converter not found\";\n      }\n    } catch (e) {\n      _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Value '\" + sourceTypeName + \"' not convertable to '\" + targetTypeName + \"'\", 'TypeError', value));\n    }\n\n    if (targetType === _initializeJayData2.default.Array && eType && Array.isArray(result)) {\n      for (var i = 0; i < result.length; i++) {\n        result[i] = this.convertTo.call(this, result[i], eType, undefined, options);\n      }\n    }\n\n    return result;\n  };\n  this.registerConverter = function (target, sourceOrToConverters, toConverterOrFromConverters, fromConverter) {\n    //registerConverter($data.Guid, { $data.String: fn, int: fn }, { string: fn, int:fn })\n    //registerConverter($data.Guid, $data.String, fn, fn);\n\n    var targetName = Container.resolveName(target);\n    if (Container.isTypeRegistered(sourceOrToConverters)) {\n      //isSource\n      _converters.to[targetName] = _converters.to[targetName] || {};\n      _converters.from[targetName] = _converters.from[targetName] || {};\n\n      var sourceName = Container.resolveName(sourceOrToConverters);\n\n      if (toConverterOrFromConverters) _converters.to[targetName][sourceName] = toConverterOrFromConverters;\n      if (fromConverter) _converters.from[targetName][sourceName] = fromConverter;\n    } else {\n      // converterGroup\n\n      //fromConverters\n      if (_converters.to[targetName]) {\n        _converters.to[targetName] = _initializeJayData2.default.typeSystem.extend(_converters.to[targetName], sourceOrToConverters);\n      } else {\n        _converters.to[targetName] = sourceOrToConverters;\n      }\n\n      //toConverters\n      if (_converters.from[targetName]) {\n        _converters.from[targetName] = _initializeJayData2.default.typeSystem.extend(_converters.from[targetName], toConverterOrFromConverters);\n      } else {\n        _converters.from[targetName] = toConverterOrFromConverters;\n      }\n    }\n  };\n\n  this.createOrGetNamespace = function (parts, root) {\n    for (var i = 0; i < parts.length; i++) {\n      var part = parts[i];\n      if (!root[part]) {\n        var ns = {};\n        ns.__namespace = true;\n        root[part] = ns;\n      }\n      root = root[part];\n    }\n    return root;\n  };\n}\n\n},{\"./Extensions.js\":19,\"./initializeJayData.js\":33,\"jaydata-error-handler\":7}],19:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar StringFunctions = exports.StringFunctions = {\n    startsWith: function startsWith() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.indexOf(str) === 0;\n    },\n    endsWith: function endsWith() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.slice(-str.length) === str;\n    },\n    contains: function contains() {\n        var self, str;\n        if (arguments.length == 2) {\n            self = arguments[0];\n            str = arguments[1];\n        } else if (arguments.length == 1 && typeof this === 'string') {\n            self = this;\n            str = arguments[0];\n        } else if (this instanceof String) {\n            self = this.valueOf();\n            str = arguments[0];\n        } else return false;\n\n        if (typeof self !== 'string') return false;\n        return self.indexOf(str) >= 0;\n    }\n};\n\n},{}],20:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Class.define('$data.Logger', _TypeSystem2.default.TraceBase, null, {\n    log: function log() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.log.apply(console, arguments);\n    },\n    warn: function warn() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.warn.apply(console, arguments);\n    },\n    error: function error() {\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\n        console.error.apply(console, arguments);\n    },\n\n    getDateFormat: function getDateFormat() {\n        var date = new Date();\n        return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '.' + date.getMilliseconds();\n    }\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22}],21:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Class.define('$data.TraceBase', null, null, {\n    log: function log() {},\n    warn: function warn() {},\n    error: function error() {}\n});\n\n_TypeSystem2.default.Trace = new _TypeSystem2.default.TraceBase();\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22}],22:[function(_dereq_,module,exports){\n(function (process,global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MemberDefinition = exports.Container = exports.$C = undefined;\n\nvar _initializeJayData = _dereq_('./initializeJayData.js');\n\nvar _initializeJayData2 = _interopRequireDefault(_initializeJayData);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nvar _Extensions = _dereq_('./Extensions.js');\n\nvar _Container = _dereq_('./Container.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*$data.Class.MixinParameter = MixinParameter = $data.Class.define('MixinParameter', null, null, {\r\n    constructor: function (typeName) {\r\n        ///<param name=\"paramIndex\" type=\"integer\">\r\n        this.typeName = typeName;\r\n    },\r\n    typeName: {}\r\n});*/\n\n//var e = new Entity();\n\n/*$data.Interface = Class.define(\"Interface\", null, null, {\r\n    constructor: function() { Guard.raise(\"Can not create an interface\"); }\r\n},\r\n{\r\n    define: function (name, definition) {\r\n        var result = Class.define(name, $data.Interface, null, null, definition);\r\n        delete result.__class;\r\n        result.__interface = true;\r\n        return result;\r\n    }\r\n});\r\n\r\n  $data.Observable = Observable = Class.define(\"Observable\", null, null, {\r\n    propertyChanged: { dataType: $data.Event }\r\n}, {\r\n    createFromInstance: function(instance) {\r\n        var propNames = instance.getClass().memberDefinitions.f\r\n    }\r\n});*/\n\n_initializeJayData2.default.StringFunctions = _Extensions.StringFunctions;\n\nvar _modelHolder = null;\n_initializeJayData2.default.setModelContainer = function (modelHolder) {\n  _modelHolder = modelHolder;\n};\n\n_initializeJayData2.default.defaults = _initializeJayData2.default.defaults || {};\n_initializeJayData2.default.defaults.openTypeDefaultPropertyName = \"dynamicProperties\";\n_initializeJayData2.default.defaults.openTypeDefaultType = '$data.Object';\n_initializeJayData2.default.defaults.openTypeDefaultValue = function () {\n  return {};\n};\n\n_initializeJayData2.default.__global = process.browser ? window : global;\n_initializeJayData2.default.setGlobal = function (obj) {\n  _initializeJayData2.default.__global = obj;\n};\n\n(function init($data) {\n\n  function il(msg) {\n    if (typeof intellisense !== 'undefined') {\n      if (!intellisense.i) {\n        intellisense.i = 0;\n      }\n      intellisense.i = intellisense.i + 1;\n      intellisense.logMessage(msg + \":\" + intellisense.i);\n    }\n  }\n\n  function MemberDefinition(memberDefinitionData, definedClass) {\n\n    ///<field name=\"name\" type=\"String\">*</field>\n    ///<field name=\"dataType\" type=\"Object\">*</field>\n    ///<field name=\"elementType\" type=\"Object\"></field>\n    ///<field name=\"kind\" type=\"String\" />\n    ///<field name=\"classMember\" type=\"Boolean\" />\n    ///<field name=\"set\" type=\"Function\" />\n    ///<field name=\"get\" type=\"Function\" />\n    ///<field name=\"value\" type=\"Object\" />\n    ///<field name=\"initialValue\" type=\"Object\" />\n    ///<field name=\"method\" type=\"Function\" />\n    ///<field name=\"enumerable\" type=\"Boolean\" />\n    ///<field name=\"configurable\" type=\"Boolean\" />\n    ///<field name=\"key\" type=\"Boolean\" />\n    ///<field name=\"computed\" type=\"Boolean\" />\n    ///<field name=\"storeOnObject\" type=\"Boolean\">[false] if false value is stored in initData, otherwise on the object</field>\n    ///<field name=\"monitorChanges\" type=\"Boolean\">[true] if set to false propertyChange events are not raise and property tracking is disabled</field>\n\n    this.kind = MemberTypes.property;\n    //this.definedBy = definedClass;\n    Object.defineProperty(this, 'definedBy', {\n      value: definedClass,\n      enumerable: false,\n      configurable: false,\n      writable: false\n    });\n    if (memberDefinitionData) {\n      if (typeof memberDefinitionData === 'function' || typeof memberDefinitionData.asFunction === 'function') {\n        this.method = memberDefinitionData;\n        this.kind = MemberTypes.method;\n      } else {\n        this.enumerable = true;\n        this.configurable = true;\n        if (typeof memberDefinitionData === \"number\") {\n          this.value = memberDefinitionData;\n          this.type = $data.Number;\n          this.dataType = $data.Number;\n        } else if (typeof memberDefinitionData === \"string\") {\n          this.value = memberDefinitionData;\n          this.dataType = $data.String;\n          this.type = $data.String;\n        } else {\n          for (var item in memberDefinitionData) {\n            if (memberDefinitionData.hasOwnProperty(item)) {\n              this[item] = memberDefinitionData[item];\n            }\n          }\n        }\n      }\n      if (this.type !== undefined) {\n        this.dataType = this.dataType || this.type;\n      } else {\n        this.type = this.dataType;\n      }\n\n      this.originalType = this.type;\n      if (this.elementType !== undefined) {\n        this.originalElementType = this.elementType;\n      }\n    }\n  }\n  MemberDefinition.prototype.createPropertyDescriptor = function (classFunction, value) {\n    ///<returns type=\"Object\" />\n    var pd = this;\n    var result = {\n      enumerable: this.enumerable == undefined ? true : this.enumerable,\n      configurable: this.configurable == undefined ? true : this.configurable\n    };\n    if (this.set && this.get) {\n      result.set = this.set;\n      result.get = this.get;\n    } else if (\"value\" in this || value) {\n      result.value = value || this.value;\n      //TODO\n      //result.writable = this.writable;\n      result.writable = true;\n    } else {\n      result.set = function (value) {\n        this.storeProperty(pd, value);\n      };\n      result.get = function () {\n        return this.retrieveProperty(pd);\n      };\n    }\n    return result;\n  };\n  MemberDefinition.prototype.createStorePropertyDescriptor = function (value) {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: true,\n      configurable: pd.configurable,\n      value: value\n    };\n  };\n  MemberDefinition.prototype.createGetMethod = function () {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: function value(callback, tran) {\n        return this.getProperty(pd, callback, tran);\n      }\n    };\n  };\n  MemberDefinition.prototype.createSetMethod = function () {\n    var pd = this;\n    return {\n      enumerable: false,\n      writable: false,\n      configurable: false,\n      value: function value(_value, callback, tran) {\n        return this.setProperty(pd, _value, callback, tran);\n      }\n    };\n  };\n  MemberDefinition.translateDefinition = function (memDef, name, classFunction) {\n    var holder = classFunction;\n    var memberDefinition;\n\n    if (memDef.type && Container.isTypeRegistered(memDef.type)) {\n      holder = Container.resolveType(memDef.type);\n      if (typeof holder.translateDefinition === 'function') {\n        memberDefinition = holder.translateDefinition.apply(holder, arguments);\n        memberDefinition.name = memberDefinition.name || name;\n      } else {\n        holder = classFunction;\n      }\n    }\n\n    if (!(memberDefinition instanceof MemberDefinition)) {\n      memberDefinition = new MemberDefinition(memberDefinition || memDef, holder);\n      memberDefinition.name = name;\n    }\n    classFunction.resolverThunks = classFunction.resolverThunks || [];\n    classFunction.childResolverThunks = classFunction.childResolverThunks || [];\n\n    var t = memberDefinition.type;\n    var et = memberDefinition.elementType;\n\n    function addChildThunk(referencedType) {\n      if (referencedType && referencedType.isAssignableTo && $data.Entity && referencedType.isAssignableTo($data.Entity)) {\n        classFunction.childResolverThunks.push(function () {\n          if (referencedType.resolveForwardDeclarations) {\n            referencedType.resolveForwardDeclarations();\n          }\n        });\n      }\n    }\n\n    addChildThunk(t);\n    addChildThunk(et);\n\n    if (\"string\" === typeof t) {\n      if (\"@\" === t[0]) {\n        memberDefinition.type = t.substr(1);\n        memberDefinition.dataType = t.substr(1);\n      } else {\n        //forward declared types get this callback when type is registered\n        classFunction.resolverThunks.push(function () {\n          var rt = classFunction.container.resolveType(t);\n          addChildThunk(rt);\n          memberDefinition.type = rt;\n          memberDefinition.dataType = rt;\n        });\n      }\n    }\n\n    if (et) {\n      if (\"string\" === typeof et) {\n        if (\"@\" === et[0]) {\n          memberDefinition.elementType = et.substr(1);\n        } else {\n          //forward declared types get this callback when type is registered\n          classFunction.resolverThunks.push(function () {\n            var rt = classFunction.container.resolveType(et);\n            addChildThunk(rt);\n            memberDefinition.elementType = rt;\n          });\n        }\n      }\n    }\n\n    //if (!classFunction)\n\n    classFunction.resolveForwardDeclarations = function () {\n      classFunction.resolveForwardDeclarations = function () {};\n      $data.Trace.log(\"resolving: \" + classFunction.fullName);\n      this.resolverThunks.forEach(function (thunk) {\n        thunk();\n      });\n      //this.resolverThunks = [];\n      this.childResolverThunks.forEach(function (thunk) {\n        thunk();\n      });\n      //this.childResolverThunks = [];\n    };\n\n    return memberDefinition;\n  };\n\n  MemberDefinition.prototype.toJSON = function () {\n    var property = {};\n    for (var name in this) {\n      if (name !== 'defineBy' && name !== 'storageModel') {\n        if ((name === 'type' || name === 'dataType') && this[name] && typeof this[name] === 'function') {\n          try {\n            property[name] = Container.resolveName(this[name]);\n          } catch (e) {\n            property[name] = this[name];\n          }\n        } else {\n          property[name] = this[name];\n        }\n      }\n    }\n    return property;\n  };\n\n  $data.MemberDefinition = MemberDefinition;\n\n  var memberDefinitionPrefix = '$';\n\n  function MemberDefinitionCollection() {};\n  MemberDefinitionCollection.prototype = {\n    clearCache: function clearCache() {\n      this.arrayCache = undefined;\n      this.pubMapPropsCache = undefined;\n      this.keyPropsCache = undefined;\n      this.propByTypeCache = undefined;\n      this.pubMapMethodsCache = undefined;\n      this.pubMapPropNamesCache = undefined;\n    },\n    asArray: function asArray() {\n      if (!this.arrayCache) {\n        this.arrayCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0) this.arrayCache.push(this[i]);\n        }\n      }\n      return this.arrayCache;\n    },\n    getPublicMappedProperties: function getPublicMappedProperties() {\n      if (!this.pubMapPropsCache) {\n        this.pubMapPropsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable) this.pubMapPropsCache.push(this[i]);\n        }\n      }\n      return this.pubMapPropsCache; // || (this.pubMapPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && !m.notMapped && m.enumerable; }));\n    },\n    getPublicMappedPropertyNames: function getPublicMappedPropertyNames() {\n      if (!this.pubMapPropNamesCache) {\n        this.pubMapPropNamesCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable) this.pubMapPropNamesCache.push(this[i].name);\n        }\n      }\n      return this.pubMapPropNamesCache;\n    },\n    getKeyProperties: function getKeyProperties() {\n      if (!this.keyPropsCache) {\n        this.keyPropsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && this[i].key) this.keyPropsCache.push(this[i]);\n        }\n      }\n      return this.keyPropsCache;\n      //return this.keyPropsCache || (this.keyPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && m.key; }));\n    },\n    getPublicMappedMethods: function getPublicMappedMethods() {\n      if (!this.pubMapMethodsCache) {\n        this.pubMapMethodsCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'method' && this[i].method /* && this.hasOwnProperty(i)*/) this.pubMapMethodsCache.push(this[i]);\n        }\n      }\n      return this.pubMapMethodsCache;\n    },\n    getPropertyByType: function getPropertyByType(type) {\n      if (!this.propByTypeCache) {\n        this.propByTypeCache = [];\n        for (var i in this) {\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].dataType == type) this.propByTypeCache.push(this[i]);\n        }\n      }\n      return this.propByTypeCache;\n      //return this.propByTypeCache || (this.propByTypeCache = this.asArray().filter(function (m) { return m.dataType == type; }));\n    },\n    getMember: function getMember(name) {\n      return this[memberDefinitionPrefix + name];\n    },\n    setMember: function setMember(value) {\n      this[memberDefinitionPrefix + value.name] = value;\n    }\n  };\n  MemberDefinitionCollection.prototype.constructor = MemberDefinitionCollection;\n  $data.MemberDefinitionCollection = MemberDefinitionCollection;\n\n  function ClassEngineBase() {\n    this.classNames = {};\n  }\n\n  function MemberTypes() {\n    ///<field name=\"method\" type=\"string\" />\n    ///<field name=\"property\" type=\"string\" />\n    ///<field name=\"field\" type=\"string\" />\n    ///<field name=\"complexProperty\" type=\"string\" />\n  }\n  MemberTypes.__enum = true;\n\n  MemberTypes.method = \"method\";\n  MemberTypes.property = \"property\";\n  MemberTypes.navProperty = \"navProperty\";\n  MemberTypes.complexProperty = \"complexProperty\";\n  MemberTypes.field = \"field\";\n\n  $data.MemberTypes = MemberTypes;\n\n  //function classToJSON() {\n  //    var ret = {};\n  //    for (var i in this) {\n  //        if (this.hasOwnProperty(i)) {\n  //            ret[i] = this[i];\n  //        }\n  //    }\n  //    return ret;\n  //}\n  //$data.Base.toJSON = classToJSON;\n\n  ClassEngineBase.prototype = {\n\n    //getClass: function (classReference) {\n    //},\n\n    //getProperties: function (classFunction) {\n    //    return classFunction.propertyDefinitions;\n    //},\n\n    define: function define(className, baseClass, container, instanceDefinition, classDefinition) {\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClass\" type=\"Function\">Basetype of the class</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', $data.Base, null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n\n      return this.defineEx(className, [{\n        type: baseClass\n      }], container, instanceDefinition, classDefinition);\n    },\n    defineEx: function defineEx(className, baseClasses, container, instanceDefinition, classDefinition) {\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Functions\">Basetypes of the class. First is a real base, others are mixins</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', [$data.Base, $data.Mixin1, $data.Mixin2], null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n      /// <signature>\n      ///     <summary>Creates a Jaydata type</summary>\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Object\">Basetypes of the class. First is a real base, others are mixins or propagations</param>\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\n      ///     <example>\n      ///\n      ///         var t = new $data.Class.define('Types.A', [\n      ///                         { type: $data.Base, params: [1, 'secondParameterValue', new $data.Class.ConstructorParameter(0)] },\n      ///                         { type: $data.Mixin1, },\n      ///                         { type: $data.Mixin2, },\n      ///                         { type: $data.Propagation1, params: [new $data.Class.ConstructorParameter(1)], propagateTo:'Propagation1' },\n      ///                         { type: $data.Propagation2, params: ['firstParameterValue'], propagateTo:'Propagation2' }\n      ///                     ], null, {\n      ///             constructor: function(){ },\n      ///             func1: function(){ },\n      ///             member1: { type: 'string' }\n      ///         }, {\n      ///             staticFunc1: function() {}\n      ///         })\n      ///\n      ///     </example>\n      /// </signature>\n\n      container = container || $data.Container;\n\n      if (baseClasses.length == 0) {\n        baseClasses.push({\n          type: $data.Base\n        });\n      } else if (baseClasses.length > 0 && !baseClasses[0].type) {\n        baseClasses[0].type = $data.Base;\n      }\n      for (var i = 0, l = baseClasses.length; i < l; i++) {\n        if (typeof baseClasses[i] === 'function') baseClasses[i] = {\n          type: baseClasses[i]\n        };\n      }\n\n      var providedCtor = instanceDefinition ? instanceDefinition.constructor : undefined;\n\n      var classNameParts = className.split('.');\n      var shortClassName = classNameParts.splice(classNameParts.length - 1, 1)[0];\n\n      $data.models = $data.models || {};\n      var root = container === $data.Container ? $data.models : container;\n      root = $data.Container.createOrGetNamespace(classNameParts, root);\n\n      var classFunction = null;\n      classFunction = this.classFunctionBuilder(shortClassName, baseClasses, classDefinition, instanceDefinition);\n      classFunction.fullName = className;\n      classFunction.namespace = classNameParts.join('.'); //classname splitted\n      //classFunction.name = shortClassName;\n      classFunction.container = container;\n      classFunction.container.registerType(className, classFunction);\n\n      this.buildType(classFunction, baseClasses, instanceDefinition, classDefinition);\n\n      if (typeof intellisense !== 'undefined') {\n        if (instanceDefinition && instanceDefinition.constructor) {\n          intellisense.annotate(classFunction, instanceDefinition.constructor);\n        }\n      }\n\n      root[shortClassName] = this.classNames[className] = classFunction;\n\n      if (classNameParts[0] == '$data') {\n        var _classNameParts = [].concat(classNameParts);\n        _classNameParts.shift();\n        var _root = $data.Container.createOrGetNamespace(_classNameParts, $data);\n        _root[shortClassName] = classFunction;\n      }\n      if (_modelHolder && container == $data.Container) {\n        var innerNS = $data.Container.createOrGetNamespace(classNameParts, _modelHolder);\n        innerNS[shortClassName] = classFunction;\n      }\n\n      //classFunction.toJSON = classToJSON;\n      var baseCount = classFunction.baseTypes.length;\n      for (var i = 0; i < baseCount; i++) {\n        var b = classFunction.baseTypes[i];\n        if (\"inheritedTypeProcessor\" in b) {\n          b.inheritedTypeProcessor(classFunction);\n        }\n      }\n      //classFunction.prototype.constructor = instanceDefinition.constructor;\n      //classFunction.constructor = instanceDefinition.constructor;\n      //classFunction.toJSON = function () { return classFunction.memberDefinitions.filter( function(md) { return md; };\n      return classFunction;\n    },\n    classFunctionBuilder: function classFunctionBuilder(name, base, classDefinition, instanceDefinition) {\n      var body = this.bodyBuilder(base, classDefinition, instanceDefinition);\n      return new Function('base', 'classDefinition', 'instanceDefinition', 'name', '$data', 'return function ' + name + ' (){ ' + body + ' \\n}; ')(base, classDefinition, instanceDefinition, name, $data);\n    },\n    bodyBuilder: function bodyBuilder(bases, classDefinition, instanceDefinition) {\n      var mixin = '';\n      var body = '';\n      var propagation = '';\n\n      for (var i = 0, l = bases.length; i < l; i++) {\n        var base = bases[i];\n        var index = i;\n        if (index == 0) {\n          //ctor func\n          if (base && base.type && base.type !== $data.Base && base.type.fullName) {\n            body += '    var baseArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\n            body += '    $data.models.' + base.type.fullName + '.apply(this, baseArguments); \\n';\n          }\n        } else {\n          if (base && base.type && base.propagateTo) {\n            //propagation\n            propagation += '    ' + (!propagation ? 'var ' : '' + '') + 'propagationArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\n            propagation += '    this[\"' + base.propagateTo + '\"] =  Object.create($data.models.' + base.type.fullName + '.prototype); \\n' + '    $data.models.' + base.type.fullName + '.apply(this[\"' + base.propagateTo + '\"], propagationArguments); \\n';\n          } else if (base && base.type && base.type.memberDefinitions && base.type.memberDefinitions.$constructor && !base.propagateTo) {\n            //mixin\n            mixin += '    $data.models.' + base.type.fullName + '.memberDefinitions.$constructor.method.apply(this); \\n';\n          }\n        }\n      }\n      if (instanceDefinition && instanceDefinition.constructor != Object) body += \"    instanceDefinition.constructor.apply(this, arguments); \\n\";\n\n      return '\\n    //mixins \\n' + mixin + '\\n    //construction \\n' + body + '\\n    //propagations \\n' + propagation;\n    },\n\n    buildType: function buildType(classFunction, baseClasses, instanceDefinition, classDefinition) {\n      var baseClass = baseClasses[0].type;\n      classFunction.inheritsFrom = baseClass;\n\n      if (baseClass) {\n        classFunction.prototype = Object.create(baseClass.prototype);\n        classFunction.memberDefinitions = Object.create(baseClass.memberDefinitions || new MemberDefinitionCollection());\n        classFunction.memberDefinitions.clearCache();\n\n        var staticDefs = baseClass.staticDefinitions;\n        if (staticDefs) {\n          staticDefs = staticDefs.asArray();\n          if (staticDefs) {\n            for (var i = 0; i < staticDefs.length; i++) {\n              this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\n            }\n          }\n        }\n        classFunction.baseTypes = baseClass.baseTypes ? [].concat(baseClass.baseTypes) : [];\n        for (var i = 0; i < baseClasses.length; i++) {\n          classFunction.baseTypes.push(baseClasses[i].type);\n        }\n        //classFunction.baseTypes = (baseClass.baseTypes || []).concat(baseClasses.map(function (base) { return base.type; }));\n        if (!classFunction.isAssignableTo) {\n          Object.defineProperty(classFunction, \"isAssignableTo\", {\n            value: function value(type) {\n              return this === type || this.baseTypes.indexOf(type) >= 0;\n            },\n            writable: false,\n            enumerable: false,\n            configurable: false\n          });\n        }\n      }\n\n      var openTypeDefinition = classFunction.staticDefinitions && classFunction.staticDefinitions.getMember('openType');\n      if (classDefinition) {\n        if (openTypeDefinition) delete classDefinition.openType;\n        this.buildStaticMembers(classFunction, classDefinition);\n\n        if (classDefinition.constructor) classFunction.classConstructor = classDefinition.constructor;\n      }\n\n      if (instanceDefinition) {\n\n        //build open type member\n        if (!openTypeDefinition && classDefinition && (typeof classFunction.openType === \"string\" || classFunction.openType === true) && classFunction.isAssignableTo($data.Entity)) {\n          var openTypePropertyName = $data.defaults.openTypeDefaultPropertyName;\n          var openTypeDefaultType = Container.resolveType($data.defaults.openTypeDefaultType);\n          var openTypeDefaultValue = $data.defaults.openTypeDefaultValue;\n          if (typeof classFunction.openType == \"string\") {\n            openTypePropertyName = classFunction.openType;\n          }\n\n          var definedOpenTypeMember = classFunction.getMemberDefinition(openTypePropertyName);\n          if (definedOpenTypeMember && Container.resolveType(definedOpenTypeMember.type || definedOpenTypeMember.dataType) !== openTypeDefaultType) {\n            _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Type Error\", \"OpenType default type missmatch\"));\n          }\n          if (!definedOpenTypeMember && instanceDefinition[openTypePropertyName]) {\n            var memberType = Container.resolveType(instanceDefinition[openTypePropertyName].type || instanceDefinition[openTypePropertyName].dataType);\n            if (memberType !== openTypeDefaultType) {\n              _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Type Error\", \"OpenType default type missmatch\"));\n            }\n          }\n          if (!definedOpenTypeMember && !instanceDefinition[openTypePropertyName]) {\n            var defaultValue = typeof openTypeDefaultValue !== \"undefined\" ? openTypeDefaultValue : function () {\n              return {};\n            };\n            instanceDefinition[openTypePropertyName] = { type: openTypeDefaultType, defaultValue: defaultValue };\n          }\n        }\n\n        this.buildInstanceMembers(classFunction, instanceDefinition);\n      }\n\n      var mixins = [].concat(baseClasses);\n      mixins.shift();\n      if (Object.keys(mixins).length > 0) this.buildInstanceMixins(classFunction, mixins);\n\n      classFunction.__class = true;\n\n      classFunction.prototype.constructor = classFunction;\n\n      Object.defineProperty(classFunction.prototype, \"getType\", {\n        value: function value() {\n          return classFunction;\n        },\n        writable: false,\n        enumerable: false,\n        configurable: false\n      });\n    },\n\n    addMethod: function addMethod(holder, name, method, propagation) {\n      if (!propagation || typeof intellisense !== 'undefined') {\n        holder[name] = method;\n      } else {\n        holder[name] = function () {\n          return method.apply(this[propagation], arguments);\n        };\n      }\n    },\n\n    addProperty: function addProperty(holder, name, propertyDescriptor, propagation) {\n\n      //holder[name] = {};\n\n      if (propagation) {\n        propertyDescriptor.configurable = true;\n        if (propertyDescriptor.get) {\n          var origGet = propertyDescriptor.get;\n          propertyDescriptor.get = function () {\n            if (!this[propagation]) _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"not inicialized\"));\n            return origGet.apply(this[propagation], arguments);\n          };\n        }\n        if (propertyDescriptor.set) {\n          var origSet = propertyDescriptor.set;\n          propertyDescriptor.set = function () {\n            if (!this[propagation]) _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"not inicialized\"));\n            origSet.apply(this[propagation], arguments);\n          };\n        }\n      }\n\n      Object.defineProperty(holder, name, propertyDescriptor);\n    },\n\n    addField: function addField(holder, name, field) {\n      _jaydataErrorHandler.Guard.raise(\"not implemented\");\n    },\n\n    buildMethod: function buildMethod(classFunction, memberDefinition, propagation) {\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\n      this.addMethod(holder, memberDefinition.name, memberDefinition.method, propagation);\n    },\n\n    buildProperty: function buildProperty(classFunction, memberDefinition, propagation) {\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\n      var pd = memberDefinition.createPropertyDescriptor(classFunction);\n      this.addProperty(holder, memberDefinition.name, pd, propagation);\n\n      //if lazyload TODO\n      if (!memberDefinition.classMember && classFunction.__setPropertyfunctions == true && memberDefinition.withoutGetSetMethod !== true && !('get_' + memberDefinition.name in holder || 'set_' + memberDefinition.name in holder)) {\n        var pdGetMethod = memberDefinition.createGetMethod();\n        this.addProperty(holder, 'get_' + memberDefinition.name, pdGetMethod, propagation);\n\n        var pdSetMethod = memberDefinition.createSetMethod();\n        this.addProperty(holder, 'set_' + memberDefinition.name, pdSetMethod, propagation);\n      }\n    },\n\n    buildMember: function buildMember(classFunction, memberDefinition, propagation, memberCollectionName) {\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\" />\n      memberCollectionName = memberCollectionName || 'memberDefinitions';\n      classFunction[memberCollectionName] = classFunction[memberCollectionName] || new MemberDefinitionCollection();\n      classFunction[memberCollectionName].setMember(memberDefinition);\n\n      switch (memberDefinition.kind) {\n        case MemberTypes.method:\n          this.buildMethod(classFunction, memberDefinition, propagation);\n          break;\n        case MemberTypes.navProperty:\n        case MemberTypes.complexProperty:\n        case MemberTypes.property:\n          this.buildProperty(classFunction, memberDefinition, propagation);\n          break;\n        default:\n          _jaydataErrorHandler.Guard.raise(\"Unknown member type: \" + memberDefinition.kind + \",\" + memberDefinition.name);\n      }\n    },\n\n    buildStaticMembers: function buildStaticMembers(classFunction, memberListDefinition) {\n      ///<param name=\"classFunction\" type=\"Object\">The class constructor that will be extended</param>\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\n      var t = this;\n      for (var item in memberListDefinition) {\n        if (memberListDefinition.hasOwnProperty(item)) {\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\n          memberDefinition.classMember = true;\n          t.buildMember(classFunction, memberDefinition, undefined, 'staticDefinitions');\n        }\n      }\n    },\n\n    buildInstanceMembers: function buildInstanceMembers(classFunction, memberListDefinition) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\n      ///pinning t outside of the closure seems actually faster then passing in the this  and referencing\n      var t = this;\n      for (var item in memberListDefinition) {\n        if (memberListDefinition.hasOwnProperty(item)) {\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\n          t.buildMember(classFunction, memberDefinition, undefined, 'memberDefinitions');\n        }\n      }\n    },\n\n    copyMembers: function copyMembers(sourceType, targetType) {\n      ///<param name=\"sourceType\" type=\"Function\" />\n      ///<param name=\"targetType\" type=\"Function\" />\n      function il(msg) {\n        if (typeof intellisense === 'undefined') {\n          return;\n        }\n        intellisense.logMessage(msg);\n      }\n\n      Object.keys(sourceType.prototype).forEach(function (item, i, src) {\n        if (item !== 'constructor' && item !== 'toString') {\n          il(\"copying item:\" + item);\n          targetType.prototype[item] = sourceType[item];\n        }\n      });\n    },\n\n    buildInstanceMixins: function buildInstanceMixins(classFunction, mixinList) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"mixinList\" type=\"Array\"></param>\n\n      classFunction.mixins = classFunction.mixins || [];\n      classFunction.propagations = classFunction.propagations || [];\n\n      for (var i = 0; i < mixinList.length; i++) {\n        var item = mixinList[i];\n        //if (classFunction.memberDefinitions.getMember(item.type.name)) {\n        if (item.propagateTo) {\n          this.buildInstancePropagation(classFunction, item);\n          classFunction.propagations.push(item);\n          classFunction.propagations[item.type.name] = true;\n        } else {\n          this.buildInstanceMixin(classFunction, item);\n          classFunction.mixins.push(item);\n          classFunction.mixins[item.type.name] = true;\n        }\n      };\n    },\n    buildInstanceMixin: function buildInstanceMixin(classFunction, typeObj) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"typeObj\" type=\"Object\"></param>\n\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\n        var itemName = memberDefs[i].name;\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n          this.buildMember(classFunction, memberDefs[i]);\n        }\n      }\n\n      if (typeObj.type.staticDefinitions) {\n        var staticDefs = typeObj.type.staticDefinitions.asArray();\n        for (var i = 0, l = staticDefs.length; i < l; i++) {\n          var itemName = staticDefs[i].name;\n          if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n            this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\n          }\n        }\n      }\n    },\n    buildInstancePropagation: function buildInstancePropagation(classFunction, typeObj) {\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\n      ///<param name=\"typeObj\" type=\"Object\"></param>\n\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\n        var itemName = memberDefs[i].name;\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\n          this.buildMember(classFunction, memberDefs[i], typeObj.propagateTo);\n        }\n      }\n    }\n\n  };\n  var Class;\n  $data.Class = Class = new ClassEngineBase();\n\n  $data.ContainerClass = _Container.ContainerCtor;\n\n  var c;\n  $data.Container = c = _Container.ContainerInstance;\n\n  $data.createContainer = function () {\n    return new _Container.ContainerCtor($data.Container);\n  };\n\n  var storeProperty = function storeProperty(memberDefinition, value) {\n    var backingFieldName = \"_\" + memberDefinition.name;\n    if (!this[backingFieldName]) {\n      Object.defineProperty(this, backingFieldName, memberDefinition.createStorePropertyDescriptor(value));\n    } else {\n      this[backingFieldName] = value;\n    }\n  };\n  var retrieveProperty = function retrieveProperty(memberDefinition) {\n    var backingFieldName = \"_\" + memberDefinition.name;\n    return this[backingFieldName];\n  };\n\n  $data.Class.define('$data.Base', function Base() {}, null, {\n    storeProperty: storeProperty,\n    retrieveProperty: retrieveProperty,\n    setProperty: function setProperty(memberDefinition, value, callback) {\n      this[memberDefinition.name] = value;\n      callback();\n    },\n    getProperty: function getProperty(memberDefinition, callback) {\n      callback.apply(this, [this[memberDefinition.name]]);\n    }\n  }, {\n    create: function create() {\n      return Container.createInstance(this, arguments);\n    },\n    extend: function extend(name, container, instanceDefinition, classDefinition) {\n      if (container && !(container instanceof _Container.ContainerCtor)) {\n        classDefinition = instanceDefinition;\n        instanceDefinition = container;\n        container = undefined;\n      }\n      return $data.Class.define(name, this, container, instanceDefinition, classDefinition);\n    },\n    getMemberDefinition: function getMemberDefinition(name) {\n      return this.memberDefinitions.getMember(name);\n    },\n    addProperty: function addProperty(name, getterOrType, setterOrGetter, setter) {\n      var _getter = getterOrType;\n      var _setter = setterOrGetter;\n      var _type;\n      if (typeof _getter === 'string') {\n        _type = getterOrType;\n        _getter = setterOrGetter;\n        _setter = setter;\n      }\n\n      var propDef = {\n        notMapped: true,\n        storeOnObject: true,\n        get: typeof _getter === 'function' ? _getter : function () {},\n        set: typeof _setter === 'function' ? _setter : function () {},\n        type: _type\n      };\n\n      var memberDefinition = MemberDefinition.translateDefinition(propDef, name, this);\n      $data.Class.buildMember(this, memberDefinition);\n\n      this.memberDefinitions.clearCache();\n\n      return this;\n    },\n    addMember: function addMember(name, definition, isClassMember) {\n      var memberDefinition = MemberDefinition.translateDefinition(definition, name, this);\n\n      if (isClassMember) {\n        memberDefinition.classMember = true;\n        $data.Class.buildMember(this, memberDefinition, undefined, 'staticDefinitions');\n        this.staticDefinitions.clearCache();\n      } else {\n        $data.Class.buildMember(this, memberDefinition);\n        this.memberDefinitions.clearCache();\n      }\n      return this;\n    },\n    describeField: function describeField(name, definition) {\n      var memDef = this.memberDefinitions.getMember(name);\n      if (!memDef) {\n        this.addMember(name, definition);\n      } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Field '\" + name + \"' already defined!\", \"Invalid operation\"));\n      }\n      return this;\n    },\n    storeProperty: storeProperty,\n    retrieveProperty: retrieveProperty,\n    'from$data.Object': function from$dataObject(value) {\n      return value;\n    }\n  });\n\n  //override after typeSystem initialized\n\n  $data.Class.ConstructorParameter = $data.Class.define('ConstructorParameter', null, null, {\n    constructor: function constructor(paramIndex) {\n      ///<param name=\"paramIndex\" type=\"integer\" />\n      this.paramIndex = paramIndex;\n    },\n    paramIndex: {}\n  });\n})(_initializeJayData2.default);\n\n_initializeJayData2.default.defaultErrorCallback = function () {\n  //console.log('DEFAULT ERROR CALLBACK:');\n  /*if (console.dir)\r\n      console.dir(arguments);\r\n  else\r\n      console.log(arguments);*/\n  if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\n    (console.error || console.log).call(console, arguments[0]);\n    arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\n  } else {\n    if (arguments[0] instanceof Error) {\n      _jaydataErrorHandler.Guard.raise(arguments[0]);\n    } else {\n      _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"DEFAULT ERROR CALLBACK!\", \"DefaultError\", arguments));\n    }\n  }\n};\n_initializeJayData2.default.defaultSuccessCallback = function () {/*console.log('DEFAULT SUCCES CALLBACK');*/};\n_initializeJayData2.default.defaultNotifyCallback = function () {/*console.log('DEFAULT NOTIFY CALLBACK');*/};\n\n_initializeJayData2.default.typeSystem = {\n  __namespace: true,\n  /*inherit: function (ctor, baseType) {\r\n      var proto = new baseType();\r\n      ctor.prototype = $.extend(proto, ctor.prototype);\r\n      //console.dir(proto);\r\n      ctor.prototype.base = new baseType();\r\n      //console.dir(ctor.prototype.base);\r\n      ctor.prototype.constructor = ctor;\r\n      return ctor;\r\n  },*/\n  //mix: function (type, mixin) {\n  //    type.prototype = $.extend(type.prototype || {}, mixin.prototype || {});\n  //    type.mixins = type.mixins || [];\n  //    type.mixins.push(mixin);\n  //    return type;\n  //},\n  extend: function extend(target) {\n    /// <summary>\n    /// Extends an object with properties of additional parameters.\n    /// </summary>\n    /// <signature>\n    /// <param name=\"target\" type=\"Object\">Object that will be extended.</param>\n    /// <param name=\"object\" type=\"Object\">Object to extend target with.</param>\n    /// <param name=\"objectN\" optional=\"true\" parameterArray=\"true\" type=\"Object\">Object to extend target with.</param>\n    /// </signature>\n    /// <returns></returns>\n    if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object' && typeof target !== 'function') _jaydataErrorHandler.Guard.raise('Target must be object or function');\n\n    for (var i = 1; i < arguments.length; i++) {\n      var obj = arguments[i];\n      if (obj === null || typeof obj === 'undefined') continue;\n      for (var key in obj) {\n        target[key] = obj[key];\n      }\n    }\n    return target;\n  },\n  createCallbackSetting: function createCallbackSetting(callBack, defaultSetting) {\n    var setting = {\n      success: _initializeJayData2.default.defaultSuccessCallback,\n      error: _initializeJayData2.default.defaultErrorCallback,\n      notify: _initializeJayData2.default.defaultNotifyCallback\n    };\n\n    if (defaultSetting != undefined && defaultSetting != null) {\n      setting = defaultSetting;\n    }\n\n    var result;\n    if (callBack == null || callBack == undefined) {\n      result = setting;\n    } else if (typeof callBack == 'function') {\n      result = this.extend(setting, {\n        success: callBack\n      });\n    } else {\n      result = this.extend(setting, callBack);\n    }\n\n    function wrapCode(fn) {\n      var t = this;\n\n      function r() {\n        fn.apply(t, arguments);\n        fn = function fn() {};\n      }\n      return r;\n    }\n\n    if (typeof result.error === 'function') result.error = wrapCode(result.error);\n\n    return result;\n  },\n  createCtorParams: function createCtorParams(source, indexes, thisObj) {\n    ///<param name=\"source\" type=\"Array\" />Paramerter array\n    ///<param name=\"indexes\" type=\"Array\" />\n    ///<param name=\"thisObj\" type=\"Object\" />\n    if (indexes) {\n      var paramArray = [];\n      for (var i = 0, l = indexes.length; i < l; i++) {\n        var item = i;\n        if (indexes[item] instanceof _initializeJayData2.default.Class.ConstructorParameter) paramArray.push(source[indexes[item].paramIndex]);else if (typeof indexes[item] === \"function\") paramArray.push(indexes[item].apply(thisObj));else paramArray.push(indexes[item]);\n      }\n      return paramArray;\n    }\n    return source;\n  },\n  writePropertyValues: function writePropertyValues(obj) {\n    if (obj && obj.getType && obj.getType().memberDefinitions) {\n      this.writeProperties(obj, obj.getType().memberDefinitions.asArray().filter(function (md) {\n        return (md.kind == \"property\" || md.kind == \"navProperty\" || md.kind == \"complexProperty\") && !md.prototypeProperty;\n      }));\n    }\n  },\n  writeProperties: function writeProperties(obj, members) {\n    var defines = {};\n    for (var i = 0, l = members.length; i < l; i++) {\n      var memDef = members[i];\n      defines[memDef.name] = memDef.createPropertyDescriptor(null, memDef.value);\n    }\n\n    Object.defineProperties(obj, defines);\n  },\n  writeProperty: function writeProperty(obj, member, value) {\n    var memDef = typeof member === 'string' ? obj.getType().memberDefinitions.getMember(member) : member;\n    if (memDef) {\n      var propDef = memDef.createPropertyDescriptor(null, value);\n      //////OPTIMIZATION\n      Object.defineProperty(obj, memDef.name, propDef);\n    }\n  }\n};\n\n_initializeJayData2.default.debug = function () {\n  (console.debug || console.log).apply(console, arguments);\n};\n\n_initializeJayData2.default.debugWith = function () {\n  var cArgs = arguments;\n  return function (r) {\n    (console.debug || console.log).apply(console, cArgs);\n    if (typeof Error !== 'undefined' && r instanceof Error || typeof _jaydataErrorHandler.Exception !== 'undefined' && r instanceof _jaydataErrorHandler.Exception) {\n      (console.error || console.log).apply(console, arguments);\n    } else {\n      (console.debug || console.log).apply(console, arguments);\n    }\n  };\n};\n\n_initializeJayData2.default.fdebug = {\n  success: _initializeJayData2.default.debugWith('success'),\n  error: _initializeJayData2.default.debugWith('error')\n};\n\nvar $C = exports.$C = function $C() {\n  _initializeJayData2.default.Class.define.apply(_initializeJayData2.default.Class, arguments);\n};\nvar Container = exports.Container = _initializeJayData2.default.Container;\nvar MemberDefinition = exports.MemberDefinition = _initializeJayData2.default.MemberDefinition;\nexports.default = _initializeJayData2.default;\n\n}).call(this,_dereq_('_process'),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"./Container.js\":18,\"./Extensions.js\":19,\"./initializeJayData.js\":33,\"_process\":14,\"jaydata-error-handler\":7}],23:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nvar _btoa = (typeof window !== \"undefined\" ? window['btoa'] : typeof global !== \"undefined\" ? global['btoa'] : null);\n\nvar _btoa2 = _interopRequireDefault(_btoa);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar bufferOrArray = eval('typeof Buf' + 'fer !== \"undefined\" ? Buf' + 'fer : Uint8Array');\n_TypeSystem2.default.Blob = function Blob() {};\n\n_TypeSystem2.default.Blob.createFromHexString = function (value) {\n    if (value != value.match(new RegExp('[0-9a-fA-F]+'))[0]) {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('TypeError: ', 'value not convertable to $data.Blob', value));\n    } else {\n        //if (value.length & 1) value = '0' + value;\n        var arr = new bufferOrArray(value.length >> 1);\n        for (var i = 0, j = 1, k = 0; i < value.length; i += 2, j += 2, k++) {\n            arr[k] = parseInt('0x' + value[i] + value[j], 16);\n        }\n\n        return arr;\n    }\n};\n\n_TypeSystem2.default.Blob.toString = function (value) {\n    if (!value || !value.length) return null;\n    var s = '';\n    for (var i = 0; i < value.length; i++) {\n        s += String.fromCharCode(value[i]);\n    }\n\n    return s;\n};\n\n_TypeSystem2.default.Blob.toBase64 = function (value) {\n    if (!value || !value.length) return null;\n    return (0, _btoa2.default)(_TypeSystem2.default.Blob.toString(value));\n};\n\n_TypeSystem2.default.Blob.toArray = function (src) {\n    if (!src || !src.length) return null;\n    var arr = new Array(src.length);\n    for (var i = 0; i < src.length; i++) {\n        arr[i] = src[i];\n    }\n\n    return arr;\n};\n\n/*$data.Blob.toJSON = function(value){\r\n    return JSON.stringify($data.Blob.toArray(value));\r\n};*/\n\n_TypeSystem2.default.Blob.toHexString = function (value) {\n    if (!value || !value.length) return null;\n    var s = '';\n    for (var i = 0; i < value.length; i++) {\n        s += ('00' + value[i].toString(16)).slice(-2);\n    }\n\n    return s.toUpperCase();\n};\n\n_TypeSystem2.default.Blob.toDataURL = function (value) {\n    if (!value || !value.length) return null;\n    return 'data:application/octet-stream;base64,' + (0, _btoa2.default)(_TypeSystem2.default.Blob.toString(value));\n};\n\n_TypeSystem2.default.Container.registerType([\"$data.Blob\", \"blob\", \"JayBlob\"], _TypeSystem2.default.Blob);\n_TypeSystem2.default.Container.registerConverter('$data.Blob', {\n    '$data.String': function $dataString(value) {\n        if (value && value.length) {\n            var blob = new bufferOrArray(value.length);\n            for (var i = 0; i < value.length; i++) {\n                blob[i] = value.charCodeAt(i);\n            }\n\n            return blob;\n        } else return null;\n    },\n    '$data.Array': function $dataArray(value) {\n        return new bufferOrArray(value);\n    },\n    '$data.Number': function $dataNumber(value) {\n        return new bufferOrArray(_TypeSystem2.default.packIEEE754(value, 11, 52).reverse());\n    },\n    '$data.Boolean': function $dataBoolean(value) {\n        return new bufferOrArray([value | 0]);\n    },\n    'default': function _default(value) {\n        if (typeof Blob !== 'undefined' && value instanceof Blob) {\n            var req = new XMLHttpRequest();\n            req.open('GET', URL.createObjectURL(value), false);\n            req.send(null);\n            return _TypeSystem2.default.Container.convertTo(req.response, _TypeSystem2.default.Blob);\n        } else if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n            return new bufferOrArray(new Uint8Array(value));\n        } else if (value instanceof Uint8Array) {\n            //if (typeof Buffer !== 'undefined') return new Buffer(value);\n            //else\n            return value;\n        } else /*if (typeof Buffer !== 'undefined' ? value instanceof Buffer : false){\r\n               return value;\r\n               }else*/if (value.buffer) {\n                return new bufferOrArray(value);\n            } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object' && value instanceof Object) {\n                var arr = [];\n                for (var i in value) {\n                    arr[i] = value[i];\n                }\n                if (!arr.length) throw 0;\n                return new bufferOrArray(arr);\n            }\n        throw 0;\n    }\n}, {\n    '$data.String': function $dataString(value) {\n        return _TypeSystem2.default.Blob.toString(value);\n    },\n    '$data.Array': function $dataArray(value) {\n        return _TypeSystem2.default.Blob.toArray(value);\n    }\n});\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{\"../TypeSystem.js\":22,\"jaydata-error-handler\":7}],24:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Container.registerConverter('$data.Boolean', {\n    '$data.String': function $dataString(value) {\n        if (value.toLowerCase() == 'true') return true;\n        if (value.toLowerCase() == 'false') return false;\n\n        return !!value;\n    },\n    'default': function _default(value) {\n        return !!value;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Integer', {\n    'default': function _default(value) {\n        if (value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY || value === Number.MAX_VALUE || value === Number.MIN_VALUE) {\n            return value;\n        }\n\n        var r = parseInt(+value, 10);\n        if (isNaN(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int32', {\n    'default': function _default(value) {\n        return value | 0;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Number', {\n    'default': function _default(value) {\n        var r = +value;\n        if (isNaN(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Byte', {\n    'default': function _default(value) {\n        return (value | 0) & 0xff;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Date', {\n    'default': function _default(value) {\n        var d = new Date(value);\n        if (isNaN(d)) throw 0;\n        return d;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.DateTimeOffset', {\n    '$data.Date': function $dataDate(value) {\n        return value;\n    },\n    'default': function _default(value) {\n        var d = new Date(value);\n        if (isNaN(d)) throw 0;\n        return d;\n    }\n});\n(function () {\n    function parseFromString(value) {\n        var regex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])(:([0-5][0-9]|[0-9])(\\.(\\d+))?)?$/;\n\n        var matches = regex.exec(value);\n        if (!matches) throw 0;\n        var time = '';\n        time += ('00' + matches[1]).slice(-2);\n        time += ':' + ('00' + matches[2]).slice(-2);\n        if (matches[4]) {\n            time += ':' + ('00' + matches[4]).slice(-2);\n        } else {\n            time += ':00';\n        }\n        if (matches[6]) time += '.' + (matches[6] + '000').slice(0, 3);\n\n        return time;\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Time', {\n        '$data.String': parseFromString,\n        '$data.Number': function tt(value) {\n            var metrics = [1000, 60, 60];\n            var result = [0, 0, 0, value | 0];\n\n            for (var i = 0; i < metrics.length; i++) {\n                result[metrics.length - (i + 1)] = result[metrics.length - i] / metrics[i] | 0;\n                result[metrics.length - i] -= result[metrics.length - (i + 1)] * metrics[i];\n            }\n\n            var time = '';\n            for (var i = 0; i < result.length; i++) {\n                if (i < result.length - 1) {\n                    time += ('00' + result[i]).slice(-2);\n                    if (i < result.length - 2) time += ':';\n                } else {\n                    time += '.' + ('000' + result[i]).slice(-3);\n                }\n            }\n\n            return parseFromString(time);\n        },\n        '$data.Date': function $dataDate(value) {\n            var val = value.getHours() + ':' + value.getMinutes() + ':' + value.getSeconds();\n            var ms = value.getMilliseconds();\n            if (ms) {\n                val += '.' + ms;\n            }\n\n            return parseFromString(val);\n        }\n    });\n})();\n(function () {\n    function parseFromString(value) {\n        var regex = /^(-?)([0-9]{1,4})-(1[0-2]|0[0-9]|[0-9])-([0-2][0-9]|3[0-1]|[0-9])$/;\n\n        var matches = regex.exec(value);\n        if (!matches) throw 0;\n        var date = matches[1];\n        date += ('0000' + matches[2]).slice(-4);\n        date += '-' + ('00' + matches[3]).slice(-2);\n        date += '-' + ('00' + matches[4]).slice(-2);\n        return date;\n    }\n    function parseFromDate(value) {\n        var val = value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate();\n        return parseFromString(val);\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Day', {\n        '$data.String': parseFromString,\n        '$data.Number': function tt(value) {\n            var t = 1000 * 60 * 60 * 24;\n            var day = value * t;\n            if (isNaN(day)) throw 0;\n\n            return parseFromDate(new Date(day));\n        },\n        '$data.Date': parseFromDate\n    });\n})();\n(function () {\n    function parseFromString(value) {\n        return value;\n    }\n\n    _TypeSystem2.default.Container.registerConverter('$data.Duration', {\n        '$data.String': parseFromString\n    });\n})();\n_TypeSystem2.default.Container.registerConverter('$data.Decimal', {\n    '$data.Boolean': function $dataBoolean(value) {\n        return value ? '1' : '0';\n    },\n    '$data.Number': function $dataNumber(value) {\n        return value.toString();\n    },\n    '$data.String': function $dataString(value) {\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\n        return value;\n    },\n    '$data.Date': function $dataDate(value) {\n        var r = value.valueOf();\n        if (isNaN(r)) throw 0;\n        return r.toString();\n    }\n});\n\n_TypeSystem2.default.packIEEE754 = function (v, ebits, fbits) {\n    var bias = (1 << ebits - 1) - 1,\n        s,\n        e,\n        f,\n        ln,\n        i,\n        bits,\n        str,\n        bytes;\n\n    // Compute sign, exponent, fraction\n    if (v !== v) {\n        // NaN\n        // http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\n        e = (1 << bias) - 1;f = Math.pow(2, fbits - 1);s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n        e = (1 << bias) - 1;f = 0;s = v < 0 ? 1 : 0;\n    } else if (v === 0) {\n        e = 0;f = 0;s = 1 / v === -Infinity ? 1 : 0;\n    } else {\n        s = v < 0;\n        v = Math.abs(v);\n\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        } else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n\n    // Pack sign, exponent, fraction\n    bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    str = bits.join('');\n\n    // Bits to bytes\n    bytes = [];\n    while (str.length) {\n        bytes.push(parseInt(str.substring(0, 8), 2));\n        str = str.substring(8);\n    }\n\n    return bytes;\n};\n\n_TypeSystem2.default.unpackIEEE754 = function (bytes, ebits, fbits) {\n    // Bytes to bits\n    var bits = [],\n        i,\n        j,\n        b,\n        str,\n        bias,\n        s,\n        e,\n        f;\n\n    for (i = bytes.length; i; i -= 1) {\n        b = bytes[i - 1];\n        for (j = 8; j; j -= 1) {\n            bits.push(b % 2 ? 1 : 0);b = b >> 1;\n        }\n    }\n    bits.reverse();\n    str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    bias = (1 << ebits - 1) - 1;\n    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    e = parseInt(str.substring(1, 1 + ebits), 2);\n    f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n        return f !== 0 ? NaN : s * Infinity;\n    } else if (e > 0) {\n        // Normalized\n        return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    } else if (f !== 0) {\n        // Denormalized\n        return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    } else {\n        return s < 0 ? -0 : 0;\n    }\n};\n\n_TypeSystem2.default.IEEE754 = function (v, e, f) {\n    return _TypeSystem2.default.unpackIEEE754(_TypeSystem2.default.packIEEE754(v, e, f), e, f);\n};\n\n_TypeSystem2.default.Container.registerConverter('$data.Float', {\n    'default': function _default(value) {\n        var r = +value;\n        if (isNaN(r)) throw 0;\n        return _TypeSystem2.default.IEEE754(r, 8, 23);\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int16', {\n    'default': function _default(value) {\n        var r = (value | 0) & 0xffff;\n        if (r >= 0x8000) return r - 0x10000;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Int64', {\n    '$data.Boolean': function $dataBoolean(value) {\n        return value ? '1' : '0';\n    },\n    '$data.Number': function $dataNumber(value) {\n        var r = value.toString();\n        if (r.indexOf('.') > 0) return r.split('.')[0];\n        if (r.indexOf('.') == 0) throw 0;\n        return r;\n    },\n    '$data.String': function $dataString(value) {\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\n        if (value.indexOf('.') > 0) return value.split('.')[0];\n        if (value.indexOf('.') == 0) throw 0;\n        return value;\n    },\n    '$data.Date': function $dataDate(value) {\n        var r = value.valueOf();\n        if (isNaN(r)) throw 0;\n        return r.toString();\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.SByte', {\n    'default': function _default(value) {\n        var r = (value | 0) & 0xff;\n        if (r >= 0x80) return r - 0x100;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.String', {\n    '$data.Date': function $dataDate(value) {\n        return value.toISOString();\n    },\n    '$data.ObjectID': function $dataObjectID(value) {\n        return btoa(value.toString());\n    },\n    'default': function _default(value) {\n        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') return JSON.stringify(value);\n        return value.toString();\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Object', {\n    '$data.String': function $dataString(value) {\n        return JSON.parse(value);\n    },\n    '$data.Function': function $dataFunction() {\n        throw 0;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.Array', {\n    '$data.String': function $dataString(value) {\n        var r = JSON.parse(value);\n        if (!Array.isArray(r)) throw 0;\n        return r;\n    }\n});\n\n_TypeSystem2.default.Container.registerConverter('$data.ObjectID', {\n    '$data.ObjectID': function $dataObjectID(value) {\n        try {\n            return btoa(value.toString());\n        } catch (e) {\n            return value;\n        }\n    },\n    '$data.String': function $dataString(id) {\n        return id;\n    }\n});\n\n_TypeSystem2.default.Container.proxyConverter = function (v) {\n    return v;\n};\n_TypeSystem2.default.Container.defaultConverter = function (type) {\n    return function (v) {\n        return _TypeSystem2.default.Container.convertTo(v, type);\n    };\n};\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22}],25:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function ($data) {\n\n    function Edm_Boolean() {};\n    $data.Container.registerType('Edm.Boolean', Edm_Boolean);\n    $data.Container.mapType(Edm_Boolean, $data.Boolean);\n\n    function Edm_Binary() {};\n    $data.Container.registerType('Edm.Binary', Edm_Binary);\n    $data.Container.mapType(Edm_Binary, $data.Blob);\n\n    function Edm_DateTime() {};\n    $data.Container.registerType('Edm.DateTime', Edm_DateTime);\n    $data.Container.mapType(Edm_DateTime, $data.Date);\n\n    function Edm_DateTimeOffset() {};\n    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);\n    $data.Container.mapType(Edm_DateTimeOffset, $data.DateTimeOffset);\n\n    function Edm_Time() {};\n    $data.Container.registerType('Edm.Time', Edm_Time);\n    $data.Container.mapType(Edm_Time, $data.Time);\n\n    function Edm_TimeOfDay() {};\n    $data.Container.registerType('Edm.TimeOfDay', Edm_TimeOfDay);\n    $data.Container.mapType(Edm_TimeOfDay, $data.Time);\n\n    function Edm_Date() {};\n    $data.Container.registerType('Edm.Date', Edm_Date);\n    $data.Container.mapType(Edm_Date, $data.Day);\n\n    function Edm_Duration() {};\n    $data.Container.registerType('Edm.Duration', Edm_Duration);\n    $data.Container.mapType(Edm_Duration, $data.Duration);\n\n    function Edm_Decimal() {};\n    $data.Container.registerType('Edm.Decimal', Edm_Decimal);\n    $data.Container.mapType(Edm_Decimal, $data.Decimal);\n\n    function Edm_Float() {};\n    $data.Container.registerType('Edm.Float', Edm_Float);\n    $data.Container.mapType(Edm_Float, $data.Float);\n\n    function Edm_Single() {};\n    $data.Container.registerType('Edm.Single', Edm_Single);\n    $data.Container.mapType(Edm_Single, $data.Float);\n\n    function Edm_Double() {};\n    $data.Container.registerType('Edm.Double', Edm_Double);\n    $data.Container.mapType(Edm_Double, $data.Number);\n\n    function Edm_Guid() {};\n    $data.Container.registerType('Edm.Guid', Edm_Guid);\n    $data.Container.mapType(Edm_Guid, $data.Guid);\n\n    function Edm_Int16() {};\n    $data.Container.registerType('Edm.Int16', Edm_Int16);\n    $data.Container.mapType(Edm_Int16, $data.Int16);\n\n    function Edm_Int32() {};\n    $data.Container.registerType('Edm.Int32', Edm_Int32);\n    $data.Container.mapType(Edm_Int32, $data.Integer);\n\n    function Edm_Int64() {};\n    $data.Container.registerType('Edm.Int64', Edm_Int64);\n    $data.Container.mapType(Edm_Int64, $data.Int64);\n\n    function Edm_Byte() {};\n    $data.Container.registerType('Edm.Byte', Edm_Byte);\n    $data.Container.mapType(Edm_Byte, $data.Byte);\n\n    function Edm_SByte() {};\n    $data.Container.registerType('Edm.SByte', Edm_SByte);\n    $data.Container.mapType(Edm_SByte, $data.SByte);\n\n    function Edm_String() {};\n    $data.Container.registerType('Edm.String', Edm_String);\n    $data.Container.mapType(Edm_String, $data.String);\n\n    function Edm_GeographyPoint() {};\n    $data.Container.registerType('Edm.GeographyPoint', Edm_GeographyPoint);\n    $data.Container.mapType(Edm_GeographyPoint, $data.GeographyPoint);\n\n    function Edm_GeographyLineString() {};\n    $data.Container.registerType('Edm.GeographyLineString', Edm_GeographyLineString);\n    $data.Container.mapType(Edm_GeographyLineString, $data.GeographyLineString);\n\n    function Edm_GeographyPolygon() {};\n    $data.Container.registerType('Edm.GeographyPolygon', Edm_GeographyPolygon);\n    $data.Container.mapType(Edm_GeographyPolygon, $data.GeographyPolygon);\n\n    function Edm_GeographyMultiPoint() {};\n    $data.Container.registerType('Edm.GeographyMultiPoint', Edm_GeographyMultiPoint);\n    $data.Container.mapType(Edm_GeographyMultiPoint, $data.GeographyMultiPoint);\n\n    function Edm_GeographyMultiLineString() {};\n    $data.Container.registerType('Edm.GeographyMultiLineString', Edm_GeographyMultiLineString);\n    $data.Container.mapType(Edm_GeographyMultiLineString, $data.GeographyMultiLineString);\n\n    function Edm_GeographyMultiPolygon() {};\n    $data.Container.registerType('Edm.GeographyMultiPolygon', Edm_GeographyMultiPolygon);\n    $data.Container.mapType(Edm_GeographyMultiPolygon, $data.GeographyMultiPolygon);\n\n    function Edm_GeographyCollection() {};\n    $data.Container.registerType('Edm.GeographyCollection', Edm_GeographyCollection);\n    $data.Container.mapType(Edm_GeographyCollection, $data.GeographyCollection);\n\n    function Edm_GeometryPoint() {};\n    $data.Container.registerType('Edm.GeometryPoint', Edm_GeometryPoint);\n    $data.Container.mapType(Edm_GeometryPoint, $data.GeometryPoint);\n\n    function Edm_GeometryLineString() {};\n    $data.Container.registerType('Edm.GeometryLineString', Edm_GeometryLineString);\n    $data.Container.mapType(Edm_GeometryLineString, $data.GeometryLineString);\n\n    function Edm_GeometryPolygon() {};\n    $data.Container.registerType('Edm.GeometryPolygon', Edm_GeometryPolygon);\n    $data.Container.mapType(Edm_GeometryPolygon, $data.GeometryPolygon);\n\n    function Edm_GeometryMultiPoint() {};\n    $data.Container.registerType('Edm.GeometryMultiPoint', Edm_GeometryMultiPoint);\n    $data.Container.mapType(Edm_GeometryMultiPoint, $data.GeometryMultiPoint);\n\n    function Edm_GeometryMultiLineString() {};\n    $data.Container.registerType('Edm.GeometryMultiLineString', Edm_GeometryMultiLineString);\n    $data.Container.mapType(Edm_GeometryMultiLineString, $data.GeometryMultiLineString);\n\n    function Edm_GeometryMultiPolygon() {};\n    $data.Container.registerType('Edm.GeometryMultiPolygon', Edm_GeometryMultiPolygon);\n    $data.Container.mapType(Edm_GeometryMultiPolygon, $data.GeometryMultiPolygon);\n\n    function Edm_GeometryCollection() {};\n    $data.Container.registerType('Edm.GeometryCollection', Edm_GeometryCollection);\n    $data.Container.mapType(Edm_GeometryCollection, $data.GeometryCollection);\n\n    $data.oDataEdmMapping = {\n        '$data.Byte': 'Edm.Byte',\n        '$data.SByte': 'Edm.SByte',\n        '$data.Decimal': 'Edm.Decimal',\n        '$data.Float': 'Edm.Float',\n        '$data.Int16': 'Edm.Int16',\n        '$data.Int64': 'Edm.Int64',\n        '$data.DateTimeOffset': 'Edm.DateTimeOffset',\n        '$data.Time': 'Edm.TimeOfDay',\n        '$data.Day': 'Edm.Date',\n        '$data.Duration': 'Edm.Duration',\n        '$data.Boolean': 'Edm.Boolean',\n        '$data.Blob': 'Edm.Binary',\n        '$data.Date': 'Edm.DateTime',\n        '$data.Number': 'Edm.Double',\n        '$data.Integer': 'Edm.Int32',\n        '$data.Int32': 'Edm.Int32',\n        '$data.String': 'Edm.String',\n        '$data.ObjectID': 'Edm.String',\n        '$data.GeographyPoint': 'Edm.GeographyPoint',\n        '$data.GeographyLineString': 'Edm.GeographyLineString',\n        '$data.GeographyPolygon': 'Edm.GeographyPolygon',\n        '$data.GeographyMultiPoint': 'Edm.GeographyMultiPoint',\n        '$data.GeographyMultiLineString': 'Edm.GeographyMultiLineString',\n        '$data.GeographyMultiPolygon': 'Edm.GeographyMultiPolygon',\n        '$data.GeographyCollection': 'Edm.GeographyCollection',\n        '$data.GeometryPoint': 'Edm.GeometryPoint',\n        '$data.GeometryLineString': 'Edm.GeometryLineString',\n        '$data.GeometryPolygon': 'Edm.GeometryPolygon',\n        '$data.GeometryMultiPoint': 'Edm.GeometryMultiPoint',\n        '$data.GeometryMultiLineString': 'Edm.GeometryMultiLineString',\n        '$data.GeometryMultiPolygon': 'Edm.GeometryMultiPolygon',\n        '$data.GeometryCollection': 'Edm.GeometryCollection',\n        '$data.Guid': 'Edm.Guid'\n    };\n})(_TypeSystem2.default);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22}],26:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.GeographyBase */\n_TypeSystem2.default.GeographyBase = function GeographyBase() {\n    _TypeSystem2.default.Geospatial.apply(this, arguments);\n\n    this.crs = this.crs || _TypeSystem2.default.GeographyBase.defaultCrs;\n    _TypeSystem2.default.GeographyBase.validateGeoJSON(this);\n};\n\n_TypeSystem2.default.GeographyBase.disableSRID = false;\n_TypeSystem2.default.GeographyBase.defaultCrs = {\n    properties: {\n        name: 'EPSG:4326'\n    },\n    type: 'name'\n};\n\n_TypeSystem2.default.GeographyBase.parseFromString = function (strData) {\n    var lparenIdx = strData.indexOf('(');\n    if (lparenIdx >= 0) {\n        var name = strData.substring(0, lparenIdx).toLowerCase();\n        var type = _TypeSystem2.default.GeographyBase.registered[name];\n\n        if (type && type.parseFromString && type != _TypeSystem2.default.GeographyBase) {\n            return type.parseFromString(strData);\n        } else {\n            _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('parseFromString', 'Not Implemented', strData));\n        }\n    }\n};\n_TypeSystem2.default.GeographyBase.stringifyToUrl = function (geoData) {\n    if (geoData instanceof _TypeSystem2.default.GeographyBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\n        return geoData.constructor.stringifyToUrl(geoData);\n    } else if (geoData instanceof _TypeSystem2.default.GeographyBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\n        var data;\n\n        var _ret = function () {\n            var getSRID = function getSRID(g) {\n                if (!_TypeSystem2.default.GeographyBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name) {\n                    var r = /EPSG:(\\d+)/i;\n                    var matches = r.exec(g.crs.properties.name);\n                    if (matches) {\n                        data += \"SRID=\" + matches[1] + \";\";\n                    }\n                }\n                return data;\n            };\n\n            var buildArray = function buildArray(d) {\n                if (Array.isArray(d[0])) {\n\n                    for (var i = 0; i < d.length; i++) {\n                        if (i > 0) data += ',';\n                        if (Array.isArray(d[i][0])) data += '(';\n\n                        buildArray(d[i]);\n\n                        if (Array.isArray(d[i][0])) data += ')';\n                    }\n                } else {\n                    data += d.join(' ');\n                }\n                return data;\n            };\n\n            data = \"geography'\";\n\n            data = getSRID(geoData);\n            data += geoData.type + '(';\n\n            data = buildArray(geoData.coordinates);\n\n            data += \")'\";\n            return {\n                v: data\n            };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\n    }\n};\n_TypeSystem2.default.GeographyBase.registerType = function (name, type, base) {\n    _TypeSystem2.default.SimpleBase.registerType(name, type, base || _TypeSystem2.default.GeographyBase);\n\n    _TypeSystem2.default.GeographyBase.registered = _TypeSystem2.default.GeographyBase.registered || {};\n    _TypeSystem2.default.GeographyBase.registered[name.toLowerCase()] = type;\n};\n_TypeSystem2.default.GeographyBase.validateGeoJSON = function (geoData) {\n    var type = geoData.type;\n    if (type) {\n        var geoType = _TypeSystem2.default.GeographyBase.registered[type.toLowerCase()];\n        if (typeof geoType.validateGeoJSON === 'function') {\n            var isValid = geoType.validateGeoJSON(geoData);\n            if (isValid) {\n                return isValid;\n            } else {\n                _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\n            }\n        }\n    }\n    console.log('GeoJSON validation missing', geoData);\n    return;\n};\n_TypeSystem2.default.SimpleBase.registerType('GeographyBase', _TypeSystem2.default.GeographyBase, _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.GeographyBase'], _TypeSystem2.default.GeographyBase);\n\n/* $data.GeographyPoint */\n_TypeSystem2.default.GeographyPoint = function GeographyPoint(lon, lat) {\n    if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && Array.isArray(lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: lon });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && ('longitude' in lon || 'latitude' in lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon.longitude, lon.latitude] });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object' && ('lng' in lon || 'lat' in lon)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon.lng, lon.lat] });\n    } else if (lon && (typeof lon === 'undefined' ? 'undefined' : _typeof(lon)) === 'object') {\n        _TypeSystem2.default.GeographyBase.call(this, lon);\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [lon || 0, lat || 0] });\n    }\n};\n_TypeSystem2.default.GeographyPoint.validateGeoJSON = function (geoData) {\n    return geoData && Array.isArray(geoData.coordinates) && geoData.coordinates.length == 2 && typeof geoData.coordinates[0] === 'number' && typeof geoData.coordinates[1] === 'number';\n};\n_TypeSystem2.default.GeographyPoint.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var values = data.split(' ');\n\n    return new _TypeSystem2.default.GeographyPoint(parseFloat(values[0]), parseFloat(values[1]));\n};\n_TypeSystem2.default.GeographyPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('Point', _TypeSystem2.default.GeographyPoint);\nObject.defineProperty(_TypeSystem2.default.GeographyPoint.prototype, 'longitude', { get: function get() {\n        return this.coordinates[0];\n    }, set: function set(v) {\n        this.coordinates[0] = v;\n    } });\nObject.defineProperty(_TypeSystem2.default.GeographyPoint.prototype, 'latitude', { get: function get() {\n        return this.coordinates[1];\n    }, set: function set(v) {\n        this.coordinates[1] = v;\n    } });\n_TypeSystem2.default.Container.registerType(['$data.GeographyPoint', 'GeographyPoint', '$data.Geography', 'Geography', 'geography', 'geo'], _TypeSystem2.default.GeographyPoint);\n_TypeSystem2.default.Geography = _TypeSystem2.default.GeographyPoint;\n\n/* $data.GeographyLineString */\n_TypeSystem2.default.GeographyLineString = function GeographyLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('LineString', _TypeSystem2.default.GeographyLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeographyLineString', 'GeographyLineString'], _TypeSystem2.default.GeographyLineString);\n\n/* $data.GeographyPolygon */\n_TypeSystem2.default.GeographyPolygon = function GeographyPolygon(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && ('topLeft' in data && 'bottomRight' in data || 'topRight' in data && 'bottomLeft' in data)) {\n        var tl, tr, bl, br;\n\n        if ('topLeft' in data && 'bottomRight' in data) {\n            tl = data.topLeft instanceof _TypeSystem2.default.GeographyPoint ? data.topLeft : new _TypeSystem2.default.GeographyPoint(data.topLeft);\n            br = data.bottomRight instanceof _TypeSystem2.default.GeographyPoint ? data.bottomRight : new _TypeSystem2.default.GeographyPoint(data.bottomRight);\n            tr = new _TypeSystem2.default.GeographyPoint([br.coordinates[0], tl.coordinates[1]]);\n            bl = new _TypeSystem2.default.GeographyPoint([tl.coordinates[0], br.coordinates[1]]);\n        } else {\n            tr = data.topRight instanceof _TypeSystem2.default.GeographyPoint ? data.topRight : new _TypeSystem2.default.GeographyPoint(data.topRight);\n            bl = data.bottomLeft instanceof _TypeSystem2.default.GeographyPoint ? data.bottomLeft : new _TypeSystem2.default.GeographyPoint(data.bottomLeft);\n            tl = new _TypeSystem2.default.GeographyPoint([bl.coordinates[0], tr.coordinates[1]]);\n            br = new _TypeSystem2.default.GeographyPoint([tr.coordinates[0], bl.coordinates[1]]);\n        }\n\n        var coordinates = [];\n        coordinates.push([].concat(tl.coordinates));\n        coordinates.push([].concat(tr.coordinates));\n        coordinates.push([].concat(br.coordinates));\n        coordinates.push([].concat(bl.coordinates));\n        coordinates.push([].concat(tl.coordinates));\n\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: [coordinates] });\n    } else if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyPolygon.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\n\n    var data = [];\n    for (var i = 0; i < rings.length; i++) {\n        var polyPoints = [];\n        var pairs = rings[i].split(',');\n        for (var j = 0; j < pairs.length; j++) {\n            var values = pairs[j].split(' ');\n\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\n        }\n        data.push(polyPoints);\n    }\n\n    return new _TypeSystem2.default.GeographyPolygon(data);\n};\n_TypeSystem2.default.GeographyPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('Polygon', _TypeSystem2.default.GeographyPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeographyPolygon', 'GeographyPolygon'], _TypeSystem2.default.GeographyPolygon);\n\n/* $data.GeographyMultiPoint */\n_TypeSystem2.default.GeographyMultiPoint = function GeographyMultiPoint(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiPoint.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiPoint', _TypeSystem2.default.GeographyMultiPoint);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiPoint', 'GeographyMultiPoint'], _TypeSystem2.default.GeographyMultiPoint);\n\n/* $data.GeographyMultiLineString */\n_TypeSystem2.default.GeographyMultiLineString = function GeographyMultiLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiLineString', _TypeSystem2.default.GeographyMultiLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiLineString', 'GeographyMultiLineString'], _TypeSystem2.default.GeographyMultiLineString);\n\n/* $data.GeographyMultiPolygon */\n_TypeSystem2.default.GeographyMultiPolygon = function GeographyMultiPolygon(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyMultiPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\n        var polygons = geoData.coordinates[k];\n        var isValid = isValid && Array.isArray(polygons);\n\n        for (var i = 0; isValid && i < polygons.length; i++) {\n            var polygon = polygons[i];\n            var isValid = isValid && Array.isArray(polygon);\n\n            for (var j = 0; isValid && j < polygon.length; j++) {\n                var point = polygon[j];\n\n                isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n            }\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyMultiPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeographyBase.registerType('MultiPolygon', _TypeSystem2.default.GeographyMultiPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeographyMultiPolygon', 'GeographyMultiPolygon'], _TypeSystem2.default.GeographyMultiPolygon);\n\n/* $data.GeographyCollection */\n_TypeSystem2.default.GeographyCollection = function GeographyCollection(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeographyBase.call(this, { geometries: data });\n    } else {\n        _TypeSystem2.default.GeographyBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeographyCollection.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.geometries);\n\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\n        var geometry = geoData.geometries[i];\n        try {\n            isValid = isValid && _TypeSystem2.default.GeographyBase.validateGeoJSON(geometry);\n        } catch (e) {\n            isValid = false;\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeographyCollection.validMembers = ['geometries'];\n_TypeSystem2.default.GeographyBase.registerType('GeometryCollection', _TypeSystem2.default.GeographyCollection);\n_TypeSystem2.default.Container.registerType(['$data.GeographyCollection', 'GeographyCollection'], _TypeSystem2.default.GeographyCollection);\n\n/* converters */\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyMultiPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyMultiPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeographyCollection, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeographyCollection(value) : value;\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22,\"jaydata-error-handler\":7}],27:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.Geometry */\n_TypeSystem2.default.GeometryBase = function GeometryBase() {\n    _TypeSystem2.default.Geospatial.apply(this, arguments);\n\n    this.crs = this.crs || _TypeSystem2.default.GeometryBase.defaultCrs;\n    _TypeSystem2.default.GeometryBase.validateGeoJSON(this);\n};\n\n_TypeSystem2.default.GeometryBase.disableSRID = false;\n_TypeSystem2.default.GeometryBase.defaultCrs = {\n    properties: {\n        name: 'EPSG:0'\n    },\n    type: 'name'\n};\n\n_TypeSystem2.default.GeometryBase.parseFromString = function (strData) {\n    var lparenIdx = strData.indexOf('(');\n    if (lparenIdx >= 0) {\n        var name = strData.substring(0, lparenIdx).toLowerCase();\n        var type = _TypeSystem2.default.GeometryBase.registered[name];\n\n        if (type && type.parseFromString && type != _TypeSystem2.default.GeometryBase) {\n            return type.parseFromString(strData);\n        } else {\n            _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('parseFromString', 'Not Implemented', strData));\n        }\n    }\n};\n_TypeSystem2.default.GeometryBase.stringifyToUrl = function (geoData) {\n    if (geoData instanceof _TypeSystem2.default.GeometryBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\n        return geoData.constructor.stringifyToUrl(geoData);\n    } else if (geoData instanceof _TypeSystem2.default.GeometryBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\n        var data;\n\n        var _ret = function () {\n            var getSRID = function getSRID(g) {\n                if (!_TypeSystem2.default.GeometryBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name) {\n                    var r = /EPSG:(\\d+)/i;\n                    var matches = r.exec(g.crs.properties.name);\n                    if (matches) {\n                        data += \"SRID=\" + matches[1] + \";\";\n                    }\n                }\n                return data;\n            };\n\n            var buildArray = function buildArray(d) {\n                if (Array.isArray(d[0])) {\n\n                    for (var i = 0; i < d.length; i++) {\n                        if (i > 0) data += ',';\n                        if (Array.isArray(d[i][0])) data += '(';\n\n                        buildArray(d[i]);\n\n                        if (Array.isArray(d[i][0])) data += ')';\n                    }\n                } else {\n                    data += d.join(' ');\n                }\n                return data;\n            };\n\n            data = \"geometry'\";\n\n            data = getSRID(geoData);\n            data += geoData.type + '(';\n\n            data = buildArray(geoData.coordinates);\n\n            data += \")'\";\n            return {\n                v: data\n            };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n    } else {\n        _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\n    }\n};\n_TypeSystem2.default.GeometryBase.registerType = function (name, type, base) {\n    _TypeSystem2.default.SimpleBase.registerType(name, type, base || _TypeSystem2.default.GeometryBase);\n\n    _TypeSystem2.default.GeometryBase.registered = _TypeSystem2.default.GeometryBase.registered || {};\n    _TypeSystem2.default.GeometryBase.registered[name.toLowerCase()] = type;\n};\n_TypeSystem2.default.GeometryBase.validateGeoJSON = function (geoData) {\n    var type = geoData.type;\n    if (type) {\n        var geoType = _TypeSystem2.default.GeometryBase.registered[type.toLowerCase()];\n        if (typeof geoType.validateGeoJSON === 'function') {\n            var isValid = geoType.validateGeoJSON(geoData);\n            if (isValid) {\n                return isValid;\n            } else {\n                _jaydataErrorHandler.Guard.raise(new _jaydataErrorHandler.Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\n            }\n        }\n    }\n    console.log('GeoJSON validation missing', geoData);\n    return;\n};\n_TypeSystem2.default.SimpleBase.registerType('GeometryBase', _TypeSystem2.default.GeometryBase, _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.GeometryBase'], _TypeSystem2.default.GeometryBase);\n\n/* $data.GeometryPoint */\n_TypeSystem2.default.GeometryPoint = function GeometryPoint(x, y) {\n    var param = x;\n    if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object' && Array.isArray(param)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: param });\n    } else if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object' && ('x' in param || 'y' in param)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [param.x, param.y] });\n    } else if (param && (typeof param === 'undefined' ? 'undefined' : _typeof(param)) === 'object') {\n        _TypeSystem2.default.GeometryBase.call(this, param);\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [x || 0, y || 0] });\n    }\n};\n_TypeSystem2.default.GeometryPoint.validateGeoJSON = function (geoData) {\n    return geoData && Array.isArray(geoData.coordinates) && geoData.coordinates.length == 2 && typeof geoData.coordinates[0] === 'number' && typeof geoData.coordinates[1] === 'number';\n};\n_TypeSystem2.default.GeometryPoint.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var values = data.split(' ');\n\n    return new _TypeSystem2.default.GeometryPoint(parseFloat(values[0]), parseFloat(values[1]));\n};\n_TypeSystem2.default.GeometryPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('Point', _TypeSystem2.default.GeometryPoint);\nObject.defineProperty(_TypeSystem2.default.GeometryPoint.prototype, 'x', { get: function get() {\n        return this.coordinates[0];\n    }, set: function set(v) {\n        this.coordinates[0] = v;\n    } });\nObject.defineProperty(_TypeSystem2.default.GeometryPoint.prototype, 'y', { get: function get() {\n        return this.coordinates[1];\n    }, set: function set(v) {\n        this.coordinates[1] = v;\n    } });\n_TypeSystem2.default.Container.registerType(['$data.GeometryPoint', 'GeometryPoint'], _TypeSystem2.default.GeometryPoint);\n\n/* $data.GeometryLineString */\n_TypeSystem2.default.GeometryLineString = function GeometryLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('LineString', _TypeSystem2.default.GeometryLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeometryLineString', 'GeometryLineString'], _TypeSystem2.default.GeometryLineString);\n\n/* $data.GeometryPolygon */\n_TypeSystem2.default.GeometryPolygon = function GeometryPolygon(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && ('topLeft' in data && 'bottomRight' in data || 'topRight' in data && 'bottomLeft' in data)) {\n        var tl, tr, bl, br;\n\n        if ('topLeft' in data && 'bottomRight' in data) {\n            tl = data.topLeft instanceof _TypeSystem2.default.GeometryPoint ? data.topLeft : new _TypeSystem2.default.GeometryPoint(data.topLeft);\n            br = data.bottomRight instanceof _TypeSystem2.default.GeometryPoint ? data.bottomRight : new _TypeSystem2.default.GeometryPoint(data.bottomRight);\n            tr = new _TypeSystem2.default.GeometryPoint([br.coordinates[0], tl.coordinates[1]]);\n            bl = new _TypeSystem2.default.GeometryPoint([tl.coordinates[0], br.coordinates[1]]);\n        } else {\n            tr = data.topRight instanceof _TypeSystem2.default.GeometryPoint ? data.topRight : new _TypeSystem2.default.GeometryPoint(data.topRight);\n            bl = data.bottomLeft instanceof _TypeSystem2.default.GeometryPoint ? data.bottomLeft : new _TypeSystem2.default.GeometryPoint(data.bottomLeft);\n            tl = new _TypeSystem2.default.GeometryPoint([bl.coordinates[0], tr.coordinates[1]]);\n            br = new _TypeSystem2.default.GeometryPoint([tr.coordinates[0], bl.coordinates[1]]);\n        }\n\n        var coordinates = [];\n        coordinates.push([].concat(tl.coordinates));\n        coordinates.push([].concat(tr.coordinates));\n        coordinates.push([].concat(br.coordinates));\n        coordinates.push([].concat(bl.coordinates));\n        coordinates.push([].concat(tl.coordinates));\n\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: [coordinates] });\n    } else if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryPolygon.parseFromString = function (strData) {\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\n\n    var data = [];\n    for (var i = 0; i < rings.length; i++) {\n        var polyPoints = [];\n        var pairs = rings[i].split(',');\n        for (var j = 0; j < pairs.length; j++) {\n            var values = pairs[j].split(' ');\n\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\n        }\n        data.push(polyPoints);\n    }\n\n    return new _TypeSystem2.default.GeometryPolygon(data);\n};\n_TypeSystem2.default.GeometryPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('Polygon', _TypeSystem2.default.GeometryPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeometryPolygon', 'GeometryPolygon'], _TypeSystem2.default.GeometryPolygon);\n\n/* $data.GeometryMultiPoint */\n_TypeSystem2.default.GeometryMultiPoint = function GeometryMultiPoint(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiPoint.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var point = geoData.coordinates[i];\n        isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiPoint.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiPoint', _TypeSystem2.default.GeometryMultiPoint);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiPoint', 'GeometryMultiPoint'], _TypeSystem2.default.GeometryMultiPoint);\n\n/* $data.GeometryMultiLineString */\n_TypeSystem2.default.GeometryMultiLineString = function GeometryMultiLineString(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiLineString.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\n        var polygon = geoData.coordinates[i];\n        var isValid = isValid && Array.isArray(polygon);\n\n        for (var j = 0; isValid && j < polygon.length; j++) {\n            var point = polygon[j];\n\n            isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiLineString.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiLineString', _TypeSystem2.default.GeometryMultiLineString);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiLineString', 'GeometryMultiLineString'], _TypeSystem2.default.GeometryMultiLineString);\n\n/* $data.GeometryMultiPolygon */\n_TypeSystem2.default.GeometryMultiPolygon = function GeometryMultiPolygon(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { coordinates: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryMultiPolygon.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.coordinates);\n\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\n        var polygons = geoData.coordinates[k];\n        var isValid = isValid && Array.isArray(polygons);\n\n        for (var i = 0; isValid && i < polygons.length; i++) {\n            var polygon = polygons[i];\n            var isValid = isValid && Array.isArray(polygon);\n\n            for (var j = 0; isValid && j < polygon.length; j++) {\n                var point = polygon[j];\n\n                isValid = isValid && Array.isArray(point) && point.length == 2 && typeof point[0] === 'number' && typeof point[1] === 'number';\n            }\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryMultiPolygon.validMembers = ['coordinates'];\n_TypeSystem2.default.GeometryBase.registerType('MultiPolygon', _TypeSystem2.default.GeometryMultiPolygon);\n_TypeSystem2.default.Container.registerType(['$data.GeometryMultiPolygon', 'GeometryMultiPolygon'], _TypeSystem2.default.GeometryMultiPolygon);\n\n/* $data.GeometryCollection */\n_TypeSystem2.default.GeometryCollection = function GeometryCollection(data) {\n    if (Array.isArray(data)) {\n        _TypeSystem2.default.GeometryBase.call(this, { geometries: data });\n    } else {\n        _TypeSystem2.default.GeometryBase.call(this, data);\n    }\n};\n_TypeSystem2.default.GeometryCollection.validateGeoJSON = function (geoData) {\n    var isValid = geoData && Array.isArray(geoData.geometries);\n\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\n        var geometry = geoData.geometries[i];\n        try {\n            isValid = isValid && _TypeSystem2.default.GeometryBase.validateGeoJSON(geometry);\n        } catch (e) {\n            isValid = false;\n        }\n    }\n\n    return isValid;\n};\n_TypeSystem2.default.GeometryCollection.validMembers = ['geometries'];\n_TypeSystem2.default.GeometryBase.registerType('GeometryCollection', _TypeSystem2.default.GeometryCollection);\n_TypeSystem2.default.Container.registerType(['$data.GeometryCollection', 'GeometryCollection'], _TypeSystem2.default.GeometryCollection);\n\n/* converters */\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiPoint, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiPoint(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiLineString, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiLineString(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryMultiPolygon, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryMultiPolygon(value) : value;\n});\n_TypeSystem2.default.Container.registerConverter(_TypeSystem2.default.GeometryCollection, _TypeSystem2.default.Object, function (value) {\n    return value ? new _TypeSystem2.default.GeometryCollection(value) : value;\n});\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22,\"jaydata-error-handler\":7}],28:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Geospatial = function Geospatial() {\n    this.type = this.constructor.type;\n    if (Array.isArray(this.constructor.validMembers)) {\n        for (var i = 0; i < this.constructor.validMembers.length; i++) {\n            var name = this.constructor.validMembers[i];\n            this[name] = undefined;\n        }\n    }\n\n    _TypeSystem2.default.SimpleBase.apply(this, arguments);\n    this.type = this.constructor.type || 'Unknown';\n};\n_TypeSystem2.default.SimpleBase.registerType('Geospatial', _TypeSystem2.default.Geospatial);\n_TypeSystem2.default.Container.registerType(['$data.Geospatial', 'Geospatial'], _TypeSystem2.default.Geospatial);\n\n_TypeSystem2.default.point = function (arg) {\n    if (arg && arg.crs) {\n        if (arg.crs.properties && arg.crs.properties.name === _TypeSystem2.default.GeometryBase.defaultCrs.properties.name) {\n            return new _TypeSystem2.default.GeometryPoint(arg);\n        } else {\n            return new _TypeSystem2.default.GeographyPoint(arg);\n        }\n    } else if (arg) {\n        if ('x' in arg && 'y' in arg) {\n            return new _TypeSystem2.default.GeometryPoint(arg.x, arg.y);\n        } else if ('longitude' in arg && 'latitude' in arg) {\n            return new _TypeSystem2.default.GeographyPoint(arg.longitude, arg.latitude);\n        } else if ('lng' in arg && 'lat' in arg) {\n            return new _TypeSystem2.default.GeographyPoint(arg.lng, arg.lat);\n        }\n    }\n};\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22}],29:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Guid = function Guid(value) {\n    ///<param name=\"value\" type=\"string\" />\n\n    if (value === undefined || typeof value === 'string' && /^[a-zA-z0-9]{8}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{12}$/.test(value)) {\n        this.value = value || '00000000-0000-0000-0000-000000000000';\n    } else {\n        throw Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Guid', value));\n    }\n};\n_TypeSystem2.default.Container.registerType(['$data.Guid', 'Guid', 'guid'], _TypeSystem2.default.Guid);\n_TypeSystem2.default.Container.registerConverter('$data.Guid', {\n    '$data.String': function $dataString(value) {\n        return value ? _TypeSystem2.default.parseGuid(value).toString() : value;\n    },\n    '$data.Guid': function $dataGuid(value) {\n        return value ? value.toString() : value;\n    }\n}, {\n    '$data.String': function $dataString(value) {\n        return value ? value.toString() : value;\n    }\n});\n\n_TypeSystem2.default.Guid.prototype.toJSON = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.prototype.valueOf = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.prototype.toString = function () {\n    return this.value;\n};\n\n_TypeSystem2.default.Guid.NewGuid = function () {\n    return _TypeSystem2.default.createGuid();\n};\n\n_TypeSystem2.default.parseGuid = function (guid) {\n    return new _TypeSystem2.default.Guid(guid);\n};\n\n(function () {\n    /*!\r\n    Math.uuid.js (v1.4)\r\n    http://www.broofa.com\r\n    mailto:robert@broofa.com\r\n      Copyright (c) 2010 Robert Kieffer\r\n    Dual licensed under the MIT and GPL licenses.\r\n    */\n\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\n    _TypeSystem2.default.createGuid = function (guidString) {\n        if (guidString) {\n            return new _TypeSystem2.default.Guid(guidString);\n        };\n\n        var len;\n        var chars = CHARS,\n            uuid = [],\n            i;\n        var radix = chars.length;\n\n        if (len) {\n            // Compact form\n            for (i = 0; i < len; i++) {\n                uuid[i] = chars[0 | Math.random() * radix];\n            }\n        } else {\n            // rfc4122, version 4 form\n            var r;\n\n            // rfc4122 requires these characters\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n            uuid[14] = '4';\n\n            // Fill in random data.  At i==19 set the high bits of clock sequence as\n            // per rfc4122, sec. 4.1.5\n            for (i = 0; i < 36; i++) {\n                if (!uuid[i]) {\n                    r = 0 | Math.random() * 16;\n                    uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];\n                }\n            }\n        }\n\n        return _TypeSystem2.default.parseGuid(uuid.join(''));\n    };\n})();\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22}],30:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* $data.SimpleBase */\n_TypeSystem2.default.SimpleBase = function SimpleBase(data) {\n    if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && data) {\n        if (Array.isArray(this.constructor.validMembers)) {\n            for (var i = 0; i < this.constructor.validMembers.length; i++) {\n                var name = this.constructor.validMembers[i];\n\n                if (data[name] !== undefined) {\n                    this[name] = data[name];\n                }\n            }\n        } else {\n            delete data.type;\n            _TypeSystem2.default.typeSystem.extend(this, data);\n        }\n    }\n};\n_TypeSystem2.default.SimpleBase.registerType = function (name, type, base) {\n    base = base || _TypeSystem2.default.SimpleBase;\n\n    type.type = name;\n    type.prototype = Object.create(base.prototype);\n    type.prototype.constructor = type;\n};\n_TypeSystem2.default.Container.registerType(['$data.SimpleBase', 'SimpleBase'], _TypeSystem2.default.SimpleBase);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22}],31:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _TypeSystem = _dereq_('../TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_TypeSystem2.default.Number = typeof Number !== 'undefined' ? Number : function JayNumber() {};\n_TypeSystem2.default.Date = typeof Date !== 'undefined' ? Date : function JayDate() {};\n_TypeSystem2.default.String = typeof String !== 'undefined' ? String : function JayString() {};\n_TypeSystem2.default.Boolean = typeof Boolean !== 'undefined' ? Boolean : function JayBoolean() {};\n_TypeSystem2.default.Array = typeof Array !== 'undefined' ? Array : function JayArray() {};\n_TypeSystem2.default.Object = typeof Object !== 'undefined' ? Object : function JayObject() {};\n_TypeSystem2.default.Function = Function;\n\n_TypeSystem2.default.Byte = function JayByte() {};\n_TypeSystem2.default.SByte = function JaySByte() {};\n_TypeSystem2.default.Decimal = function JayDecimal() {};\n_TypeSystem2.default.Float = _TypeSystem2.default.Single = function JayFloat() {};\n_TypeSystem2.default.Integer = function JayInteger() {};\n_TypeSystem2.default.Int16 = function JayInt16(v) {};\n_TypeSystem2.default.Int32 = function JayInt32() {};\n_TypeSystem2.default.Int64 = function JayInt64(v) {};\n_TypeSystem2.default.ObjectID = typeof _TypeSystem2.default.mongoDBDriver !== 'undefined' && typeof _TypeSystem2.default.mongoDBDriver.ObjectID !== 'undefined' ? _TypeSystem2.default.mongoDBDriver.ObjectID : function JayObjectID() {};\n_TypeSystem2.default.Time = function JayTime() {};\n_TypeSystem2.default.Day = function JayDay() {};\n_TypeSystem2.default.Duration = function JayDuration() {};\n_TypeSystem2.default.DateTimeOffset = function JayDateTimeOffset(val) {\n    this.value = val;\n};\n_TypeSystem2.default.DateTimeOffset.prototype.toJSON = function () {\n    return this.value instanceof Date ? this.value.toISOString() : this.value;\n};\n\n_TypeSystem2.default.Container.registerType([\"$data.Number\", \"number\", \"JayNumber\", \"double\"], _TypeSystem2.default.Number);\n_TypeSystem2.default.Container.registerType([\"$data.Integer\", \"int\", \"integer\", \"JayInteger\"], _TypeSystem2.default.Integer);\n_TypeSystem2.default.Container.registerType([\"$data.Int32\", \"int32\", \"JayInt32\"], _TypeSystem2.default.Int32);\n_TypeSystem2.default.Container.registerType([\"$data.Byte\", \"byte\", \"JayByte\"], _TypeSystem2.default.Byte);\n_TypeSystem2.default.Container.registerType([\"$data.SByte\", \"sbyte\", \"JaySByte\"], _TypeSystem2.default.SByte);\n_TypeSystem2.default.Container.registerType([\"$data.Decimal\", \"decimal\", \"JayDecimal\"], _TypeSystem2.default.Decimal);\n_TypeSystem2.default.Container.registerType([\"$data.Float\", \"$data.Single\", \"float\", \"single\", \"JayFloat\"], _TypeSystem2.default.Float);\n_TypeSystem2.default.Container.registerType([\"$data.Int16\", \"int16\", \"word\", \"JayInt16\"], _TypeSystem2.default.Int16);\n_TypeSystem2.default.Container.registerType([\"$data.Int64\", \"int64\", \"long\", \"JayInt64\"], _TypeSystem2.default.Int64);\n_TypeSystem2.default.Container.registerType([\"$data.String\", \"string\", \"text\", \"character\", \"JayString\"], _TypeSystem2.default.String);\n_TypeSystem2.default.Container.registerType([\"$data.Array\", \"array\", \"Array\", \"[]\", \"JayArray\"], _TypeSystem2.default.Array, function () {\n    return _TypeSystem2.default.Array.apply(undefined, arguments);\n});\n_TypeSystem2.default.Container.registerType([\"$data.Date\", \"datetime\", \"date\", \"JayDate\"], _TypeSystem2.default.Date);\n_TypeSystem2.default.Container.registerType([\"$data.Time\", \"time\", \"JayTime\"], _TypeSystem2.default.Time);\n_TypeSystem2.default.Container.registerType([\"$data.Day\", \"day\", \"JayDay\"], _TypeSystem2.default.Day);\n_TypeSystem2.default.Container.registerType([\"$data.Duration\", \"duration\", \"JayDuration\"], _TypeSystem2.default.Duration);\n_TypeSystem2.default.Container.registerType([\"$data.DateTimeOffset\", \"offset\", \"datetimeoffset\", \"JayDateTimeOffset\"], _TypeSystem2.default.DateTimeOffset);\n_TypeSystem2.default.Container.registerType([\"$data.Boolean\", \"bool\", \"boolean\", \"JayBoolean\"], _TypeSystem2.default.Boolean);\n_TypeSystem2.default.Container.registerType([\"$data.Object\", \"Object\", \"object\", \"{}\", \"JayObject\"], _TypeSystem2.default.Object);\n_TypeSystem2.default.Container.registerType([\"$data.Function\", \"Function\", \"function\"], _TypeSystem2.default.Function);\n_TypeSystem2.default.Container.registerType(['$data.ObjectID', 'ObjectID', 'objectId', 'objectid', 'ID', 'Id', 'id', 'JayObjectID'], _TypeSystem2.default.ObjectID);\n\nexports.default = _TypeSystem2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem.js\":22}],32:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Container = exports.$C = exports.Exception = exports.Guard = undefined;\n\nvar _TypeSystem = _dereq_('./TypeSystem.js');\n\nvar _TypeSystem2 = _interopRequireDefault(_TypeSystem);\n\nvar _Types = _dereq_('./Types/Types.js');\n\nvar _Types2 = _interopRequireDefault(_Types);\n\nvar _Trace = _dereq_('./Trace/Trace.js');\n\nvar _Trace2 = _interopRequireDefault(_Trace);\n\nvar _Logger = _dereq_('./Trace/Logger.js');\n\nvar _Logger2 = _interopRequireDefault(_Logger);\n\nvar _SimpleBase = _dereq_('./Types/SimpleBase.js');\n\nvar _SimpleBase2 = _interopRequireDefault(_SimpleBase);\n\nvar _Geospatial = _dereq_('./Types/Geospatial.js');\n\nvar _Geospatial2 = _interopRequireDefault(_Geospatial);\n\nvar _Geography = _dereq_('./Types/Geography.js');\n\nvar _Geography2 = _interopRequireDefault(_Geography);\n\nvar _Geometry = _dereq_('./Types/Geometry.js');\n\nvar _Geometry2 = _interopRequireDefault(_Geometry);\n\nvar _Guid = _dereq_('./Types/Guid.js');\n\nvar _Guid2 = _interopRequireDefault(_Guid);\n\nvar _Blob = _dereq_('./Types/Blob.js');\n\nvar _Blob2 = _interopRequireDefault(_Blob);\n\nvar _EdmTypes = _dereq_('./Types/EdmTypes.js');\n\nvar _EdmTypes2 = _interopRequireDefault(_EdmTypes);\n\nvar _Converter = _dereq_('./Types/Converter.js');\n\nvar _Converter2 = _interopRequireDefault(_Converter);\n\nvar _jaydataErrorHandler = _dereq_('jaydata-error-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Guard = exports.Guard = _jaydataErrorHandler.Guard;\n_TypeSystem2.default.Guard = _jaydataErrorHandler.Guard;\n\nvar Exception = exports.Exception = _jaydataErrorHandler.Exception;\n_TypeSystem2.default.Exception = _jaydataErrorHandler.Exception;\n\nvar $C = exports.$C = _TypeSystem.$C;\n_TypeSystem2.default.$C = _TypeSystem.$C;\n\nvar Container = exports.Container = _TypeSystem.Container;\nexports.default = _TypeSystem2.default;\n\n},{\"./Trace/Logger.js\":20,\"./Trace/Trace.js\":21,\"./TypeSystem.js\":22,\"./Types/Blob.js\":23,\"./Types/Converter.js\":24,\"./Types/EdmTypes.js\":25,\"./Types/Geography.js\":26,\"./Types/Geometry.js\":27,\"./Types/Geospatial.js\":28,\"./Types/Guid.js\":29,\"./Types/SimpleBase.js\":30,\"./Types/Types.js\":31,\"jaydata-error-handler\":7}],33:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _initializeJayDataClient = _dereq_('./initializeJayDataClient.js');\n\nvar _initializeJayDataClient2 = _interopRequireDefault(_initializeJayDataClient);\n\nvar _acorn = _dereq_('acorn');\n\nvar acorn = _interopRequireWildcard(_acorn);\n\nvar _package = _dereq_('../../package.json');\n\nvar pkg = _interopRequireWildcard(_package);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof console === 'undefined') {\n  console = {\n    warn: function warn() {},\n    error: function error() {},\n    log: function log() {},\n    dir: function dir() {},\n    time: function time() {},\n    timeEnd: function timeEnd() {}\n  };\n}\n\nif (!console.warn) console.warn = function () {};\nif (!console.error) console.error = function () {};\n\n(function ($data) {\n  ///<summary>\n  /// Collection of JayData services\n  ///</summary>\n  $data.__namespace = true;\n  $data.version = \"JayData \" + pkg.version;\n  $data.versionNumber = pkg.version;\n  $data.root = {};\n  $data.Acorn = acorn;\n})(_initializeJayDataClient2.default);\nexports.default = _initializeJayDataClient2.default;\n// Do not remove this block, it is used by jsdoc\n/**\r\n    @name $data.Base\r\n    @class base class\r\n*/\n\nmodule.exports = exports['default'];\n\n},{\"../../package.json\":16,\"./initializeJayDataClient.js\":34,\"acorn\":1}],34:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _data_handler;\nfunction _data_handler() {\n  console.log(\"@@@@\", this);\n  if (this instanceof _data_handler) {\n    var type = _data_handler[\"implementation\"].apply(this, arguments);\n    return new type(arguments[1]);\n  } else {\n    return _data_handler[\"implementation\"].apply(this, arguments);\n  }\n};\nmodule.exports = exports['default'];\n\n},{}],35:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Access', null, null, {}, {\n    isAuthorized: function isAuthorized(access, user, sets, callback) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var clbWrapper = pHandler.createCallback(callback);\n        var pHandlerResult = pHandler.getPromise();\n\n        //clbWrapper.error('Authorization failed', 'Access authorization');\n        clbWrapper.success(true);\n\n        return pHandlerResult;\n\n        /*var error;\r\n          if (!access) error = 'Access undefined';\r\n        if (typeof access !== 'number') error = 'Invalid access type';\r\n        if (!user) user = {}; //error = 'User undefined';\r\n        if (!user.roles) user.roles = {}; //error = 'User has no roles';\r\n        if (!roles) roles = {}; //error = 'Roles undefined';\r\n        if (!(roles instanceof Array || typeof roles === 'object')) error = 'Invald roles type';\r\n          var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n          if (error){\r\n            clbWrapper.error(error, 'Access authorization');\r\n            return pHandlerResult;\r\n        }\r\n          if (user.roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < user.roles.length; i++){\r\n                if (typeof user.roles[i] === 'string') r[user.roles[i]] = true;\r\n            }\r\n            user.roles = r;\r\n        }\r\n          if (roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < roles.length; i++){\r\n                if (typeof roles[i] === 'string') r[roles[i]] = true;\r\n            }\r\n            roles = r;\r\n        }\r\n          var args = arguments;\r\n        var readyFn = function(result){\r\n            if (result) clbWrapper.success(result);\r\n            else clbWrapper.error('Authorization failed', args);\r\n        };\r\n          var rolesKeys = Object.getOwnPropertyNames(roles);\r\n        var i = 0;\r\n          var callbackFn = function(result){\r\n            if (result) readyFn(result);\r\n              if (typeof roles[rolesKeys[i]] === 'boolean' && roles[rolesKeys[i]]){\r\n                if (user.roles[rolesKeys[i]]) readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'function'){\r\n                var r = roles[rolesKeys[i]].call(user);\r\n                  if (typeof r === 'function') r.call(user, (i < rolesKeys.length ? callbackFn : readyFn));\r\n                else{\r\n                    if (r) readyFn(true);\r\n                    else{\r\n                        i++;\r\n                        if (i < rolesKeys.length) callbackFn();\r\n                        else readyFn(false);\r\n                    }\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'number'){\r\n                if (((typeof user.roles[rolesKeys[i]] === 'number' && (user.roles[rolesKeys[i]] & access)) ||\r\n                    (typeof user.roles[rolesKeys[i]] !== 'number' && user.roles[rolesKeys[i]])) &&\r\n                    (roles[rolesKeys[i]] & access)) user.roles[rolesKeys[i]] &&  readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }\r\n        };\r\n          callbackFn();\r\n          return pHandlerResult;*/\n    },\n    getAccessBitmaskFromPermission: function getAccessBitmaskFromPermission(p) {\n        var access = _index2.default.Access.None;\n\n        if (p.Create) access |= _index2.default.Access.Create;\n        if (p.Read) access |= _index2.default.Access.Read;\n        if (p.Update) access |= _index2.default.Access.Update;\n        if (p.Delete) access |= _index2.default.Access.Delete;\n        if (p.DeleteBatch) access |= _index2.default.Access.DeleteBatch;\n        if (p.Execute) access |= _index2.default.Access.Execute;\n\n        return access;\n    },\n    None: { value: 0 },\n    Create: { value: 1 },\n    Read: { value: 2 },\n    Update: { value: 4 },\n    Delete: { value: 8 },\n    DeleteBatch: { value: 16 },\n    Execute: { value: 32 }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],36:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.ajax = _index2.default.ajax || function () {\n    var cfg = arguments[arguments.length - 1];\n    var clb = _index2.default.PromiseHandlerBase.createCallbackSettings(cfg);\n    clb.error(\"Not implemented\");\n};\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],37:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof Ext !== 'undefined' && _typeof(Ext.Ajax)) {\n    _index2.default.ajax = _index2.default.ajax || function (options) {\n        Ext.Ajax.request(options);\n    };\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],38:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof WinJS !== 'undefined' && WinJS.xhr) {\n    _index2.default.ajax = _index2.default.ajax || function (options) {\n        _index2.default.typeSystem.extend(options, {\n            dataType: 'json',\n            headers: {}\n        });\n        var dataTypes = {\n            'json': {\n                accept: 'application/json, text/javascript',\n                convert: JSON.parse\n            },\n            'text': {\n                accept: 'text/plain',\n                convert: function convert(e) {\n                    return e;\n                }\n            },\n            'html': {\n                accept: 'text/html',\n                convert: function convert(e) {\n                    return e;\n                }\n            },\n            'xml': {\n                accept: 'application/xml, text/xml',\n                convert: function convert(e) {\n                    // TODO?\n                    return e;\n                }\n            }\n        };\n        var dataTypeContext = dataTypes[options.dataType.toLowerCase()];\n\n        options.headers.Accept = dataTypeContext.accept;\n\n        var successClb = options.success || _index2.default.defaultSuccessCallback;\n        var errorClb = options.error || _index2.default.defaultErrorCallback;\n        var progressClb = options.progress;\n\n        var success = function success(r) {\n            var result = dataTypeContext.convert(r.responseText);\n            successClb(result);\n        };\n        var error = function error(r) {\n            var error = dataTypeContext.convert(r.responseText);\n            errorClb(error);\n        };\n        var progress = progressClb;\n\n        WinJS.xhr(options).done(success, error, progress);\n    };\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],39:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (typeof jQuery !== 'undefined' && jQuery.ajax) {\n    _index2.default.ajax = _index2.default.ajax || jQuery.ajax;\n}\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],40:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.Anonymous\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = cfg || {};\n        this.Authenticated = false;\n    },\n    /// { error:, abort:, pending:, success: }\n    Login: function Login(callbacks) {},\n    Logout: function Logout() {},\n    CreateRequest: function CreateRequest(cfg) {\n        _index2.default.ajax(cfg);\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],41:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.AuthenticationBase\", null, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = cfg || {};\n        this.Authenticated = false;\n    },\n    /// { error:, abort:, pending:, success: }\n    Login: function Login(callbacks) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    Logout: function Logout() {\n        _index.Guard.raise(\"Pure class\");\n    },\n    CreateRequest: function CreateRequest(cfg) {\n        _index.Guard.raise(\"Pure class\");\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],42:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.BasicAuth.BasicAuth\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = _index2.default.typeSystem.extend({\n            Username: '',\n            Password: ''\n        }, cfg);\n    },\n    Login: function Login(callbacks) {\n        if (callbacks && typeof callbacks.pending == \"function\") callbacks.pending();\n    },\n    Logout: function Logout() {},\n    CreateRequest: function CreateRequest(cfg) {\n        if (!cfg) return;\n        var _this = this;\n\n        var origBeforeSend = cfg.beforeSend;\n        cfg.beforeSend = function (xhr) {\n            xhr.setRequestHeader(\"Authorization\", \"Basic  \" + _this.__encodeBase64(_this.configuration.Username + \":\" + _this.configuration.Password));\n\n            if (typeof origBeforeSend == \"function\") origBeforeSend(xhr);\n        };\n\n        _index2.default.ajax(cfg);\n    },\n    __encodeBase64: function __encodeBase64(val) {\n        var b64array = \"ABCDEFGHIJKLMNOP\" + \"QRSTUVWXYZabcdef\" + \"ghijklmnopqrstuv\" + \"wxyz0123456789+/\" + \"=\";\n\n        input = val;\n        var base64 = \"\";\n        var hex = \"\";\n        var chr1,\n            chr2,\n            chr3 = \"\";\n        var enc1,\n            enc2,\n            enc3,\n            enc4 = \"\";\n        var i = 0;\n\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n            enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n\n            base64 = base64 + b64array.charAt(enc1) + b64array.charAt(enc2) + b64array.charAt(enc3) + b64array.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return base64;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],43:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.Authentication.FacebookAuth\", _index2.default.Authentication.AuthenticationBase, null, {\n    constructor: function constructor(cfg) {\n        this.configuration = _index2.default.typeSystem.extend({\n            Url_code: '',\n            type_code: '',\n            scope: '',\n            Url_token: '',\n            type_token: '',\n            access_token: '',\n            app_id: ''\n        }, cfg);\n    },\n    Login: function Login(callbacks) {\n        if (this.Authenticated) {\n            return;\n        }\n\n        var provider = this;\n        provider.configuration.stateCallbacks = callbacks || {};\n\n        _index2.default.ajax({\n            url: this.configuration.Url_code,\n            data: 'type=' + provider.configuration.type_code + '&client_id=' + provider.configuration.app_id + '&scope=' + provider.configuration.scope,\n            type: 'POST',\n            dataType: 'json',\n            success: function success(data) {\n                if (typeof provider.configuration.stateCallbacks.pending == \"function\") provider.configuration.stateCallbacks.pending(data);\n                provider._processRequestToken(data);\n                provider.Authenticated = true;\n            },\n            error: function error() {\n                if (typeof provider.configuration.stateCallbacks.error == \"function\") provider.configuration.stateCallbacks.error(arguments);\n            }\n        });\n    },\n    Logout: function Logout() {\n        this.Authenticated = false;\n    },\n    CreateRequest: function CreateRequest(cfg) {\n        if (!cfg) return;\n        var _this = this;\n\n        if (cfg.url.indexOf('access_token=') === -1) {\n            if (cfg.url && this.Authenticated) {\n                var andChar = '?';\n                if (cfg.url.indexOf(andChar) > 0) andChar = '&';\n\n                if (this.configuration.access_token) cfg.url = cfg.url + andChar + 'access_token=' + this.configuration.access_token;\n            }\n        }\n\n        _index2.default.ajax(cfg);\n    },\n    _processRequestToken: function _processRequestToken(verification_data) {\n        var provider = this;\n\n        _index2.default.ajax({\n            url: provider.configuration.Url_token,\n            data: 'type=' + provider.configuration.type_token + '&client_id=' + provider.configuration.app_id + '&code=' + verification_data.code,\n            type: 'POST',\n            dataType: 'json',\n            success: function success(result) {\n                provider.configuration.access_token = result.access_token;\n                if (typeof provider.configuration.stateCallbacks.success == \"function\") provider.configuration.stateCallbacks.success(result);\n            },\n            error: function error(obj) {\n                var data = eval('(' + obj.responseText + ')');\n                if (data.error) {\n                    if (data.error.message == \"authorization_pending\") {\n                        setTimeout(function () {\n                            provider._processRequestToken(verification_data);\n                        }, 2000);\n                    } else if (\"authorization_declined\") {\n                        if (typeof provider.configuration.stateCallbacks.abort == \"function\") provider.configuration.stateCallbacks.abort(arguments);\n                    }\n                }\n            }\n        });\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],44:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Entity = exports.Event = undefined;\n\nvar _index = _dereq_(\"../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EventSubscriber = _index2.default.Class.define(\"EventSubscriber\", null, null, {\n    constructor: function constructor(handler, state, thisArg) {\n        /// <param name=\"handler\" type=\"Function\">\n        ///     <summary>event handler</summary>\n        ///     <signature>\n        ///         <param name=\"sender\" type=\"$data.Entity\" />\n        ///         <param name=\"eventData\" type=\"EventData\" />\n        ///         <param name=\"state\" type=\"Object\" />\n        ///     </signature>\n        /// </param>\n        /// <param name=\"state\" type=\"Object\" optional=\"true\">custom state object</param>\n        /// <param name=\"thisArg\" type=\"Object\" optional=\"true\">[i]this[/i] context for handler</param>\n        ///\n        /// <field name=\"handler\" type=\"function($data.Entity sender, EventData eventData, Object state)\">event handler</field>\n        /// <field name=\"state\" type=\"Object\">custom state object</field>\n        /// <field name=\"thisArg\">[i]this[/i] context for handler</field>\n        this.handler = handler;\n        this.state = state;\n        this.thisArg = thisArg;\n    },\n    handler: {},\n    state: {},\n    thisArg: {}\n});\n\n_index2.default.Event = _index2.default.Class.define(\"$data.Event\", null, null, {\n    constructor: function constructor(name, sender) {\n        ///<param name=\"name\" type=\"string\">The name of the event</param>\n        ///<param name=\"sender\" type=\"Object\">The originator/sender of the event. [this] in handlers will be set to this</param>\n        var subscriberList = null;\n        var parentObject = sender;\n\n        function detachHandler(list, handler) {\n            ///<param name=\"list\" type=\"Array\" elementType=\"EventSubscriber\" />\n            ///<param name=\"handler\" type=\"Function\" />\n            list.forEach(function (item, index) {\n                if (item.handler == handler) {\n                    list.splice(index, 1);\n                }\n            });\n        }\n\n        this.attach = function (handler, state, thisArg) {\n            ///<param name=\"handler\" type=\"Function\">\n            ///<signature>\n            ///<param name=\"sender\" type=\"Object\" />\n            ///<param name=\"eventData\" type=\"Object\" />\n            ///<param name=\"state\" type=\"Object\" />\n            ///</signature>\n            ///</param>\n            ///<param name=\"state\" type=\"Object\" optional=\"true\" />\n            ///<param name=\"thisArg\" type=\"Object\" optional=\"true\" />\n            if (!subscriberList) {\n                subscriberList = [];\n            }\n            subscriberList.push(new EventSubscriber(handler, state, thisArg || sender));\n        };\n        this.detach = function (handler) {\n            detachHandler(subscriberList, handler);\n        };\n        this.fire = function (eventData, snder) {\n            var snd = snder || sender || this;\n            //eventData.eventName = name;\n            ///<value name=\"subscriberList type=\"Array\" />\n            if (subscriberList) {\n                subscriberList.forEach(function (subscriber) {\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\n                    try {\n                        subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state);\n                    } catch (ex) {\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\n                        console.dir(ex);\n                    }\n                });\n            }\n        };\n        this.fireCancelAble = function (eventData, snder) {\n            var snd = snder || sender || this;\n            //eventData.eventName = name;\n            ///<value name=\"subscriberList type=\"Array\" />\n            var isValid = true;\n            if (subscriberList) {\n                subscriberList.forEach(function (subscriber) {\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\n                    try {\n                        isValid = isValid && (subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state) === false ? false : true);\n                    } catch (ex) {\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\n                        console.dir(ex);\n                    }\n                });\n            }\n            return isValid;\n        };\n    }\n});\n\nvar EventData = _index2.default.Class.define(\"EventData\", null, null, {\n    eventName: {}\n});\n\nvar PropertyChangeEventData = _index2.default.Class.define(\"PropertyChangeEventData\", EventData, null, {\n    constructor: function constructor(propertyName, oldValue, newValue) {\n        this.propertyName = propertyName;\n        this.oldValue = oldValue;\n        this.newValue = newValue;\n    },\n    propertyName: {},\n    oldValue: {},\n    newValue: {}\n});\n\nvar PropertyValidationEventData = _index2.default.Class.define(\"PropertyValidationEventData\", EventData, null, {\n    constructor: function constructor(propertyName, oldValue, newValue, errors) {\n        this.propertyName = propertyName;\n        this.oldValue = oldValue;\n        this.newValue = newValue;\n        this.errors = errors;\n        this.cancel = false;\n    },\n    propertyName: {},\n    oldValue: {},\n    newValue: {},\n    errors: {},\n    cancel: {}\n});\n\n_index2.default.Entity = _index2.default.Class.define(\"$data.Entity\", null, null, {\n    constructor: function constructor(initData, newInstanceOptions) {\n        /// <description>\n        ///     This class provide a light weight, object-relational interface between\n        ///     your javascript code and database.\n        /// </description>\n        ///\n        /// <signature>\n        ///     <param name=\"initData\" type=\"Object\">initialization data</param>\n        ///     <example>\n        ///         var category = new $news.Types.Category({ Title: 'Tech' });\n        ///         $news.context.Categories.add(category);\n        ///     </example>\n        /// </signature>\n        ///\n        /// <field name=\"initData\" type=\"Object\">initialization data</field>\n        /// <field name=\"context\" type=\"$data.EntityContext\"></field>\n        /// <field name=\"propertyChanging\" type=\"$data.Event\"></field>\n        /// <field name=\"propertyChanged\" type=\"$data.Event\"></field>\n        /// <field name=\"propertyValidationError\" type=\"$data.Event\"></field>\n        /// <field name=\"isValidated\" type=\"Boolean\">Determines the current $data.Entity is validated.</field>\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of $data.Validation.ValidationError</field>\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of MemberDefinition</field>\n        /// <field name=\"entityState\" type=\"Integer\"></field>\n        /// <field name=\"changedProperties\" type=\"Array\">array of MemberDefinition</field>\n\n        this.initData = {};\n        var thisType = this.getType();\n        if (thisType.__copyPropertiesToInstance) {\n            _index2.default.typeSystem.writePropertyValues(this);\n        }\n\n        var ctx = null;\n        this.context = ctx;\n        if (\"setDefaultValues\" in thisType) {\n            if (!newInstanceOptions || newInstanceOptions.setDefaultValues !== false) {\n                if (!initData || Object.keys(initData).length < 1) {\n                    initData = thisType.setDefaultValues(initData);\n                }\n            }\n        }\n\n        if ((typeof initData === \"undefined\" ? \"undefined\" : _typeof(initData)) === \"object\") {\n            var typeMemDefs = thisType.memberDefinitions;\n            var memDefNames = typeMemDefs.getPublicMappedPropertyNames();\n\n            for (var i in initData) {\n                if (memDefNames.indexOf(i) > -1) {\n                    var memberDef = typeMemDefs.getMember(i);\n                    var type = _index.Container.resolveType(memberDef.type);\n                    var value = initData[i];\n\n                    if (memberDef.concurrencyMode === _index2.default.ConcurrencyMode.Fixed) {\n                        this.initData[i] = value;\n                    } else {\n                        if (newInstanceOptions && newInstanceOptions.converters) {\n                            var converter = newInstanceOptions.converters[_index.Container.resolveName(type)];\n                            if (converter) value = converter(value);\n                        }\n\n                        this.initData[i] = _index.Container.convertTo(value, type, memberDef.elementType, newInstanceOptions);\n                    }\n                }\n            }\n        }\n\n        if (newInstanceOptions && newInstanceOptions.entityBuilder) {\n            newInstanceOptions.entityBuilder(this, thisType.memberDefinitions.asArray(), thisType);\n        }\n\n        this.changedProperties = undefined;\n        this.entityState = undefined;\n    },\n    toString: function toString() {\n        /// <summary>Returns a string that represents the current $data.Entity</summary>\n        /// <returns type=\"String\"/>\n\n        return this.getType().fullName + \"(\" + (this.Id || this.Name || '') + \")\";\n    },\n    toJSON: function toJSON() {\n        /// <summary>Creates pure JSON object from $data.Entity.</summary>\n        /// <returns type=\"Object\">JSON representation</returns>\n\n        var result = {};\n        var self = this;\n        this.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            if (self[memDef.name] instanceof Date && memDef.type && _index.Container.resolveType(memDef.type) === _index2.default.DateTimeOffset) {\n                result[memDef.name] = new _index2.default.DateTimeOffset(self[memDef.name]);\n            } else {\n                result[memDef.name] = self[memDef.name];\n            }\n        });\n        return result;\n    },\n    equals: function equals(entity) {\n        /// <summary>Determines whether the specified $data.Entity is equal to the current $data.Entity.</summary>\n        /// <returns type=\"Boolean\">[b]true[/b] if the specified $data.Entity is equal to the current $data.Entity; otherwise, [b]false[/b].</returns>\n\n        if (entity.getType() !== this.getType()) {\n            return false;\n        }\n        var entityPk = this.getType().memberDefinitions.getKeyProperties();\n        for (var i = 0; i < entityPk.length; i++) {\n            if (this[entityPk[i].name] != entity[entityPk[i].name]) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    propertyChanging: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyChanging) this._propertyChanging = new _index2.default.Event('propertyChanging', this);\n\n            return this._propertyChanging;\n        },\n        set: function set(value) {\n            this._propertyChanging = value;\n        }\n    },\n\n    propertyChanged: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyChanged) this._propertyChanged = new _index2.default.Event('propertyChanged', this);\n\n            return this._propertyChanged;\n        },\n        set: function set(value) {\n            this._propertyChanged = value;\n        }\n    },\n\n    propertyValidationError: {\n        dataType: _index2.default.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\n        get: function get() {\n            if (!this._propertyValidationError) this._propertyValidationError = new _index2.default.Event('propertyValidationError', this);\n\n            return this._propertyValidationError;\n        },\n        set: function set(value) {\n            this._propertyValidationError = value;\n        }\n    },\n\n    // protected\n    storeProperty: function storeProperty(memberDefinition, value) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"value\" />\n\n        if (memberDefinition.concurrencyMode !== _index2.default.ConcurrencyMode.Fixed) {\n            value = _index.Container.convertTo(value, memberDefinition.type, memberDefinition.elementType);\n        }\n\n        var eventData = null;\n        if (memberDefinition.monitorChanges != false && (this._propertyChanging || this._propertyChanged || \"instancePropertyChanged\" in this.constructor)) {\n            var origValue = this[memberDefinition.name];\n            eventData = new PropertyChangeEventData(memberDefinition.name, origValue, value);\n            if (this._propertyChanging) this.propertyChanging.fire(eventData);\n        }\n\n        if (memberDefinition.monitorChanges != false && (this._propertyValidationError || \"instancePropertyValidationError\" in this.constructor)) {\n            var errors = _index2.default.Validation.Entity.ValidateEntityField(this, memberDefinition, value);\n            if (errors.length > 0) {\n                var origValue = this[memberDefinition.name];\n                var errorEventData = new PropertyValidationEventData(memberDefinition.name, origValue, value, errors);\n\n                if (this._propertyValidationError) this.propertyValidationError.fire(errorEventData);\n                if (\"instancePropertyValidationError\" in this.constructor) this.constructor[\"instancePropertyValidationError\"].fire(errorEventData, this);\n\n                if (errorEventData.cancel == true) return;\n            }\n        }\n\n        if (memberDefinition.storeOnObject == true) {\n            //TODO refactor to Base.getBackingFieldName\n            var backingFieldName = \"_\" + memberDefinition.name;\n            this[backingFieldName] = value;\n        } else {\n            this.initData[memberDefinition.name] = value;\n        }\n        this.isValidated = false;\n\n        if (memberDefinition.monitorChanges != false && this.entityState == _index2.default.EntityState.Unchanged) this.entityState = _index2.default.EntityState.Modified;\n\n        this._setPropertyChanged(memberDefinition);\n\n        if (memberDefinition.monitorChanges != false) {\n            //if (!this.changedProperties) {\n            //    this.changedProperties = [];\n            //}\n\n            //if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\n            //    this.changedProperties.push(memberDefinition);\n\n            if (this._propertyChanged) this.propertyChanged.fire(eventData);\n\n            //TODO mixin framework\n            if (\"instancePropertyChanged\" in this.constructor) {\n                this.constructor[\"instancePropertyChanged\"].fire(eventData, this);\n            }\n        }\n    },\n    _setPropertyChanged: function _setPropertyChanged(memberDefinition) {\n        if (memberDefinition.monitorChanges != false && memberDefinition.name != \"ValidationErrors\") {\n            if (!this.changedProperties) {\n                this.changedProperties = [];\n            }\n\n            if (!this.changedProperties.some(function (memDef) {\n                return memDef.name == memberDefinition.name;\n            })) this.changedProperties.push(memberDefinition);\n        }\n    },\n\n    // protected\n    retrieveProperty: function retrieveProperty(memberDefinition) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n\n        if (memberDefinition.storeOnObject == true) {\n            //TODO refactor to Base.getBackingFieldName\n            var backingFieldName = \"_\" + memberDefinition.name;\n            return this[backingFieldName];\n        } else {\n            return this.initData[memberDefinition.name];\n        }\n    },\n\n    // protected\n    getProperty: function getProperty(memberDefinition, callback, tran) {\n        /// <summary>Retrieve value of member</summary>\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"callback\" type=\"Function\">\n        ///     <signature>\n        ///         <param name=\"value\" />\n        ///     </signature>\n        /// </param>\n        /// <returns>value associated for [i]memberDefinition[/i]</returns>\n\n        callback = _index2.default.PromiseHandlerBase.createCallbackSettings(callback);\n        if (this[memberDefinition.name] != undefined) {\n            if (tran instanceof _index2.default.Transaction) callback.success(this[memberDefinition.name], tran);else callback.success(this[memberDefinition.name]);\n            return;\n        }\n\n        var context = this.context;\n        if (!this.context) {\n            try {\n                var that = this;\n                var storeToken = this.storeToken || this.getType().storeToken;\n                if (storeToken && typeof storeToken.factory === 'function') {\n                    var ctx = storeToken.factory();\n                    return ctx.onReady().then(function (context) {\n                        return context.loadItemProperty(that, memberDefinition, callback);\n                    });\n                }\n            } catch (e) {}\n\n            _index.Guard.raise(new _index.Exception('Entity not in context', 'Invalid operation'));\n        } else {\n            return context.loadItemProperty(this, memberDefinition, callback, tran);\n        }\n    },\n    // protected\n    setProperty: function setProperty(memberDefinition, value, callback, tran) {\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\n        /// <param name=\"value\" />\n        /// <param name=\"callback\" type=\"Function\">done</param>\n        this[memberDefinition.name] = value;\n\n        //callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\n        var pHandler = new _index2.default.PromiseHandler();\n        callback = pHandler.createCallback(callback);\n        callback.success(this[memberDefinition.name]);\n        return pHandler.getPromise();\n    },\n\n    isValid: function isValid() {\n        /// <summary>Determines the current $data.Entity is validated and valid.</summary>\n        /// <returns type=\"Boolean\" />\n\n        if (!this.isValidated) {\n            this.ValidationErrors = _index2.default.Validation.Entity.ValidateEntity(this);\n            this.isValidated = true;\n        }\n        return this.ValidationErrors.length == 0;\n    },\n    isValidated: { dataType: \"bool\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, value: false },\n    ValidationErrors: {\n        dataType: Array,\n        elementType: _index2.default.Validation.ValidationError,\n        storeOnObject: true,\n        monitorChanges: true,\n        notMapped: true,\n        enumerable: false\n    },\n\n    resetChanges: function resetChanges() {\n        /// <summary>reset changes</summary>\n\n        delete this._changedProperties;\n    },\n\n    changedProperties: {\n        dataType: Array,\n        elementType: _index.MemberDefinition,\n        storeOnObject: true,\n        monitorChanges: false,\n        notMapped: true,\n        enumerable: false\n    },\n\n    entityState: { dataType: \"integer\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false },\n    /*\r\n    toJSON: function () {\r\n        if (this.context) {\r\n            var itemType = this.getType();\r\n            var storageModel = this.context._storageModel[itemType.name];\r\n            var o = new Object();\r\n            for (var property in this) {\r\n                if (typeof this[property] !== \"function\") {\r\n                    var excludedFields = storageModel.Associations.every(function (association) {\r\n                        return association.FromPropertyName == property && (association.FromMultiplicity == \"0..1\" || association.FromMultiplicity == \"1\");\r\n                    }, this);\r\n                    if (!excludedFields) {\r\n                        o[property] = this[property];\r\n                    }\r\n                }\r\n            }\r\n            return o;\r\n        }\r\n        return this;\r\n    }   */\n    //,\n\n    //onReady: function (callback) {\n    //    this.__onReadyList = this.__onReadyList || [];\n    //    this.__onReadyList.push(callback);\n    //},\n\n    remove: function remove() {\n        if (_index2.default.ItemStore && 'EntityInstanceRemove' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceRemove.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    save: function save() {\n        if (_index2.default.ItemStore && 'EntityInstanceSave' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceSave.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    refresh: function refresh() {\n        if (_index2.default.ItemStore && 'EntityInstanceRefresh' in _index2.default.ItemStore) return _index2.default.ItemStore.EntityInstanceRefresh.apply(this, arguments);else throw 'not implemented'; //todo\n    },\n    storeToken: { type: Object, monitorChanges: false, notMapped: true, storeOnObject: true },\n\n    getFieldUrl: function getFieldUrl(field) {\n        if (this.context) {\n            return this.context.getFieldUrl(this, field);\n        } else if (this.getType().storeToken && typeof this.getType().storeToken.factory === 'function') {\n            var context = this.getType().storeToken.factory();\n            return context.getFieldUrl(this, field);\n        } else if (this.getType().storeToken) {\n            try {\n                var ctx = _index2.default.ItemStore._getContextPromise('default', this.getType());\n                if (ctx instanceof _index2.default.EntityContext) {\n                    return ctx.getFieldUrl(this, field);\n                }\n            } catch (e) {}\n        }\n        return '#';\n    }\n}, {\n    //create get_[property] and set_[property] functions for properties\n    __setPropertyfunctions: { value: true, notMapped: true, enumerable: false, storeOnObject: true },\n    //copy public properties to current instance\n    __copyPropertiesToInstance: { value: false, notMapped: true, enumerable: false, storeOnObject: true },\n\n    inheritedTypeProcessor: function inheritedTypeProcessor(type) {\n        if (_index2.default.ItemStore && 'EntityInheritedTypeProcessor' in _index2.default.ItemStore) _index2.default.ItemStore.EntityInheritedTypeProcessor.apply(this, arguments);\n\n        //default value setter method factory\n        type.defaultValues = {};\n\n        type.memberDefinitions.asArray().forEach(function (pd) {\n            if (pd.hasOwnProperty(\"defaultValue\")) {\n                type.defaultValues[pd.name] = pd.defaultValue;\n            }\n        });\n\n        if (Object.keys(type.defaultValues).length > 0) {\n            type.setDefaultValues = function (initData, instance) {\n                initData = initData || {};\n                var dv = type.defaultValues;\n                for (var n in dv) {\n                    if (!(n in initData)) {\n                        var value = dv[n];\n                        if (\"function\" === typeof value) {\n                            initData[n] = dv[n](n, instance);\n                        } else {\n                            initData[n] = dv[n];\n                        }\n                    }\n                }\n                return initData;\n            };\n        }\n    },\n\n    //Type Events\n    addEventListener: function addEventListener(eventName, fn) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            this[delegateName] = new _index2.default.Event(eventName, this);\n        }\n        this[delegateName].attach(fn);\n    },\n    removeEventListener: function removeEventListener(eventName, fn) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            return;\n        }\n        this[delegateName].detach(fn);\n    },\n    raiseEvent: function raiseEvent(eventName, data) {\n        var delegateName = \"on\" + eventName;\n        if (!(delegateName in this)) {\n            return;\n        }\n        this[delegateName].fire(data);\n    },\n\n    getFieldNames: function getFieldNames() {\n        return this.memberDefinitions.getPublicMappedPropertyNames();\n    },\n\n    'from$data.Object': function from$dataObject(value, type, t, options) {\n        if (!_index.Guard.isNullOrUndefined(value)) {\n            var newInstanceOptions;\n            if (options && options.converters) {\n                newInstanceOptions = {\n                    converters: options.converters\n                };\n            }\n\n            return new this(value, newInstanceOptions);\n        } else {\n            return value;\n        }\n    }\n\n});\n\n_index2.default.define = function (name, container, definition) {\n    if (container && !(container instanceof _index2.default.ContainerClass)) {\n        definition = container;\n        container = undefined;\n    }\n    if (!definition) {\n        throw new Error(\"json object type is not supported yet\");\n    }\n    var _def = {};\n    var hasKey = false;\n    var keyFields = [];\n    Object.keys(definition).forEach(function (fieldName) {\n        var propDef = definition[fieldName];\n        if ((typeof propDef === \"undefined\" ? \"undefined\" : _typeof(propDef)) === 'object' && (\"type\" in propDef || \"get\" in propDef || \"set\" in propDef)) {\n\n            _def[fieldName] = propDef;\n            if (propDef.key) {\n                keyFields.push(propDef);\n            }\n\n            if ((\"get\" in propDef || \"set\" in propDef) && (!('notMapped' in propDef) || propDef.notMapped === true)) {\n                propDef.notMapped = true;\n                propDef.storeOnObject = true;\n            }\n            if (\"get\" in propDef && !(\"set\" in propDef)) {\n                propDef.set = function () {};\n            } else if (\"set\" in propDef && !(\"get\" in propDef)) {\n                propDef.get = function () {};\n            }\n        } else {\n            _def[fieldName] = { type: propDef };\n        }\n    });\n\n    if (keyFields.length < 1) {\n        var keyProp;\n        switch (true) {\n            case \"id\" in _def:\n                keyProp = \"id\";\n                break;\n            case \"Id\" in _def:\n                keyProp = \"Id\";\n                break;\n            case \"ID\" in _def:\n                keyProp = \"ID\";\n                break;\n        }\n        if (keyProp) {\n            _def[keyProp].key = true;\n            var propTypeName = _index2.default.Container.resolveName(_def[keyProp].type);\n            _def[keyProp].computed = true;\n            //if (\"$data.Number\" === propTypeName || \"$data.Integer\" === propTypeName) {\n            //}\n        } else {\n                _def.Id = { type: \"int\", key: true, computed: true };\n            }\n    }\n\n    var entityType = _index2.default.Entity.extend(name, container, _def);\n    return entityType;\n};\n_index2.default.implementation = function (name) {\n    return _index.Container.resolveType(name);\n};\n\nvar Event = exports.Event = _index2.default.Event;\nvar Entity = exports.Entity = _index2.default.Entity;\nexports.default = _index2.default;\n\n},{\"../TypeSystem/index.js\":32}],45:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.EntityAttachMode\", null, null, {}, {\n    defaultMode: 'Default',\n    AllChanged: function AllChanged(data) {\n        var memDefs = data.getType().memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < memDefs.length; i++) {\n            data._setPropertyChanged(memDefs[i]);\n        }\n        data.entityState = _index2.default.EntityState.Modified;\n    },\n    KeepChanges: function KeepChanges(data) {\n        if (data.changedProperties && data.changedProperties.length > 0) {\n            data.entityState = _index2.default.EntityState.Modified;\n        } else {\n            data.entityState = _index2.default.EntityState.Unchanged;\n        }\n    },\n    Default: function Default(data) {\n        data.entityState = _index2.default.EntityState.Unchanged;\n        data.changedProperties = undefined;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],46:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n\n    _index2.default.defaults = _index2.default.defaults || {};\n    _index2.default.defaults.defaultDatabaseName = 'JayDataDefault';\n    _index2.default.defaults.enableRelatedEntityReadMethods = true;\n    _index2.default.defaults.relatedEntityReadMethodPrefix = 'get';\n    _index2.default.defaults.relatedEntityProxyPrefix = '$relatedProxy';\n})();\n\n_index2.default.Class.define('$data.StorageModel', null, null, {\n    constructor: function constructor() {\n        ///<field name=\"LogicalType\" type=\"$data.Entity\">User defined type</field>\n        this.ComplexTypes = [];\n        this.Enums = [];\n        this.Associations = [];\n    },\n    LogicalType: {},\n    LogicalTypeName: {},\n    PhysicalType: {},\n    PhysicalTypeName: {},\n    EventHandlers: {},\n    TableName: {},\n    TableOptions: { value: undefined },\n    ComplexTypes: {},\n    Enums: {},\n    Associations: {},\n    ContextType: {},\n    Roles: {}\n}, null);\n_index2.default.Class.define('$data.Association', null, null, {\n    constructor: function constructor(initParam) {\n        if (initParam) {\n            this.From = initParam.From;\n            this.FromType = initParam.FromType;\n            this.FromMultiplicity = initParam.FromMultiplicity;\n            this.FromPropertyName = initParam.FromPropertyName;\n            this.To = initParam.To;\n            this.ToType = initParam.ToType;\n            this.ToMultiplicity = initParam.ToMultiplicity;\n            this.ToPropertyName = initParam.ToPropertyName;\n        }\n    },\n    From: {},\n    FromType: {},\n    FromMultiplicity: {},\n    FromPropertyName: {},\n    To: {},\n    ToType: {},\n    ToMultiplicity: {},\n    ToPropertyName: {},\n    ReferentialConstraint: {}\n}, null);\n_index2.default.Class.define('$data.ComplexType', _index2.default.Association, null, {}, null);\n\n/**\r\n * @public\r\n * @module $data.EntityContext\r\n */\n/**\r\n* Provides facilities for querying and working with entity data as objects\r\n*/\n_index2.default.Class.define('$data.EntityContext', null, null, {\n    /**\r\n     * @constructs $data.EntityContext\r\n     * Provides facilities for querying and working with entity data as objects\r\n     * @param {Object} storageProviderCfg - Storage provider specific configuration object\r\n     * @param {string} storageProviderCfg.provider - Storage provider type name: 'oData', 'indexedDb', 'webSql', 'sqLite', 'mongoDB'\r\n     * @param {string} [storageProviderCfg.oDataServiceHost=/odata.svc] - URI of OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.maxDataServiceVersion=4.0] - Maximal OData version. Provider: OData\r\n     * @param {string} [storageProviderCfg.dataServiceVersion] - version of your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.user] - login name for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.password] - password for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.UpdateMethod=PATCH] - HTTP verb used while updating entities, this should be configured according the accepted verb by your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.databaseName] - database name created by the following providers: webSql, sqLite, indexedDb, mongoDB\r\n     * @example <caption>initialize OData context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'oData',\r\n     *  oDataServiceHost: '/api/odata.svc'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     *\r\n     * @example <caption>initialize webSql context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'webSql',\r\n     *  databaseName: 'Northwind'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     */\n    constructor: function constructor(storageProviderCfg) {\n        if (_index2.default.ItemStore && 'ContextRegister' in _index2.default.ItemStore) _index2.default.ItemStore.ContextRegister.apply(this, arguments);\n\n        if (storageProviderCfg.queryCache) this.queryCache = storageProviderCfg.queryCache;\n\n        if (\"string\" === typeof storageProviderCfg) {\n            if (0 === storageProviderCfg.indexOf(\"http\")) {\n                storageProviderCfg = {\n                    name: \"oData\",\n                    oDataServiceHost: storageProviderCfg\n                };\n            } else {\n                storageProviderCfg = {\n                    name: \"local\",\n                    databaseName: storageProviderCfg\n                };\n            }\n        }\n\n        if (\"provider\" in storageProviderCfg) {\n            storageProviderCfg.name = storageProviderCfg.provider;\n        }\n\n        //Initialize properties\n        this.lazyLoad = false;\n        this.trackChanges = false;\n        this._entitySetReferences = {};\n        this._storageModel = [];\n\n        var ctx = this;\n        ctx._isOK = false;\n\n        var origSuccessInitProvider = this._successInitProvider;\n        this._successInitProvider = function (errorOrContext) {\n            if (errorOrContext instanceof _index2.default.EntityContext) {\n                origSuccessInitProvider(ctx);\n            } else {\n                origSuccessInitProvider(ctx, errorOrContext);\n            }\n        };\n\n        this._storageModel.getStorageModel = function (typeName) {\n            var name = _index.Container.resolveName(typeName);\n            return ctx._storageModel[name];\n        };\n        if (typeof storageProviderCfg.name === 'string') {\n            var tmp = storageProviderCfg.name;\n            storageProviderCfg.name = [tmp];\n        }\n        var i = 0,\n            providerType;\n        var providerList = [].concat(storageProviderCfg.name);\n        var callBack = _index2.default.PromiseHandlerBase.createCallbackSettings({ success: this._successInitProvider, error: this._successInitProvider });\n\n        this._initStorageModelSync();\n        ctx._initializeEntitySets(ctx.getType());\n\n        _index2.default.StorageProviderLoader.load(providerList, {\n            success: function success(providerType) {\n                ctx.storageProvider = new providerType(storageProviderCfg, ctx);\n                ctx.storageProvider.setContext(ctx);\n                ctx.stateManager = new _index2.default.EntityStateManager(ctx);\n\n                var contextType = ctx.getType();\n                if (providerType.name in contextType._storageModelCache) {\n                    ctx._storageModel = contextType._storageModelCache[providerType.name];\n                } else {\n                    _index2.default.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToTypes();\n                    ctx._initializeStorageModel();\n                    contextType._storageModelCache[providerType.name] = ctx._storageModel;\n                }\n                _index2.default.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToContext();\n\n                //ctx._initializeEntitySets(contextType);\n                if (storageProviderCfg && storageProviderCfg.user) Object.defineProperty(ctx, 'user', { value: storageProviderCfg.user, enumerable: true });\n                if (storageProviderCfg && storageProviderCfg.checkPermission) Object.defineProperty(ctx, 'checkPermission', { value: storageProviderCfg.checkPermission, enumerable: true });\n\n                //ctx._isOK = false;\n                ctx._initializeStore(callBack);\n            },\n            error: function error() {\n                callBack.error('Provider fallback failed!');\n            }\n        });\n\n        this.addEventListener = function (eventName, fn) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                this[delegateName] = new _index2.default.Event(eventName, this);\n            }\n            this[delegateName].attach(fn);\n        };\n\n        this.removeEventListener = function (eventName, fn) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                return;\n            }\n            this[delegateName].detach(fn);\n        };\n\n        this.raiseEvent = function (eventName, data) {\n            var delegateName = \"on\" + eventName;\n            if (!(delegateName in this)) {\n                return;\n            }\n            this[delegateName].fire(data);\n        };\n\n        this.ready = this.onReady({\n            success: _index2.default.defaultSuccessCallback,\n            error: function error() {\n                if (_index2.default.PromiseHandler !== _index2.default.PromiseHandlerBase) {\n                    _index2.default.defaultErrorCallback.apply(this, arguments);\n                } else {\n                    _index2.default.Trace.error(arguments);\n                }\n            }\n        });\n    },\n    beginTransaction: function beginTransaction() {\n        var tables = null;\n        var callBack = null;\n        var isWrite = false;\n\n        function readParam(value) {\n            if (_index.Guard.isNullOrUndefined(value)) return;\n\n            if (typeof value === 'boolean') {\n                isWrite = value;\n            } else if (Array.isArray(value)) {\n                tables = value;\n            } else {\n                callBack = value;\n            }\n        }\n\n        readParam(arguments[0]);\n        readParam(arguments[1]);\n        readParam(arguments[2]);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        callBack = pHandler.createCallback(callBack);\n\n        //callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\n        this.storageProvider._beginTran(tables, isWrite, callBack);\n\n        return pHandler.getPromise();\n    },\n    _isReturnTransaction: function _isReturnTransaction(transaction) {\n        return transaction instanceof _index2.default.Base || transaction === 'returnTransaction';\n    },\n    _applyTransaction: function _applyTransaction(scope, cb, args, transaction, isReturnTransaction) {\n        if (isReturnTransaction === true) {\n            if (transaction instanceof _index2.default.Transaction) {\n                Array.prototype.push.call(args, transaction);\n                cb.apply(scope, args);\n            } else {\n                this.beginTransaction(function (tran) {\n                    Array.prototype.push.call(args, tran);\n                    cb.apply(scope, args);\n                });\n            }\n        } else {\n            cb.apply(scope, args);\n        }\n    },\n\n    getDataType: function getDataType(dataType) {\n        // Obsolate\n        if (typeof dataType == \"string\") {\n            var memDef_dataType = this[dataType];\n            if (memDef_dataType === undefined || memDef_dataType === null) {\n                memDef_dataType = eval(dataType);\n            }\n            return memDef_dataType;\n        }\n        return dataType;\n    },\n    _initializeEntitySets: function _initializeEntitySets(ctor) {\n\n        for (var i = 0, l = this._storageModel.length; i < l; i++) {\n            var storageModel = this._storageModel[i];\n            this[storageModel.ItemName] = new _index2.default.EntitySet(storageModel.LogicalType, this, storageModel.ItemName, storageModel.EventHandlers, storageModel.Roles);\n            var sm = this[storageModel.ItemName];\n            sm.name = storageModel.ItemName;\n            sm.tableName = storageModel.TableName;\n            sm.tableOptions = storageModel.TableOptions;\n            sm.eventHandlers = storageModel.EventHandlers;\n            this._entitySetReferences[storageModel.LogicalType.name] = sm;\n\n            this._initializeActions(sm, ctor, ctor.getMemberDefinition(storageModel.ItemName));\n        }\n    },\n    _initializeStore: function _initializeStore(callBack) {\n        if (this.storageProvider) {\n            this.storageProvider.initializeStore(callBack);\n        }\n    },\n\n    _initStorageModelSync: function _initStorageModelSync() {\n        var _memDefArray = this.getType().memberDefinitions.asArray();\n\n        for (var i = 0; i < _memDefArray.length; i++) {\n            var item = _memDefArray[i];\n            if ('dataType' in item) {\n                var itemResolvedDataType = _index.Container.resolveType(item.dataType);\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(item.elementType);\n                    var storageModel = new _index2.default.StorageModel();\n                    storageModel.TableName = item.tableName || item.name;\n                    storageModel.TableOptions = item.tableOptions;\n                    storageModel.ItemName = item.name;\n                    storageModel.LogicalType = elementType;\n                    storageModel.LogicalTypeName = elementType.name;\n                    storageModel.PhysicalTypeName = _index2.default.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\n                    storageModel.ContextType = this.getType();\n                    storageModel.Roles = item.roles;\n                    if (item.indices) {\n                        storageModel.indices = item.indices;\n                    }\n                    if (item.beforeCreate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeCreate = item.beforeCreate;\n                    }\n                    if (item.beforeRead) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeRead = item.beforeRead;\n                    }\n                    if (item.beforeUpdate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeUpdate = item.beforeUpdate;\n                    }\n                    if (item.beforeDelete) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.beforeDelete = item.beforeDelete;\n                    }\n                    if (item.afterCreate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterCreate = item.afterCreate;\n                    }\n                    if (item.afterRead) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterRead = item.afterRead;\n                    }\n                    if (item.afterUpdate) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterUpdate = item.afterUpdate;\n                    }\n                    if (item.afterDelete) {\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\n                        storageModel.EventHandlers.afterDelete = item.afterDelete;\n                    }\n                    this._storageModel.push(storageModel);\n                    var name = _index.Container.resolveName(elementType);\n                    this._storageModel[name] = storageModel;\n                }\n            }\n        }\n    },\n    _initializeStorageModel: function _initializeStorageModel() {\n\n        var _memDefArray = this.getType().memberDefinitions.asArray();\n\n        if (typeof intellisense !== 'undefined') return;\n\n        for (var i = 0; i < this._storageModel.length; i++) {\n            var storageModel = this._storageModel[i];\n\n            ///<param name=\"storageModel\" type=\"$data.StorageModel\">Storage model item</param>\n            var dbEntityInstanceDefinition = {};\n\n            storageModel.Associations = storageModel.Associations || [];\n            storageModel.ComplexTypes = storageModel.ComplexTypes || [];\n            storageModel.Enums = storageModel.Enums || [];\n            for (var j = 0; j < storageModel.LogicalType.memberDefinitions.getPublicMappedProperties().length; j++) {\n                var memDef = storageModel.LogicalType.memberDefinitions.getPublicMappedProperties()[j];\n                ///<param name=\"memDef\" type=\"MemberDefinition\">Member definition instance</param>\n\n                var memDefResolvedDataType = _index.Container.resolveType(memDef.dataType);\n\n                if ((this.storageProvider.supportedDataTypes.indexOf(memDefResolvedDataType) > -1 || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.Enum)) && _index.Guard.isNullOrUndefined(memDef.inverseProperty)) {\n                    //copy member definition\n                    var t = JSON.parse(JSON.stringify(memDef));\n                    //change datatype to resolved type\n                    t.dataType = memDefResolvedDataType;\n                    dbEntityInstanceDefinition[memDef.name] = t;\n\n                    if (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.Enum)) {\n                        this._build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                    }\n\n                    continue;\n                }\n\n                this._buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel);\n\n                //var memDef_dataType = this.getDataType(memDef.dataType);\n                if ((memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) && memDef.inverseProperty && memDef.inverseProperty !== '$$unbound') {\n                    this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                } else {\n                    if (memDef.inverseProperty) {\n                        if (memDef.inverseProperty === '$$unbound') {\n                            //member definition is navigation but not back reference\n                            if (memDefResolvedDataType === _index2.default.Array) {\n                                this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                            } else {\n                                this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                            }\n                        } else {\n                            //member definition is navigation property one..one or one..many case\n                            var fields = memDefResolvedDataType.memberDefinitions.getMember(memDef.inverseProperty);\n                            if (fields) {\n                                if (fields.elementType) {\n                                    //member definition is one..many connection\n                                    var referealResolvedType = _index.Container.resolveType(fields.elementType);\n                                    if (referealResolvedType === storageModel.LogicalType) {\n                                        this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                                    } else {\n                                        if (typeof intellisense === 'undefined') {\n                                            _index.Guard.raise(new _index.Exception('Inverse property not valid, refereed item element type not match: ' + storageModel.LogicalTypeName, ', property: ' + memDef.name));\n                                        }\n                                    }\n                                } else {\n                                    //member definition is one..one connection\n                                    this._buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                                }\n                            } else {\n                                if (typeof intellisense === 'undefined') {\n                                    _index.Guard.raise(new _index.Exception('Inverse property not valid'));\n                                }\n                            }\n                        }\n                    } else {\n                        //member definition is a complex type\n                        this._buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\n                    }\n                }\n            }\n            this._buildDbType_modifyInstanceDefinition(dbEntityInstanceDefinition, storageModel, this);\n            var dbEntityClassDefinition = {};\n            dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\n            this._buildDbType_modifyClassDefinition(dbEntityClassDefinition, storageModel, this);\n\n            //create physical type\n            //TODO\n            storageModel.PhysicalType = _index2.default.Class.define(storageModel.PhysicalTypeName, _index2.default.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\n        }\n    },\n    _initializeActions: function _initializeActions(es, ctor, esDef) {\n        if (esDef && esDef.actions) {\n            var actionKeys = Object.keys(esDef.actions);\n            for (var i = 0; i < actionKeys.length; i++) {\n                var actionName = actionKeys[i];\n                var action = esDef.actions[actionName];\n                if (typeof action === 'function') {\n                    es[actionName] = action;\n                } else {\n                    var actionDef = _index2.default.MemberDefinition.translateDefinition(action, actionName, ctor);\n                    if (actionDef instanceof _index2.default.MemberDefinition && actionDef.kind === _index2.default.MemberTypes.method) {\n                        es[actionName] = actionDef.method;\n                    }\n                }\n            }\n        }\n    },\n    _buildDbType_navigationPropertyComplite: function _buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel) {\n        if (!memDef.inverseProperty) {\n            var refMemDefs = null;\n            if (memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                var refStorageModel = this._storageModel.getStorageModel(_index.Container.resolveType(memDef.elementType));\n                if (refStorageModel) {\n                    refMemDefs = [];\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < pubDefs.length; i++) {\n                        var m = pubDefs[i];\n                        if (m.inverseProperty == memDef.name && _index.Container.resolveType(m.dataType) === _index.Container.resolveType(storageModel.LogicalType)) refMemDefs.push(m);\n                    }\n                }\n            } else {\n                var refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\n                if (refStorageModel) {\n                    refMemDefs = [];\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < pubDefs.length; i++) {\n                        var m = pubDefs[i];\n                        if (m.elementType && m.inverseProperty == memDef.name && _index.Container.resolveType(m.elementType) === storageModel.LogicalType) refMemDefs.push(m);else if (m.inverseProperty == memDef.name && _index.Container.resolveType(m.dataType) === storageModel.LogicalType) refMemDefs.push(m);\n                    }\n                }\n            }\n            if (refMemDefs) {\n                if (refMemDefs.length > 1) {\n                    if (typeof intellisense !== 'undefined') {\n                        _index.Guard.raise(new _index.Exception('More than one inverse property refer to this member definition: ' + memDef.name + ', type: ' + _index.Container.resolveName(storageModel.LogicalType)));\n                    }\n                }\n                var refMemDef = refMemDefs.pop();\n                if (refMemDef) {\n                    memDef.inverseProperty = refMemDef.name;\n                }\n            }\n        } else {\n            var refStorageModel = null;\n            if (memDefResolvedDataType === _index2.default.Array || memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                refStorageModel = this._storageModel.getStorageModel(_index.Container.resolveType(memDef.elementType));\n            } else {\n                refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\n            }\n\n            var p = refStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\n            if (p) {\n                if (p.inverseProperty) {\n                    if (p.inverseProperty != memDef.name) {\n                        if (typeof intellisense === 'undefined') {\n                            _index.Guard.raise(new _index.Exception('Inverse property mismatch'));\n                        }\n                    }\n                } else {\n                    p.inverseProperty = memDef.name;\n                }\n            }\n        }\n    },\n    _buildDbType_generateConvertToFunction: function _buildDbType_generateConvertToFunction(storageModel) {\n        return function (instance) {\n            return instance;\n        };\n    },\n    _buildDbType_modifyInstanceDefinition: function _buildDbType_modifyInstanceDefinition(instanceDefinition, storageModel) {\n        return;\n    },\n    _buildDbType_modifyClassDefinition: function _buildDbType_modifyClassDefinition(classDefinition, storageModel) {\n        return;\n    },\n    _buildDbType_addComplexTypePropertyDefinition: function _buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name, _index2.default.MemberTypes.complexProperty);\n        var complexType = this._createComplexElement(storageModel.LogicalType, \"\", memDef.name, memDef_dataType, \"\", \"\");\n        storageModel.ComplexTypes[memDef.name] = complexType;\n        storageModel.ComplexTypes.push(complexType);\n    },\n    _buildDbType_Collection_OneManyDefinition: function _buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.elementType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '0..1';\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"*\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _buildDbType_ElementType_OneManyDefinition: function _buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.dataType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '*';\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"0..1\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _buildDbType_ElementType_OneOneDefinition: function _buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\n        var refereedType = _index.Container.resolveType(memDef.dataType);\n        if (refereedType === undefined || refereedType === null) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"Element type definition error\", \"Field definition\", memDef));\n            }\n        }\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);;\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\n        if (!refereedStorageModel) {\n            if (typeof intellisense === 'undefined') {\n                _index.Guard.raise(new _index.Exception(\"No EntitySet definition following element type\", \"Field definition\", memDef));\n            }\n        }\n\n        var refereedMemberDefinition = refereedStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\n        if (!refereedMemberDefinition.required && !memDef.required) {\n            if (typeof intellisense === 'undefined') {\n                if (typeof intellisense === 'undefined') {\n                    _index.Guard.raise(new _index.Exception('In one to one connection, one side must required!', 'One to One connection', memDef));\n                }\n            }\n        }\n\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\n\n        var association = this._addAssociationElement(storageModel.LogicalType, memDef.required ? \"0..1\" : \"1\", memDef.name, refereedStorageModel.LogicalType, memDef.required ? \"1\" : \"0..1\", memDef.inverseProperty);\n        storageModel.Associations[memDef.name] = association;\n        storageModel.Associations.push(association);\n    },\n    _addNavigationPropertyDefinition: function _addNavigationPropertyDefinition(definition, member, associationName, kind) {\n        var t = JSON.parse(JSON.stringify(member));\n        t.dataType = _index2.default.EntitySet;\n        t.notMapped = true;\n        t.kind = kind ? kind : _index2.default.MemberTypes.navProperty;\n        t.association = associationName;\n        definition[member.name] = t;\n    },\n    _addAssociationElement: function _addAssociationElement(fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\n        return new _index2.default.Association({\n            From: fromType.name,\n            FromType: fromType,\n            FromMultiplicity: fromMultiplicity,\n            FromPropertyName: fromPropName,\n            To: toType.name,\n            ToType: toType,\n            ToMultiplicity: toMultiplicity,\n            ReferentialConstraint: [],\n            ToPropertyName: toPropName\n        });\n    },\n    _createComplexElement: function _createComplexElement(fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\n        return new _index2.default.ComplexType({\n            From: fromType.name,\n            FromType: fromType,\n            FromMultiplicity: fromMultiplicity,\n            FromPropertyName: fromPropName,\n            To: toType.name,\n            ToType: toType,\n            ToMultiplicity: toMultiplicity,\n            ReferentialConstraint: [],\n            ToPropertyName: toPropName\n        });\n    },\n    _build_EnumDefinition: function _build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef) {\n        storageModel.Enums.push(memDefResolvedDataType);\n\n        var typeName = _index.Container.resolveName(memDefResolvedDataType);\n        var converterGroups = this.storageProvider.fieldConverter;\n\n        var createEnumConverter = function createEnumConverter(converterGroup) {\n            converterGroup[typeName] = function (value) {\n                return converterGroup[\"$data.Enum\"].call(this, value, memDefResolvedDataType);\n            };\n        };\n\n        for (var i in converterGroups) {\n            if (!converterGroups[i][typeName] && converterGroups[i][\"$data.Enum\"]) {\n                createEnumConverter(converterGroups[i]);\n            }\n        }\n    },\n\n    _successInitProvider: function _successInitProvider(context, error) {\n        if (context instanceof _index2.default.EntityContext && context._isOK !== undefined) {\n            if (!error) {\n                context._isOK = true;\n                if (context.onReadyFunction) {\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\n                        context.onReadyFunction[i].success(context);\n                    }\n                    context.onReadyFunction = undefined;\n                }\n            } else {\n                context._isOK = error;\n                if (context.onReadyFunction) {\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\n                        context.onReadyFunction[i].error(error);\n                    }\n                    context.onReadyFunction = undefined;\n                }\n            }\n        }\n    },\n    /**\r\n     * Sets the callback function to be called when the initialization of the {@link $data.EntityContext} has successfully finished.\r\n     * @event $data.EntityContext#onReady\r\n     * @param {function|function[]} fn - Success callback\r\n     * @returns {$.Deferred}\r\n     */\n    onReady: function onReady(fn) {\n        /// <signature>\n        ///     <summary>\n        ///\n        ///     </summary>\n        ///     <param name=\"successCallback\" type=\"Function\">\n        ///         <summary>Success callback</summary>\n        ///         <param name=\"entityContext\" type=\"$data.EntityContext\">Current entityContext object</param>\n        ///     </param>\n        ///     <returns type=\"\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>\n        ///         Sets the callback functions to be called when the initialization of the EntityContext has finished.\n        ///     </summary>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        var pHandler = new _index2.default.PromiseHandler();\n        var callBack = pHandler.createCallback(fn);\n        if (this._isOK === true) {\n            callBack.success(this);\n        } else if (this._isOK !== false) {\n            callBack.error(this._isOK);\n        } else {\n            this.onReadyFunction = this.onReadyFunction || [];\n            this.onReadyFunction.push(callBack);\n        }\n\n        return pHandler.getPromise();\n    },\n    ready: { type: _index2.default.Promise },\n    getEntitySetFromElementType: function getEntitySetFromElementType(elementType) {\n        /// <signature>\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\n        ///     <param name=\"elementType\" type=\"Function\" />\n        ///     <returns type=\"$data.EntitySet\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\n        ///     <param name=\"elementType\" type=\"String\" />\n        ///     <returns type=\"$data.EntitySet\" />\n        /// </signature>\n        var result = this._entitySetReferences[elementType];\n        if (!result) {\n            try {\n                result = this._entitySetReferences[eval(elementType).name];\n            } catch (ex) {}\n        }\n        return result;\n    },\n    executeQuery: function executeQuery(queryable, callBack, transaction) {\n        var query = new _index2.default.Query(queryable.expression, queryable.defaultType, this);\n        query.transaction = transaction instanceof _index2.default.Transaction ? transaction : undefined;\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        callBack = _index2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        var that = this;\n        var clbWrapper = {};\n        clbWrapper.success = that.executeQuerySuccess(that, returnTransaction, callBack);\n        clbWrapper.error = that.executeQueryError(that, returnTransaction, callBack);\n\n        var sets = query.getEntitySets();\n\n        var authorizedFn = function authorizedFn() {\n            var ex = true;\n            var wait = false;\n            var ctx = that;\n\n            var readyFn = function readyFn(cancel) {\n                if (cancel === false) ex = false;\n\n                if (ex) {\n                    if (query.transaction) {\n                        if (_index2.default.QueryCache && _index2.default.QueryCache.isInCache(that, query)) {\n                            _index2.default.QueryCache.executeQuery(that, query, clbWrapper);\n                        } else {\n                            ctx.storageProvider.executeQuery(query, clbWrapper);\n                        }\n                    } else {\n                        ctx.beginTransaction(function (tran) {\n                            query.transaction = tran;\n                            if (_index2.default.QueryCache && _index2.default.QueryCache.isInCache(that, query)) {\n                                _index2.default.QueryCache.executeQuery(that, query, clbWrapper);\n                            } else {\n                                ctx.storageProvider.executeQuery(query, clbWrapper);\n                            }\n                        });\n                    }\n                } else {\n                    query.rawDataList = [];\n                    query.result = [];\n                    clbWrapper.success(query);\n                }\n            };\n\n            var i = 0;\n            var callbackFn = function callbackFn(cancel) {\n                if (cancel === false) ex = false;\n\n                var es = sets[i];\n                if (es.beforeRead) {\n                    i++;\n                    var r = es.beforeRead.call(this, sets, query);\n                    if (typeof r === 'function') {\n                        r.call(this, i < sets.length && ex ? callbackFn : readyFn, sets, query);\n                    } else {\n                        if (r === false) ex = false;\n\n                        if (i < sets.length && ex) {\n                            callbackFn();\n                        } else readyFn();\n                    }\n                } else readyFn();\n            };\n\n            if (sets.length) callbackFn();else readyFn();\n        };\n\n        if (this.user && this.checkPermission) {\n            this.checkPermission(query.expression.nodeType === _index2.default.Expressions.ExpressionType.BatchDelete ? _index2.default.Access.DeleteBatch : _index2.default.Access.Read, this.user, sets, {\n                success: authorizedFn,\n                error: clbWrapper.error\n            });\n        } else authorizedFn();\n    },\n    executeQuerySuccess: function executeQuerySuccess(that, returnTransaction, callBack) {\n        return function (query) {\n            if (_index2.default.QueryCache && _index2.default.QueryCache.isCacheable(that, query)) {\n                _index2.default.QueryCache.addToCache(that, query);\n            }\n\n            query.buildResultSet(that);\n\n            if (_index2.default.ItemStore && 'QueryResultModifier' in _index2.default.ItemStore) _index2.default.ItemStore.QueryResultModifier.call(that, query);\n\n            var successResult;\n\n            if (query.expression.nodeType === _index2.default.Expressions.ExpressionType.Single || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Find || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Count || query.expression.nodeType === _index2.default.Expressions.ExpressionType.BatchDelete || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Some || query.expression.nodeType === _index2.default.Expressions.ExpressionType.Every) {\n                if (query.result.length !== 1) {\n                    callBack.error(new _index.Exception('result count failed'));\n                    return;\n                }\n\n                successResult = query.result[0];\n            } else if (query.expression.nodeType === _index2.default.Expressions.ExpressionType.First) {\n                if (query.result.length === 0) {\n                    callBack.error(new _index.Exception('result count failed'));\n                    return;\n                }\n\n                successResult = query.result[0];\n            } else {\n                if (typeof query.__count === 'number' && query.result) query.result.totalCount = query.__count;\n\n                that.storageProvider._buildContinuationFunction(that, query);\n\n                successResult = query.result;\n            }\n\n            var readyFn = function readyFn() {\n                that._applyTransaction(callBack, callBack.success, [successResult], query.transaction, returnTransaction);\n\n                /*if (returnTransaction === true) {\r\n                    if (query.transaction)\r\n                        callBack.success(successResult, query.transaction);\r\n                    else {\r\n                        that.beginTransaction(function (tran) {\r\n                            callBack.success(successResult, tran);\r\n                        });\r\n                    }\r\n                }\r\n                else\r\n                    callBack.success(successResult);*/\n            };\n\n            var i = 0;\n            var sets = query.getEntitySets();\n\n            var callbackFn = function callbackFn() {\n                var es = sets[i];\n                if (es.afterRead) {\n                    i++;\n                    var r = es.afterRead.call(this, successResult, sets, query);\n                    if (typeof r === 'function') {\n                        r.call(this, i < sets.length ? callbackFn : readyFn, successResult, sets, query);\n                    } else {\n                        if (i < sets.length) {\n                            callbackFn();\n                        } else readyFn();\n                    }\n                } else readyFn();\n            };\n\n            if (sets.length) callbackFn();else readyFn();\n        };\n    },\n    executeQueryError: function executeQueryError(that, returnTransaction, callBack) {\n        return function () {\n            if (returnTransaction) callBack.error.apply(this, arguments);else callBack.error.apply(this, Array.prototype.filter.call(arguments, function (p) {\n                return !(p instanceof _index2.default.Transaction);\n            }));\n        };\n    },\n\n    batchExecuteQuery: function batchExecuteQuery(queryableOptions, callBack, transaction) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(callBack);\n\n        var self = this;\n        var methodOperationMappings = {\n            count: 'length',\n            length: 'length',\n            forEach: 'forEach',\n            toArray: 'toArray',\n            single: 'single',\n            some: 'some',\n            every: 'every',\n            first: 'first',\n            removeAll: 'batchDelete'\n        };\n        var methodFrameMappings = {\n            count: 'CountExpression',\n            length: 'CountExpression',\n            forEach: 'ForEachExpression',\n            toArray: 'ToArrayExpression',\n            single: 'SingleExpression',\n            some: 'SomeExpression',\n            every: 'EveryExpression',\n            first: 'FirstExpression',\n            removeAll: 'BatchDeleteExpression'\n        };\n\n        var returnFunc = function returnFunc() {\n            return pHandler.getPromise();\n        };\n\n        if (typeof queryableOptions.length != \"number\") {\n            cbWrapper.error(new _index.Exception('QueryableOptions array parameter missing', 'Invalid arguments'));\n            return returnFunc();\n        }\n\n        var qOptions = [];\n        for (var i = 0; i < queryableOptions.length; i++) {\n            var queryOption = {};\n            if (queryableOptions[i] instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i];\n                queryOption.method = 'toArray';\n            } else if (queryableOptions[i].queryable instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i].queryable;\n                queryOption.method = queryableOptions[i].method || 'toArray';\n            } else if (queryableOptions[i][0] instanceof _index2.default.Queryable) {\n                queryOption.queryable = queryableOptions[i][0];\n                queryOption.method = queryableOptions[i][1] || 'toArray';\n            } else {\n                cbWrapper.error(new _index.Exception('$data.Queryable is missing in queryableOptions at index ' + i, 'Invalid arguments'));\n                return returnFunc();\n            }\n\n            if (queryOption.queryable.entityContext !== self) {\n                cbWrapper.error(new _index.Exception('Queryable at index ' + i + ' contains different entity context', 'Invalid arguments'));\n                return returnFunc();\n            }\n\n            queryOption.queryable._checkOperation(methodOperationMappings[queryOption.method] || queryOption.method);\n            qOptions.push(queryOption);\n        }\n\n        var executableQueries = [];\n        for (var i = 0; i < qOptions.length; i++) {\n            var queryOption = qOptions[i];\n\n            var frameExpressionName = methodFrameMappings[queryOption.method] || queryOption.method;\n            if (frameExpressionName && _index2.default.Expressions[frameExpressionName] && _index2.default.Expressions[frameExpressionName].isAssignableTo(_index2.default.Expressions.FrameOperator)) {\n\n                var queryExpression = _index.Container['create' + frameExpressionName](queryOption.queryable.expression);\n                var preparator = _index.Container.createQueryExpressionCreator(queryOption.queryable.entityContext);\n\n                try {\n                    var expression = preparator.Visit(queryExpression);\n                    queryOption.queryable.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n                    var queryable = _index.Container.createQueryable(queryOption.queryable, expression);\n                    executableQueries.push(queryable);\n                } catch (e) {\n                    cbWrapper.error(e);\n                    return returnFunc();\n                }\n            } else {\n                cbWrapper.error(new _index.Exception('Invalid frame method \\'' + frameExpressionName + '\\' in queryableOptions at index ' + i, 'Invalid arguments'));\n                return returnFunc();\n            }\n        }\n\n        var queryResults = [];\n        if (self.storageProvider.supportedContextOperation && self.storageProvider.supportedContextOperation.batchExecuteQuery) {\n            //wrap queries\n            var batchExecuteQueryExpression = _index.Container.createBatchExecuteQueryExpression(executableQueries.map(function (queryable) {\n                return new _index2.default.Query(queryable.expression, queryable.defaultType, self);\n            }));\n\n            var batchExecuteQuery = _index.Container.createQueryable(self, batchExecuteQueryExpression);\n            self.executeQuery(batchExecuteQuery, {\n                success: function success(results) {\n                    var batchResult = [];\n                    var hasError = false;\n                    var errorValue = null;\n                    for (var i = 0; i < results.length && !hasError; i++) {\n                        var query = results[i];\n                        self.executeQuerySuccess(self, returnTransaction, {\n                            success: function success(result) {\n                                batchResult.push(result);\n                            },\n                            error: function error(err) {\n                                hasError = true;\n                                errorValue = err;\n                            }\n                        })(query);\n                    }\n                    if (!hasError) {\n                        self._applyTransaction(cbWrapper, cbWrapper.success, [batchResult], batchExecuteQuery.transaction, returnTransaction);\n                    } else {\n                        cbWrapper.error(errorValue);\n                    }\n                },\n                error: cbWrapper.error\n            }, transaction);\n        } else {\n            var returnTransaction = this._isReturnTransaction(transaction);\n\n            var readIterator = function readIterator(queries, index, iteratorCallback, itTransaction) {\n                var query = queries[index];\n                if (!query) {\n                    return iteratorCallback.success(itTransaction);\n                }\n\n                self.executeQuery(executableQueries[index], {\n                    success: function success(result, tr) {\n                        queryResults.push(result);\n                        readIterator(executableQueries, index + 1, iteratorCallback, tr);\n                    },\n                    error: iteratorCallback.error\n                }, itTransaction);\n            };\n\n            readIterator(executableQueries, 0, {\n                success: function success(lastTran) {\n                    self._applyTransaction(cbWrapper, cbWrapper.success, [queryResults], lastTran, returnTransaction);\n                },\n                error: cbWrapper.error\n            }, transaction);\n        }\n        return returnFunc();\n    },\n\n    /**\r\n     * Saves the changes made to the context.\r\n     *\r\n     * @memberof $data.EntityContext\r\n     * @instance\r\n     * @param {Function|Object} callback - callback function or callback object with success & error properties\r\n     * @param {$data.Transaction} transaction - Transaction object\r\n     * @returns $.Deferred\r\n     *\r\n     * @example <caption>saveChanges with simple callback function</caption>\r\n     * context.saveChanges(function(db) {\r\n     *  //success\r\n     * });\r\n     *\r\n     * @example <caption>saveChanges with callback object</caption>\r\n     * var myCallback = {\r\n     *  success: function(db) { //succeess },\r\n     *  error: function(errors) { console.log(errors); }\r\n     * }\r\n     * context.saveChanges(myCallback);\r\n     */\n    saveChanges: function saveChanges(callback, transaction) {\n        if (_index2.default.QueryCache) {\n            _index2.default.QueryCache.reset(this);\n        }\n\n        var changedEntities = [];\n        var trackedEntities = this.stateManager.trackedEntities;\n        var pHandler = new _index2.default.PromiseHandler();\n        var clbWrapper = pHandler.createCallback(callback);\n        var pHandlerResult = pHandler.getPromise();\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        var skipItems = [];\n        while (trackedEntities.length > 0) {\n            var additionalEntities = [];\n            //trackedEntities.forEach(function (entityCachedItem) {\n            for (var i = 0; i < trackedEntities.length; i++) {\n                var entityCachedItem = trackedEntities[i];\n\n                var sModel = this._storageModel.getStorageModel(entityCachedItem.data.getType());\n                if (entityCachedItem.data.entityState == _index2.default.EntityState.Unchanged) {\n                    entityCachedItem.skipSave = true;\n                    skipItems.push(entityCachedItem.data);\n                } else {\n                    if (entityCachedItem.data.entityState == _index2.default.EntityState.Modified) {\n                        if (entityCachedItem.data.changedProperties) {\n                            var changeStoredProperty = entityCachedItem.data.changedProperties.some(function (p) {\n                                var pMemDef = sModel.PhysicalType.memberDefinitions.getMember(p.name);\n                                if (pMemDef.kind == _index2.default.MemberTypes.navProperty) {\n                                    var a = sModel.Associations[pMemDef.association];\n                                    var multiplicity = a.FromMultiplicity + a.ToMultiplicity;\n                                    return multiplicity == '*0..1' || multiplicity == '0..11';\n                                }\n                                return true;\n                            });\n                            if (!changeStoredProperty) {\n                                entityCachedItem.skipSave = true;\n                                skipItems.push(entityCachedItem.data);\n                            }\n                        } else {\n                            entityCachedItem.skipSave = true;\n                            skipItems.push(entityCachedItem.data);\n                        }\n                    }\n                }\n\n                //type before events with items\n                this.processEntityTypeBeforeEventHandler(skipItems, entityCachedItem);\n\n                var navigationProperties = [];\n                var smPhyMemDefs = sModel.PhysicalType.memberDefinitions.asArray();\n                for (var ism = 0; ism < smPhyMemDefs.length; ism++) {\n                    var p = smPhyMemDefs[ism];\n                    if (p.kind == _index2.default.MemberTypes.navProperty) navigationProperties.push(p);\n                }\n                //var navigationProperties = sModel.PhysicalType.memberDefinitions.asArray().filter(function (p) { return p.kind == $data.MemberTypes.navProperty; });\n                //navigationProperties.forEach(function (navProp) {\n                for (var j = 0; j < navigationProperties.length; j++) {\n                    var navProp = navigationProperties[j];\n\n                    var association = sModel.Associations[navProp.name]; //eg.:\"Profile\"\n                    var name = navProp.name; //eg.: \"Profile\"\n                    var navPropertyName = association.ToPropertyName; //eg.: User\n\n                    var connectedDataList = [].concat(entityCachedItem.data[name]);\n                    //connectedDataList.forEach(function (data) {\n                    for (var k = 0; k < connectedDataList.length; k++) {\n                        var data = connectedDataList[k];\n\n                        if (data) {\n                            var value = data[navPropertyName];\n                            var associationType = association.FromMultiplicity + association.ToMultiplicity;\n                            if (association.FromMultiplicity === '$$unbound') {\n                                if (data instanceof _index2.default.Array) {\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                    //data.forEach(function (dataItem) {\n                                    for (var l = 0; l < data.length; l++) {\n                                        var dataItem = data[l];\n\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                    }\n                                    //}, this);\n                                } else {\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                    }\n                            } else {\n                                switch (associationType) {\n                                    case \"*0..1\":\n                                        //Array\n                                        if (value) {\n                                            if (value instanceof Array) {\n                                                if (value.indexOf(entityCachedItem.data) == -1) {\n                                                    value.push(entityCachedItem.data);\n                                                    data.initData[navPropertyName] = value;\n                                                    data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                                }\n                                            } else {\n                                                if (typeof intellisense === 'undefined') {\n                                                    _index.Guard.raise(\"Item must be array or subtype of array\");\n                                                }\n                                            }\n                                        } else {\n                                            data.initData[navPropertyName] = [entityCachedItem.data];\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                        }\n                                        break;\n                                    default:\n                                        //Item\n                                        if (value) {\n                                            if (value !== entityCachedItem.data) {\n                                                if (typeof intellisense === 'undefined') {\n                                                    _index.Guard.raise(\"Integrity check error! Item assigned to another entity!\");\n                                                }\n                                            }\n                                        } else {\n                                            data.initData[navPropertyName] = entityCachedItem.data; //set back reference for live object\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\n                                        }\n                                        break;\n                                }\n                                switch (associationType) {\n                                    case \"*0..1\":\n                                    case \"0..11\":\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\n                                        if (entityCachedItem.dependentOn.indexOf(data) < 0 && data.skipSave !== true) {\n                                            entityCachedItem.dependentOn.push(data);\n                                        }\n                                        break;\n                                }\n                            }\n                            if (!data.entityState) {\n                                //if (data.storeToken === this.storeToken) {\n                                //    data.entityState = $data.EntityState.Modified;\n                                //} else {\n                                //    data.entityState = $data.EntityState.Added;\n                                //}\n                                this.discoverDependentItemEntityState(data);\n                            }\n                            if (additionalEntities.indexOf(data) == -1) {\n                                additionalEntities.push(data);\n                            }\n                        }\n                    }\n                    //}, this);\n                }\n                //}, this);\n            }\n            //}, this);\n\n            //trackedEntities.forEach(function (entity) {\n            for (var i = 0; i < trackedEntities.length; i++) {\n                var entity = trackedEntities[i];\n\n                if (entity.skipSave !== true) {\n                    changedEntities.push(entity);\n                }\n            }\n            //});\n\n            trackedEntities = [];\n            //additionalEntities.forEach(function (item) {\n            for (var i = 0; i < additionalEntities.length; i++) {\n                var item = additionalEntities[i];\n\n                if (!skipItems.some(function (entity) {\n                    return entity == item;\n                })) {\n                    if (!changedEntities.some(function (entity) {\n                        return entity.data == item;\n                    })) {\n                        trackedEntities.push({ data: item, entitySet: this.getEntitySetFromElementType(item.getType().name) });\n                    }\n                }\n            }\n            //}, this);\n        }\n\n        //changedEntities.forEach(function (d) {\n        for (var j = 0; j < changedEntities.length; j++) {\n            var d = changedEntities[j];\n\n            if (d.dependentOn) {\n                var temp = [];\n                for (var i = 0; i < d.dependentOn.length; i++) {\n                    if (skipItems.indexOf(d.dependentOn[i]) < 0) {\n                        temp.push(d.dependentOn[i]);\n                    } else {\n                        d.additionalDependentOn = d.additionalDependentOn || [];\n                        d.additionalDependentOn.push(d.dependentOn[i]);\n                    }\n                }\n                d.dependentOn = temp;\n            }\n        }\n        //});\n        skipItems = null;\n        var ctx = this;\n        if (changedEntities.length == 0) {\n            this.stateManager.trackedEntities.length = 0;\n            ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\n\n            /*if (returnTransaction) {\r\n                clbWrapper.success(0, transaction);\r\n            } else {\r\n                clbWrapper.success(0);\r\n            }*/\n            return pHandlerResult;\n        }\n\n        //validate entities\n        var errors = [];\n        //changedEntities.forEach(function (entity) {\n        for (var i = 0; i < changedEntities.length; i++) {\n            var entity = changedEntities[i];\n\n            if (entity.data.entityState === _index2.default.EntityState.Added) {\n                //entity.data.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                for (var j = 0; j < entity.data.getType().memberDefinitions.getPublicMappedProperties().length; j++) {\n                    var memDef = entity.data.getType().memberDefinitions.getPublicMappedProperties()[j];\n\n                    var memDefType = _index.Container.resolveType(memDef.type);\n                    if (memDef.required && !memDef.computed && !entity.data[memDef.name] && !memDef.isDependentProperty) {\n                        switch (memDefType) {\n                            case _index2.default.String:\n                            case _index2.default.Number:\n                            case _index2.default.Float:\n                            case _index2.default.Decimal:\n                            case _index2.default.Integer:\n                            case _index2.default.Int16:\n                            case _index2.default.Int32:\n                            case _index2.default.Int64:\n                            case _index2.default.Byte:\n                            case _index2.default.SByte:\n                            case _index2.default.Date:\n                            case _index2.default.Boolean:\n                                entity.data[memDef.name] = _index.Container.getDefault(memDef.dataType);\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n                //}, this);\n            }\n            if ((entity.data.entityState === _index2.default.EntityState.Added || entity.data.entityState === _index2.default.EntityState.Modified) && !entity.data.isValid()) {\n                errors.push({ item: entity.data, errors: entity.data.ValidationErrors });\n            }\n        }\n        //});\n        if (errors.length > 0) {\n            clbWrapper.error(errors);\n            return pHandlerResult;\n        }\n\n        var access = _index2.default.Access.None;\n\n        var eventData = {};\n        var sets = [];\n        for (var i = 0; i < changedEntities.length; i++) {\n            var it = changedEntities[i];\n            var n = it.entitySet.elementType.name;\n            if (sets.indexOf(it.entitySet) < 0) sets.push(it.entitySet);\n            var es = this._entitySetReferences[n];\n            if (es.beforeCreate || es.beforeUpdate || es.beforeDelete || this.user && this.checkPermission) {\n                if (!eventData[n]) eventData[n] = {};\n\n                switch (it.data.entityState) {\n                    case _index2.default.EntityState.Added:\n                        access |= _index2.default.Access.Create;\n                        if (es.beforeCreate) {\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\n                            eventData[n].createAll.push(it);\n                        }\n                        break;\n                    case _index2.default.EntityState.Modified:\n                        access |= _index2.default.Access.Update;\n                        if (es.beforeUpdate) {\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\n                            eventData[n].modifyAll.push(it);\n                        }\n                        break;\n                    case _index2.default.EntityState.Deleted:\n                        access |= _index2.default.Access.Delete;\n                        if (es.beforeDelete) {\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\n                            eventData[n].deleteAll.push(it);\n                        }\n                        break;\n                }\n            }\n        }\n\n        var readyFn = function readyFn(cancel) {\n            if (cancel === false) {\n                cancelEvent = 'async';\n                changedEntities.length = 0;\n            }\n\n            if (changedEntities.length) {\n                //console.log('changedEntities: ', changedEntities.map(function(it){ return it.data.initData; }));\n\n                var innerCallback = {\n                    success: function success(tran) {\n                        ctx._postProcessSavedItems(clbWrapper, changedEntities, tran, returnTransaction);\n                    },\n                    error: function error() {\n                        //TODO remove trans from args;\n                        if (returnTransaction) clbWrapper.error.apply(this, arguments);else clbWrapper.error.apply(this, Array.prototype.filter.call(arguments, function (p) {\n                            return !(p instanceof _index2.default.Transaction);\n                        }));\n                    }\n                };\n\n                if (transaction instanceof _index2.default.Transaction) {\n                    ctx.storageProvider.saveChanges(innerCallback, changedEntities, transaction);\n                } else {\n                    ctx.beginTransaction(true, function (tran) {\n                        ctx.storageProvider.saveChanges(innerCallback, changedEntities, tran);\n                    });\n                }\n            } else if (cancelEvent) {\n                clbWrapper.error(new _index.Exception('Cancelled event in ' + cancelEvent, 'CancelEvent'));\n            } else {\n                ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\n\n                /*if(returnTransaction)\r\n                    clbWrapper.success(0, transaction);\r\n                else\r\n                    clbWrapper.success(0);*/\n            };\n\n            /*else if (cancelEvent) clbWrapper.error(new $data.Exception('saveChanges cancelled from event [' + cancelEvent + ']'));\r\n            else Guard.raise('No changed entities');*/\n        };\n\n        var cancelEvent;\n        var ies = Object.getOwnPropertyNames(eventData);\n        var i = 0;\n        var cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n        var cmdAll = {\n            beforeCreate: 'createAll',\n            beforeDelete: 'deleteAll',\n            beforeUpdate: 'modifyAll'\n        };\n\n        var callbackFn = function callbackFn(cancel) {\n            if (cancel === false) {\n                cancelEvent = 'async';\n                changedEntities.length = 0;\n\n                readyFn(cancel);\n                return;\n            }\n\n            var es = ctx._entitySetReferences[ies[i]];\n            var c = cmd.pop();\n            var ed = eventData[ies[i]];\n            var all = ed[cmdAll[c]];\n\n            if (all) {\n                var m = [];\n                for (var im = 0; im < all.length; im++) {\n                    m.push(all[im].data);\n                }\n                //var m = all.map(function(it){ return it.data; });\n                if (!cmd.length) {\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n                    i++;\n                }\n\n                var r = es[c].call(ctx, m);\n                if (typeof r === 'function') {\n                    r.call(ctx, i < ies.length && !cancelEvent ? callbackFn : readyFn, m);\n                } else if (r === false) {\n                    cancelEvent = es.name + '.' + c;\n                    //all.forEach(function (it) {\n                    for (var index = 0; index < all.length; index++) {\n                        var it = all[index];\n\n                        var ix = changedEntities.indexOf(it);\n                        changedEntities.splice(ix, 1);\n                    }\n                    //});\n\n                    readyFn();\n                } else {\n                    if (i < ies.length && !cancelEvent) callbackFn();else readyFn();\n                }\n            } else {\n                if (!cmd.length) {\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\n                    i++;\n                }\n\n                if (i < ies.length && !cancelEvent) callbackFn();else readyFn();\n            }\n        };\n\n        if (this.user && this.checkPermission) {\n            this.checkPermission(access, this.user, sets, {\n                success: function success() {\n                    if (i < ies.length) callbackFn();else readyFn();\n                },\n                error: clbWrapper.error\n            });\n        } else {\n            if (i < ies.length) callbackFn();else readyFn();\n        }\n\n        return pHandlerResult;\n    },\n    discoverDependentItemEntityState: function discoverDependentItemEntityState(data) {\n        if (data.storeToken === this.storeToken) {\n            data.entityState = data.changedProperties && data.changedProperties.length ? _index2.default.EntityState.Modified : _index2.default.EntityState.Unchanged;\n        } else if (data.storeToken && this.storeToken && data.storeToken.typeName === this.storeToken.typeName && JSON.stringify(data.storeToken.args) === JSON.stringify(this.storeToken.args)) {\n            data.entityState = data.changedProperties && data.changedProperties.length ? _index2.default.EntityState.Modified : _index2.default.EntityState.Unchanged;\n        } else {\n            data.entityState = _index2.default.EntityState.Added;\n        }\n    },\n\n    processEntityTypeBeforeEventHandler: function processEntityTypeBeforeEventHandler(skipItems, entityCachedItem) {\n        if (!entityCachedItem.skipSave) {\n            var entity = entityCachedItem.data;\n            var entityType = entity.getType();\n            var state = entity.entityState;\n\n            switch (true) {\n                case state === _index2.default.EntityState.Added && entityType.onbeforeCreate instanceof _index2.default.Event:\n                    if (entityType.onbeforeCreate.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                case state === _index2.default.EntityState.Modified && entityType.onbeforeUpdate instanceof _index2.default.Event:\n                    if (entityType.onbeforeUpdate.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                case state === _index2.default.EntityState.Deleted && entityType.onbeforeDelete instanceof _index2.default.Event:\n                    if (entityType.onbeforeDelete.fireCancelAble(entity) === false) {\n                        entityCachedItem.skipSave = true;\n                        skipItems.push(entity);\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    },\n    processEntityTypeAfterEventHandler: function processEntityTypeAfterEventHandler(entityCachedItem) {\n        var entity = entityCachedItem.data;\n        var entityType = entity.getType();\n        var state = entity.entityState;\n\n        switch (true) {\n            case state === _index2.default.EntityState.Added && entityType.onafterCreate instanceof _index2.default.Event:\n                entityType.onafterCreate.fire(entity);\n                break;\n            case state === _index2.default.EntityState.Modified && entityType.onafterUpdate instanceof _index2.default.Event:\n                entityType.onafterUpdate.fire(entity);\n                break;\n            case state === _index2.default.EntityState.Deleted && entityType.onafterDelete instanceof _index2.default.Event:\n                entityType.onafterDelete.fire(entity);\n                break;\n            default:\n                break;\n        }\n    },\n\n    bulkInsert: function bulkInsert(entitySet, fields, datas, callback) {\n        var pHandler = new _index2.default.PromiseHandler();\n        callback = pHandler.createCallback(callback);\n        if (typeof entitySet === 'string') {\n            var currentEntitySet;\n\n            for (var entitySetName in this._entitySetReferences) {\n                var actualEntitySet = this._entitySetReferences[entitySetName];\n                if (actualEntitySet.tableName === entitySet) {\n                    currentEntitySet = actualEntitySet;\n                    break;\n                }\n            }\n\n            if (!currentEntitySet) currentEntitySet = this[entitySet];\n\n            entitySet = currentEntitySet;\n        }\n        if (entitySet) {\n            this.storageProvider.bulkInsert(entitySet, fields, datas, callback);\n        } else {\n            callback.error(new _index.Exception('EntitySet not found'));\n        }\n        return pHandler.getPromise();\n    },\n\n    prepareRequest: function prepareRequest() {},\n    _postProcessSavedItems: function _postProcessSavedItems(callBack, changedEntities, transaction, returnTransaction) {\n        if (this.ChangeCollector && this.ChangeCollector instanceof _index2.default.Notifications.ChangeCollectorBase) this.ChangeCollector.processChangedData(changedEntities);\n\n        var eventData = {};\n        var ctx = this;\n        //changedEntities.forEach(function (entity) {\n        for (var i = 0; i < changedEntities.length; i++) {\n            var entity = changedEntities[i];\n\n            if (!entity.data.storeToken) entity.data.storeToken = ctx.storeToken;\n\n            //type after events with items\n            this.processEntityTypeAfterEventHandler(entity);\n\n            var oes = entity.data.entityState;\n\n            entity.data.entityState = _index2.default.EntityState.Unchanged;\n            entity.data.changedProperties = [];\n            entity.physicalData = undefined;\n\n            var n = entity.entitySet.elementType.name;\n            var es = ctx._entitySetReferences[n];\n\n            var eventName = undefined;\n            switch (oes) {\n                case _index2.default.EntityState.Added:\n                    eventName = 'added';\n                    break;\n                case _index2.default.EntityState.Deleted:\n                    eventName = 'deleted';\n                    break;\n                case _index2.default.EntityState.Modified:\n                    eventName = 'updated';\n                    break;\n            }\n            if (eventName) {\n                this.raiseEvent(eventName, entity);\n            }\n\n            if (es.afterCreate || es.afterUpdate || es.afterDelete) {\n                if (!eventData[n]) eventData[n] = {};\n\n                switch (oes) {\n                    case _index2.default.EntityState.Added:\n                        if (es.afterCreate) {\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\n                            eventData[n].createAll.push(entity);\n                        }\n                        break;\n                    case _index2.default.EntityState.Modified:\n                        if (es.afterUpdate) {\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\n                            eventData[n].modifyAll.push(entity);\n                        }\n                        break;\n                    case _index2.default.EntityState.Deleted:\n                        if (es.afterDelete) {\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\n                            eventData[n].deleteAll.push(entity);\n                        }\n                        break;\n                }\n            }\n        }\n        //});\n\n        var ies = Object.getOwnPropertyNames(eventData);\n        var i = 0;\n        var ctx = this;\n        var cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n        var cmdAll = {\n            afterCreate: 'createAll',\n            afterDelete: 'deleteAll',\n            afterUpdate: 'modifyAll'\n        };\n\n        var readyFn = function readyFn() {\n            if (!ctx.trackChanges) {\n                ctx.stateManager.reset();\n            }\n\n            ctx._applyTransaction(callBack, callBack.success, [changedEntities.length], transaction, returnTransaction);\n\n            /*if (returnTransaction)\r\n                callBack.success(changedEntities.length, transaction);\r\n            else\r\n                callBack.success(changedEntities.length);*/\n        };\n\n        var callbackFn = function callbackFn() {\n            var es = ctx._entitySetReferences[ies[i]];\n            var c = cmd.pop();\n            var ed = eventData[ies[i]];\n            var all = ed[cmdAll[c]];\n            if (all) {\n                var m = [];\n                for (var im = 0; im < all.length; im++) {\n                    m.push(all[im].data);\n                }\n                //var m = all.map(function(it){ return it.data; });\n                if (!cmd.length) {\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n                    i++;\n                }\n\n                var r = es[c].call(ctx, m);\n                if (typeof r === 'function') {\n                    r.call(ctx, i < ies.length ? callbackFn : readyFn, m);\n                } else {\n                    if (i < ies.length) callbackFn();else readyFn();\n                }\n            } else {\n                if (!cmd.length) {\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\n                    i++;\n                }\n\n                if (i < ies.length) callbackFn();else readyFn();\n            }\n        };\n\n        if (i < ies.length) callbackFn();else readyFn();\n    },\n    forEachEntitySet: function forEachEntitySet(fn, ctx) {\n        /// <summary>\n        ///     Iterates over the entity sets' of current EntityContext.\n        /// </summary>\n        /// <param name=\"fn\" type=\"Function\">\n        ///     <param name=\"entitySet\" type=\"$data.EntitySet\" />\n        /// </param>\n        /// <param name=\"ctx\">'this' argument for the 'fn' function.</param>\n        for (var entitySetName in this._entitySetReferences) {\n            var actualEntitySet = this._entitySetReferences[entitySetName];\n            fn.call(ctx, actualEntitySet);\n        }\n    },\n\n    loadItemProperty: function loadItemProperty(entity, property, callback, transaction) {\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>C  allback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        _index.Guard.requireType('entity', entity, _index2.default.Entity);\n\n        var memberDefinition = typeof property === 'string' ? entity.getType().memberDefinitions.getMember(property) : property;\n        var returnTransaction = this._isReturnTransaction(transaction);\n\n        if (entity[memberDefinition.name] != undefined) {\n\n            var pHandler = new _index2.default.PromiseHandler();\n            var callBack = pHandler.createCallback(callback);\n            this._applyTransaction(callback, callback.success, [entity[memberDefinition.name]], transaction, returnTransaction);\n            /*if (returnTransaction)\r\n                callback.success(entity[memberDefinition.name], transaction);\r\n            else\r\n                callback.success(entity[memberDefinition.name]);*/\n\n            return pHandler.getPromise();\n        }\n\n        var isSingleSide = true;\n        var storageModel = this._storageModel.getStorageModel(entity.getType().fullName);\n        var elementType = _index.Container.resolveType(memberDefinition.dataType);\n        if (elementType === _index2.default.Array || elementType.isAssignableTo && elementType.isAssignableTo(_index2.default.EntitySet)) {\n            elementType = _index.Container.resolveType(memberDefinition.elementType);\n\n            isSingleSide = false;\n        } else {\n            var associations;\n            for (var i = 0; i < storageModel.Associations.length; i++) {\n                var assoc = storageModel.Associations[i];\n                if (assoc.FromPropertyName == memberDefinition.name) {\n                    associations = assoc;\n                    break;\n                }\n            }\n            //var associations = storageModel.Associations.filter(function (assoc) { return assoc.FromPropertyName == memberDefinition.name; })[0];\n            if (associations && associations.FromMultiplicity === \"0..1\" && associations.ToMultiplicity === \"1\") isSingleSide = false;\n        }\n\n        var keyProp = storageModel.LogicalType.memberDefinitions.getKeyProperties();\n        if (isSingleSide === true) {\n            //singleSide\n\n            var filterFunc = \"function (e) { return\";\n            var filterParams = {};\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\n            for (var index = 0; index < keyProp.length; index++) {\n                var memDefKey = keyProp[index];\n\n                if (index > 0) filterFunc += ' &&';\n                filterFunc += \" e.\" + memDefKey.name + \" == this.key\" + index;\n                filterParams['key' + index] = entity[memDefKey.name];\n            }\n            //});\n            filterFunc += \"; }\";\n\n            var entitySet = this.getEntitySetFromElementType(entity.getType());\n            return entitySet.map('function (e) { return e.' + memberDefinition.name + ' }').single(filterFunc, filterParams, callback, transaction);\n        } else {\n            //multipleSide\n\n            var filterFunc = \"function (e) { return\";\n            var filterParams = {};\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\n            for (var index = 0; index < keyProp.length; index++) {\n                var memDefKey = keyProp[index];\n\n                if (index > 0) filterFunc += ' &&';\n                filterFunc += \" e.\" + memberDefinition.inverseProperty + \".\" + memDefKey.name + \" == this.key\" + index;\n                filterParams['key' + index] = entity[memDefKey.name];\n            }\n            //});\n            filterFunc += \"; }\";\n\n            var entitySet = this.getEntitySetFromElementType(elementType);\n            return entitySet.filter(filterFunc, filterParams).toArray(callback, transaction);\n        }\n    },\n\n    getTraceString: function getTraceString(queryable) {\n        /// <summary>\n        /// Returns a trace string. Used for debugging purposes!\n        /// </summary>\n        /// <param name=\"queryable\" type=\"$data.Queryable\" />\n        /// <returns>Trace string</returns>\n        var query = new _index2.default.Query(queryable.expression, queryable.defaultType, this);\n        return this.storageProvider.getTraceString(query);\n    },\n    log: function log(logInfo) {\n        //noop as do nothing\n    },\n\n    resolveBinaryOperator: function resolveBinaryOperator(operator, expression, frameType) {\n        return this.storageProvider.resolveBinaryOperator(operator, expression, frameType);\n    },\n    resolveUnaryOperator: function resolveUnaryOperator(operator, expression, frameType) {\n        return this.storageProvider.resolveUnaryOperator(operator, expression, frameType);\n    },\n    resolveFieldOperation: function resolveFieldOperation(operation, expression, frameType) {\n        return this.storageProvider.resolveFieldOperation(operation, expression, frameType);\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveSetOperations(operation, expression, frameType);\n    },\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveTypeOperations(operation, expression, frameType);\n    },\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        return this.storageProvider.resolveContextOperations(operation, expression, frameType);\n    },\n\n    _generateServiceOperationQueryable: function _generateServiceOperationQueryable(functionName, returnEntitySet, arg, parameters) {\n        if (typeof console !== 'undefined' && console.log) console.log('Obsolate: _generateServiceOperationQueryable, $data.EntityContext');\n\n        var params = [];\n        for (var i = 0; i < parameters.length; i++) {\n            var obj = {};\n            obj[parameters[i]] = _index.Container.resolveType(_index.Container.getTypeName(arg[i]));\n            params.push(obj);\n        }\n\n        var tempOperation = _index2.default.EntityContext.generateServiceOperation({ serviceName: functionName, returnType: _index2.default.Queryable, elementType: this[returnEntitySet].elementType, params: params });\n        return tempOperation.apply(this, arg);\n    },\n    attach: function attach(entity, mode) {\n        /// <summary>\n        ///     Attaches an entity to its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the attached entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.attach(entity, mode);\n    },\n    attachOrGet: function attachOrGet(entity, mode) {\n        /// <summary>\n        ///     Attaches an entity to its matching entity set, or returns if it's already attached.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.attachOrGet(entity, mode);\n    },\n\n    addMany: function addMany(entities) {\n        /// <summary>\n        ///     Adds several entities to their matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"Array\" />\n        /// <returns type=\"Array\">Returns the added entities.</returns>\n        var self = this;\n        entities.forEach(function (entity) {\n            self.add(entity);\n        });\n        return entities;\n    },\n\n    add: function add(entity) {\n        /// <summary>\n        ///     Adds a new entity to its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the added entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.add(entity);\n    },\n    remove: function remove(entity) {\n        /// <summary>\n        ///     Removes an entity from its matching entity set.\n        /// </summary>\n        /// <param name=\"entity\" type=\"$data.Entity\" />\n        /// <returns type=\"$data.Entity\">Returns the removed entity.</returns>\n\n        if (entity instanceof _index2.default.EntityWrapper) {\n            entity = entity.getEntity();\n        }\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\n        return entitySet.remove(entity);\n    },\n    storeToken: { type: Object },\n\n    getFieldUrl: function getFieldUrl(entity, member, collection) {\n        try {\n            var entitySet = typeof collection === 'string' ? this[collection] : collection;\n            var fieldName = typeof member === 'string' ? member : member.name;\n            if (entity instanceof _index2.default.Entity) {\n                entitySet = this.getEntitySetFromElementType(entity.getType());\n            } else if (!_index.Guard.isNullOrUndefined(entity) && entity.constructor !== _index2.default.Object) {\n                //just a single key\n                var keyDef = entitySet.elementType.memberDefinitions.getKeyProperties()[0];\n                var key = {};\n                key[keyDef.name] = entity;\n                entity = key;\n            }\n\n            //key object\n            if (!(entity instanceof _index2.default.Entity)) {\n                entity = new entitySet.elementType(entity);\n            }\n\n            return this.storageProvider.getFieldUrl(entity, fieldName, entitySet);\n        } catch (e) {}\n        return '#';\n    },\n\n    //xxxx\n    _applyRelatedEntityMethodsToContext: function _applyRelatedEntityMethodsToContext() {\n        if (this.storageProvider.name === \"oData\") {\n            for (var esName in this._entitySetReferences) {\n                var es = this._entitySetReferences[esName];\n                var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + es.name;\n                //EntitiySets\n                if (!(newMemberName in es)) {\n                    es[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\n                }\n                //Context\n                if (!(newMemberName in this)) {\n                    this[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\n                }\n            }\n        }\n    },\n    _applyRelatedEntityMethodsToTypes: function _applyRelatedEntityMethodsToTypes() {\n        if (this.storageProvider.name === \"oData\") {\n            for (var esName in this._entitySetReferences) {\n                //add to Type\n                var elementType = this._entitySetReferences[esName].elementType;\n                var members = elementType.memberDefinitions.getPublicMappedProperties();\n                for (var i = 0; i < members.length; i++) {\n                    var member = members[i];\n                    var memberElementType = null;\n                    if (member.inverseProperty && _index.Container.resolveType(member.dataType) === _index2.default.Array && (memberElementType = _index.Container.resolveType(member.elementType)) && memberElementType.isAssignableTo && memberElementType.isAssignableTo(_index2.default.Entity)) {\n                        var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + member.name;\n                        if (!elementType.getMemberDefinition(newMemberName)) {\n                            elementType.addMember(newMemberName, this._relatedEntityGetMethod(memberElementType, member));\n                        }\n                    }\n                }\n            }\n        }\n    },\n    _createRelatedEntityProxyClass: function _createRelatedEntityProxyClass(type) {\n        var proxyClassName = type.namespace + _index2.default.defaults.relatedEntityProxyPrefix + type.name;\n        if (!_index.Container.isTypeRegistered(proxyClassName)) {\n            var definition = {};\n            var members = type.memberDefinitions.getPublicMappedProperties();\n            for (var i = 0; i < members.length; i++) {\n                var member = members[i];\n                var memberElementType = null;\n                if (member.inverseProperty && _index.Container.resolveType(member.dataType) === _index2.default.Array && (memberElementType = _index.Container.resolveType(member.elementType)) && memberElementType.isAssignableTo && memberElementType.isAssignableTo(_index2.default.Entity)) {\n                    var newMemberName = _index2.default.defaults.relatedEntityReadMethodPrefix + member.name;\n                    definition[newMemberName] = this._relatedEntityGetMethod(memberElementType, member);\n                }\n            }\n            _index2.default.Class.define(proxyClassName, _index2.default.RelatedEntityProxy, null, definition, null);\n        }\n\n        return _index.Container.resolveType(proxyClassName);\n    },\n    _relatedEntityGetMethod: function _relatedEntityGetMethod(targetType, navigation, context) {\n        var that = this;\n        var keys = targetType.memberDefinitions.getKeyProperties();\n\n        return function (keyValue) {\n            var proxyClass = that._createRelatedEntityProxyClass(targetType);\n            if (keys.length === 1 && (typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                var keyV = {};\n                keyV[keys[0].name] = keyValue;\n                keyValue = keyV;\n            }\n\n            if ((typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                throw new _index.Exception('Key parameter is invalid');\n            } else {\n                return new proxyClass(keyValue, navigation, targetType, this, context || (this.context instanceof _index2.default.EntityContext ? this.context : undefined));\n            }\n        };\n    }\n}, {\n    inheritedTypeProcessor: function inheritedTypeProcessor(type) {\n        if (type.resolveForwardDeclarations) {\n            type.resolveForwardDeclarations();\n        }\n    },\n    generateServiceOperation: function generateServiceOperation(cfg) {\n\n        var fn;\n        if (cfg.serviceMethod) {\n            var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : {};\n            if (returnType.isAssignableTo && returnType.isAssignableTo(_index2.default.Queryable)) {\n                fn = cfg.serviceMethod;\n            } else {\n                fn = function fn() {\n                    var lastParam = arguments[arguments.length - 1];\n\n                    var pHandler = new _index2.default.PromiseHandler();\n                    var cbWrapper;\n\n                    var args = arguments;\n                    if (typeof lastParam === 'function') {\n                        cbWrapper = pHandler.createCallback(lastParam);\n                        arguments[arguments.length - 1] = cbWrapper;\n                    } else {\n                        cbWrapper = pHandler.createCallback();\n                        arguments.push(cbWrapper);\n                    }\n\n                    try {\n                        var result = cfg.serviceMethod.apply(this, arguments);\n                        if (result !== undefined) cbWrapper.success(result);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n\n                    return pHandler.getPromise();\n                };\n            }\n        } else {\n            fn = function fn() {\n                var context = this;\n\n                var boundItem;\n                if (this instanceof _index2.default.Entity) {\n                    if (!cfg.method) {\n                        cfg.method = 'POST';\n                    }\n\n                    if (this.context) {\n                        context = this.context;\n                    } else {\n                        _index.Guard.raise('entity not attached into context');\n                        return;\n                    }\n\n                    boundItem = {\n                        data: this,\n                        entitySet: context.getEntitySetFromElementType(this.getType())\n                    };\n                }\n\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(_index.Container.resolveType(cfg.elementType)) : null;\n\n                var paramConstExpression = null;\n                if (cfg.params) {\n                    paramConstExpression = [];\n                    for (var i = 0; i < cfg.params.length; i++) {\n                        //TODO: check params type\n                        for (var name in cfg.params[i]) {\n                            paramConstExpression.push(_index.Container.createConstantExpression(arguments[i], _index.Container.resolveType(cfg.params[i][name]), name));\n                        }\n                    }\n                }\n\n                var ec = _index.Container.createEntityContextExpression(context);\n                var memberdef = (boundItem ? boundItem.data : context).getType().getMemberDefinition(cfg.serviceName);\n                var es = _index.Container.createServiceOperationExpression(ec, _index.Container.createMemberInfoExpression(memberdef), paramConstExpression, cfg, boundItem);\n\n                //Get callback function\n                var clb = arguments[arguments.length - 1];\n                if (typeof clb !== 'function') {\n                    clb = undefined;\n                }\n\n                if (virtualEntitySet) {\n                    var q = _index.Container.createQueryable(virtualEntitySet, es);\n                    if (clb) {\n                        es.isTerminated = true;\n                        return q._runQuery(clb);\n                    }\n                    return q;\n                } else {\n                    var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : null;\n\n                    var q = _index.Container.createQueryable(context, es);\n                    q.defaultType = returnType || _index2.default.Object;\n\n                    if (returnType === _index2.default.Queryable) {\n                        q.defaultType = _index.Container.resolveType(cfg.elementType);\n                        if (clb) {\n                            es.isTerminated = true;\n                            return q._runQuery(clb);\n                        }\n                        return q;\n                    }\n                    es.isTerminated = true;\n                    return q._runQuery(clb);\n                }\n            };\n        };\n\n        var params = [];\n        if (cfg.params) {\n            for (var i = 0; i < cfg.params.length; i++) {\n                var param = cfg.params[i];\n                for (var name in param) {\n                    params.push({\n                        name: name,\n                        type: param[name]\n                    });\n                }\n            }\n        }\n        _index2.default.typeSystem.extend(fn, cfg, { params: params });\n\n        return fn;\n    },\n    _convertLogicalTypeNameToPhysical: function _convertLogicalTypeNameToPhysical(name) {\n        return name + '_$db$';\n    },\n    _storageModelCache: {\n        get: function get() {\n            if (!this.__storageModelCache) this.__storageModelCache = {};\n            return this.__storageModelCache;\n        },\n        set: function set() {\n            //todo exception\n        }\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],47:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n///EntitySet is responsible for\n/// -creating and holding entityType through schema\n/// - provide Add method\n/// - provide Delete method\n/// - provide Update method\n/// - provide queryProvider for queryable\n\n_index2.default.EntitySchemaConfig = function EntitySchemaConfig() {\n    this.Name = \"\";\n};\n_index2.default.entitySetState = { created: 0, defined: 1, active: 2 };\n\n_index2.default.Class.defineEx('$data.EntitySet', [{ type: _index2.default.Queryable, params: [new _index2.default.Class.ConstructorParameter(1)] }], null, {\n    constructor: function constructor(elementType, context, collectionName, eventHandlers, roles) {\n        /// <signature>\n        ///     <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations</summary>\n        ///     <param name=\"elementType\" type=\"Function\" subClassOf=\"$data.Entity\">Type of entity set elements, elementType must be subclass of $data.Entity</param>\n        ///     <param name=\"context\" type=\"$data.EntityContext\">Context of the EntitySet</param>\n        ///     <param name=\"collectionName\" type=\"String\">Name of the EntitySet</param>\n        /// </signature>\n        this.createNew = this[elementType.name] = this.elementType = this.defaultType = elementType;\n        var self = this;\n        context['createAdd' + elementType.name] = function (initData) {\n            var entity = new elementType(initData);\n            return self.add(entity);\n        };\n        this.stateManager = new _index2.default.EntityStateManager(this);\n\n        this.collectionName = collectionName;\n        this.roles = roles;\n\n        for (var i in eventHandlers) {\n            this[i] = eventHandlers[i];\n        }\n    },\n\n    addNew: function addNew(item, cb) {\n        var callback = _index2.default.PromiseHandlerBase.createCallbackSettings(cb);\n        var _item = new this.createNew(item);\n        this.entityContext.saveChanges(cb);\n        return _item;\n    },\n\n    executeQuery: function executeQuery(expression, on_ready) {\n        //var compiledQuery = this.entityContext\n        var callBack = _index2.default.PromiseHandlerBase.createCallbackSettings(on_ready);\n        this.entityContext.executeQuery(expression, callBack);\n    },\n    getTraceString: function getTraceString(expression) {\n        return this.entityContext.getTraceString(expression);\n    },\n    setContext: function setContext(entityContext) {\n        this.entitySetState = _index2.default.entitySetState.active;\n        this.entityContext = entityContext;\n        this.entityContext[this.schema.name] = this[this.schema.name];\n    },\n    _trackEntity: function _trackEntity(entity) {\n        var trackedEntities = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEntities.length; i++) {\n            if (trackedEntities[i].data === entity) return;\n        }\n        trackedEntities.push({ entitySet: this, data: entity });\n    },\n    add: function add(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the context.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///\n        ///         Persons.add({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Adds the given entity to the context.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to add</param>\n        ///     <example>\n        ///\n        ///         Persons.add(new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' }));\n        ///\n        ///     </example>\n        ///     <example>\n        ///\n        ///         var person = new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\n        ///         Persons.add(person);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n        data.entityState = _index2.default.EntityState.Added;\n        data.changedProperties = undefined;\n        data.context = this.entityContext;\n        this._trackEntity(data);\n        return data;\n    },\n\n    addMany: function addMany(entities) {\n        var result = [];\n        var self = this;\n        entities.forEach(function (entity) {\n            result.push(self.add(entity));\n        });\n        return result;\n    },\n    remove: function remove(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and marks it as Deleted.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///         Person will be marked as Deleted where an id is 5. Id is a key of entity.\n        ///         Persons.remove({ Id: 5 });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Marks the given entity as Deleted.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to remove</param>\n        ///     <example>\n        ///\n        ///         Persons.remove(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Person will be marked as Deleted where an Id is 5. Id is a key of entity.\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n        data.entityState = _index2.default.EntityState.Deleted;\n        data.changedProperties = undefined;\n        this._trackEntity(data);\n    },\n    attach: function attach(entity, mode) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///\n        ///         Persons.attach({ Id: 5, Email: 'newEmail@example.com' });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Adds to the context and sets state Unchanged.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to attach</param>\n        ///     <example>\n        ///\n        ///         Persons.attach(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Set an entity's related entities without loading\n        ///\n        ///         var categoryPromo = new $news.Types.Category({ Id: 5 });\n        ///         Category.attach(categoryPromo);\n        ///         var article = new $news.Types.Article({ Title: 'New Article title', Body: 'Article body', Category: [ categoryPromo ] });\n        ///         Article.attach(article);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        for (var i = 0; i < this.entityContext.stateManager.trackedEntities.length; i++) {\n            var current = this.entityContext.stateManager.trackedEntities[i];\n            if (current.data === data) break;\n            if (current.data.equals(data)) {\n                _index.Guard.raise(new _index.Exception(\"Context already contains this entity!!!\"));\n            }\n        }\n\n        if (mode === true) {\n            if (data.changedProperties && data.changedProperties.length > 0) {\n                data.entityState = _index2.default.EntityState.Modified;\n            } else {\n                data.entityState = _index2.default.EntityState.Unchanged;\n            }\n        } else {\n            if (typeof mode === \"string\") mode = _index2.default.EntityAttachMode[mode];\n            var attachMode = mode || _index2.default.EntityAttachMode[_index2.default.EntityAttachMode.defaultMode];\n            if (typeof attachMode === \"function\") {\n                attachMode.call(_index2.default.EntityAttachMode, data);\n            } else {\n                data.entityState = _index2.default.EntityState.Unchanged;\n                data.changedProperties = undefined;\n            }\n        }\n        /*if (!keepChanges) {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }*/\n        data.context = this.entityContext;\n        this._trackEntity(data);\n    },\n    detach: function detach(entity) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and detach from the Context with Detached state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <example>\n        ///         Person will be Detached where an id is 5. Id is a key of entity.\n        ///         Persons.detach({ Id: 5 });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>Detach from the context and sets state Detached.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\n        ///     <example>\n        ///\n        ///         Persons.detach(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Person will be Detached where an Id is 5. Id is a key of entity.\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        var existsItem;\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEnt.length; i++) {\n            if (trackedEnt[i].data.equals(data)) existsItem = trackedEnt[i];\n        }\n\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\n        if (existsItem) {\n            var idx = this.entityContext.stateManager.trackedEntities.indexOf(existsItem);\n            entity.entityState = _index2.default.EntityState.Detached;\n            this.entityContext.stateManager.trackedEntities.splice(idx, 1);\n            return;\n        }\n    },\n    attachOrGet: function attachOrGet(entity, mode) {\n        /// <signature>\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\n        ///     <returns type=\"$data.Entity\" />\n        ///     <example>\n        ///         Id is a key of entity.\n        ///         var person = Persons.attachOrGet({ Id: 5  });\n        ///\n        ///     </example>\n        /// </signature>\n        /// <signature>\n        ///     <summary>If not in context then adds to it and sets state Unchanged.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\n        ///     <returns type=\"$data.Entity\" />\n        ///     <example>\n        ///\n        ///         var attachedPerson = Persons.attachOrGet(person);\n        ///\n        ///     </example>\n        ///     <example>\n        ///         Id is a key of entity.\n        ///         var p = new $news.Types.Person({ Id: 5 });\n        ///         var attachedPerson = Persons.attachOrGet(p);\n        ///\n        ///     </example>\n        /// </signature>\n\n        var data = entity;\n        if (entity instanceof _index2.default.EntityWrapper) {\n            data = entity.getEntity();\n        } else if (!(entity instanceof this.createNew)) {\n            data = new this.createNew(entity);\n        }\n\n        var existsItem;\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\n        for (var i = 0; i < trackedEnt.length; i++) {\n            if (trackedEnt[i].data.equals(data)) existsItem = trackedEnt[i];\n        }\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\n        if (existsItem) {\n            return existsItem.data;\n        }\n\n        if (typeof mode === \"string\") mode = _index2.default.EntityAttachMode[mode];\n        var attachMode = mode || _index2.default.EntityAttachMode[_index2.default.EntityAttachMode.defaultMode];\n        if (typeof attachMode === \"function\") {\n            attachMode.call(_index2.default.EntityAttachMode, data);\n        } else {\n            data.entityState = _index2.default.EntityState.Unchanged;\n            data.changedProperties = undefined;\n        }\n        //data.entityState = $data.EntityState.Unchanged;\n        //data.changedProperties = undefined;\n        data.context = this.entityContext;\n        this._trackEntity(data);\n        return data;\n    },\n    //find: function (keys) {\n    //    //todo global scope\n    //    if (!this.entityKeys) {\n    //        this.entityKeys = this.createNew.memberDefinition.filter(function (prop) { return prop.key; }, this);\n    //    }\n    //    this.entityContext.stateManager.trackedEntities.forEach(function (item) {\n    //        if (item.entitySet == this) {\n    //            var isOk = true;\n    //            this.entityKeys.forEach(function (item, index) { isOK = isOk && (item.data[item.name] == keys[index]); }, this);\n    //            if (isOk) {\n    //                return item.data;\n    //            }\n    //        }\n    //    }, this);\n    //    //TODO: db call\n    //    return null;\n    //},\n    loadItemProperty: function loadItemProperty(entity, memberDefinition, callback) {\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"String\">Property name</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\n        ///     <param name=\"callback\" type=\"Function\">\n        ///         <summary>Callback function</summary>\n        ///         <param name=\"propertyValue\" />\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n        /// <signature>\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\n        ///     <param name=\"callbacks\" type=\"Object\">\n        ///         Success and error callbacks definition.\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\n        ///     </param>\n        ///     <returns type=\"$.Deferred\" />\n        /// </signature>\n\n        return this.entityContext.loadItemProperty(entity, memberDefinition, callback);\n    },\n    saveChanges: function saveChanges() {\n        return this.entityContext.saveChanges.apply(this.entityContext, arguments);\n    },\n    addProperty: function addProperty(name, getter, setter) {\n        return this.elementType.addProperty.apply(this.elementType, arguments);\n    },\n    expression: {\n        get: function get() {\n            if (!this._expression) {\n                var ec = _index.Container.createEntityContextExpression(this.entityContext);\n                //var name = entitySet.collectionName;\n                //var entitySet = this.entityContext[entitySetName];\n                var memberdef = this.entityContext.getType().getMemberDefinition(this.collectionName);\n                var es = _index.Container.createEntitySetExpression(ec, _index.Container.createMemberInfoExpression(memberdef), null, this);\n                this._expression = es;\n            }\n\n            return this._expression;\n        },\n        set: function set(value) {\n            this._expression = value;\n        }\n    },\n    getFieldUrl: function getFieldUrl(keys, field) {\n        return this.entityContext.getFieldUrl(keys, field, this);\n    },\n    bulkInsert: function bulkInsert(fields, datas, callback) {\n        return this.entityContext.bulkInsert(this, fields, datas, callback);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],48:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.EntityState = {\n    Detached: 0,\n    Unchanged: 10,\n    Added: 20,\n    Modified: 30,\n    Deleted: 40\n};\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],49:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.EntityStateManager', null, null, {\n    constructor: function constructor(entityContext) {\n        this.entityContext = null;\n        this.trackedEntities = [];\n        this.init(entityContext);\n    },\n    init: function init(entityContext) {\n        this.entityContext = entityContext;\n    },\n    reset: function reset() {\n        this.trackedEntities = [];\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],50:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Base.extend('$data.EntityWrapper', {\n    getEntity: function getEntity() {\n        _index.Guard.raise(\"pure object\");\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],51:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Enum = undefined;\n\nvar _index = _dereq_(\"../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.createEnum = function (name, container, enumType, enumDefinition) {\n    return _index2.default.Enum.extend(name, container, enumType, enumDefinition);\n};\n\n_index2.default.Enum = _index2.default.Class.define(\"$data.Enum\", null, null, {\n    constructor: function constructor() {\n        return _index.Guard.raise(new _index.Exception(\"Type Error\", \"Cannot create instance from enum type!\"));\n    }\n}, {\n    extend: function extend(name, container, enumType, enumDefinition) {\n        if (!enumDefinition) {\n            if (!enumType) {\n                enumDefinition = container;\n                container = undefined;\n            } else {\n                enumDefinition = enumType;\n                enumType = container;\n                container = undefined;\n            }\n        }\n\n        enumType = enumType || _index2.default.Integer;\n        enumType = _index.Container.resolveType(enumType);\n        var classDefinition = {\n            __enumType: { get: function get() {\n                    return enumType;\n                }, set: function set() {}, enumerable: false, writable: false }\n        };\n\n        var getEnumDef = function getEnumDef(value, index) {\n            return { get: function get() {\n                    return value;\n                }, set: function set() {}, enumMember: true, index: index };\n        };\n\n        var defaultValue = 0;\n        var isValueCalculation = [_index2.default.Byte, _index2.default.SByte, _index2.default.Int16, _index2.default.Integer, _index2.default.Int64].indexOf(enumType) >= 0;\n        var hasIndex = false;\n\n        var enumDef = [];\n        if (Array.isArray(enumDefinition)) {\n            for (var i = 0; i < enumDefinition.length; i++) {\n                var enumValA = enumDefinition[i];\n                if ((typeof enumValA === \"undefined\" ? \"undefined\" : _typeof(enumValA)) === \"object\" && typeof enumValA.name === \"string\") {\n                    enumDef.push({ name: enumValA.name, value: enumValA.value, index: enumValA.index });\n                    if (typeof enumValA.index !== \"undefined\") {\n                        hasIndex = true;\n                    }\n                } else if (typeof enumValA === \"string\") {\n                    enumDef.push({ name: enumValA, value: undefined, index: undefined });\n                } else {\n                    return _index.Guard.raise(new _index.Exception(\"Type Error\", \"Invalid enum member\"));\n                }\n            }\n        } else if ((typeof enumDefinition === \"undefined\" ? \"undefined\" : _typeof(enumDefinition)) === \"object\") {\n            for (var enumName in enumDefinition) {\n                var enumValO = enumDefinition[enumName];\n                if ((typeof enumValO === \"undefined\" ? \"undefined\" : _typeof(enumValO)) === \"object\") {\n                    enumDef.push({ name: enumName, value: enumValO.value, index: enumValO.index });\n                    if (typeof enumValO.index !== \"undefined\") {\n                        hasIndex = true;\n                    }\n                } else {\n                    enumDef.push({ name: enumName, value: enumValO, index: undefined });\n                }\n            }\n        }\n\n        if (hasIndex) {\n            enumDef.sort(function (a, b) {\n                if (a.index < b.index) return -1;\n                if (a.index > b.index) return 1;\n                return 0;\n            });\n        }\n\n        var enumOptions = [];\n        for (var i = 0; i < enumDef.length; i++) {\n            var enumVal = enumDef[i];\n            if (isValueCalculation && typeof enumVal.value !== \"number\" && !enumVal.value) {\n                enumVal.value = defaultValue;\n            }\n            if (typeof enumVal.value === \"number\") {\n                defaultValue = enumVal.value;\n            }\n            defaultValue++;\n            enumOptions.push(enumVal.name);\n            classDefinition[enumVal.name] = getEnumDef(enumVal.value, enumVal.index);\n        }\n\n        var enumClass = _index2.default.Base.extend.call(this, name, container, {}, classDefinition);\n\n        _index2.default.Container.registerConverter(name, {\n            'default': function _default(value) {\n                if (typeof value == \"string\" && enumOptions.indexOf(value) >= 0) {\n                    var enumMember = enumClass.staticDefinitions.getMember(value);\n                    if (enumMember) {\n                        return enumMember.get();\n                    }\n                }\n\n                for (var i = 0; i < enumDef.length; i++) {\n                    var enumVal = enumDef[i];\n                    if (enumVal.value === value) return value;\n                }\n\n                throw 0;\n            }\n        });\n\n        return enumClass;\n    }\n});\n\nvar Enum = exports.Enum = _index2.default.Enum;\nexports.default = _index2.default;\n\n},{\"../TypeSystem/index.js\":32}],52:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ArrayLiteralExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(items) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        ///<field name=\"items\" type=\"Array\" elementType=\"$data.Expression.ExpressionNode\" />\n        this.items = items || [];\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ArrayLiteral, writable: true },\n\n    items: { value: undefined, dataType: Array, elementType: _index2.default.Expressions.ExpressionNode },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        ///<var nam\n        var result = \"[\" + this.items.map(function (item) {\n            return item.toString();\n        }).join(\",\") + \"]\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],53:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CallExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, member, args) {\n        ///<summary>Represents a call to an object or global method</summary>\n        ///<field name=\"object\" type=\"$data.Expressions.ExpressionNode\">The expression for object that has the method</field>\n        ///<field name=\"member\" type=\"$data.MemberDefinition\">The member descriptor</field>\n        this.expression = expression;\n        this.member = member;\n        this.args = args;\n    },\n\n    nodeType: {\n        value: _index2.default.Expressions.ExpressionType.Call\n    },\n\n    expression: {\n        value: undefined,\n        dataType: _index2.default.Expressions.ExpressionNode,\n        writable: true\n    },\n\n    member: {\n        value: undefined,\n        dataType: _index2.default.MemberDefinition,\n        writable: true\n    },\n\n    type: {\n        value: undefined,\n        writable: true\n    },\n\n    implementation: {\n        get: function get() {\n            return function (thisObj, method, args) {\n                if (typeof method !== 'function') {\n                    method = thisObj[method];\n                }\n                _index.Guard.requireType(\"method\", method, Function);\n                return method.apply(thisObj, args);\n            };\n        },\n        set: function set(value) {\n            _index.Guard.raise(\"Property can not be set\");\n        }\n    },\n\n    toString: function toString(debug) {\n        return this.object.toString() + \".\" + this.member.toString() + \"(\" + \")\";\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],54:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeParser', null, null, {\n\n    constructor: function constructor(scopeContext) {\n        ///<signature>\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\n        ///</signature>\n        ///<signature>\n        ///</signature>\n        this.scopeContext = scopeContext;\n        this.lambdaParams = [];\n    },\n\n    log: function log(logInfo) {\n        if (this.scopeContext) this.scopeContext.log(logInfo);\n    },\n\n    parseExpression: function parseExpression(code, resolver) {\n        ///<signature>\n        ///<summary>Parses the provided code and returns a parser result with parser information</summary>\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n        if ((typeof code === 'undefined' ? 'undefined' : _typeof(code)) === 'object') {\n            code = '';\n        }\n        var result = {\n            success: true,\n            errorMessage: '',\n            errorDetails: ''\n        };\n        ///<var name=\"AST\" type=\"Date\" />\n\n        //console.log(code.toString());\n        if (_index2.default.Acorn) {\n            //console.log('using acorn.js');\n            return { success: true, expression: this.ParserBuild(_index2.default.Acorn.parse('(' + code.toString() + ')').body[0]), errors: [] };\n        } else if (_index2.default.Esprima) {\n            //console.log('using esprima.js');\n            return { success: true, expression: this.ParserBuild(_index2.default.Esprima.parse('(' + code.toString() + ')').body[0]), errors: [] };\n        } else {\n            //console.log('using JayLint');\n            var AST = _index2.default.ASTParser.parseCode(code);\n            this.log({ event: \"AST\", data: AST });\n            if (!AST.success) {\n                return {\n                    success: false,\n                    error: \"ASTParser error\",\n                    errorMessage: AST.errors ? JSON.stringify(AST.errors) : \"could not get code\"\n                };\n            }\n            var b = this.Build2(AST.tree.first[0]);\n            result = { success: true, expression: b, errors: AST.errors };\n            return result;\n        }\n    },\n\n    createExpression: function createExpression(code, resolver) {\n        ///<signature>\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"a + b /c\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\n        ///<param name=\"code\" type=\"Function\">The JavaScript function to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\n        ///</signature>\n\n        var result = this.parseExpression(code, resolver);\n        if (!result.success) {\n            _index.Guard.raise(\"ExpressionParserError: \" + result.errorMessage);\n        }\n        return result.expression;\n    },\n\n    ParserBuild: function ParserBuild(node) {\n        //console.log(node);\n        return this['Parser' + node.type](node);\n    },\n\n    ParserExpressionStatement: function ParserExpressionStatement(node) {\n        return this.ParserBuild(node.expression);\n    },\n\n    ParserBlockStatement: function ParserBlockStatement(node) {\n        return this.ParserBuild(node.body[0]);\n    },\n\n    ParserReturnStatement: function ParserReturnStatement(node) {\n        return this.ParserBuild(node.argument);\n    },\n\n    ParserMemberExpression: function ParserMemberExpression(node) {\n        return new _index2.default.Expressions.PropertyExpression(this.ParserBuild(node.object), new _index2.default.Expressions.ConstantExpression(node.property.name || node.property.value, _typeof(node.property.name || node.property.value)));\n    },\n\n    ParserIdentifier: function ParserIdentifier(node) {\n        return this.ParserParameter(node, this.lambdaParams.indexOf(node.name) > -1 ? _index2.default.Expressions.ExpressionType.LambdaParameterReference : _index2.default.Expressions.ExpressionType.ParameterReference);\n    },\n\n    ParserObjectExpression: function ParserObjectExpression(node) {\n        var props = new Array(node.properties.length);\n        for (var i = 0; i < node.properties.length; i++) {\n            props[i] = this.ParserProperty(node.properties[i]);\n        }\n\n        return new _index2.default.Expressions.ObjectLiteralExpression(props);\n    },\n\n    ParserArrayExpression: function ParserArrayExpression(node) {\n        var items = new Array(node.elements.length);\n        for (var i = 0; i < node.elements.length; i++) {\n            items[i] = this.ParserBuild(node.elements[i]);\n        }\n\n        return new _index2.default.Expressions.ArrayLiteralExpression(items);\n    },\n\n    ParserProperty: function ParserProperty(node) {\n        return new _index2.default.Expressions.ObjectFieldExpression(node.key.name, this.ParserBuild(node.value));\n    },\n\n    ParserArrowFunctionExpression: function ParserArrowFunctionExpression(node) {\n        return this.ParserFunctionExpression(node);\n    },\n\n    ParserFunctionExpression: function ParserFunctionExpression(node) {\n        var params = new Array(node.params.length);\n        for (var i = 0; i < node.params.length; i++) {\n            if (i === 0 || _index2.default.defaults.parameterResolutionCompatibility) {\n                this.lambdaParams.push(node.params[i].name);\n                params[i] = this.ParserParameter(node.params[i], _index2.default.Expressions.ExpressionType.LambdaParameter);\n            } else {\n                params[i] = this.ParserParameter(node.params[i], _index2.default.Expressions.ExpressionType.Parameter);\n            }\n            params[i].owningFunction = result;\n        }\n        var result = new _index2.default.Expressions.FunctionExpression(node.id ? node.id.name : node.id, params, this.ParserBuild(node.body));\n\n        return result;\n    },\n\n    ParserParameter: function ParserParameter(node, nodeType) {\n        var result = new _index2.default.Expressions.ParameterExpression(node.name, null, nodeType);\n        if (nodeType == _index2.default.Expressions.ExpressionType.LambdaParameterReference) {\n            result.paramIndex = this.lambdaParams.indexOf(node.name);\n        }\n\n        return result;\n    },\n\n    ParserLogicalExpression: function ParserLogicalExpression(node) {\n        return this.ParserBinaryExpression(node);\n    },\n\n    ParserOperators: {\n        value: {\n            \"==\": { expressionType: _index2.default.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a == b;\n                } },\n            \"===\": { expressionType: _index2.default.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a === b;\n                } },\n            \"!=\": { expressionType: _index2.default.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a != b;\n                } },\n            \"!==\": { expressionType: _index2.default.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a !== b;\n                } },\n            \">\": { expressionType: _index2.default.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a > b;\n                } },\n            \">=\": { expressionType: _index2.default.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a >= b;\n                } },\n            \"<=\": { expressionType: _index2.default.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a <= b;\n                } },\n            \"<\": { expressionType: _index2.default.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a < b;\n                } },\n            \"&&\": { expressionType: _index2.default.Expressions.ExpressionType.And, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a && b;\n                } },\n            \"||\": { expressionType: _index2.default.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function implementation(a, b) {\n                    return a || b;\n                } },\n            \"&\": { expressionType: _index2.default.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function implementation(a, b) {\n                    return a & b;\n                } },\n            \"|\": { expressionType: _index2.default.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function implementation(a, b) {\n                    return a | b;\n                } },\n            \"+\": { expressionType: _index2.default.Expressions.ExpressionType.Add, type: \"number\", implementation: function implementation(a, b) {\n                    return a + b;\n                } },\n            \"-\": { expressionType: _index2.default.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function implementation(a, b) {\n                    return a - b;\n                } },\n            \"/\": { expressionType: _index2.default.Expressions.ExpressionType.Divide, type: \"number\", implementation: function implementation(a, b) {\n                    return a / b;\n                } },\n            \"%\": { expressionType: _index2.default.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function implementation(a, b) {\n                    return a % b;\n                } },\n            \"*\": { expressionType: _index2.default.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function implementation(a, b) {\n                    return a * b;\n                } },\n            \"[\": { expressionType: _index2.default.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function implementation(a, b) {\n                    return a[b];\n                } },\n            \"in\": { expressionType: _index2.default.Expressions.ExpressionType.In, type: 'boolean', implementation: function implementation(a, b) {\n                    return a in b;\n                } }\n        }\n    },\n\n    ParserUnaryOperators: {\n        value: {\n            \"+\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Positive, type: \"number\", implementation: function implementation(operand) {\n                    return +operand;\n                } },\n            \"-\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Negative, type: \"number\", implementation: function implementation(operand) {\n                    return -operand;\n                } },\n            \"++true\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n                    return ++operand;\n                } },\n            \"--true\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n                    return --operand;\n                } },\n            \"++false\": { arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n                    return operand++;\n                } },\n            \"!\": { arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function implementation(operand) {\n                    return !operand;\n                } },\n            \"--false\": { arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n                    return operand--;\n                } }\n        }\n    },\n\n    ParserUnaryExpression: function ParserUnaryExpression(node) {\n        return new _index2.default.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator], this.ParserUnaryOperators[node.operator].expressionType);\n    },\n\n    ParserUpdateExpression: function ParserUpdateExpression(node) {\n        return new _index2.default.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator + node.prefix], this.ParserUnaryOperators[node.operator + node.prefix].nodeType);\n    },\n\n    ParserBinaryExpression: function ParserBinaryExpression(node) {\n        return new _index2.default.Expressions.SimpleBinaryExpression(this.ParserBuild(node.left), this.ParserBuild(node.right), this.ParserOperators[node.operator].expressionType, node.operator, this.ParserOperators[node.operator].type);\n    },\n\n    ParserThisExpression: function ParserThisExpression(node) {\n        return new _index2.default.Expressions.ThisExpression();\n    },\n\n    ParserLiteral: function ParserLiteral(node) {\n        return new _index2.default.Expressions.ConstantExpression(node.value, _typeof(node.value));\n    },\n\n    ParserCallExpression: function ParserCallExpression(node) {\n        var method = this.ParserBuild(node.callee);\n        var args = new Array(node.arguments.length);\n        for (var i = 0; i < node.arguments.length; i++) {\n            args[i] = this.ParserBuild(node.arguments[i]);\n        }\n\n        var member;\n        var expression;\n        switch (true) {\n            case method instanceof _index2.default.Expressions.PropertyExpression:\n                expression = method.expression;\n                member = method.member;\n                break;\n            case method instanceof _index2.default.Expressions.ParameterExpression:\n                expression = new _index2.default.Expressions.ConstantExpression(null, _typeof(null));\n                member = method;\n                break;\n        }\n\n        return new _index2.default.Expressions.CallExpression(expression, member, args);\n    } /*,\r\n       Build2: function (node) {\r\n         ///<param name=\"node\" type=\"Lint\" />\r\n         ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n         var n;\r\n         switch (node.arity) {\r\n             case \"number\":\r\n             case \"string\":\r\n                 n = this.BuildConstant(node);\r\n                 break;\r\n             case \"prefix\":\r\n                 switch (node.value) {\r\n                     case \"{\":\r\n                         n = this.BuildObjectLiteral(node);\r\n                         break;\r\n                     case \"[\":\r\n                         n = this.BuildArrayLiteral(node);\r\n                         break;\r\n                     case $data.unaryOperators.resolve(node.value):\r\n                         n = this.BuildUnary(node);\r\n                         break;\r\n                     //TODO: default case\r\n                 }\r\n                 break;\r\n             case \"suffix\":\r\n                 switch (node.value) {\r\n                     case $data.unaryOperators.resolve(node.value):\r\n                         n = this.BuildUnary(node);\r\n                         break;\r\n                     default:\r\n                         Guard.raise(\"Unknown suffix: \" + node.value);\r\n                 }\r\n                 break;\r\n             case \"infix\":\r\n                 switch (node.value) {\r\n                     case \"[\":\r\n                         n = this.BuildArray(node);\r\n                         break;\r\n                     case $data.binaryOperators.resolve(node.value):\r\n                         n = this.BuildSimpleBinary(node);\r\n                         break;\r\n                     case \"function\":\r\n                         Guard.raise(\"Unexpected function arity\");\r\n                     case \"(\":\r\n                         n = this.BuildCall(node);\r\n                         break;\r\n                     case \".\":\r\n                         n = this.BuildProperty(node);\r\n                         break;\r\n                     default:\r\n                         debugger;\r\n                         //TODO: remove debugger, throw exception or break\r\n                 }\r\n                 break;\r\n             case \"statement\":\r\n                 switch (node.value) {\r\n                     case \"function\":\r\n                         n = this.BuildFunction(node);\r\n                         //TODO: consider adding break\r\n                 }\r\n                 break;\r\n             default:\r\n                 switch (node.value) {\r\n                     case \"function\":\r\n                         n = this.BuildFunction(node);\r\n                         break;\r\n                     case \"true\":\r\n                     case \"false\":\r\n                     case \"null\":\r\n                         n = this.BuildConstant(node);\r\n                         break;\r\n                     case \"this\":\r\n                         n = this.BuildThis(node);\r\n                         break;\r\n                     default:\r\n                         n = this.BuildParameter(node);\r\n                         break;\r\n                 }\r\n         }\r\n         return n;\r\n      },\r\n       BuildThis: function (node) {\r\n         var result = Container.createThisExpression();\r\n         return result;\r\n      },\r\n       BuildConstant: function (node) {\r\n         ///<param name=\"node\" type=\"ConstantASTNode\" />\r\n         var value = node.value;\r\n         var type = node.type;\r\n         if (node.reserved === true) {\r\n             switch (node.value) {\r\n                 case \"true\": value = true; type = typeof true; break;\r\n                 case \"false\": value = false; type = typeof false; break;\r\n                 case \"null\": value = null; type = typeof null; break;\r\n                 //TODO: missing default case\r\n             }\r\n         }\r\n         var result = new $data.Expressions.ConstantExpression(value, type);\r\n         return result;\r\n      },\r\n       BuildFunctionParameter: function (node) {\r\n       },\r\n       BuildArray: function (node) {\r\n         switch (node.second.type) {\r\n             case \"string\":\r\n                 return this.BuildProperty(node);\r\n             case \"number\":\r\n             default:\r\n                 return this.BuildSimpleBinary(node);\r\n         }\r\n      },\r\n       BuildParameter: function (node) {\r\n         ///<param name=\"node\" type=\"ParameterASTNode\" />\r\n         ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n         var paramName = node.value;\r\n         //TODO\r\n         //var paramType = this.resolver.resolveParameterType(node);\r\n         var nodeType = node.funct ? $data.Expressions.ExpressionType.LambdaParameter :\r\n                                     this.lambdaParams.indexOf(node.value) > -1 ?\r\n                                                 $data.Expressions.ExpressionType.LambdaParameterReference : $data.Expressions.ExpressionType.Parameter;\r\n         var result = new $data.Expressions.ParameterExpression(node.value, null, nodeType);\r\n           if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference) {\r\n             result.paramIndex = this.lambdaParams.indexOf(node.value);\r\n         }\r\n           return result;\r\n      },\r\n       BuildArrayLiteral: function(node) {\r\n         var self = this;\r\n         var items = node.first.map(function (item) { return self.Build2(item); });\r\n         var result = new $data.Expressions.ArrayLiteralExpression(items);\r\n         return result;\r\n      },\r\n       BuildObjectLiteral: function (node) {\r\n         var self = this;\r\n         var fields = node.first.map(function (item) {\r\n             var eItem = self.Build2(item.first);\r\n             var result = new $data.Expressions.ObjectFieldExpression(item.value, eItem);\r\n             return result;\r\n         });\r\n         var result = new $data.Expressions.ObjectLiteralExpression(fields);\r\n         return result;\r\n      },\r\n       BuildFunction: function (node) {\r\n         ///<param name=\"node\" type=\"FunctionASTNode\"/>\r\n         ///<returns type=\"$data.Expressions.FunctionExpression\" />\r\n         var self = this;\r\n         var paramStack = [];\r\n         var params = node.first && node.first.map(function (paramNode) {\r\n             //paramStack.push(paramNode.value);\r\n             this.lambdaParams.push(paramNode.value);\r\n             return self.BuildParameter(paramNode);\r\n         }, this);\r\n         params = params || [];\r\n           //skipping return for convenience\r\n         //Possible we should raise an error as predicates and selectors can\r\n         //not be code blocks just expressions\r\n           var hasReturn = node.block.length == 0 ? false :\r\n             node.block[0].value === \"return\" ? true : false;\r\n         var body = (node.block.length > 0) ? this.Build2(hasReturn ? node.block[0].first : node.block[0]) : null;\r\n           paramStack.forEach(function () { this.lambdaParams.pop(); }, this);\r\n           var result = new $data.Expressions.FunctionExpression(node.value, params, body);\r\n         params.forEach(function (param) {\r\n             param.owningFunction = result;\r\n         });\r\n           //TODO place on prototyope\r\n         result.name = node.name;\r\n         return result;\r\n      },\r\n       BuildCall: function (node) {\r\n         var self = this;\r\n         var method = self.Build2(node.first);\r\n         var args = node.second.map(function (exp) { return self.Build2(exp); });\r\n         var member;\r\n         var expression;\r\n         switch(true){\r\n             case method instanceof $data.Expressions.PropertyExpression:\r\n                 expression = method.expression;\r\n                 member = method.member;\r\n                 break;\r\n             case method instanceof $data.Expressions.ParameterExpression:\r\n                 expression = Container.createConstantExpression(null, typeof null);\r\n                 member = method;\r\n                 break;\r\n             //TODO: missing default case\r\n         }\r\n           var result = Container.createCallExpression(expression, member, args);\r\n         return result;\r\n      },\r\n       BuildProperty: function (node) {\r\n         ///<summary>Builds a PropertyExpression from the AST node</summary>\r\n         ///<param name=\"node\" type=\"MemberAccessASTNode\" />\r\n         ///<returns type=\"$data.Expressions.PropertyExpression\" />\r\n         var expression = this.Build2(node.first);\r\n         //TODO\r\n         //var type = expression.type;\r\n         //var member = type.getMemberDefinition()\r\n         //TODO how to not if?????\r\n         var member;\r\n         if (node.second.identifier) {\r\n             member = new $data.Expressions.ConstantExpression(node.second.value, \"string\");\r\n         } else {\r\n             member = this.Build2(node.second);\r\n         }\r\n         var result = new $data.Expressions.PropertyExpression(expression, member);\r\n         return result;\r\n      },\r\n         BuildUnary: function(node) {\r\n         var operator = $data.unaryOperators.getOperator(node.value, node.arity);\r\n         var nodeType = operator.expressionType;\r\n         var operand = this.Build2(node.first);\r\n         var result = new $data.Expressions.UnaryExpression(operand, operator, nodeType);\r\n         return result;\r\n      },\r\n       BuildSimpleBinary: function (node) {\r\n         ///<param name=\"node\" type=\"LintInflixNode\" />\r\n           var operator = $data.binaryOperators.getOperator(node.value);\r\n         var nodeType = operator.expressionType;\r\n           var left = this.Build2(node.first || node.left);\r\n         var right = this.Build2(node.second || node.right);\r\n         var result = new $data.Expressions.SimpleBinaryExpression(left, right, nodeType, node.value, operator.type);\r\n         return result;\r\n      }\r\n       //Build: function (node, expNode) {\r\n      //    var n;\r\n      //    switch (node.arity) {\r\n      //        case \"ternary\":\r\n      //            if (node.value == \"?\")\r\n      //                n = this.BuildDecision(node, expNode);\r\n      //            else\r\n      //                Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n      //            break;\r\n      //        case null:\r\n      //        default:\r\n      //            Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n      //    }\r\n      //    return n;\r\n      //},*/\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],55:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ConstantExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(value, type, name, elementType) {\n        this.value = value;\n        //TODO\n        //this.type = Container.getTypeName(value);\n\n        this.type = type;\n        this.name = name;\n        this.elementType = elementType;\n        if (!_index.Guard.isNullOrUndefined(this.value)) {\n            this.type = _index.Container.resolveType(this.type);\n            if (this.type === _index2.default.Array && this.elementType || _index.Container.resolveType(_index.Container.getTypeName(this.value)) !== this.type) this.value = _index.Container.convertTo(value, this.type, this.elementType);\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Constant, enumerable: true },\n    type: { value: Object, writable: true },\n    elementType: { value: Object, writable: true },\n    value: { value: undefined, writable: true },\n    toString: function toString(debug) {\n        //return \"[constant: \" + this.value.toString() + \"]\";\n        return this.value.toString();\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],56:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ContinuationExpressionBuilder', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(mode) {\n        this.mode = mode;\n    },\n    compile: function compile(query) {\n\n        var findContext = { mode: \"find\", skipExists: false };\n        this.Visit(query.expression, findContext);\n\n        var result = {\n            skip: findContext.skipSize,\n            take: findContext.pageSize,\n            message: ''\n        };\n\n        if ('pageSize' in findContext) {\n            var expression;\n            var context = { mode: this.mode, pageSize: findContext.pageSize };\n\n            if (!findContext.skipExists && findContext.pageSize) {\n                context.append = true;\n                expression = this.Visit(query.expression, context);\n            } else if (findContext.skipExists) {\n                expression = this.Visit(query.expression, context);\n            }\n\n            if (!context.abort) {\n                result.expression = expression;\n            } else {\n                result.skip = (result.skip || 0) - result.take;\n                result.message = 'Invalid skip value!';\n            }\n        } else {\n            result.message = 'take expression not defined in the chain!';\n        }\n\n        return result;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n\n        switch (context.mode) {\n            case 'find':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Take) {\n                    context.pageSize = expression.amount.value;\n                } else {\n                    context.skipSize = expression.amount.value;\n                    context.skipExists = true;\n                }\n                break;\n            case 'prev':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Skip) {\n                    var amount = expression.amount.value - context.pageSize;\n                    context.abort = amount < 0 && expression.amount.value >= context.pageSize;\n\n                    var constExp = _index.Container.createConstantExpression(Math.max(amount, 0), \"number\");\n                    return _index.Container.createPagingExpression(expression.source, constExp, expression.nodeType);\n                } else if (context.append) {\n                    //no skip expression, skip: 0, no prev\n                    context.abort = true;\n                }\n                break;\n            case 'next':\n                if (expression.nodeType === _index2.default.Expressions.ExpressionType.Skip) {\n                    var amount = context.pageSize + expression.amount.value;\n                    var constExp = _index.Container.createConstantExpression(amount, \"number\");\n                    return _index.Container.createPagingExpression(expression.source, constExp, expression.nodeType);\n                } else if (context.append) {\n                    //no skip expression, skip: 0\n                    var constExp = _index.Container.createConstantExpression(context.pageSize, \"number\");\n                    return _index.Container.createPagingExpression(expression, constExp, _index2.default.Expressions.ExpressionType.Skip);\n                }\n                break;\n            default:\n        }\n\n        this.Visit(expression.source, context);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],57:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.AssociationInfoExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(associationInfo) {\n        this.associationInfo = associationInfo;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.AssociationInfo, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],58:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, parameters) {\n        if (_index.Container.resolveType(_index.Container.getTypeName(source)) == _index2.default.String && source.replace(/^[\\s\\xA0]+/, \"\").match(\"^function\") != \"function\" && !/^[^\\.]*(=>)/.test(source.replace(/^[\\s\\xA0]+/, \"\"))) {\n            source = \"function (it) { return \" + source + \"; }\";\n        }\n\n        this.source = source;\n        this.parameters = parameters;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Code, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],59:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.CodeToEntityConverter', _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(scopeContext) {\n        ///<summary>This visitor converts a JS language tree into a semantical Entity Expression Tree &#10;This visitor should be invoked on a CodeExpression</summary>\n        ///<param name=\"context\">context.thisArg contains parameters, context.lambdaParams should have an array value</param>\n        this.scopeContext = scopeContext;\n        this.parameters = [];\n    },\n\n    VisitBinary: function VisitBinary(expression, context) {\n        var left = this.Visit(expression.left, context);\n        var right = this.Visit(expression.right, context);\n\n        if (!(left instanceof _index2.default.Expressions.ConstantExpression) && right instanceof _index2.default.Expressions.ConstantExpression || !(right instanceof _index2.default.Expressions.ConstantExpression) && left instanceof _index2.default.Expressions.ConstantExpression) {\n\n            var refExpression, constExpr;\n            if (right instanceof _index2.default.Expressions.ConstantExpression) {\n                refExpression = left;\n                constExpr = right;\n            } else {\n                refExpression = right;\n                constExpr = left;\n            }\n\n            var memInfo;\n            if ((memInfo = refExpression.selector) instanceof _index2.default.Expressions.MemberInfoExpression || (memInfo = refExpression.operation) instanceof _index2.default.Expressions.MemberInfoExpression) {\n\n                if (memInfo.memberDefinition && (memInfo.memberDefinition.type || memInfo.memberDefinition.dataType)) {\n                    var fieldType = _index.Container.resolveType(memInfo.memberDefinition.type || memInfo.memberDefinition.dataType);\n                    var constExprType = _index.Container.resolveType(constExpr.type);\n\n                    if (fieldType !== constExprType) {\n\n                        var value = constExpr.value;\n                        if (expression.operator === _index2.default.Expressions.ExpressionType.In) {\n                            if (Array.isArray(value)) {\n                                var resultExp = [];\n                                for (var i = 0; i < value.length; i++) {\n                                    resultExp.push(new _index2.default.Expressions.ConstantExpression(value[i], fieldType));\n                                }\n                                value = resultExp;\n                                fieldType = _index2.default.Array;\n                            } else {\n                                fieldType = constExprType;\n                            }\n                        }\n\n                        if (right === constExpr) {\n                            right = new _index2.default.Expressions.ConstantExpression(value, fieldType, right.name);\n                        } else {\n                            left = new _index2.default.Expressions.ConstantExpression(value, fieldType, left.name);\n                        }\n                    }\n                }\n            }\n        }\n\n        var operatorResolution = this.scopeContext.resolveBinaryOperator(expression.nodeType, expression, context.frameType);\n        var result = _index.Container.createSimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, operatorResolution);\n        return result;\n    },\n\n    VisitUnary: function VisitUnary(expression, context) {\n        var operand = this.Visit(expression.operand, context);\n        var operatorResolution = this.scopeContext.resolveUnaryOperator(expression.nodeType, expression, context.frameType);\n        var result = _index.Container.createUnaryExpression(operand, expression.operator, expression.nodeType, operatorResolution);\n        return result;\n    },\n\n    VisitParameter: function VisitParameter(expression, context) {\n        _index.Guard.requireValue(\"context\", context);\n        var et = _index2.default.Expressions.ExpressionType;\n        switch (expression.nodeType) {\n            case et.LambdaParameterReference:\n                var result = _index.Container.createEntityExpression(context.lambdaParameters[expression.paramIndex], { lambda: expression.name });\n                return result;\n            case et.LambdaParameter:\n                //TODO: throw descriptive exception or return a value\n                break;\n            default:\n                _index.Guard.raise(\"Parameter '\" + expression.name + \"' is missing!\");\n                break;\n        }\n    },\n\n    VisitThis: function VisitThis(expression, context) {\n        ///<summary>converts the ThisExpression into a QueryParameterExpression tha't value will be evaluated and stored in this.parameters collection</summary>\n        var index = this.parameters.push({ name: \"\", value: undefined }) - 1;\n        var result = _index.Container.createQueryParameterExpression(\"\", index, context.queryParameters, undefined);\n        return result;\n    },\n\n    VisitFunction: function VisitFunction(expression, context) {\n        var result = _index2.default.Expressions.ExpressionVisitor.prototype.VisitFunction.apply(this, arguments);\n        return result.body;\n    },\n\n    VisitCall: function VisitCall(expression, context) {\n        //var exp = this.Visit(expression.expression);\n        var self = this;\n        var exp = this.Visit(expression.expression, context);\n        var member = this.Visit(expression.member, context);\n        var args = expression.args.map(function (arg) {\n            if (arg instanceof _index2.default.Expressions.FunctionExpression && (exp instanceof _index2.default.Expressions.EntitySetExpression || exp instanceof _index2.default.Expressions.FrameOperationExpression)) {\n                var operation = self.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n\n                var entitySet = self.scopeContext.getEntitySetFromElementType(exp.elementType);\n                var setExpr = null;\n                if (!entitySet) {\n                    //TODO\n                    _index.Guard.raise(\"Nested operations without entity set is not supported\");\n                } else {\n                    setExpr = entitySet.expression;\n                }\n\n                var frameType = context.frameType;\n                context.frameType = operation.frameType;\n                context.lambdaParameters.push(setExpr);\n                var res = self.Visit(arg, context);\n                context.lambdaParameters.pop();\n                context.frameType = frameType;\n\n                if (operation.frameTypeFactory) {\n                    return operation.frameTypeFactory(setExpr, res);\n                } else {\n                    return new operation.frameType(setExpr, res);\n                }\n            } else {\n                return self.Visit(arg, context);\n            }\n        });\n        var result;\n\n        ///filter=>function(p) { return p.Title == this.xyz.BogusFunction('asd','basd');}\n        switch (true) {\n            case exp instanceof _index2.default.Expressions.QueryParameterExpression:\n                var argValues = args.map(function (a) {\n                    return a.value;\n                });\n                result = expression.implementation(exp.value, member.value, argValues);\n                //var args = expressions\n                return _index.Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n            case exp instanceof _index2.default.Expressions.EntityFieldExpression:\n\n            case exp instanceof _index2.default.Expressions.EntityFieldOperationExpression:\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFieldOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\n                return result;\n\n            case exp instanceof _index2.default.Expressions.EntitySetExpression:\n            case exp instanceof _index2.default.Expressions.FrameOperationExpression:\n                var operation = this.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createFrameOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\n                return result;\n\n            case exp instanceof _index2.default.Expressions.EntityExpression:\n                var operation = this.scopeContext.resolveTypeOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\n                }\n\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\n                return result;\n                break;\n            case exp instanceof _index2.default.Expressions.EntityContextExpression:\n                var operation = this.scopeContext.resolveContextOperations(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\n                }\n\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createContextFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\n                return result;\n                break;\n            default:\n                _index.Guard.raise(\"VisitCall: Only fields can have operations: \" + expression.getType().name);\n            //TODO we must not alter the visited tree\n        }\n    },\n    _resolveFunctionArguments: function _resolveFunctionArguments(args, params) {\n        if (params) // remove current field poz\n            params = params.filter(function (p, i) {\n                return p.name !== '@expression';\n            });\n\n        //objectArgs\n        if (args.length === 1 && args[0] instanceof _index2.default.Expressions.ConstantExpression && _typeof(args[0].value) === 'object' && args[0].value && params && params[0] && args[0].value.constructor === _index2.default.Object && params.some(function (param) {\n            return param.name in args[0].value;\n        })) {\n\n            return params.map(function (p) {\n                var type = p.type || p.dataType || args[0].type;\n                return new _index2.default.Expressions.ConstantExpression(args[0].value[p.name], _index.Container.resolveType(type), p.name);\n            });\n        } else {\n            return args.map(function (expr, i) {\n                if (expr instanceof _index2.default.Expressions.ConstantExpression && params && params[i]) {\n                    var type = params[i].type || params[i].dataType || expr.type;\n                    return new _index2.default.Expressions.ConstantExpression(expr.value, _index.Container.resolveType(type), params[i].name);\n                } else {\n                    return expr;\n                }\n            });\n        }\n    },\n\n    VisitProperty: function VisitProperty(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.PropertyExpression\" />\n        var exp = this.Visit(expression.expression, context);\n        var member = this.Visit(expression.member, context);\n\n        //Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\n        _index.Guard.requireType(\"member\", member, _index2.default.Expressions.ConstantExpression);\n\n        function isPrimitiveType(memberDefinitionArg) {\n\n            var t = memberDefinitionArg.dataType;\n            if (typeof t === 'function') {\n                return false;\n            }\n\n            // suspicious code\n            /*switch (t) {\r\n                //TODO: implement this\r\n            }*/\n        }\n\n        switch (exp.expressionType) {\n            case _index2.default.Expressions.EntitySetExpression:\n            case _index2.default.Expressions.EntityExpression:\n                var memberDefinition = exp.getMemberDefinition(member.value);\n                if (!memberDefinition) {\n                    _index.Guard.raise(new _index.Exception(\"Unknown member: \" + member.value, \"MemberNotFound\"));\n                }\n                //var storageMemberDefinition =\n                var storageField = memberDefinition.storageModel.PhysicalType.memberDefinitions.getMember(memberDefinition.name);\n                var res;\n                var memberDefinitionExp;\n                switch (storageField.kind) {\n                    case \"property\":\n                        memberDefinitionExp = _index.Container.createMemberInfoExpression(memberDefinition);\n                        res = _index.Container.createEntityFieldExpression(exp, memberDefinitionExp);\n                        return res;\n                    case \"navProperty\":\n                        var assocInfo = memberDefinition.storageModel.Associations[memberDefinition.name];\n                        var setExpression = _index.Container.createEntitySetExpression(exp, _index.Container.createAssociationInfoExpression(assocInfo));\n                        if (assocInfo.ToMultiplicity !== \"*\") {\n                            var ee = _index.Container.createEntityExpression(setExpression, {});\n                            return ee;\n                        } /* else {\r\n                             context.lambdaParameters.push(setExpression);\r\n                          }*/\n                        return setExpression;\n                    case \"complexProperty\":\n                        memberDefinitionExp = _index.Container.createMemberInfoExpression(memberDefinition);\n                        res = _index.Container.createComplexTypeExpression(exp, memberDefinitionExp);\n                        return res;\n                    //TODO: missing default case\n                }\n\n            //s/switch => property or navigationproperty\n            case _index2.default.Expressions.ComplexTypeExpression:\n                var memDef = exp.getMemberDefinition(member.value);\n                if (!memDef) {\n                    _index.Guard.raise(\"Unknown member \" + member.value + \" on \" + exp.entityType.name);\n                }\n                var memDefExp = _index.Container.createMemberInfoExpression(memDef);\n                var result;\n                //TODO!!!!\n                if (_index.Container.isPrimitiveType(_index.Container.resolveType(memDef.dataType))) {\n                    result = _index.Container.createEntityFieldExpression(exp, memDefExp);\n                    return result;\n                }\n                result = _index.Container.createComplexTypeExpression(exp, memDefExp);\n                return result;\n            case _index2.default.Expressions.QueryParameterExpression:\n                var value = expression.implementation(exp.value, member.value);\n                this.parameters[exp.index].name += \"$\" + member.value;\n                this.parameters[exp.index].value = value;\n                return _index.Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, value, _index.Container.getTypeName(value));\n            case _index2.default.Expressions.EntityFieldExpression:\n            case _index2.default.Expressions.EntityFieldOperationExpression:\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\n                if (!operation) {\n                    _index.Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\n                }\n                member = _index.Container.createMemberInfoExpression(operation);\n                result = _index.Container.createEntityFieldOperationExpression(exp, member, []);\n\n                return result;\n            default:\n                _index.Guard.raise(\"Unknown expression type to handle: \" + exp.expressionType.name);\n        }\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],60:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ComplexTypeExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.ComplexTypeExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityExpression, _index2.default.Expressions.ComplexTypeExpression]);\n        _index.Guard.requireType(\"selector\", selector, [_index2.default.Expressions.EntityExpression, _index2.default.Expressions.MemberInfoExpression]);\n        this.source = source;\n        this.selector = selector;\n        var dt = source.entityType.getMemberDefinition(selector.memberName).dataType;\n        var t = _index.Container.resolveType(dt);\n        this.entityType = t;\n    },\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        return this.entityType.getMemberDefinition(name);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Com }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],61:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityContextExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(instance) {\n        ///<param name=\"instance\" type=\"$data.EntityContext\" />\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false });\n        this.instance = instance;\n        //this.storage_type = {};\n        //this.typeName = this.type.name;\n    },\n    instance: { enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityContext, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],62:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.IndexingExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.AccessorExpression\" />\n        ///</signature>\n        _index.Guard.requireValue(\"source\", source);\n        _index.Guard.requireValue(\"selector\", selector);\n        if (!(source instanceof _index2.default.Expressions.EntitySetExpression) && !(source instanceof _index2.default.Expressions.ServiceOperationExpression)) {\n            _index.Guard.raise(\"Only EntitySetExpressions can be the source for an EntityExpression\");\n        }\n\n        this.source = source;\n        this.selector = selector;\n\n        this.entityType = this.source.elementType;\n        this.storageModel = this.source.storageModel;\n\n        _index.Guard.requireValue(\"entityType\", this.entityType);\n        _index.Guard.requireValue(\"storageModel\", this.storageModel);\n    },\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        var memdef = this.entityType.getMemberDefinition(name);\n        if (!memdef) {\n            _index.Guard.raise(new _index.Exception(\"Unknown member \" + name + \" on type \" + this.entityType.name, \"MemberNotFound\"));\n        };\n        memdef.storageModel = this.storageModel;\n        return memdef;\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Entity }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],63:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityExpressionVisitor', null, null, {\n\n    constructor: function constructor() {\n        this.lambdaTypes = [];\n    },\n\n    canVisit: function canVisit(expression) {\n        return expression instanceof _index2.default.Expressions.ExpressionNode;\n    },\n\n    Visit: function Visit(expression, context) {\n        if (!this.canVisit(expression)) return expression;\n\n        var visitorName = \"Visit\" + expression.getType().name;\n        if (visitorName in this) {\n            var fn = this[visitorName];\n            var result = fn.call(this, expression, context);\n            if (typeof result === 'undefined') {\n                return expression;\n            }\n            return result;\n        }\n        //console.log(\"unhandled expression type:\" + expression.getType().name);\n        return expression;\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createToArrayExpression(source);\n        }\n        return expression;\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createForEachExpression(source);\n        }\n        return expression;\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, context) {\n        return expression;\n    },\n\n    VisitSingleExpression: function VisitSingleExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createSingleExpression(source);\n        return expression;\n    },\n\n    VisitFirstExpression: function VisitFirstExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createFirstExpression(source);\n        return expression;\n    },\n\n    VisitSomeExpression: function VisitSomeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createSomeExpression(source);\n        return expression;\n    },\n\n    VisitFindExpression: function VisitFindExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createFindExpression(source);\n        return expression;\n    },\n\n    VisitEveryExpression: function VisitEveryExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createEveryExpression(source);\n        return expression;\n    },\n\n    VisitCountExpression: function VisitCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) return _index.Container.createCountExpression(source);\n        return expression;\n    },\n\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        if (source !== expression.source) {\n            return _index.Container.createBatchDeleteExpression(source);\n        }\n        return expression;\n    },\n\n    VisitBatchExecuteQueryExpression: function VisitBatchExecuteQueryExpression(expression, context) {\n        var newQueries = expression.members.map(function (expr) {\n            return this.Visit(expr, context);\n        }, this);\n\n        var equal = true;\n        for (var i = 0; i < expression.members.length; i++) {\n            equal = equal && expression.members[i] === newQueries[i];\n        }\n        if (!equal) {\n            return _index.Container.createBatchExecuteQueryExpression(newQueries);\n        }\n\n        return expression;\n    },\n\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, context) {\n        var newValues = expression.members.map(function (ofe) {\n            return this.Visit(ofe, context);\n        }, this);\n        var equal = true;\n        for (var i = 0; i < expression.members.length; i++) {\n            equal = equal && expression.members[i] === newValues[i];\n        }\n        if (!equal) {\n            return _index.Container.createObjectLiteralExpression(newValues);\n        }\n        return expression;\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, context) {\n        var newExpression = this.Visit(expression.expression, context);\n        if (expression.expression !== newExpression) {\n            return _index.Container.createObjectFieldExpression(expression.fieldName, newExpression);\n        }\n        return expression;\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        var newExpression = this.Visit(expression.source, context);\n        if (newExpression !== expression.source) {\n            return _index.Container.createIncludeExpression(newExpression, expression.selector);\n        }\n        return expression;\n    },\n\n    VisitUnaryExpression: function VisitUnaryExpression(expression, context) {\n\n        /// <param name=\"expression\" type=\"$data.Expressions.UnaryExpression\"></param>\n        /// <param name=\"context\"></param>\n        var operand = this.Visit(expression.operand, context);\n        if (expression.operand !== operand) {\n            return _index.Container.createUnaryExpression(operand, expression.operator, expression.nodeType, expression.resolution);\n        };\n        return expression;\n    },\n\n    VisitSimpleBinaryExpression: function VisitSimpleBinaryExpression(expression, context) {\n        ///<summary></summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<returns type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        var left = this.Visit(expression.left, context);\n        var right = this.Visit(expression.right, context);\n        if (left !== expression.left || right !== expression.right) {\n            return new _index2.default.Expressions.SimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, expression.resolution);\n        }\n        return expression;\n    },\n\n    VisitEntityContextExpression: function VisitEntityContextExpression(expression, context) {\n        return expression;\n    },\n\n    VisitCodeExpression: function VisitCodeExpression(expression, context) {\n        /// <param name=\"expression\" type=\"$data.Expressions.CodeExpression\"></param>\n        /// <param name=\"context\"></param>\n        /// <returns type=\"$data.Expressions.CodeExpression\"></returns>\n        return expression;\n    },\n\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createComplexTypeExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityExpression: function VisitEntityExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createEntityExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var result = _index.Container.createEntityFieldExpression(source, selector);\n            return result;\n        }\n        return expression;\n    },\n\n    VisitEntityFieldOperationExpression: function VisitEntityFieldOperationExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var operation = this.Visit(expression.operation, context);\n        var parameters = expression.parameters.map(function (p) {\n            return this.Visit(p);\n        }, this);\n        var result = _index.Container.createEntityFieldOperationExpression(source, operation, parameters);\n        return result;\n    },\n\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, context) {\n        var exp = this.Visit(expression.expression, context);\n        var args = expression.parameters.map(function (p) {\n            return this.Visit(p);\n        }, this);\n        var result = _index.Container.createParametricQueryExpression(exp, args);\n        return result;\n    },\n\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createEntitySetExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createFilterExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var expr = _index.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n            expr.projectionAs = expression.projectionAs;\n            return expr;\n        }\n        return expression;\n    },\n\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createOrderExpression(source, selector, expression.nodeType);\n        }\n        return expression;\n    },\n    VisitPagingExpression: function VisitPagingExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        var amount = this.Visit(expression.amount, context);\n        if (source !== expression.source || amount !== expression.amount) {\n            return _index.Container.createPagingExpression(source, amount, expression.nodeType);\n        }\n        return expression;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],64:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityFieldExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector) {\n        ///<param name=\"source\" type=\"$data.Entity.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Entity.MemberInfoExpression\" />\n        this.selector = selector;\n        this.source = source;\n\n        if (this.selector instanceof _index2.default.Expressions.MemberInfoExpression || this.selector.name) {\n            this.memberName = this.selector.name;\n        }\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityField }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],65:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntityFieldOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, operation, parameters) {\n        this.source = source;\n        this.operation = operation;\n        this.parameters = parameters;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityFieldOperation }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],66:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.EntitySetExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector, params, instance) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityContextExpression, _index2.default.Expressions.EntitySetExpression]);\n        _index.Guard.requireType(\"selector\", source, [_index2.default.Expressions.MemberInfoExpression, _index2.default.Expressions.CodeExpression, _index2.default.Expressions.ParametricQueryExpression]);\n\n        this.source = source;\n        this.selector = selector;\n        this.params = params;\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false, writable: true });\n        this.instance = instance;\n\n        function findContext() {\n            //TODO: use source from function parameter and return a value at the end of the function\n            var r = source;\n            while (r) {\n                if (r instanceof _index2.default.Expressions.EntityContextExpression) {\n                    return r;\n                }\n                r = r.source;\n            }\n        }\n\n        ///TODO!!!\n        this.storage_type = {};\n        var c = findContext();\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntityContextExpression:\n                _index.Guard.requireType(\"selector\", selector, _index2.default.Expressions.MemberInfoExpression);\n                this.elementType = selector.memberDefinition.elementType;\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\n                break;\n            case this.source instanceof _index2.default.Expressions.EntityExpression:\n                _index.Guard.requireType(\"selector\", selector, _index2.default.Expressions.AssociationInfoExpression);\n                this.elementType = selector.associationInfo.ToType;\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\n                break;\n            case this.source instanceof _index2.default.Expressions.EntitySetExpression:\n                if (selector instanceof _index2.default.Expressions.AssociationInfoExpression) {\n                    this.elementType = selector.associationInfo.ToType, this.storageModel = c.instance._storageModel.getStorageModel(selector.associationInfo.ToType);\n                } else {\n                    this.elementType = this.source.elementType;\n                    this.storageModel = this.source.storageModel;\n                }\n                break;\n            case this.source instanceof _index2.default.Expressions.ServiceOperationExpression:\n                this.elementType = this.source.elementType; //?????????\n                this.storageModel = this.source.storageModel;\n                break;\n            default:\n                _index.Guard.raise(\"take and skip must be the last expressions in the chain!\");\n                //Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.getType().name);\n                break;\n        }\n\n        // suspicious code\n        /*if (this.source instanceof $data.Expressions.EntitySetExpression) {\r\n                //TODO: missing operation\r\n        }*/\n        //EntityTypeInfo\n    },\n    getMemberDefinition: function getMemberDefinition(name) {\n        var memdef = this.elementType.getMemberDefinition(name);\n        if (!memdef) {\n            _index.Guard.raise(new _index.Exception(\"Unknown member \" + name + \" on type \" + this.entityType.name, \"MemberNotFound\"));\n        };\n        memdef.storageModel = this.storageModel;\n        return memdef;\n    },\n\n    instance: { enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntitySet, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],67:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ExpressionMonitor', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(monitorDefinition) {\n        this.Visit = function (expression, context) {\n\n            var result = expression;\n            var methodName;\n            if (this.canVisit(expression)) {\n\n                //if (monitorDefinition.FilterExpressionNode) {\n\n                //};\n\n                if (monitorDefinition.VisitExpressionNode) {\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\n                };\n\n                methodName = \"Visit\" + expression.getType().name;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\n                }\n            }\n\n            //apply is about 3-4 times faster then call on webkit\n\n            var args = arguments;\n            if (result !== expression) args = [result, context];\n            result = _index2.default.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\n\n            args = [result, context];\n\n            if (this.canVisit(result)) {\n                var expressionTypeName = result.getType().name;\n                if (monitorDefinition.MonitorExpressionNode) {\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Monitor\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n\n                if (monitorDefinition.MutateExpressionNode) {\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\n                }\n                methodName = \"Mutate\" + expressionTypeName;\n                if (methodName in monitorDefinition) {\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\n                }\n            }\n            return result;\n        };\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],68:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FilterExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\n        ///</signature>\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\n        ///</signature>\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Filter, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.InlineCountExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.InlineCount, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.BatchExecuteQueryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(members) {\n        this.members = members;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.BatchExecuteQuery, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FrameOperator', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor() {\n        this.isTerminated = true;\n    }\n});\n\n(0, _index.$C)('$data.Expressions.CountExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Integer;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Count, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.SingleExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Single, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FindExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source, params, subMember) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.params = params;\n        this.subMember = subMember;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Find, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.FirstExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.First, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.ForEachExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ForEach, enumerable: true }\n});\n(0, _index.$C)('$data.Expressions.ToArrayExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Array;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ToArray, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.SomeExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Some, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.EveryExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Object;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Every, enumerable: true }\n});\n\n(0, _index.$C)('$data.Expressions.BatchDeleteExpression', _index2.default.Expressions.FrameOperator, null, {\n    constructor: function constructor(source) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\n        ///</signature>\n        this.source = source;\n        this.resultType = _index2.default.Integer;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.BatchDelete, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],69:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FrameOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, operation, parameters) {\n        this.source = source;\n        this.operation = operation;\n        this.parameters = parameters;\n\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntitySetExpression:\n            case this.source instanceof _index2.default.Expressions.FrameOperationExpression:\n                this.elementType = this.source.elementType;\n                this.storageModel = this.source.storageModel;\n                break;\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.FrameOperation }\n\n});\n\n(0, _index.$C)('$data.Expressions.EntityFunctionOperationExpression', _index2.default.Expressions.FrameOperationExpression, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.EntityFunctionOperation }\n});\n\n(0, _index.$C)('$data.Expressions.ContextFunctionOperationExpression', _index2.default.Expressions.FrameOperationExpression, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ContextFunctionOperation }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],70:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.IncludeExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Include, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],71:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.MemberInfoExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(memberDefinition) {\n        this.memberDefinition = memberDefinition;\n        this.memberName = memberDefinition.name;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.MemberInfo, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],72:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.OrderExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, expression, nType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        //this.source = source;\n        //this.selector = expression;\n        this.nodeType = nType;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.OrderBy, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],73:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParametricQueryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, parameters) {\n        this.expression = expression;\n        this.parameters = parameters || [];\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ParametricQuery, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],74:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ProjectionExpression', _index2.default.Expressions.EntitySetExpression, null, {\n    constructor: function constructor(source, selector, params, instance) {},\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Projection, enumerable: true }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],75:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.QueryExpressionCreator', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(scopeContext) {\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\n        _index.Guard.requireValue(\"scopeContext\", scopeContext);\n        this.scopeContext = scopeContext;\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, context) {\n        if (expression.source instanceof _index2.default.Expressions.EntityContextExpression) {\n            this.lambdaTypes.push(expression);\n        }\n        return expression;\n    },\n\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression, context) {\n        if (expression.source instanceof _index2.default.Expressions.EntityContextExpression) {\n            this.lambdaTypes.push(expression);\n        }\n        return expression;\n    },\n\n    VisitCodeExpression: function VisitCodeExpression(expression, context) {\n        ///<summary>Converts the CodeExpression into an EntityExpression</summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\n        var source = expression.source.toString();\n        var jsCodeTree = _index.Container.createCodeParser(this.scopeContext).createExpression(source);\n        this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\n\n        //TODO rename classes to reflex variable names\n        //TODO engage localValueResolver here\n        //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\n        var constantResolver = _index.Container.createConstantValueResolver(expression.parameters, _index2.default.__global, this.scopeContext);\n        var parameterProcessor = _index.Container.createParameterResolverVisitor();\n\n        jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\n\n        this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\n        var code2entity = _index.Container.createCodeToEntityConverter(this.scopeContext);\n\n        ///user provided query parameter object (specified as thisArg earlier) is passed in\n        var entityExpression = code2entity.Visit(jsCodeTree, { queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\n\n        ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\n        var result = _index.Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\n        this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\n\n        return result;\n    },\n\n    VisitFilterExpression: function VisitFilterExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createFilterExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitInlineCountExpression: function VisitInlineCountExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\n        }\n        return expression;\n    },\n\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            var expr = _index.Container.createProjectionExpression(source, selector, expression.params, expression.instance);\n            expr.projectionAs = expression.projectionAs;\n            return expr;\n        }\n        return expression;\n    },\n\n    VisitOrderExpression: function VisitOrderExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createOrderExpression(source, selector, expression.nodeType);\n        }\n        return expression;\n    },\n\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        var source = this.Visit(expression.source, context);\n        context = context || {};\n        context.frameType = expression.getType();\n        var selector = this.Visit(expression.selector, context);\n        if (source !== expression.source || selector !== expression.selector) {\n            return _index.Container.createIncludeExpression(source, selector);\n        }\n        return expression;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],76:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.QueryParameterExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, index, value, type) {\n        this.name = name;\n        this.index = index;\n        this.value = value;\n        //TODO\n        this.type = _index.Container.getTypeName(value);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.QueryParameter, writable: false }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],77:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.RepresentationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(kind) {},\n\n    getMemberDefinition: function getMemberDefinition(name) {\n        return this.entityType.getMemberDefinition(name);\n    },\n\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Entity }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],78:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ServiceOperationExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, selector, params, cfg, boundItem) {\n        ///<signature>\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\n        ///<param name=\"params\" type=\"$data.Array\" />\n        ///<param name=\"cfg\" type=\"$data.Object\" />\n        ///</signature>\n        _index.Guard.requireType(\"source\", source, [_index2.default.Expressions.EntityContextExpression]);\n        _index.Guard.requireType(\"selector\", source, [_index2.default.Expressions.MemberInfoExpression]);\n\n        this.source = source;\n        this.selector = selector;\n        this.params = params;\n        this.cfg = cfg;\n        this.boundItem = boundItem;\n\n        function findContext() {\n            //TODO: use source from function parameter and return a value at the end of the function\n            var r = source;\n            while (r) {\n                if (r instanceof _index2.default.Expressions.EntityContextExpression) {\n                    return r;\n                }\n                r = r.source;\n            }\n        }\n\n        var c = findContext();\n        switch (true) {\n            case this.source instanceof _index2.default.Expressions.EntityContextExpression:\n                this.elementType = cfg.elementType ? _index.Container.resolveType(cfg.elementType) : this.elementType ? _index.Container.resolveType(cfg.returnType) : null;\n                this.storageModel = cfg.elementType ? c.instance._storageModel.getStorageModel(_index.Container.resolveType(cfg.elementType)) : null;\n                break;\n            default:\n                _index.Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.source.getType().name);\n        }\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ServiceOperation, enumerable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],79:[function(_dereq_,module,exports){\n'use strict';\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExpressionBuilder', null, null, {\n    constructor: function constructor(context) {\n        this.context = context;\n    },\n    _isLambdaParam: function _isLambdaParam(name) {\n        var p = this.context.lambdaParams;\n        for (var i = 0; i < p.length; i++) {\n            if (p[i] == name) return true;\n        }\n        return false;\n    },\n    _isParam: function _isParam(name) {\n        return this.context.paramContext[name] != undefined;\n    },\n    _isParamRoot: function _isParamRoot(name) {\n        return this.context.paramsName == name;\n    },\n    Build: function Build(node, expNode) {\n        var n;\n        switch (node.arity) {\n            case \"infix\":\n                if (\"(\" == node.value) n = this.BuildMethodCall(node, expNode);else if (\".\" == node.value) n = this.BuildMember(node, expNode);else if ([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"].indexOf(node.value) >= 0) n = this.BuildEquality(node, expNode);else if ([\"&&\", \"||\"].indexOf(node.value) >= 0) n = this.BuildBinary(node, expNode);else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(node.value) >= 0) n = this.BuildBinary(node, expNode);else if (\"[\" == node.value) n = this.BuildArrayAccess(node, expNode);else _index.Guard.raise(\"Value of infix node isn't implemented: \" + node.value);\n                break;\n            case \"prefix\":\n                if ([\"+\", \"-\", \"!\"].indexOf(node.value) >= 0) n = this.BuildUnary(node, expNode);else if ([\"++\", \"--\"].indexOf(node.value) >= 0) n = this.BuildIncDec(node, expNode);else if (\"{\" == node.value /* && \"object\" == node.type*/) //TODO: check the second condition necessity\n                    n = this.BuildNewExpression(node, expNode);else _index.Guard.raise(\"Value of prefix node isn't implemented: \" + node.value);\n                break;\n            case \"suffix\":\n                if ([\"++\", \"--\"].indexOf(node.value) >= 0) n = this.BuildIncDec(node, expNode);else _index.Guard.raise(\"Value of suffix node isn't implemented: \" + node.value);\n                break;\n            case \"string\":\n            case \"number\":\n                n = this.BuildLiteral(node, expNode); //TODO: more arity to literal?\n                break;\n            case \"ternary\":\n                if (node.value == \"?\") n = this.BuildDecision(node, expNode);else _index.Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\n                break;\n            case null:\n            case undefined:\n                if (node.type == \"boolean\" && (node.value == \"true\" || node.value == \"false\")) n = this.BuildBoolLiteral(node, expNode);else n = this.BuildVariable(node, expNode);\n                break;\n            default:\n                _index.Guard.raise(\"Arity isn't implemented: \" + node.arity);\n        }\n        return n;\n    },\n    BuildNewExpression: function BuildNewExpression(node, expNode) {\n        var newExpression = _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, []);\n        var n = node.first;\n        for (var i = 0; i < n.length; i++) {\n            newExpression.values.push(this.Build(n[i], newExpression));\n        }return newExpression;\n    },\n    BuildLiteral: function BuildLiteral(node, expNode) {\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\n    },\n    BuildBoolLiteral: function BuildBoolLiteral(node, expNode) {\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.type, node.value == \"true\" ? true : false);\n    },\n    BuildVariable: function BuildVariable(node, expNode) {\n        if (!node.first) {\n            if (expNode.type == MEMBERACCESS) {\n                var subType;\n                if (this._isLambdaParam(node.value)) subType = \"LAMBDAPARAM\";else if (this._isParamRoot(node.value)) subType = \"PARAMETERROOT\";else if (this._isParam(node.value)) subType = \"PARAMETER\";else subType = \"PROPERTY\";\n            } else {\n                if (this._isLambdaParam(node.value)) subType = \"LAMBDAPARAM\";else if (this._isParamRoot(node.value)) subType = \"PARAMETERROOT\";else if (this._isParam(node.value)) subType = \"PARAMETER\";else if (_index2.default.__global[node.value] != undefined) subType = \"GLOBALOBJECT\";else _index.Guard.raise(new _index.Exception(\"Unknown variable in '\" + this.context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + node.value + \"'.\", \"InvalidOperation\", { operationName: this.context.operation, missingParameterName: node.value }));\n            }\n            return _index2.default.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, node.value, subType);\n        }\n\n        var left = _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, \"name\", node.value);\n\n        var jsonAssign = _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true);\n        var right = this.Build(node.first, jsonAssign);\n        //left.parent = jsonAssign;\n        jsonAssign.left = left;\n        jsonAssign.right = right;\n\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n\n        return jsonAssign;\n    },\n    BuildMember: function BuildMember(node, expNode) {\n        if (node.value != \".\" || node.arity != \"infix\") {\n            if (node.type == \"string\") {\n                //TODO: more types?\n                return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\n            }\n            return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true, null, node.value);\n        }\n        var result = _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true);\n        var expression = this.Build(node.first, result);\n        var member = this.Build(node.second, result);\n        result.expression = expression;\n        result.member = member;\n        return result;\n    },\n    BuildUnary: function BuildUnary(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(true, node.value);\n        result.operand = this.Build(node.first, result);\n        return result;\n    },\n    BuildIncDec: function BuildIncDec(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(true, node.value, null, node.arity == \"suffix\");\n        result.operand = this.Build(node.first, result);\n        return result;\n    },\n    BuildBinary: function BuildBinary(node, expNode) {\n        if (!node.first) _index.Guard.raise(\"Cannot build binary: node.first is null\");\n        if (!node.second) _index.Guard.raise(\"Cannot build binary: node.second is null\");\n        var result = _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(true, node.value);\n        result.left = this.Build(node.first, result);\n        result.right = this.Build(node.second, result);\n        return result;\n    },\n    BuildEquality: function BuildEquality(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(true, node.value);\n        result.left = this.Build(node.first, result);\n        result.right = this.Build(node.second, result);\n        return result;\n    },\n    BuildDecision: function BuildDecision(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(true);\n        result.expression = this.Build(node.first, result);\n        result.left = this.Build(node.second, result);\n        result.right = this.Build(node.third, result);\n        return result;\n    },\n    BuildMethodCall: function BuildMethodCall(node, expNode) {\n        var result = _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(true);\n        if (node.first.type == \"function\") {\n            //-- object's function\n            result.object = this.Build(node.first.first, result);\n            result.method = node.first.second.value;\n        } else {\n            //-- global function\n            if (node.first.type != null) _index.Guard.raise(\"Cannot build MethodCall because type is \" + type);\n            result.object = null;\n            result.method = node.first.value;\n        }\n        var argNodes = node.second;\n        var args = [];\n        for (var i = 0; i < argNodes.length; i++) {\n            var arg = argNodes[i];\n            args[i] = this.Build(arg, result);\n        }\n        result.args = args;\n        return result;\n    },\n    BuildArrayAccess: function BuildArrayAccess(node, expNode) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var result = _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true);\n        result.array = this.Build(node.first, result);\n        result.index = this.Build(node.second, result);\n        return result;\n    }\n}, null);\n\n},{\"../../TypeSystem/index.js\":32}],80:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//TODO: Finish refactoring ExpressionNode.js\n\n_index2.default.Class.define(\"$data.Expressions.ExpressionType\", null, null, {}, {\n    Constant: \"constant\", // { type:LITERAL, executable:true, valueType:, value: }\n    Variable: \"variable\", // { type:VARIABLE, executable:true, name: }\n    MemberAccess: \"memberAccess\", // { type:MEMBERACCESS, executable:true, expression:, member: }\n    Call: \"call\",\n\n    /* binary operators */\n    Equal: \"equal\",\n    NotEqual: \"notEqual\",\n    EqualTyped: \"equalTyped\",\n    NotEqualTyped: \"notEqualTyped\",\n    GreaterThen: \"greaterThan\",\n    LessThen: \"lessThan\",\n    GreaterThenOrEqual: \"greaterThanOrEqual\",\n    LessThenOrEqual: \"lessThenOrEqual\",\n    Or: \"or\",\n    OrBitwise: \"orBitwise\",\n    And: \"and\",\n    AndBitwise: \"andBitwise\",\n\n    In: \"in\",\n\n    Add: \"add\",\n    Divide: \"divide\",\n    Multiply: \"multiply\",\n    Subtract: \"subtract\",\n    Modulo: \"modulo\",\n    ArrayIndex: \"arrayIndex\",\n\n    /* unary operators */\n    New: \"new\",\n    Positive: \"positive\",\n    Negative: \"negative\",\n    Increment: \"increment\",\n    Decrement: \"decrement\",\n    Not: \"not\",\n\n    This: \"this\",\n    LambdaParameterReference: \"lambdaParameterReference\",\n    LambdaParameter: \"lambdaParameter\",\n    ParameterReference: \"parameterReference\",\n    Parameter: \"parameter\",\n\n    ArrayLiteral: \"arrayLiteral\",\n    ObjectLiteral: \"objectLiteral\",\n    ObjectField: \"objectField\",\n    Function: \"Function\",\n    Unknown: \"UNKNOWN\",\n\n    EntitySet: \"EntitySet\",\n    ServiceOperation: \"ServiceOperation\",\n    EntityField: \"EntityField\",\n    EntityContext: \"EntityContext\",\n    Entity: \"Entity\",\n    Filter: \"Filter\",\n    First: \"First\",\n    Count: \"Count\",\n    InlineCount: \"InlineCount\",\n    BatchExecuteQuery: \"BatchExecuteQuery\",\n    Single: \"Single\",\n    Find: \"Find\",\n    Some: \"Some\",\n    Every: \"Every\",\n    ToArray: \"ToArray\",\n    BatchDelete: \"BatchDelete\",\n    ForEach: \"ForEach\",\n    Projection: \"Projection\",\n    EntityMember: \"EntityMember\",\n    EntityFieldOperation: \"EntityFieldOperation\",\n    FrameOperation: \"FrameOperation\",\n    EntityFunctionOperation: \"EntityFunctionOperation\",\n    ContextFunctionOperation: \"ContextFunctionOperation\",\n    EntityBinary: \"EntityBinary\",\n    Code: \"Code\",\n    ParametricQuery: \"ParametricQuery\",\n    MemberInfo: \"MemberInfo\",\n    QueryParameter: \"QueryParameter\",\n    ComplexEntityField: \"ComplexEntityField\",\n\n    Take: \"Take\",\n    Skip: \"Skip\",\n    OrderBy: \"OrderBy\",\n    OrderByDescending: \"OrderByDescending\",\n    Include: \"Include\",\n\n    IndexedPhysicalAnd: \"IndexedDBPhysicalAndFilterExpression\",\n    IndexedLogicalAnd: \"IndexedDBLogicalAndFilterExpression\",\n    IndexedLogicalOr: \"IndexedDBLogicalOrFilterExpression\",\n    IndexedLogicalIn: \"IndexedDBLogicalInFilterExpression\"\n});\n\n_index2.default.BinaryOperator = function () {\n    ///<field name=\"operator\" type=\"string\" />\n    ///<field name=\"expressionType\" type=\"$data.ExpressionType\" />\n    ///<field name=\"type\" type=\"string\" />\n};\n\n_index2.default.binaryOperators = [{ operator: \"==\", expressionType: _index2.default.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function implementation(a, b) {\n        return a == b;\n    } }, { operator: \"===\", expressionType: _index2.default.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n        return a === b;\n    } }, { operator: \"!=\", expressionType: _index2.default.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a != b;\n    } }, { operator: \"!==\", expressionType: _index2.default.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function implementation(a, b) {\n        return a !== b;\n    } }, { operator: \">\", expressionType: _index2.default.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function implementation(a, b) {\n        return a > b;\n    } }, { operator: \">=\", expressionType: _index2.default.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a >= b;\n    } }, { operator: \"<=\", expressionType: _index2.default.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function implementation(a, b) {\n        return a <= b;\n    } }, { operator: \"<\", expressionType: _index2.default.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function implementation(a, b) {\n        return a < b;\n    } }, { operator: \"&&\", expressionType: _index2.default.Expressions.ExpressionType.And, type: \"boolean\", implementation: function implementation(a, b) {\n        return a && b;\n    } }, { operator: \"||\", expressionType: _index2.default.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function implementation(a, b) {\n        return a || b;\n    } }, { operator: \"&\", expressionType: _index2.default.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function implementation(a, b) {\n        return a & b;\n    } }, { operator: \"|\", expressionType: _index2.default.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function implementation(a, b) {\n        return a | b;\n    } }, { operator: \"+\", expressionType: _index2.default.Expressions.ExpressionType.Add, type: \"number\", implementation: function implementation(a, b) {\n        return a + b;\n    } }, { operator: \"-\", expressionType: _index2.default.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function implementation(a, b) {\n        return a - b;\n    } }, { operator: \"/\", expressionType: _index2.default.Expressions.ExpressionType.Divide, type: \"number\", implementation: function implementation(a, b) {\n        return a / b;\n    } }, { operator: \"%\", expressionType: _index2.default.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function implementation(a, b) {\n        return a % b;\n    } }, { operator: \"*\", expressionType: _index2.default.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function implementation(a, b) {\n        return a * b;\n    } }, { operator: \"[\", expressionType: _index2.default.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function implementation(a, b) {\n        return a[b];\n    } }, { operator: \"in\", expressionType: _index2.default.Expressions.ExpressionType.In, type: 'boolean', implementation: function implementation(a, b) {\n        return a in b;\n    } }];\n\n_index2.default.binaryOperators.resolve = function (operator) {\n    var result = _index2.default.binaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length > 0) return operator;\n    //Guard.raise(\"Unknown operator: \" + operator);\n};\n\n_index2.default.binaryOperators.contains = function (operator) {\n    return _index2.default.binaryOperators.some(function (item) {\n        return item.operator == operator;\n    });\n};\n\n_index2.default.binaryOperators.getOperator = function (operator) {\n    ///<returns type=\"BinaryOperator\" />\n    var result = _index2.default.binaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length < 1) _index.Guard.raise(\"Unknown operator: \" + operator);\n    return result[0];\n};\n\n_index2.default.unaryOperators = [{ operator: \"+\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Positive, type: \"number\", implementation: function implementation(operand) {\n        return +operand;\n    } }, { operator: \"-\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Negative, type: \"number\", implementation: function implementation(operand) {\n        return -operand;\n    } }, { operator: \"++\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n        return ++operand;\n    } }, { operator: \"--\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n        return --operand;\n    } }, { operator: \"++\", arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Increment, type: \"number\", implementation: function implementation(operand) {\n        return operand++;\n    } }, { operator: \"!\", arity: \"prefix\", expressionType: _index2.default.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function implementation(operand) {\n        return !operand;\n    } }, { operator: \"--\", arity: \"suffix\", expressionType: _index2.default.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function implementation(operand) {\n        return operand--;\n    } }\n\n//{ operator: \"new\", expressionType : $data.Expressions.ExpressionType.New, type: \"object\", implementation: function(operand) { return new operand; }\n];\n\n_index2.default.unaryOperators.resolve = function (operator) {\n    var result = _index2.default.unaryOperators.filter(function (item) {\n        return item.operator == operator;\n    });\n    if (result.length > 0) return operator;\n    //Guard.raise(\"Unknown operator: \" + operator);\n};\n\n_index2.default.unaryOperators.contains = function (operator) {\n    return _index2.default.unaryOperators.some(function (item) {\n        return item.operator == operator;\n    });\n};\n\n_index2.default.unaryOperators.getOperator = function (operator, arity) {\n    ///<returns type=\"BinaryOperator\" />\n    var result = _index2.default.unaryOperators.filter(function (item) {\n        return item.operator == operator && (!arity || item.arity == arity);\n    });\n    if (result.length < 1) _index.Guard.raise(\"Unknown operator: \" + operator);\n    return result[0];\n};\n\n_index2.default.timeIt = function (fn, iterations) {\n    iterations = iterations || 1;\n\n    console.time(\"!\");\n    for (var i = 0; i < iterations; i++) {\n        fn();\n    }\n    console.timeEnd(\"!\");\n};\n\n_index2.default.Expressions.OperatorTypes = {\n    UNARY: \"UNARY\", // { type:UNARY, executable:true, operator:, operand: }\n    INCDEC: \"INCDEC\", // { type:INCDEC, executable:true, operator:, operand:, suffix: }\n    DECISION: \"DECISION\", // { type:DECISION, executable:true, expression:, left:, right: }\n    METHODCALL: \"METHODCALL\", // { type:METHODCALL, executable:true, object:, method:, args: }\n    NEW: \"NEW\", // { type:NEW, executable:true, values: [] };\n    JSONASSIGN: \"JSONASSIGN\", // { type:JSONASSIGN, executable:true, left:, right: }\n    ARRAYACCESS: \"ARRAYACCESS\", // { type:ARRAYACCESS, executable:true, array:, index: }\n    UNKNOWN: \"UNKNOWN\"\n};\n\n_index2.default.executable = true;\n\nfunction jsonify(obj) {\n    return JSON.stringify(obj, null, \"\\t\");\n}\n\n(0, _index.$C)('$data.Expressions.ExpressionNode', null, null, {\n    constructor: function constructor() {\n        ///<summary>Provides a base class for all Expressions.</summary>\n        ///<field name=\"nodeType\" type=\"string\">Represents the expression type of the node&#10;\n        ///For the list of expression node types refer to $data.Expressions.ExpressionType\n        ///</field>\n        ///<field name=\"type\" type=\"Function\">The result type of the expression</field>\n        ///<field name=\"executable\" type=\"boolean\">True if the expression can be evaluated to yield a result</field>\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\n        ///this.type = type;\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\n        ///this.executable = (executable === undefined || executable === null) ? true : executable;\n        ///TODO\n        this.expressionType = this.constructor;\n    },\n    toJSON: function toJSON() {\n        var res = JSON.parse(JSON.stringify(this));\n        res.expressionType = _index.Container.resolveName(this._expressionType);\n        return res;\n    },\n    getJSON: function getJSON() {\n        return jsonify(this);\n    },\n\n    //TOBLOG maybe\n    /*expressionType: {\r\n        value: undefined,\r\n        ////OPTIMIZE\r\n        set: function (value) {\r\n            var _expressionType;\r\n            Object.defineProperty(this, \"expressionType\", {\r\n                set: function (value) {\r\n                    if (typeof value === 'string') {\r\n                        value = Container.resolveType(value);\r\n                    }\r\n                    _expressionType = value;\r\n                },\r\n                get: function (value) {\r\n                    //IE ommits listing JSON.stringify in call chain\r\n                          if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n                        return Container.resolveName(_expressionType);\r\n                    }\r\n                    return _expressionType;\r\n                },\r\n                enumerable: true\r\n            });\r\n              this.expressionType = value;\r\n        },\r\n        get: function () { return undefined; },\r\n        enumerable: true\r\n    },*/\n    expressionType: {\n        set: function set(value) {\n            if (typeof value === 'string') {\n                value = _index.Container.resolveType(value);\n            }\n            this._expressionType = value;\n        },\n        get: function get(value) {\n            //IE ommits listing JSON.stringify in call chain\n\n            // if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\n            //     return Container.resolveName(this._expressionType);\n            // }\n            return this._expressionType;\n        },\n        enumerable: true\n    },\n    ///toString: function () { },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Unknown, writable: false },\n\n    type: {},\n\n    isTerminated: { value: false },\n\n    toString: function toString() {\n        return this.value;\n    }\n}, null);\n\n(0, _index.$C)('$data.Expressions.UnaryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(operand, operator, nodeType, resolution) {\n        /// <summary>\n        /// Represents an operation with only one operand and an operator\n        /// </summary>\n        /// <param name=\"operand\"></param>\n        /// <param name=\"operator\"></param>\n        /// <param name=\"nodeType\"></param>\n        /// <param name=\"resolution\"></param>\n        this.operand = operand;\n        this.operator = operator;\n        this.nodeType = nodeType;\n        this.resolution = resolution;\n    },\n\n    operator: { value: undefined, writable: true },\n    operand: { value: undefined, writable: true },\n    nodeType: { value: undefined, writable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],81:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.FunctionExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, parameters, body) {\n        ///<signature>\n        ///<summary>Represents a function declaration.</summary>\n        ///<param name=\"name\" type=\"String\">Function name</param>\n        ///<param name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</param>\n        ///<param name=\"body\" type=\"$data.Expressions.ExpressionNode\" />\n        ///</signature>\n        ///<field name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</field>\n        ///<field name=\"body\" type=\"$data.Expressions.ExpressionNode\">The function body</field>\n\n        this.parameters = parameters || [];\n        this.name = name;\n        this.body = body;\n    },\n\n    toString: function toString(debug) {\n        var paramStrings = this.parameters.map(function (p) {\n            return p.toString();\n        });\n        paramStrings = paramStrings.join(\",\");\n        var bodyString = this.body ? this.body.toString(debug) : '';\n        return \"function \" + this.name + \"(\" + paramStrings + \") { \" + bodyString + \"}\";\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Function, writable: true },\n    parameters: { value: undefined, dataType: Array, elementType: _index2.default.Expressions.ParameterExpression },\n    body: { value: undefined, dataType: _index2.default.Expressions.ExpressionNode },\n    type: {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],82:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ObjectFieldExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(fieldName, expression) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        this.fieldName = fieldName;\n        this.expression = expression;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ObjectField, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],83:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ObjectLiteralExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(members) {\n        ///<summary>Represent an object initializer literal expression &#10;Ex: { prop: value}</summary>\n        ///<param name=\"member\" type=\"Array\" elementType=\"$data.Expressions.ObjectFieldExpression\" />\n        this.members = members;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.ObjectLiteral, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    },\n\n    implementation: {\n        get: function get() {\n            return function (namesAndValues) {\n                var result = {};\n                namesAndValues.forEach(function (item) {\n                    result[item.name] = item.value;\n                });\n                return result;\n            };\n        },\n        set: function set() {}\n    }\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],84:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.PagingExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(source, expression, nType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        this.source = source;\n        this.amount = expression;\n        this.nodeType = nType;\n    },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Unknown, writable: true },\n\n    toString: function toString(debug) {\n        //var result;\n        //result = debug ? this.type + \" \" : \"\";\n        //result = result + this.name;\n        var result = \"unimplemented\";\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],85:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParameterExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(name, type, nodeType) {\n        ///<param name=\"name\" type=\"string\" />\n        ///<field name=\"name\" type=\"string\" />\n        //this.writePropertyValue(\"name\", name);\n        //this.writePropertyValue(\"type\", type);\n        this.nodeType = nodeType || _index2.default.Expressions.ExpressionType.Parameter;\n        this.name = name;\n        this.type = type || \"unknown\";\n        var _owningFunction;\n    },\n\n    owningFunction: { value: undefined, enumerable: false },\n    nodeType: { value: _index2.default.Expressions.ExpressionType.Parameter, writable: true },\n    name: { value: undefined, dataType: String, writable: true },\n    type: { value: undefined, dataType: \"object\", writable: true },\n    toString: function toString(debug) {\n        var result;\n        result = debug ? this.type + \" \" : \"\";\n        result = result + this.name;\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],86:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.PropertyExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(expression, member) {\n        ///<summary>Represents accessing a property or field of an object</summary>\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</param>\n        ///<param name=\"member\" type=\"$data.Expressions.ConstantExpression\">The member descriptor</param>\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</field>\n        ///<field name=\"member\" type=\"$data.Expression.ConstantExpression\">The member descriptor</field>\n\n        this.expression = expression;\n        this.member = member;\n\n        this.type = member.dataType;\n    },\n\n    nodeType: {\n        value: _index2.default.Expressions.ExpressionType.MemberAccess\n    },\n\n    expression: {\n        value: undefined,\n        dataType: _index2.default.Expressions.ExpressionNode,\n        writable: true\n    },\n\n    implementation: {\n        get: function get() {\n            return function (holder, memberName) {\n                if (holder[memberName] === undefined) _index.Guard.raise(new _index.Exception(\"Parameter '\" + memberName + \"' not found in context\", 'Property not found!'));\n                return holder[memberName];\n            };\n        },\n        set: function set() {}\n    },\n\n    member: {\n        value: undefined,\n        dataType: _index2.default.MemberDefinition,\n        writable: true\n    },\n\n    type: {\n        value: undefined,\n        writable: true\n    },\n\n    toString: function toString(debug) {\n        return this.expression.toString() + \".\" + this.member.toString();\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],87:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.SimpleBinaryExpression', _index2.default.Expressions.ExpressionNode, null, {\n    constructor: function constructor(left, right, nodeType, operator, type, resolution) {\n        ///<summary>Represents a bin operation with left and right operands and an operator///</summary>\n        ///<param name=\"left\" type=\"$data.Expression.ExpressionNode\">The left element of the binary operation</param>\n        ///<param name=\"right\" type=\"$data.Expression.ExpressionNode\">The right element of the binary operation</param>\n        ///<field name=\"implementation\" type=\"function\" />\n        this.left = left;\n        this.right = right;\n        this.nodeType = nodeType;\n        this.operator = operator;\n        this.type = type;\n        this.resolution = resolution;\n    },\n\n    implementation: {\n        get: function get() {\n            return _index2.default.binaryOperators.getOperator(this.operator).implementation;\n        },\n        set: function set() {}\n\n    },\n    //nodeType: { value: $data.Expressions.ExpressionType },\n    type: { value: \"number\", writable: true }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],88:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ThisExpression', _index2.default.Expressions.ExpressionNode, null, {\n    nodeType: { value: _index2.default.Expressions.ExpressionType.This }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],89:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExecutorVisitor', _index2.default.Expressions.ExpTreeVisitor, null, {\n    //--\n    VisitVariable: function VisitVariable(eNode, context) {\n        if (!eNode.executable) return eNode;\n        var value = eNode.name == context.paramsName ? context.paramContext : _index2.default.__global[eNode.name];\n        if (typeof value == 'undefined') _index.Guard.raise(new _index.Exception(\"Unknown variable in '\" + context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + eNode.name + \"'.\", \"InvalidOperation\", { operationName: context.operation, missingParameterName: eNode.name }));\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        if (!eNode.executable) return eNode;\n        var chain = this.GetMemberChain(eNode);\n        var value;\n        for (var i = 0; i < chain.length; i++) {\n            if (i == 0) value = context.paramContext;else value = value[chain[i].name];\n        }\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand !== eNode.operand) eNode = _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var operandValue = operand.valueType == \"string\" ? \"'\" + operand.value + \"'\" : operand.value;\n        src = \"value = \" + eNode.operator + \" \" + operandValue;\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand !== eNode.operand) eNode = _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        if (eNode.suffix) value = eNode.operator == \"++\" ? operand.value++ : operand.value--;else value = eNode.operator == \"++\" ? ++operand.value : --operand.value;\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitBinary: function VisitBinary(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var leftValue = left.valueType == \"string\" ? \"'\" + left.value + \"'\" : left.value;\n        var rightValue = right.valueType == \"string\" ? \"'\" + right.value + \"'\" : right.value;\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value;\n        var src;\n        var leftValue = left.valueType == \"string\" ? \"'\" + left.value + \"'\" : left.value;\n        var rightValue = right.valueType == \"string\" ? \"'\" + right.value + \"'\" : right.value;\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\n        eval(src);\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression !== eNode.expression || left !== eNode.left || right !== eNode.right) eNode = _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var value = expression.value ? left.value : right.value;\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object !== eNode.object || args != eNode.args) eNode = _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\n        if (!eNode.executable) return eNode;\n        // executing and returning with result as a literal\n        var a = [];\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            var t = _typeof(arg.value);\n            a.push(t == \"string\" ? \"'\" + arg.value + \"'\" : arg.value);\n        }\n        var value;\n        var src = object ? \"value = object.value[eNode.method](\" + a.join(\",\") + \");\" : \"value = \" + eNode.method + \"(\" + a.join(\",\") + \");\";\n        eval(src);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var arrayNode = this.Visit(eNode.array, context);\n        var indexNode = this.Visit(eNode.index, context);\n        var value = arrayNode.value[indexNode.value];\n        return _index2.default.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value === 'undefined' ? 'undefined' : _typeof(value), value);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],90:[function(_dereq_,module,exports){\n'use strict';\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.ExpTreeVisitor', null, null, {\n    constructor: function constructor() {\n        this._deep = 0;\n    },\n    Visit: function Visit(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\n        this._deep = this._deep + 1;\n        var result = null;\n        switch (eNode.type) {\n            case LITERAL:\n                result = this.VisitLiteral(eNode, context);break;\n            case VARIABLE:\n                result = this.VisitVariable(eNode, context);break;\n            case MEMBERACCESS:\n                result = this.VisitMember(eNode, context);break;\n            case BINARY:\n                result = this.VisitBinary(eNode, context);break;\n            case UNARY:\n                result = this.VisitUnary(eNode, context);break;\n            case INCDEC:\n                result = this.VisitIncDec(eNode, context);break;\n            case EQUALITY:\n                result = this.VisitEquality(eNode, context);break;\n            case DECISION:\n                result = this.VisitDecision(eNode, context);break;\n            case METHODCALL:\n                result = this.VisitMethodCall(eNode, context);break;\n            case NEW:\n                result = this.VisitNew(eNode, context);break;\n            case JSONASSIGN:\n                result = this.VisitJsonAssign(eNode, context);break;\n            case ARRAYACCESS:\n                result = this.VisitArrayAccess(eNode, context);break;\n            default:\n                _index.Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n        this._deep = this._deep - 1;\n        return result;\n    },\n    VisitLiteral: function VisitLiteral(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\n\n        return eNode;\n    },\n    VisitVariable: function VisitVariable(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\n\n        return eNode;\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        if (expression === eNode.expression && member === eNode.member) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(eNode.executable, expression, member);\n    },\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\n\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object === eNode.object && args === eNode.args) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\n    },\n    VisitNew: function VisitNew(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitJsonAssign: function VisitJsonAssign(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n        return _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n    GetMemberChain: function GetMemberChain(memberAccess, context) {\n        // { type:MEMBERACCESS, executable:true, expression:, member: }\n        if (memberAccess.expression.type == MEMBERACCESS) {\n            var a = this.GetMemberChain(memberAccess.expression, context);\n            a.push(memberAccess.member);\n            return a;\n        }\n        return [memberAccess.expression, memberAccess.member];\n    }\n}, {});\n\n},{\"../../../TypeSystem/index.js\":32}],91:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ExpressionVisitor', null, null, {\n    constructor: function constructor() {\n        this._deep = 0;\n    },\n\n    Visit: function Visit(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNode\"/>\n\n        //this._deep = this._deep + 1;\n        if (!eNode) {\n            return eNode;\n        }\n\n        var result = null;\n\n        switch (eNode.expressionType) {\n            case _index2.default.Expressions.ParameterExpression:\n                result = this.VisitParameter(eNode, context);\n                break;\n            case _index2.default.Expressions.ConstantExpression:\n                result = this.VisitConstant(eNode, context);\n                break;\n            case _index2.default.Expressions.FunctionExpression:\n                result = this.VisitFunction(eNode, context);\n                break;\n            case _index2.default.Expressions.CallExpression:\n                result = this.VisitCall(eNode, context);\n                break;\n            case _index2.default.Expressions.SimpleBinaryExpression:\n                result = this.VisitBinary(eNode, context);\n                break;\n            case _index2.default.Expressions.PropertyExpression:\n                result = this.VisitProperty(eNode, context);\n                break;\n            //result = th\n            case _index2.default.Expressions.ThisExpression:\n                if (_index2.default.defaults.parameterResolutionCompatibility) {\n                    result = this.VisitThis(eNode, context);\n                } else {\n                    _index.Guard.raise(\"Keyword 'this' is not allowed. You should get value from parameter. (it, p1) => it.Title == p1\");\n                }\n                break;\n            case _index2.default.Expressions.ObjectLiteralExpression:\n                result = this.VisitObjectLiteral(eNode, context);\n                break;\n            case _index2.default.Expressions.ObjectFieldExpression:\n                result = this.VisitObjectField(eNode, context);\n                break;\n            case _index2.default.Expressions.ArrayLiteralExpression:\n                result = this.VisitArrayLiteral(eNode, context);\n                break;\n            case _index2.default.Expressions.UnaryExpression:\n                result = this.VisitUnary(eNode, context);\n                break;\n            case _index2.default.Expressions.EntityContextExpression:\n                result = this.VisitEntityContext(eNode, context);\n                break;\n            default:\n                debugger;\n                break;\n            //case VARIABLE:\n\n            //    result = this.VisitVariable(eNode, context);\n            //    break;\n            //case MEMBERACCESS:\n            //    result = this.VisitMember(eNode, context);\n            //    break;\n            //case BINARY:\n            //    result = this.VisitBinary(eNode, context);\n            //    break;\n            //case UNARY:\n            //    result = this.VisitUnary(eNode, context);\n            //    break;\n            //case INCDEC:\n            //    result = this.VisitIncDec(eNode, context);\n            //    break;\n            //case EQUALITY: result = this.VisitEquality(eNode, context); break;\n            //case DECISION: result = this.VisitDecision(eNode, context); break;\n            //case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\n            //case NEW: result = this.VisitNew(eNode, context); break;\n            //case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\n            //case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\n            //default:\n            //    Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n\n        this._deep = this._deep - 1;\n        return result;\n    },\n\n    VisitArrayLiteral: function VisitArrayLiteral(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ArrayLiteralExpression\" />\n        var self = this;\n        var items = eNode.items.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var result = _index.Container.createArrayLiteralExpression(items);\n        return result;\n    },\n\n    VisitObjectLiteral: function VisitObjectLiteral(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\n        var self = this;\n        var members = eNode.members.map(function (member) {\n            return self.Visit(member, context);\n        });\n        var result = _index.Container.createObjectLiteralExpression(members);\n        return result;\n    },\n\n    VisitObjectField: function VisitObjectField(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var result = _index.Container.createObjectFieldExpression(eNode.fieldName, expression);\n        return result;\n    },\n\n    VisitThis: function VisitThis(eNode, context) {\n        return eNode;\n    },\n    VisitCall: function VisitCall(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\n        var self = this;\n        var args = eNode.args.map(function (arg) {\n            return this.Visit(arg, context);\n        }, this);\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        return new _index2.default.Expressions.CallExpression(expression, member, args);\n    },\n\n    VisitParameter: function VisitParameter(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitConstant: function VisitConstant(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitFunction: function VisitFunction(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\n        var self = this;\n\n        var params = eNode.parameters.map(function (p, i) {\n            return self.Visit(p, context);\n        });\n\n        var body = self.Visit(eNode.body, context);\n        var result = new _index2.default.Expressions.FunctionExpression(eNode.name, params, body);\n        return result;\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        return new _index2.default.Expressions.SimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\n    },\n\n    VisitProperty: function VisitProperty(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        return new _index2.default.Expressions.PropertyExpression(expression, member);\n        //var member =\n    },\n\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.UnaryExpression\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<returns type=\"$data.Expressions.UnaryExpression\"/>\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return new _index2.default.Expressions.UnaryExpression(operand, eNode.operator, eNode.nodeType);\n    },\n\n    VisitEntityContext: function VisitEntityContext(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.EntityContextExpression\" />\n        //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\n        return eNode;\n    },\n\n    VisitDecision: function VisitDecision(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\n\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\n    },\n\n    VisitNew: function VisitNew(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\n\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\n\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n    GetMemberChain: function GetMemberChain(memberAccess, context) {\n        // { type:MEMBERACCESS, executable:true, expression:, member: }\n        if (memberAccess.expression.type == MEMBERACCESS) {\n            var a = this.GetMemberChain(memberAccess.expression, context);\n            a.push(memberAccess.member);\n            return a;\n        }\n        return [memberAccess.expression, memberAccess.member];\n    }\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],92:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.GlobalContextProcessor\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(global) {\n        ///<param name=\"global\" type=\"object\" />\n        this.global = global;\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        return (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.Parameter || _index2.default.defaults.parameterResolutionCompatibility && paramExpression.nodeType == _index2.default.Expressions.ExpressionType.ParameterReference) && this.global && _typeof(this.global) === 'object' && paramExpression.name in this.global;\n    },\n\n    resolve: function resolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\n        var resultValue = this.global[paramExpression.name];\n        var expression = _index.Container.createConstantExpression(resultValue, typeof resultValue === 'undefined' ? 'undefined' : _typeof(resultValue), paramExpression.name);\n        return expression;\n    }\n\n});\n\n(0, _index.$C)(\"$data.Expressions.ConstantValueResolver\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(paramsObject, global, scopeContext) {\n        ///<param name=\"global\" type=\"object\" />\n        this.globalResolver = _index.Container.createGlobalContextProcessor(global);\n        this.paramResolver = _index.Container.createGlobalContextProcessor(paramsObject);\n        this.paramsObject = paramsObject;\n        this.scopeContext = scopeContext;\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        if (_index2.default.defaults.parameterResolutionCompatibility) {\n            return paramExpression.name === '$context' || paramExpression.nodeType == _index2.default.Expressions.ExpressionType.This && this.paramsObject ? true : this.paramResolver.canResolve(paramExpression) || this.globalResolver.canResolve(paramExpression);\n        }\n        return paramExpression.name === '$context' ? true : this.paramResolver.canResolve(paramExpression);\n    },\n\n    resolve: function resolve(paramExpression) {\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\n        if (paramExpression.name === '$context') {\n            return _index.Container.createEntityContextExpression(this.scopeContext);\n        }\n        if (_index2.default.defaults.parameterResolutionCompatibility) {\n            if (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.This) {\n                return _index.Container.createConstantExpression(this.paramsObject, _typeof(this.paramsObject), 'this');\n            }\n            return this.paramResolver.canResolve(paramExpression) ? this.paramResolver.resolve(paramExpression) : this.globalResolver.resolve(paramExpression);\n        }\n        return this.paramResolver.resolve(paramExpression);\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],93:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.LambdaParameterProcessor\", _index2.default.Expressions.ParameterProcessor, null, {\n    constructor: function constructor(lambdaParameterTypeInfos) {\n        ///<param name=\"global\" />\n        ///<param name=\"evalMethod\" />\n        var paramIndices = {};\n        var $idx = \"name\";\n\n        this.canResolve = function (paramExpression, context) {\n            if (paramExpression.nodeType == _index2.default.Expressions.ExpressionType.LambdaParameter) {\n                var fnParams = paramExpression.owningFunction.parameters;\n\n                if (fnParams.length == 1 && paramExpression.name == fnParams[0].name) {\n                    paramIndices[paramExpression.name] = lambdaParameterTypeInfos[0];\n                    return true;\n                }\n\n                for (var j = 0; j < fnParams.length; j++) {\n                    if (fnParams[j].name == paramExpression.name) {\n                        paramIndices[paramExpression.name] = lambdaParameterTypeInfos[j];\n                        return true;\n                    }\n                }\n                return false;\n            }\n            return false;\n        };\n\n        this.resolve = function (paramExpression, context) {\n            var lambdaParamType = paramIndices[paramExpression.name];\n            var result = _index.Container.createParameterExpression(paramExpression.name, lambdaParamType, _index2.default.Expressions.ExpressionType.LambdaParameter);\n            result.owningFunction = paramExpression.owningFunction;\n            return result;\n        };\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],94:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.LocalContextProcessor\", _index2.default.Expressions.GlobalContextProcessor, null, {\n    constructor: function constructor(evalMethod) {\n        ///<param name=\"global\" type=\"object\" />\n        this.canResolve = function (paramExpression) {\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n            return paramExpression.nodeType == _index2.default.Expressions.ExpressionType.Parameter && evalMethod(\"typeof \" + paramExpression.name) !== 'undefined';\n        };\n        this.resolve = function (paramExpression) {\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\n            ///<returns type=\"$data.Expressions.ExpressionNode\" />\n            var resultValue = evalMethod(paramExpression.name);\n            var expression = _index.Container.createConstantExpression(resultValue, typeof resultValue === \"undefined\" ? \"undefined\" : _typeof(resultValue));\n            return expression;\n        };\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],95:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\"use strict\"; // suspicious code\n\n(0, _index.$C)('$data.Expressions.LogicalSchemaBinderVisitor', _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(expression, binder) {},\n\n    VisitProperty: function VisitProperty(expression, context) {\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        var exp = this.Visit(expression.expression, context);\n        var mem = this.Visit(expression.member, context);\n\n        var type = exp.type;\n        var memberType = context.memberResolver.resolve(type, mem.value);\n        mem.type = memberType;\n        return _index.Container.createPropertyExpression(exp, mem);\n    }\n\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],96:[function(_dereq_,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_(\"../../../TypeSystem/index.js\");\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)(\"$data.Expressions.ParameterProcessor\", _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor() {\n        ///<summary>Provides a base class for several ParameterProcessors like GlobalParameterProcessor or LambdaParameterProcessor</summary>\n    },\n\n    Visit: function Visit(node, context) {\n        if ((node instanceof _index2.default.Expressions.ParameterExpression || node instanceof _index2.default.Expressions.ThisExpression) && this.canResolve(node)) {\n            var result = this.resolve(node, context);\n            if (result !== node) result[\"resolvedBy\"] = this.constructor.name;\n            return result;\n        } else {\n            return node;\n        }\n    },\n\n    canResolve: function canResolve(paramExpression) {\n        ///<returns type=\"boolean\" />\n        _index.Guard.raise(\"Pure method\");\n    },\n    resolve: function resolve(paramExpression) {\n        ///<returns type=\"XXX\" />\n        _index.Guard.raise(\"Pure method\");\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],97:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Expressions.ParameterResolverVisitor', _index2.default.Expressions.ExpressionVisitor, null, {\n\n    constructor: function constructor(expression, resolver) {\n        /// <summary>\n        /// ParameterResolverVisitor traverses the JavaScript Code Expression tree and converts\n        /// outer but otherwise execution local variable references into ConstantExpressions-t.\n        /// for example: context.Persons.filter(function(p) { return p.Name == document.location.href })\n        /// is transformed into a constant that has the current href as its value\n        /// </summary>\n        /// <param name=\"expression\"></param>\n        /// <param name=\"resolver\"></param>\n        this.lambdaParamCache = {};\n        this.paramCache = {};\n    },\n\n    Visit: function Visit(expression, resolver) {\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        ///<param name=\"resolver\" type=\"$data.Expressions.Resolver\" />\n        //TODO base call is just ugly\n        return _index2.default.Expressions.ExpressionVisitor.prototype.Visit.call(this, expression, resolver);\n    },\n\n    VisitArrayLiteral: function VisitArrayLiteral(eNode, context) {\n        var self = this;\n        var items = eNode.items.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var allLocal = items.every(function (item) {\n            return item instanceof _index2.default.Expressions.ConstantExpression;\n        });\n\n        if (allLocal) {\n            items = items.map(function (item) {\n                return item.value;\n            });\n            return _index.Container.createConstantExpression(items, \"array\");\n        } else {\n            return _index.Container.createArrayLiteralExpression(items);\n        }\n    },\n\n    VisitObjectLiteral: function VisitObjectLiteral(eNode, context) {\n        var self = this;\n        var members = eNode.members.map(function (item) {\n            return self.Visit(item, context);\n        });\n        var allLocal = members.every(function (member) {\n            return member.expression instanceof _index2.default.Expressions.ConstantExpression;\n        });\n\n        if (allLocal) {\n            var params = members.map(function (member) {\n                return { name: member.fieldName, value: member.expression.value };\n            });\n            var value = eNode.implementation(params);\n            return _index.Container.createConstantExpression(value, typeof value === 'undefined' ? 'undefined' : _typeof(value));\n        } else {\n            return _index.Container.createObjectLiteralExpression(members);\n        }\n    },\n\n    VisitThis: function VisitThis(eNode, resolver) {\n        return resolver.Visit(eNode, resolver);\n    },\n\n    VisitParameter: function VisitParameter(eNode, resolver) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<param name=\"resovler\" type=\"$data.Expressions.ParameterResolver\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n\n        var node;\n        ///TODO let the resolver handle lambdaReferences if it wants to deal with it\n        switch (eNode.nodeType) {\n            case _index2.default.Expressions.ExpressionType.Parameter:\n                node = resolver.Visit(eNode, resolver);\n                this.paramCache[node.name] = node;\n                return node;\n            case _index2.default.Expressions.ExpressionType.ParameterReference:\n                if (_index2.default.defaults.parameterResolutionCompatibility) {\n                    return resolver.Visit(eNode, resolver);\n                }\n\n                var paramNode = this.paramCache[eNode.name];\n                if (paramNode) {\n                    return paramNode;\n                } else {\n                    _index.Guard.raise(\"Missing parameter '\" + eNode.name + \"'\");\n                }\n                break;\n            case _index2.default.Expressions.ExpressionType.LambdaParameter:\n                node = resolver.Visit(eNode, resolver);\n                this.lambdaParamCache[node.name] = node;\n                return node;\n            case _index2.default.Expressions.ExpressionType.LambdaParameterReference:\n                var lambdaParam = this.lambdaParamCache[eNode.name];\n                if (lambdaParam) {\n                    node = _index.Container.createParameterExpression(eNode.name, lambdaParam.type, _index2.default.Expressions.ExpressionType.LambdaParameterReference);\n                    node.paramIndex = eNode.paramIndex;\n                    //node.typeName = lambdaParam.type.name || lambdaParam.type;\n                    return node;\n                }\n                break;\n            default:\n                return eNode;\n\n        }\n\n        return eNode;\n    },\n\n    VisitConstant: function VisitConstant(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\n        return eNode;\n    },\n\n    VisitFunction: function VisitFunction(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\n\n        var self = this;\n        var params = eNode.parameters.map(function (p, i) {\n            var result = self.Visit(p, context);\n            return result;\n        });\n        var body = self.Visit(eNode.body, context);\n        var result = new _index2.default.Expressions.FunctionExpression(eNode.name, params, body);\n\n        return result;\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        var expr = _index2.default.Expressions;\n\n        if (left instanceof expr.ConstantExpression && right instanceof expr.ConstantExpression) {\n            var result = eNode.implementation(left.value, right.value);\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n        }\n        return new _index.Container.createSimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\n    },\n\n    VisitUnary: function VisitUnary(eNode, context) {\n        ///<summary></summary>\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n        ///<param name=\"context\" type=\"Object\"/>\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\n\n        var operand = this.Visit(eNode.operand, context);\n        //var imp = $data.unaryOperators.getOperator(\n        var expr = _index2.default.Expressions;\n        if (operand instanceof expr.ConstantExpression) {\n            var result = eNode.operator.implementation(operand.value);\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result));\n        }\n        return new _index.Container.createUnaryExpression(operand, eNode.operator, eNode.nodeType);\n    },\n\n    VisitProperty: function VisitProperty(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\n        var expression = this.Visit(eNode.expression, context);\n        var member = this.Visit(eNode.member, context);\n        var result;\n        if (expression instanceof _index2.default.Expressions.ConstantExpression && member instanceof _index2.default.Expressions.ConstantExpression) {\n            ///TODO implement checking for the member, throw on error\n            result = eNode.implementation(expression.value, member.value);\n\n            //Method call processed before\n            //if (typeof result === 'function') {\n            //    return new $data.Expressions.ConstantExpression(\n            //        function () { return result.apply(expression.value, arguments); });\n            //}\n            return _index.Container.createConstantExpression(result, typeof result === 'undefined' ? 'undefined' : _typeof(result), expression.name + '$' + member.value);\n        }\n        if (expression === eNode.expression && member === eNode.member) return eNode;\n\n        result = _index.Container.createPropertyExpression(expression, member);\n        return result;\n    },\n\n    VisitCall: function VisitCall(eNode, context) {\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\n        function isExecutable(args, body, obj) {\n            return body instanceof _index2.default.Expressions.ConstantExpression && (\n            //global methods will not have a this.\n            !obj || obj instanceof _index2.default.Expressions.ConstantExpression) && args.every(function (item) {\n                return item instanceof _index2.default.Expressions.ConstantExpression;\n            });\n        }\n        var call = _index2.default.Expressions.ExpressionVisitor.prototype.VisitCall.apply(this, arguments);\n        var obj = call.expression;\n        var body = call.member;\n        var args = call.args;\n\n        function convertToValue(arg) {\n            if (arg instanceof _index2.default.Expressions.ConstantExpression) return arg.value;\n            return arg;\n        };\n\n        if (isExecutable(args, body, obj)) {\n            var fn = body.value;\n            if (typeof fn === 'string' && obj.value) {\n                fn = obj.value[fn];\n            }\n            if (typeof fn !== 'function') {\n                //TODO dig that name out from somewhere\n                _index.Guard.raise(\"Constant expression is not a method...\");\n            }\n            var value = eNode.implementation(obj.value, fn, args.map(convertToValue));\n            return new _index2.default.Expressions.ConstantExpression(value, typeof value === 'undefined' ? 'undefined' : _typeof(value));\n        }\n        return call;\n    }\n}, {});\n(0, _index.$C)(\"$data.Expressions.AggregatedVisitor\", _index2.default.Expressions.ExpressionVisitor, null, {\n    constructor: function constructor(visitors) {\n        ///<param name=\"resolver\" type=\"Array\" elementType=\"$data.Expression.ParameterResolver\" />\n\n        this.Visit = function (node, context) {\n            for (var i = 0; i < visitors.length; i++) {\n                var n = visitors[i].Visit(node, context);\n                if (n !== node) return n;\n            }\n            return node;\n        };\n    }\n\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],98:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Expressions.SetExecutableVisitor', _index2.default.Expressions.ExpTreeVisitor, null, {\n    Visit: function Visit(eNode, context) {\n        switch (eNode.type) {\n            case LITERAL:\n                return this.VisitLiteral(eNode, context);\n            case VARIABLE:\n                return this.VisitVariable(eNode, context);\n            case MEMBERACCESS:\n                return this.VisitMember(eNode, context);\n            case BINARY:\n                return this.VisitBinary(eNode, context);\n            case UNARY:\n                return this.VisitUnary(eNode, context);\n            case INCDEC:\n                return this.VisitIncDec(eNode, context);\n            case EQUALITY:\n                return this.VisitEquality(eNode, context);\n            case DECISION:\n                return this.VisitDecision(eNode, context);\n            case METHODCALL:\n                return this.VisitMethodCall(eNode, context);\n            case NEW:\n                return this.VisitNew(eNode, context);\n            case JSONASSIGN:\n                return this.VisitJsonAssign(eNode, context);\n            case ARRAYACCESS:\n                return this.VisitArrayAccess(eNode, context);\n            default:\n                _index.Guard.raise(\"Type isn't implemented: \" + eNode.type);\n        }\n    },\n\n    VisitBinary: function VisitBinary(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right && left.executable && right.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\n    },\n    VisitUnary: function VisitUnary(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(operand.executable, eNode.operator, operand);\n    },\n    VisitIncDec: function VisitIncDec(eNode, context) {\n        var operand = this.Visit(eNode.operand, context);\n        if (operand === eNode.operand) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(operand.executable, eNode.operator, operand, eNode.suffix);\n    },\n    VisitEquality: function VisitEquality(eNode, context) {\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right && left.executable && right.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\n    },\n    VisitDecision: function VisitDecision(eNode, context) {\n        var expression = this.Visit(eNode.expression, context);\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right && left.executable && right.executable && expression.executable == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(left.executable && right.executable && expression.executable, expression, left, right);\n    },\n    VisitMethodCall: function VisitMethodCall(eNode, context) {\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\n        var args = this.VisitArray(eNode.args, context);\n        if (object === eNode.object && args === eNode.args && (object == null ? true : object.executable) == eNode.executable) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(object == null ? true : object.executable, object, eNode.method, args);\n    },\n    VisitNew: function VisitNew(eNode, context) {\n        // { type:NEW, executable:true, values: [] };\n        var values = this.VisitArray(eNode.values, context);\n        if (values === eNode.values) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\n    },\n    VisitJsonAssign: function VisitJsonAssign(eNode, context) {\n        // { type:JSONASSIGN, executable:true, left: variable, right: right }\n        var left = this.Visit(eNode.left, context);\n        var right = this.Visit(eNode.right, context);\n        if (left === eNode.left && right === eNode.right) return eNode;\n        left.JSONASSIGN = true;\n        right.JSONASSIGN = true;\n        return _index2.default.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\n    },\n    VisitArrayAccess: function VisitArrayAccess(eNode, context) {\n        // { type:ARRAYACCESS, executable:true, array:, index: }\n        var array = this.Visit(eNode.array, context);\n        var index = this.Visit(eNode.index, context);\n        if (array === eNode.array && index === eNode.index) return eNode;\n        return _index2.default.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\n    },\n    VisitArray: function VisitArray(eNodes, context) {\n        var args = [];\n        var ok = true;\n        for (var i = 0; i < eNodes.length; i++) {\n            args[i] = this.Visit(eNodes[i], context);\n            ok = ok && args[i] === eNodes[i];\n        }\n        return ok ? eNodes : args;\n    },\n\n    VisitLiteral: function VisitLiteral(eNode, context) {\n        return { type: eNode.type, executable: true, value: eNode.value, valueType: eNode.valueType };\n    },\n    VisitVariable: function VisitVariable(eNode, context) {\n        if (_typeof(context.paramContext[eNode.name]) == undefined) // isn't param  //TODO: check ParamContext\n            _index.Guard.raise(\"Variable is not defined in the paramContext: \" + eNode.name);\n        //this._setExecutable(eNode, true);\n        return _index2.default.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, \"Math\", \"GLOBALOBJECT\");\n    },\n    VisitMember: function VisitMember(eNode, context) {\n        var chain = this.GetMemberChain(eNode);\n        var firstMember = chain[0].name;\n        var isLambdaParam = context.lambdaParams.indexOf(firstMember) >= 0;\n        var isLocalParam = firstMember == context.paramsName; //TODO: check ParamContext // old: typeof context.paramContext[firstMember] != \"undefined\";\n        if (!isLocalParam && !isLambdaParam) _index.Guard.raise(\"Variable is not defined in the paramContext or the lambda parameters: \" + firstMember);\n\n        return _index2.default.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(isLocalParam, eNode.expression, eNode.member);\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../../TypeSystem/index.js\":32}],99:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _ExpressionNode = _dereq_('./ExpressionNode2.js');\n\nvar _ExpressionNode2 = _interopRequireDefault(_ExpressionNode);\n\nvar _ArrayLiteralExpression = _dereq_('./ArrayLiteralExpression.js');\n\nvar _ArrayLiteralExpression2 = _interopRequireDefault(_ArrayLiteralExpression);\n\nvar _CallExpression = _dereq_('./CallExpression.js');\n\nvar _CallExpression2 = _interopRequireDefault(_CallExpression);\n\nvar _CodeParser = _dereq_('./CodeParser.js');\n\nvar _CodeParser2 = _interopRequireDefault(_CodeParser);\n\nvar _ConstantExpression = _dereq_('./ConstantExpression.js');\n\nvar _ConstantExpression2 = _interopRequireDefault(_ConstantExpression);\n\nvar _FunctionExpression = _dereq_('./FunctionExpression.js');\n\nvar _FunctionExpression2 = _interopRequireDefault(_FunctionExpression);\n\nvar _ObjectFieldExpression = _dereq_('./ObjectFieldExpression.js');\n\nvar _ObjectFieldExpression2 = _interopRequireDefault(_ObjectFieldExpression);\n\nvar _ObjectLiteralExpression = _dereq_('./ObjectLiteralExpression.js');\n\nvar _ObjectLiteralExpression2 = _interopRequireDefault(_ObjectLiteralExpression);\n\nvar _PagingExpression = _dereq_('./PagingExpression.js');\n\nvar _PagingExpression2 = _interopRequireDefault(_PagingExpression);\n\nvar _ParameterExpression = _dereq_('./ParameterExpression.js');\n\nvar _ParameterExpression2 = _interopRequireDefault(_ParameterExpression);\n\nvar _PropertyExpression = _dereq_('./PropertyExpression.js');\n\nvar _PropertyExpression2 = _interopRequireDefault(_PropertyExpression);\n\nvar _SimpleBinaryExpression = _dereq_('./SimpleBinaryExpression.js');\n\nvar _SimpleBinaryExpression2 = _interopRequireDefault(_SimpleBinaryExpression);\n\nvar _ThisExpression = _dereq_('./ThisExpression.js');\n\nvar _ThisExpression2 = _interopRequireDefault(_ThisExpression);\n\nvar _ExpressionVisitor = _dereq_('./Visitors/ExpressionVisitor.js');\n\nvar _ExpressionVisitor2 = _interopRequireDefault(_ExpressionVisitor);\n\nvar _ParameterProcessor = _dereq_('./Visitors/ParameterProcessor.js');\n\nvar _ParameterProcessor2 = _interopRequireDefault(_ParameterProcessor);\n\nvar _GlobalContextProcessor = _dereq_('./Visitors/GlobalContextProcessor.js');\n\nvar _GlobalContextProcessor2 = _interopRequireDefault(_GlobalContextProcessor);\n\nvar _LocalContextProcessor = _dereq_('./Visitors/LocalContextProcessor.js');\n\nvar _LocalContextProcessor2 = _interopRequireDefault(_LocalContextProcessor);\n\nvar _LambdaParameterProcessor = _dereq_('./Visitors/LambdaParameterProcessor.js');\n\nvar _LambdaParameterProcessor2 = _interopRequireDefault(_LambdaParameterProcessor);\n\nvar _ParameterResolverVisitor = _dereq_('./Visitors/ParameterResolverVisitor.js');\n\nvar _ParameterResolverVisitor2 = _interopRequireDefault(_ParameterResolverVisitor);\n\nvar _LogicalSchemaBinderVisitor = _dereq_('./Visitors/LogicalSchemaBinderVisitor.js');\n\nvar _LogicalSchemaBinderVisitor2 = _interopRequireDefault(_LogicalSchemaBinderVisitor);\n\nvar _ExpTreeVisitor = _dereq_('./Visitors/ExpTreeVisitor.js');\n\nvar _ExpTreeVisitor2 = _interopRequireDefault(_ExpTreeVisitor);\n\nvar _SetExecutableVisitor = _dereq_('./Visitors/SetExecutableVisitor.js');\n\nvar _SetExecutableVisitor2 = _interopRequireDefault(_SetExecutableVisitor);\n\nvar _ExecutorVisitor = _dereq_('./Visitors/ExecutorVisitor.js');\n\nvar _ExecutorVisitor2 = _interopRequireDefault(_ExecutorVisitor);\n\nvar _ExpressionBuilder = _dereq_('./ExpressionBuilder.js');\n\nvar _ExpressionBuilder2 = _interopRequireDefault(_ExpressionBuilder);\n\nvar _AssociationInfoExpression = _dereq_('./EntityExpressions/AssociationInfoExpression.js');\n\nvar _AssociationInfoExpression2 = _interopRequireDefault(_AssociationInfoExpression);\n\nvar _CodeExpression = _dereq_('./EntityExpressions/CodeExpression.js');\n\nvar _CodeExpression2 = _interopRequireDefault(_CodeExpression);\n\nvar _CodeToEntityConverter = _dereq_('./EntityExpressions/CodeToEntityConverter.js');\n\nvar _CodeToEntityConverter2 = _interopRequireDefault(_CodeToEntityConverter);\n\nvar _ComplexTypeExpression = _dereq_('./EntityExpressions/ComplexTypeExpression.js');\n\nvar _ComplexTypeExpression2 = _interopRequireDefault(_ComplexTypeExpression);\n\nvar _EntityContextExpression = _dereq_('./EntityExpressions/EntityContextExpression.js');\n\nvar _EntityContextExpression2 = _interopRequireDefault(_EntityContextExpression);\n\nvar _EntityExpression = _dereq_('./EntityExpressions/EntityExpression.js');\n\nvar _EntityExpression2 = _interopRequireDefault(_EntityExpression);\n\nvar _EntityExpressionVisitor = _dereq_('./EntityExpressions/EntityExpressionVisitor.js');\n\nvar _EntityExpressionVisitor2 = _interopRequireDefault(_EntityExpressionVisitor);\n\nvar _ExpressionMonitor = _dereq_('./EntityExpressions/ExpressionMonitor.js');\n\nvar _ExpressionMonitor2 = _interopRequireDefault(_ExpressionMonitor);\n\nvar _EntityFieldExpression = _dereq_('./EntityExpressions/EntityFieldExpression.js');\n\nvar _EntityFieldExpression2 = _interopRequireDefault(_EntityFieldExpression);\n\nvar _EntityFieldOperationExpression = _dereq_('./EntityExpressions/EntityFieldOperationExpression.js');\n\nvar _EntityFieldOperationExpression2 = _interopRequireDefault(_EntityFieldOperationExpression);\n\nvar _EntitySetExpression = _dereq_('./EntityExpressions/EntitySetExpression.js');\n\nvar _EntitySetExpression2 = _interopRequireDefault(_EntitySetExpression);\n\nvar _FrameOperationExpression = _dereq_('./EntityExpressions/FrameOperationExpression.js');\n\nvar _FrameOperationExpression2 = _interopRequireDefault(_FrameOperationExpression);\n\nvar _FilterExpression = _dereq_('./EntityExpressions/FilterExpression.js');\n\nvar _FilterExpression2 = _interopRequireDefault(_FilterExpression);\n\nvar _IncludeExpression = _dereq_('./EntityExpressions/IncludeExpression.js');\n\nvar _IncludeExpression2 = _interopRequireDefault(_IncludeExpression);\n\nvar _MemberInfoExpression = _dereq_('./EntityExpressions/MemberInfoExpression.js');\n\nvar _MemberInfoExpression2 = _interopRequireDefault(_MemberInfoExpression);\n\nvar _OrderExpression = _dereq_('./EntityExpressions/OrderExpression.js');\n\nvar _OrderExpression2 = _interopRequireDefault(_OrderExpression);\n\nvar _ParametricQueryExpression = _dereq_('./EntityExpressions/ParametricQueryExpression.js');\n\nvar _ParametricQueryExpression2 = _interopRequireDefault(_ParametricQueryExpression);\n\nvar _ProjectionExpression = _dereq_('./EntityExpressions/ProjectionExpression.js');\n\nvar _ProjectionExpression2 = _interopRequireDefault(_ProjectionExpression);\n\nvar _QueryExpressionCreator = _dereq_('./EntityExpressions/QueryExpressionCreator.js');\n\nvar _QueryExpressionCreator2 = _interopRequireDefault(_QueryExpressionCreator);\n\nvar _QueryParameterExpression = _dereq_('./EntityExpressions/QueryParameterExpression.js');\n\nvar _QueryParameterExpression2 = _interopRequireDefault(_QueryParameterExpression);\n\nvar _RepresentationExpression = _dereq_('./EntityExpressions/RepresentationExpression.js');\n\nvar _RepresentationExpression2 = _interopRequireDefault(_RepresentationExpression);\n\nvar _ServiceOperationExpression = _dereq_('./EntityExpressions/ServiceOperationExpression.js');\n\nvar _ServiceOperationExpression2 = _interopRequireDefault(_ServiceOperationExpression);\n\nvar _ContinuationExpressionBuilder = _dereq_('./ContinuationExpressionBuilder.js');\n\nvar _ContinuationExpressionBuilder2 = _interopRequireDefault(_ContinuationExpressionBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.defaults = _index2.default.defaults || {};\n_index2.default.defaults.parameterResolutionCompatibility = true;\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32,\"./ArrayLiteralExpression.js\":52,\"./CallExpression.js\":53,\"./CodeParser.js\":54,\"./ConstantExpression.js\":55,\"./ContinuationExpressionBuilder.js\":56,\"./EntityExpressions/AssociationInfoExpression.js\":57,\"./EntityExpressions/CodeExpression.js\":58,\"./EntityExpressions/CodeToEntityConverter.js\":59,\"./EntityExpressions/ComplexTypeExpression.js\":60,\"./EntityExpressions/EntityContextExpression.js\":61,\"./EntityExpressions/EntityExpression.js\":62,\"./EntityExpressions/EntityExpressionVisitor.js\":63,\"./EntityExpressions/EntityFieldExpression.js\":64,\"./EntityExpressions/EntityFieldOperationExpression.js\":65,\"./EntityExpressions/EntitySetExpression.js\":66,\"./EntityExpressions/ExpressionMonitor.js\":67,\"./EntityExpressions/FilterExpression.js\":68,\"./EntityExpressions/FrameOperationExpression.js\":69,\"./EntityExpressions/IncludeExpression.js\":70,\"./EntityExpressions/MemberInfoExpression.js\":71,\"./EntityExpressions/OrderExpression.js\":72,\"./EntityExpressions/ParametricQueryExpression.js\":73,\"./EntityExpressions/ProjectionExpression.js\":74,\"./EntityExpressions/QueryExpressionCreator.js\":75,\"./EntityExpressions/QueryParameterExpression.js\":76,\"./EntityExpressions/RepresentationExpression.js\":77,\"./EntityExpressions/ServiceOperationExpression.js\":78,\"./ExpressionBuilder.js\":79,\"./ExpressionNode2.js\":80,\"./FunctionExpression.js\":81,\"./ObjectFieldExpression.js\":82,\"./ObjectLiteralExpression.js\":83,\"./PagingExpression.js\":84,\"./ParameterExpression.js\":85,\"./PropertyExpression.js\":86,\"./SimpleBinaryExpression.js\":87,\"./ThisExpression.js\":88,\"./Visitors/ExecutorVisitor.js\":89,\"./Visitors/ExpTreeVisitor.js\":90,\"./Visitors/ExpressionVisitor.js\":91,\"./Visitors/GlobalContextProcessor.js\":92,\"./Visitors/LambdaParameterProcessor.js\":93,\"./Visitors/LocalContextProcessor.js\":94,\"./Visitors/LogicalSchemaBinderVisitor.js\":95,\"./Visitors/ParameterProcessor.js\":96,\"./Visitors/ParameterResolverVisitor.js\":97,\"./Visitors/SetExecutableVisitor.js\":98}],100:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ItemStoreClass', null, null, {\n    constructor: function constructor() {\n        var self = this;\n        self.itemStoreConfig = {\n            aliases: {},\n            contextTypes: {}\n        };\n\n        self.resetStoreToDefault('local', true);\n        _index2.default.addStore = function () {\n            return self.addItemStoreAlias.apply(self, arguments);\n        };\n        _index2.default.implementation = self.implementation;\n\n        _index2.default.Entity.addMember('storeToken', {\n            get: function get() {\n                if (this.storeConfigs && this.storeConfigs['default']) return this.storeConfigs.stores[this.storeConfigs['default']];\n            },\n            set: function set(value) {\n                self._setTypeStoreConfig(this, 'default', value);\n            }\n        }, true);\n    },\n    itemStoreConfig: {},\n    attachMode: _index2.default.EntityAttachMode ? _index2.default.EntityAttachMode.KeepChanges : true,\n\n    addItemStoreAlias: function addItemStoreAlias(name, contextFactoryOrToken, isDefault) {\n        var self = this;\n        var promise = new _index2.default.PromiseHandler();\n        var callback = promise.createCallback();\n\n        if ('string' === typeof name) {\n            //storeToken\n            if ('object' === (typeof contextFactoryOrToken === 'undefined' ? 'undefined' : _typeof(contextFactoryOrToken)) && 'factory' in contextFactoryOrToken) {\n                var type = _index.Container.resolveType(contextFactoryOrToken.typeName);\n\n                self.itemStoreConfig.aliases[name] = contextFactoryOrToken.factory;\n                self.itemStoreConfig.contextTypes[name] = type;\n                if (isDefault) {\n                    self.itemStoreConfig['default'] = name;\n                }\n\n                callback.success();\n                return promise.getPromise();\n            }\n            //contextFactory\n            else if ('function' === typeof contextFactoryOrToken) {\n                    var preContext = contextFactoryOrToken();\n                    var contextPromise;\n                    if (preContext && preContext instanceof _index2.default.EntityContext) {\n                        callback.success(preContext);\n                        contextPromise = promise.getPromise();\n                    } else {\n                        contextPromise = preContext;\n                    }\n\n                    return contextPromise.then(function (ctx) {\n                        if (typeof ctx === 'function') {\n                            //factory resolve factory\n                            return self.addItemStoreAlias(name, ctx, isDefault);\n                        }\n\n                        if (ctx instanceof _index2.default.EntityContext) {\n                            return ctx.onReady().then(function (ctx) {\n                                self.itemStoreConfig.aliases[name] = contextFactoryOrToken;\n                                self.itemStoreConfig.contextTypes[name] = ctx.getType();\n                                if (isDefault) {\n                                    self.itemStoreConfig['default'] = name;\n                                }\n\n                                return ctx;\n                            });\n                        } else {\n                            promise = new _index2.default.PromiseHandler();\n                            callback = promise.createCallback();\n                            callback.error(new _index.Exception('factory dont have context instance', 'Invalid arguments'));\n                            return promise.getPromise();\n                        }\n                    });\n                }\n        }\n\n        callback.error(new _index.Exception('Name or factory missing', 'Invalid arguments'));\n        return promise.getPromise();\n    },\n    resetStoreToDefault: function resetStoreToDefault(name, isDefault) {\n        this.itemStoreConfig.aliases[name] = this._getDefaultItemStoreFactory;\n        delete this.itemStoreConfig.contextTypes[name];\n        if (isDefault) {\n            this.itemStoreConfig['default'] = name;\n        }\n    },\n    _setStoreAlias: function _setStoreAlias(entity, storeToken) {\n        if ('object' === (typeof storeToken === 'undefined' ? 'undefined' : _typeof(storeToken)) && !entity.storeToken) entity.storeToken = storeToken;\n        return entity;\n    },\n    _getStoreAlias: function _getStoreAlias(entity, storeAlias) {\n        var type;\n        if (entity instanceof _index2.default.Entity) {\n            var alias = storeAlias || entity.storeToken;\n            if (alias) {\n                return alias;\n            } else {\n                type = entity.getType();\n            }\n        } else {\n            type = entity;\n        }\n\n        return storeAlias || (type.storeConfigs ? type.storeConfigs['default'] : undefined) || type.storeToken;\n    },\n    _getStoreContext: function _getStoreContext(aliasOrToken, type, nullIfInvalid) {\n        var contextPromise = this._getContextPromise(aliasOrToken, type);\n\n        if (!contextPromise || contextPromise instanceof _index2.default.EntityContext) {\n            var promise = new _index2.default.PromiseHandler();\n            var callback = promise.createCallback();\n            callback.success(contextPromise);\n            contextPromise = promise.getPromise();\n        }\n\n        return contextPromise.then(function (context) {\n            if (context instanceof _index2.default.EntityContext) {\n                return context.onReady();\n            } else if (nullIfInvalid) {\n                return null;\n            } else {\n                var promise = new _index2.default.PromiseHandler();\n                var callback = promise.createCallback();\n                callback.error(new _index.Exception('factory return type error', 'Error'));\n                return promise.getPromise();\n            }\n        });\n    },\n    _getContextPromise: function _getContextPromise(aliasOrToken, type) {\n        /*Token*/\n        if (aliasOrToken && 'object' === (typeof aliasOrToken === 'undefined' ? 'undefined' : _typeof(aliasOrToken)) && 'function' === typeof aliasOrToken.factory) {\n            return aliasOrToken.factory(type);\n        } else if (aliasOrToken && 'object' === (typeof aliasOrToken === 'undefined' ? 'undefined' : _typeof(aliasOrToken)) && 'object' === _typeof(aliasOrToken.args) && 'string' === typeof aliasOrToken.typeName) {\n            var type = _index.Container.resolveType(aliasOrToken.typeName);\n            return new type(JSON.parse(JSON.stringify(aliasOrToken.args)));\n        }\n        /*resolve alias from type (Token)*/\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken] && typeof type.storeConfigs.stores[aliasOrToken].factory === 'function') {\n                return type.storeConfigs.stores[aliasOrToken].factory();\n            }\n            /*resolve alias from type (constructor options)*/\n            else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken]) {\n                    return this._getDefaultItemStoreFactory(type, type.storeConfigs.stores[aliasOrToken]);\n                }\n                /*resolve alias from ItemStore (factories)*/\n                else if (aliasOrToken && 'string' === typeof aliasOrToken && this.itemStoreConfig.aliases[aliasOrToken]) {\n                        return this.itemStoreConfig.aliases[aliasOrToken](type);\n                    }\n                    /*token is factory*/\n                    else if (aliasOrToken && 'function' === typeof aliasOrToken) {\n                            return aliasOrToken();\n                        }\n                        /*default no hint*/\n                        else {\n                                return this.itemStoreConfig.aliases[this.itemStoreConfig['default']](type);\n                            }\n    },\n    _getStoreEntitySet: function _getStoreEntitySet(storeAlias, instanceOrType) {\n        var aliasOrToken = this._getStoreAlias(instanceOrType, storeAlias);\n        var type = \"function\" === typeof instanceOrType ? instanceOrType : instanceOrType.getType();;\n\n        return this._getStoreContext(aliasOrToken, type).then(function (ctx) {\n            var entitySet = ctx.getEntitySetFromElementType(type);\n            if (!entitySet) {\n                var d = new _index2.default.PromiseHandler();\n                var callback = d.createCallback();\n                callback.error(\"EntitySet not exist for \" + type.fullName);\n                return d.getPromise();\n            }\n            return entitySet;\n        });\n    },\n    _getDefaultItemStoreFactory: function _getDefaultItemStoreFactory(instanceOrType, initStoreConfig) {\n        if (instanceOrType) {\n            var type = \"function\" === typeof instanceOrType ? instanceOrType : instanceOrType.getType();\n            var typeName = _index2.default.Container.resolveName(type) + \"_items\";\n            var typeName = typeName.replace(/\\./g, \"_\");\n\n            var storeConfig = _index2.default.typeSystem.extend({\n                collectionName: initStoreConfig && initStoreConfig.collectionName ? initStoreConfig.collectionName : 'Items',\n                tableName: typeName,\n                initParam: { provider: 'local', databaseName: typeName }\n            }, initStoreConfig);\n\n            var contextDef = {};\n            contextDef[storeConfig.collectionName] = { type: _index2.default.EntitySet, elementType: type };\n            if (storeConfig.tableName) contextDef[storeConfig.collectionName]['tableName'] = storeConfig.tableName;\n\n            var inMemoryType = _index2.default.EntityContext.extend(typeName, contextDef);\n            var ctx = new inMemoryType(storeConfig.initParam);\n            if (initStoreConfig && (typeof initStoreConfig === 'undefined' ? 'undefined' : _typeof(initStoreConfig)) === 'object') initStoreConfig.factory = ctx._storeToken.factory;\n            return ctx;\n        }\n        return undefined;\n    },\n    implementation: function implementation(name, contextOrAlias) {\n        var self = _index2.default.ItemStore;\n        var result;\n\n        if (typeof contextOrAlias === 'string') {\n            contextOrAlias = self.itemStoreConfig.contextTypes[contextOrAlias];\n        } else if (contextOrAlias instanceof _index2.default.EntityContext) {\n            contextOrAlias = contextOrAlias.getType();\n        } else if (!(typeof contextOrAlias === 'function' && contextOrAlias.isAssignableTo)) {\n            contextOrAlias = self.itemStoreConfig.contextTypes[self.itemStoreConfig['default']];\n        }\n\n        if (contextOrAlias) {\n            result = self._resolveFromContext(contextOrAlias, name);\n        }\n\n        if (!result) {\n            result = _index.Container.resolveType(name);\n        }\n\n        return result;\n    },\n    _resolveFromContext: function _resolveFromContext(contextType, name) {\n        var memDefs = contextType.memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < memDefs.length; i++) {\n            var memDef = memDefs[i];\n            if (memDef.type) {\n                var memDefType = _index.Container.resolveType(memDef.type);\n                if (memDefType.isAssignableTo && memDefType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(memDef.elementType);\n                    if (elementType.name === name) {\n                        return elementType;\n                    }\n                }\n            }\n        }\n        return null;\n    },\n\n    //Entity Instance\n    EntityInstanceSave: function EntityInstanceSave(storeAlias, hint, attachMode) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        return self._getStoreEntitySet(storeAlias, entity).then(function (entitySet) {\n            return self._getSaveMode(entity, entitySet, hint, storeAlias).then(function (mode) {\n                mode = mode || 'add';\n                switch (mode) {\n                    case 'add':\n                        entitySet.add(entity);\n                        break;\n                    case 'attach':\n                        entitySet.attach(entity, attachMode || true);\n                        break;\n                    default:\n                        var d = new _index2.default.PromiseHandler();\n                        var callback = d.createCallback();\n                        callback.error('save mode not supported: ' + mode);\n                        return d.getPromise();\n                }\n\n                return entitySet.entityContext.saveChanges().then(function () {\n                    self._setStoreAlias(entity, entitySet.entityContext.storeToken);return entity;\n                });\n            });\n        });\n    },\n    EntityInstanceRemove: function EntityInstanceRemove(storeAlias) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        return self._getStoreEntitySet(storeAlias, entity).then(function (entitySet) {\n            entitySet.remove(entity);\n\n            return entitySet.entityContext.saveChanges().then(function () {\n                return entity;\n            });\n        });\n    },\n    EntityInstanceRefresh: function EntityInstanceRefresh(storeAlias, keepStore) {\n        var self = _index2.default.ItemStore;\n        var entity = this;\n        var entityType = entity.getType();\n\n        var key = self._getKeyObjectFromEntity(entity, entityType);\n\n        return entityType.read(key, storeAlias).then(function (loadedEntity) {\n            entityType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n                entity[memDef.name] = loadedEntity[memDef.name];\n            });\n            entity.storeToken = (keepStore ? entity.storeToken : undefined) || loadedEntity.storeToken;\n            entity.changedProperties = undefined;\n            return entity;\n        });\n    },\n\n    //Entity Type\n    EntityInheritedTypeProcessor: function EntityInheritedTypeProcessor(type) {\n        var self = _index2.default.ItemStore;\n        type.readAll = self.EntityTypeReadAll(type);\n        type.read = self.EntityTypeRead(type);\n        type.removeAll = self.EntityTypeRemoveAll(type);\n        type.remove = self.EntityTypeRemove(type);\n        type.get = self.EntityTypeGet(type); //Not complete\n        type.save = self.EntityTypeSave(type);\n        type.addMany = self.EntityTypeAddMany(type);\n        type.itemCount = self.EntityTypeItemCount(type);\n        type.query = self.EntityTypeQuery(type);\n        type.takeFirst = self.EntityTypeTakeFirst(type);\n\n        type.setStore = self.EntityTypeSetStore(type);\n    },\n    EntityTypeReadAll: function EntityTypeReadAll(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.forEach(function (item) {\n                    self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n    EntityTypeRemoveAll: function EntityTypeRemoveAll(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.toArray().then(function (items) {\n                    items.forEach(function (item) {\n                        entitySet.remove(item);\n                    });\n\n                    return entitySet.entityContext.saveChanges().then(function () {\n                        return items;\n                    });\n                });\n            });\n        };\n    },\n    EntityTypeRead: function EntityTypeRead(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                try {\n                    var singleParam = self._findByIdQueryable(entitySet, key);\n                    return entitySet.single(singleParam.predicate, singleParam.thisArgs).then(function (item) {\n                        return self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                    });\n                } catch (e) {\n                    var d = new _index2.default.PromiseHandler();\n                    var callback = d.createCallback();\n                    callback.error(e);\n                    return d.getPromise();\n                }\n            });\n        };\n    },\n    EntityTypeGet: function EntityTypeGet(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            var item = new type(self._getKeyObjectFromEntity(key));\n            item.refresh(storeAlias);\n            return item;\n        };\n    },\n    EntityTypeSave: function EntityTypeSave(type) {\n        return function (initData, storeAlias, hint) {\n\n            var self = _index2.default.ItemStore;\n            var instance = new type(initData);\n            return instance.save(storeAlias, hint);\n        };\n    },\n    EntityTypeAddMany: function EntityTypeAddMany(type) {\n        return function (initDatas, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                var items = entitySet.addMany(initDatas);\n                return entitySet.entityContext.saveChanges().then(function () {\n                    return items;\n                });\n            });\n        };\n    },\n    EntityTypeRemove: function EntityTypeRemove(type) {\n        return function (key, storeAlias) {\n            var self = _index2.default.ItemStore;\n            var entityPk = type.memberDefinitions.getKeyProperties();\n            var entity;\n            if (entityPk.length === 1) {\n                var obj = {};\n                obj[entityPk[0].name] = key;\n                entity = new type(obj);\n            } else {\n                entity = new type(key);\n            }\n            return entity.remove(storeAlias);\n        };\n    },\n    EntityTypeItemCount: function EntityTypeItemCount(type) {\n        return function (storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.length();\n            });\n        };\n    },\n    EntityTypeQuery: function EntityTypeQuery(type) {\n        return function (predicate, thisArg, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.filter(predicate, thisArg).forEach(function (item) {\n                    self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n    EntityTypeTakeFirst: function EntityTypeTakeFirst(type) {\n        return function (predicate, thisArg, storeAlias) {\n            var self = _index2.default.ItemStore;\n            return self._getStoreEntitySet(storeAlias, type).then(function (entitySet) {\n                return entitySet.first(predicate, thisArg).then(function (item) {\n                    return self._setStoreAlias(item, entitySet.entityContext.storeToken);\n                });\n            });\n        };\n    },\n\n    EntityTypeSetStore: function EntityTypeSetStore(type) {\n        return function (name, config) {\n            if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object' && typeof config === 'undefined') {\n                config = name;\n                name = 'default';\n            }\n\n            var self = _index2.default.ItemStore;\n\n            var defStoreConfig = {};\n            if (config) {\n                if (config.tableName) {\n                    defStoreConfig.tableName = config.tableName;\n                    delete config.tableName;\n                }\n\n                if (config.collectionName) {\n                    defStoreConfig.collectionName = config.collectionName;\n                    delete config.collectionName;\n                }\n\n                if (typeof config.dataSource === 'string') {\n                    var ds = config.dataSource;\n                    if (ds.lastIndexOf('/') === ds.length - 1) {\n                        ds = ds.substring(0, ds.lastIndexOf('/'));\n                    }\n                    var parsedApiUrl = ds.substring(0, ds.lastIndexOf('/'));\n                    if (!defStoreConfig.tableName) defStoreConfig.tableName = ds.substring(ds.lastIndexOf('/') + 1);\n\n                    var provider = config.provider || config.name;\n                    switch (provider) {\n                        case 'oData':\n                            config.oDataServiceHost = config.oDataServiceHost || parsedApiUrl;\n                            break;\n                        case 'webApi':\n                            config.apiUrl = config.apiUrl || parsedApiUrl;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            } else {\n                config = { name: 'local' };\n            }\n\n            defStoreConfig.initParam = config;\n            self._setTypeStoreConfig(type, name, defStoreConfig);\n\n            return type;\n        };\n    },\n    _setTypeStoreConfig: function _setTypeStoreConfig(type, name, config) {\n        if (!type.storeConfigs) {\n            type.storeConfigs = {\n                stores: {}\n            };\n        }\n        type.storeConfigs.stores[name] = config;\n        if (name === 'default') {\n            type.storeConfigs['default'] = name;\n        }\n    },\n\n    _findByIdQueryable: function _findByIdQueryable(set, keys) {\n        var keysProps = set.defaultType.memberDefinitions.getKeyProperties();\n        if (keysProps.length > 1 && keys && 'object' === (typeof keys === 'undefined' ? 'undefined' : _typeof(keys))) {\n            var predicate = \"\",\n                thisArgs = {};\n            for (var i = 0; i < keysProps.length; i++) {\n                if (i > 0) predicate += \" && \";\n\n                var key = keysProps[i];\n                predicate += \"it.\" + key.name + \" == this.\" + key.name;\n                thisArgs[key.name] = keys[key.name];\n            }\n\n            return {\n                predicate: predicate,\n                thisArgs: thisArgs\n            };\n        } else if (keysProps.length === 1) {\n            return {\n                predicate: \"it.\" + keysProps[0].name + \" == this.value\",\n                thisArgs: { value: keys }\n            };\n        } else {\n            throw 'invalid keys';\n        }\n    },\n    _getKeyObjectFromEntity: function _getKeyObjectFromEntity(obj, entityType) {\n        var key;\n        var keyDefs = entityType.memberDefinitions.getKeyProperties();\n        if (keyDefs.length === 1) key = obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' ? obj[keyDefs[0].name] : obj;else {\n            key = {};\n\n            for (var i = 0; i < keyDefs.length; i++) {\n                key[keyDefs[0].name] = obj ? obj[keyDefs[0].name] : obj;\n            }\n        }\n\n        return key;\n    },\n    _getSaveMode: function _getSaveMode(entity, entitySet, hint, storeAlias) {\n        var self = this;\n        var promise = new _index2.default.PromiseHandler();\n        var callback = promise.createCallback();\n        var entityType = entity.getType();\n\n        switch (true) {\n            case hint === 'update':\n                callback.success('attach');break;\n            case hint === 'new':\n                callback.success('add');break;\n            case false === entityType.memberDefinitions.getKeyProperties().every(function (keyDef) {\n                return entity[keyDef.name];\n            }):\n                callback.success('add');break;\n            case !!entity.storeToken:\n                callback.success('attach');break;\n                break;\n            default:\n                //use the current entity store informations\n                storeAlias = this._getStoreAlias(entity, storeAlias);\n                entityType.read(self._getKeyObjectFromEntity(entity, entityType), storeAlias).then(function () {\n                    callback.success('attach');\n                }, function () {\n                    callback.success('add');\n                });\n                break;\n        }\n\n        return promise.getPromise();\n    },\n\n    //EntityContext\n    ContextRegister: function ContextRegister(storageProviderCfg) {\n        //context instance\n        var self = this;\n        if (typeof storageProviderCfg.name === \"string\") {\n            storageProviderCfg.name = [storageProviderCfg.name];\n        }\n\n        var args = JSON.parse(JSON.stringify(storageProviderCfg));\n        this.storeToken = {\n            typeName: this.getType().fullName,\n            args: args,\n            factory: function factory() {\n                return new (self.getType())(args);\n            }\n        };\n\n        //set elementType storetoken\n        var members = this.getType().memberDefinitions.getPublicMappedProperties();\n        for (var i = 0; i < members.length; i++) {\n            var item = members[i];\n            if (item.type) {\n                var itemResolvedDataType = _index.Container.resolveType(item.type);\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo(_index2.default.EntitySet)) {\n                    var elementType = _index.Container.resolveType(item.elementType);\n                    if (!elementType.storeToken) {\n                        elementType.storeToken = this.storeToken;\n                    }\n                }\n            }\n        }\n    },\n    QueryResultModifier: function QueryResultModifier(query) {\n        var self = _index2.default.ItemStore;\n        var context = query.context;\n        var type = query.modelBinderConfig.$type;\n        if ('string' === typeof type) {\n            type = _index.Container.resolveType(type);\n        }\n\n        if (type === _index2.default.Array && query.modelBinderConfig.$item && query.modelBinderConfig.$item.$type) {\n            type = query.modelBinderConfig.$item.$type;\n        }\n\n        //TODO: runs when model binding missed (inmemory)\n        if (typeof type === 'undefined' && query.result && query.result[0] instanceof _index2.default.Entity) {\n            var navProps = !type ? [] : type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\n                return !!memDef.inverseProperty;\n            });\n\n            for (var i = 0; i < query.result.length; i++) {\n                self._setStoreAlias(query.result[i], context.storeToken);\n\n                for (var j = 0; j < navProps.length; j++) {\n                    var navProp = navProps[j];\n                    if (query.result[i][navProp.name] instanceof _index2.default.Entity) {\n                        self._setStoreAlias(query.result[i][navProp.name], context.storeToken);\n                    } else if (Array.isArray(query.result[i][navProp.name])) {\n                        for (var k = 0; k < query.result[i][navProp.name].length; k++) {\n                            if (query.result[i][navProp.name][k] instanceof _index2.default.Entity) {\n                                self._setStoreAlias(query.result[i][navProp.name][k], context.storeToken);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n});\n_index2.default.ItemStore = new _index2.default.ItemStoreClass();\n\n_index2.default.Entity.addMember('field', function (propName) {\n    var def = this.memberDefinitions.getMember(propName);\n    if (def) {\n        if (def.definedBy === this) {\n            return new _index2.default.MemberWrapper(def);\n        } else {\n            _index.Guard.raise(new _index.Exception(\"Member '\" + propName + \"' defined on '\" + def.definedBy.fullName + \"'!\", 'Invalid Operation'));\n        }\n    } else {\n        _index.Guard.raise(new _index.Exception(\"Member '\" + propName + \"' not exists!\", 'Invalid Operation'));\n    }\n\n    return this;\n}, true);\n\n_index2.default.Class.define('$data.MemberWrapper', null, null, {\n    constructor: function constructor(memberDefinition) {\n        this.memberDefinition = memberDefinition;\n    },\n    setKey: function setKey(value) {\n        this.memberDefinition.key = value || value === undefined ? true : false;\n        return this;\n    },\n    setComputed: function setComputed(value) {\n        this.memberDefinition.computed = value || value === undefined ? true : false;\n        return this;\n    },\n    setRequired: function setRequired(value) {\n        this.memberDefinition.required = value || value === undefined ? true : false;\n        return this;\n    },\n    setNullable: function setNullable(value) {\n        this.memberDefinition.nullable = value || value === undefined ? true : false;\n        return this;\n    },\n    changeDefinition: function changeDefinition(attr, value) {\n        this.memberDefinition[attr] = value;\n        return this;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],101:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ModelBinder', null, null, {\n\n    constructor: function constructor(context) {\n        this.context = context;\n        this.providerName = null;\n        if (this.context.storageProvider && typeof this.context.storageProvider.getType === 'function') {\n            this.references = !(this.context.storageProvider.providerConfiguration.modelBinderOptimization || false);\n            this.providerName = this.context.storageProvider.providerName;\n            if (!this.providerName) {\n                for (var i in _index2.default.RegisteredStorageProviders) {\n                    if (_index2.default.RegisteredStorageProviders[i] === this.context.storageProvider.getType()) {\n                        this.providerName = i;\n                        break;\n                    }\n                }\n            }\n        }\n    },\n\n    _deepExtend: function _deepExtend(o, r) {\n        if (o === null || o === undefined) {\n            return r;\n        }\n        for (var i in r) {\n            if (o.hasOwnProperty(i)) {\n                if (_typeof(r[i]) === 'object') {\n                    if (Array.isArray(r[i])) {\n                        for (var j = 0; j < r[i].length; j++) {\n                            if (o[i].indexOf(r[i][j]) < 0) {\n                                o[i].push(r[i][j]);\n                            }\n                        }\n                    } else this._deepExtend(o[i], r[i]);\n                }\n            } else {\n                o[i] = r[i];\n            }\n        }\n        return this._finalize(o);\n    },\n\n    _finalize: function _finalize(o) {\n        if (o instanceof _index2.default.Entity) {\n            o.changedProperties = undefined;\n            o.storeToken = this.context.storeToken;\n        }\n        return o;\n    },\n\n    _buildSelector: function _buildSelector(meta, context) {\n        if (meta.$selector) {\n            if (!Array.isArray(meta.$selector)) {\n                meta.$selector = [meta.$selector];\n            }\n\n            for (var i = 0; i < meta.$selector.length; i++) {\n                var selector = meta.$selector[i].replace('json:', '');\n                context.src += 'if(';\n                var path = selector.split('.');\n                for (var j = 0; j < path.length; j++) {\n                    context.src += 'di[\"' + path.slice(0, j + 1).join('\"][\"') + '\"]' + (j < path.length - 1 ? ' && ' : ' !== undefined && typeof di.' + selector + ' === \"object\"');\n                }\n                context.src += '){di = di[\"' + path.join('\"][\"') + '\"];}' + (i < meta.$selector.length - 1 ? 'else ' : '');\n            }\n\n            context.src += 'if (di === null){';\n            if (context.iter) context.src += context.iter + ' = null;';\n            context.src += 'return null;';\n            context.src += '}';\n        }\n    },\n\n    _buildKey: function _buildKey(name, type, keys, context, data) {\n        if (keys) {\n            var type = _index.Container.resolveType(type);\n            var typeIndex = _index.Container.getIndex(type);\n            type = type.fullName || type.name;\n            context.src += 'var ' + name + 'Fn = function(di){';\n            if (!Array.isArray(keys) || keys.length == 1) {\n                if (typeof keys !== 'string') keys = keys[0];\n                context.src += 'if (typeof di[\"' + keys + '\"] === \"undefined\") return undefined;';\n                context.src += 'if (di[\"' + keys + '\"] === null) return null;';\n                context.src += 'var key = (\"' + type + '_' + typeIndex + '_' + keys + '#\" + di[\"' + keys + '\"]);';\n            } else {\n                context.src += 'var key = \"\";';\n                for (var i = 0; i < keys.length; i++) {\n                    var id = _typeof(keys[i]) !== 'object' ? keys[i] : keys[i].$source;\n                    context.src += 'if (typeof di[\"' + id + '\"] === \"undefined\") return undefined;';\n                    context.src += 'if (di[\"' + id + '\"] === null) return null;';\n                    context.src += 'key += (\"' + type + '_' + typeIndex + '_' + id + '#\" + di[\"' + id + '\"]);';\n                }\n            }\n\n            context.src += 'return key;};';\n        }\n\n        context.src += 'var ' + name + ' = ' + (keys ? name + 'Fn(' + (data || 'di') + ')' : 'undefined') + ';';\n    },\n\n    build: function build(meta, context) {\n        if (meta.$selector) {\n            if (!Array.isArray(meta.$selector)) meta.$selector = [meta.$selector];\n            for (var i = 0; i < meta.$selector.length; i++) {\n                meta.$selector[i] = meta.$selector[i].replace('json:', '');\n            }\n        }\n\n        if (meta.$value) {\n            if (typeof meta.$value === 'function') {\n                context.src += 'var di = di || data;';\n                context.src += 'var fn = function(){ return meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + '.$value.call(self, meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + ', di); };';\n                if (meta.$type) {\n                    var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n                    var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n                    var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                    if (converter) {\n                        context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](fn())';\n                    } else {\n                        context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(fn())';\n                    }\n                } else context.item = 'fn()';\n            } else if (meta.$type) {\n                var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                if (converter) {\n                    context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](' + meta.$value + ')';\n                } else {\n                    context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(' + meta.$value + ')';\n                }\n            } else context.item = meta.$value;\n        } else if (meta.$source) {\n            var type = _index.Container.resolveName(_index.Container.resolveType(meta.$type));\n            var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta.$type));\n            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\n            if (!context.forEach) context.src += 'var di = data;';\n            context.item = item;\n            this._buildSelector(meta, context);\n            if (converter) {\n                context.src += 'var ' + item + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta.$source + '\"]);';\n            } else {\n                context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta.$source + '\"]);';\n            }\n        } else if (meta.$item) {\n            context.meta.push('$item');\n            var iter = context.item && context.current ? context.item + '.' + context.current : context.item ? context.item : 'result';\n            context.iter = iter;\n            if (iter.indexOf('.') < 0) context.src += 'var ' + iter + ';';\n            context.src += 'var fn = function(di){';\n            if (meta.$selector) {\n                context.src += 'if (typeof di !== \"undefined\" && !(Array.isArray(di))){';\n                this._buildSelector(meta, context);\n                context.src += '}';\n            }\n            if (this.references && meta.$keys) this._buildKey('forKey', meta.$type, meta.$keys, context);\n            context.src += iter + ' = typeof ' + iter + ' == \"undefined\" ? [] : ' + iter + ';';\n            if (this.references && meta.$item.$keys) {\n                var keycacheName = 'keycache_' + iter.replace(/\\./gi, '_');\n                context.src += 'var ' + keycacheName + ';';\n                context.src += 'var kci = keycacheIter.indexOf(' + iter + ');';\n                context.src += 'if (kci < 0){';\n                context.src += keycacheName + ' = [];';\n                context.src += 'keycache.push(' + keycacheName + ');';\n                context.src += 'keycacheIter.push(' + iter + ');';\n                context.src += '}else{';\n                context.src += keycacheName + ' = keycache[kci];';\n                context.src += '}';\n            }\n            context.iter = undefined;\n            context.forEach = true;\n            var itemForKey = 'itemForKey_' + iter.replace(/\\./gi, '_');\n            context.src += 'var forEachFn = function(di, i){';\n            context.src += 'var diBackup = di;';\n            if (this.providerName == \"sqLite\" && this.references && meta.$item.$keys) this._buildKey(itemForKey, meta.$type, meta.$item.$keys, context);\n            var item = context.item || 'iter';\n            context.item = item;\n            if (!meta.$item.$source) {\n                this._buildSelector(meta.$item, context);\n            }\n            this.build(meta.$item, context);\n            if (this.references && meta.$keys) {\n                context.src += 'if (forKey){';\n                context.src += 'if (cache[forKey]){';\n                context.src += iter + ' = cache[forKey];';\n                context.src += 'if (' + iter + '.indexOf(' + (context.item || item) + ') < 0){';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += '}}else{';\n                context.src += 'cache[forKey] = ' + iter + ';';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += '}}else{';\n                if (this.references && meta.$item.$keys) this._buildKey('cacheKey', meta.$type, meta.$item.$keys, context, 'diBackup');\n                context.src += 'if (typeof cacheKey != \"undefined\" && cacheKey !== null){';\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + ' && cacheKey){';\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(cacheKey) < 0){';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(cacheKey);';\n                context.src += '}';\n                context.src += '}else{';\n                context.src += iter + '.push(' + (context.item || item) + ');';\n                context.src += '}';\n                context.src += '}';\n                context.src += '}';\n            } else {\n                if (this.references && meta.$item.$keys) {\n                    context.src += 'if (typeof ' + itemForKey + ' !== \"undefined\" && ' + itemForKey + ' !== null){';\n                    context.src += 'if (typeof keycache_' + iter.replace(/\\./gi, '_') + ' !== \"undefined\" && ' + itemForKey + '){';\n                    context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(' + itemForKey + ') < 0){';\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                    context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(' + itemForKey + ');';\n                    context.src += '}}else{';\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                    context.src += '}}else{';\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                    context.src += '}';\n                } else {\n                    context.src += iter + '.push(' + (context.item || item) + ');';\n                }\n            }\n            context.src += '};';\n            context.src += 'if (Array.isArray(di)) di.forEach(forEachFn);';\n            context.src += 'else forEachFn(di, 0);';\n            context.forEach = false;\n            context.item = null;\n            context.src += '};fn(typeof di === \"undefined\" ? data : di);';\n            context.meta.pop();\n        } else if (meta.$type) {\n            if (!context.forEach) {\n                context.src += 'if (typeof di === \"undefined\"){';\n                context.src += 'var di = data;';\n                this._buildSelector(meta, context);\n                context.src += '}';\n            }\n            var resolvedType = _index.Container.resolveType(meta.$type);\n            var type = _index.Container.resolveName(resolvedType);\n            var typeIndex = _index.Container.getIndex(resolvedType);\n            var isEntityType = resolvedType.isAssignableTo && resolvedType.isAssignableTo(_index2.default.Entity);\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\n            if (context.item == item) item += 'new_';\n            context.item = item;\n\n            var isPrimitive = false;\n            if (!meta.$source && !meta.$value && resolvedType !== _index2.default.Array && resolvedType !== _index2.default.Object && !resolvedType.isAssignableTo) isPrimitive = true;\n            if (resolvedType === _index2.default.Object || resolvedType === _index2.default.Array) {\n                var keys = Object.keys(meta);\n                if (keys.length == 1 || keys.length == 2 && meta.$selector) isPrimitive = true;\n            }\n\n            if (isPrimitive) {\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                if (converter) {\n                    context.src += 'var ' + item + ' = di != undefined ? self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di) : di;';\n                } else {\n                    context.src += 'var ' + item + ' = di;';\n                }\n            } else {\n                if (this.references && meta.$keys) {\n                    this._buildKey('itemKey', meta.$type, meta.$keys, context);\n                    context.src += 'if (itemKey === null) return null;';\n                    context.src += 'var ' + item + ';';\n                    context.src += 'if (itemKey && cache[itemKey]){';\n                    context.src += item + ' = cache[itemKey];';\n                    context.src += '}else{';\n                    if (isEntityType) {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\n                    } else {\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\n                    }\n                    context.src += 'if (itemKey){';\n                    context.src += 'cache[itemKey] = ' + item + ';';\n                    context.src += '}';\n                    context.src += '}';\n                } else {\n                    if (isEntityType) {\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\n                    } else {\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\n                    }\n                }\n            }\n            var openTypeProperty = null;\n            if (this.providerName == \"oData\" && resolvedType && resolvedType.openType) {\n                openTypeProperty = resolvedType.openType === true ? _index2.default.defaults.openTypeDefaultPropertyName : resolvedType.openType;\n                context.src += item + '.' + openTypeProperty + ' = {};';\n                context.src += 'for (var prop in di){ if ([' + resolvedType.memberDefinitions.getPublicMappedPropertyNames().map(function (prop) {\n                    return '\"' + prop + '\"';\n                }).join(',') + '].indexOf(prop) < 0 && prop.indexOf(\"@\") < 0 && prop.indexOf(\"#\") < 0){ ' + item + '.' + openTypeProperty + '[prop] = di[prop]; } };';\n            }\n            for (var i in meta) {\n                if (i.indexOf('$') < 0 && i != openTypeProperty) {\n                    context.current = i;\n                    if (!meta[i].$item) {\n                        if (meta[i].$value) {\n                            context.meta.push(i);\n                            var item = context.item;\n                            this.build(meta[i], context);\n                            context.src += item + '.' + i + ' = ' + context.item + ';';\n                            context.item = item;\n                            context.meta.pop();\n                        } else if (meta[i].$source) {\n                            context.src += 'var fn = function(di){';\n                            this._buildSelector(meta[i], context);\n                            if (meta[i].$type) {\n                                var type = _index.Container.resolveName(_index.Container.resolveType(meta[i].$type));\n                                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(meta[i].$type));\n                                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                                if (converter) {\n                                    context.src += 'return self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i].$source + '\"]);';\n                                } else {\n                                    context.src += 'return new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i].$source + '\"]);';\n                                }\n                            } else {\n                                context.src += item + '.' + i + ' = di[\"' + meta[i].$source + '\"];';\n                            }\n                            context.src += '};';\n                            if (meta[i].$type) context.src += item + '.' + i + ' = fn(di);';else context.src += 'fn(di);';\n                        } else if (meta[i].$type) {\n                            context.meta.push(i);\n                            context.src += 'var fn = function(di){';\n                            this._buildSelector(meta[i], context);\n                            this.build(meta[i], context);\n                            context.src += 'return ' + context.item + ';};';\n                            if (meta[i].$type === _index2.default.Object) context.src += item + '.' + i + ' = self._deepExtend(' + item + '.' + i + ', fn(di));';else context.src += item + '.' + i + ' = fn(di);';\n                            context.item = item;\n                            context.meta.pop();\n                        } else if (meta.$type) {\n                            var memDef = _index.Container.resolveType(meta.$type).memberDefinitions.getMember(i);\n                            var type = _index.Container.resolveName(memDef.type);\n                            var entityType = _index.Container.resolveType(meta.$type);\n                            var entityTypeIndex = _index.Container.getIndex(meta.$type);\n                            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\n                            if (this.providerName && memDef && memDef.converter && memDef.converter[this.providerName] && typeof memDef.converter[this.providerName].fromDb == 'function') {\n                                context.src += item + '.' + i + ' = Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\").converter.' + this.providerName + '.fromDb(di[\"' + meta[i] + '\"], Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\"), self.context, Container.resolveByIndex(\"' + entityTypeIndex + '\"));';\n                            } else if (converter) {\n                                context.src += item + '.' + i + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i] + '\"]);';\n                            } else {\n                                var typeIndex = _index.Container.getIndex(_index.Container.resolveType(type.memberDefinitions.getMember(i).type));\n                                context.src += item + '.' + i + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i] + '\"]);';\n                            }\n                        }\n                    } else {\n                        context.meta.push(i);\n                        this.build(meta[i], context);\n                        context.item = item;\n                        context.meta.pop();\n                    }\n                }\n            }\n            context.src += item + ' = self._finalize(' + item + ');';\n        }\n    },\n\n    call: function call(data, meta) {\n        if (!Object.getOwnPropertyNames(meta).length) {\n            return data;\n        }\n        var context = {\n            src: '',\n            meta: []\n        };\n        context.src += 'var self = this;';\n        context.src += 'var result;';\n        context.src += 'var cache = {};';\n        context.src += 'var keycache = [];';\n        context.src += 'var keycacheIter = [];';\n        this.build(meta, context);\n        if (context.item) context.src += 'if (typeof result === \"undefined\") result = ' + context.item + ';';\n        context.src += 'return result;';\n\n        var fn = new Function('meta', 'data', 'Container', context.src).bind(this);\n        var ret = fn(meta, data, _index.Container);\n        return ret;\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],102:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeCollector', _index2.default.Notifications.ChangeCollectorBase, null, {\n    buildData: function buildData(entities) {\n        var result = [];\n        entities.forEach(function (element) {\n            var resObj = { entityState: element.data.entityState, typeName: element.data.getType().name };\n            var enumerableMemDefCollection = [];\n\n            switch (element.data.entityState) {\n                case _index2.default.EntityState.Added:\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getPublicMappedProperties();\n                    break;\n                case _index2.default.EntityState.Modified:\n                    enumerableMemDefCollection = element.data.changedProperties;\n                    break;\n                case _index2.default.EntityState.Deleted:\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getKeyProperties();\n                    break;\n                default:\n                    break;\n            }\n\n            enumerableMemDefCollection.forEach(function (memDef) {\n                resObj[memDef.name] = element.data[memDef.name];\n            });\n\n            result.push(resObj);\n        });\n\n        return result;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],103:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeCollectorBase', null, null, {\n    buildData: function buildData(entityContextData) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    processChangedData: function processChangedData(entityData) {\n        if (this.Distrbutor && this.Distrbutor.distributeData) this.Distrbutor.distributeData(this.buildData(entityData));\n    },\n    Distrbutor: { enumerable: false, dataType: _index2.default.Notifications.ChangeDistributorBase, storeOnObject: true }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],104:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeDistributor', _index2.default.Notifications.ChangeDistributorBase, null, {\n    constructor: function constructor(broadcastUrl) {\n        this.broadcastUrl = broadcastUrl;\n    },\n    distributeData: function distributeData(data) {\n        _index2.default.ajax({\n            url: this.broadcastUrl,\n            type: \"POST\",\n            data: 'data=' + JSON.stringify(data),\n            succes: this.success,\n            error: this.error\n        });\n    },\n    broadcastUrl: { dataType: \"string\" },\n    success: function success() {},\n    error: function error() {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],105:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Notifications.ChangeDistributorBase', null, null, {\n    distributeData: function distributeData(collectorData) {\n        _index.Guard.raise(\"Pure class\");\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],106:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.Query', null, null, {\n    constructor: function constructor(expression, defaultType, context) {\n        ///<param name=\"context\" type=\"$data.EntityContext\" />\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\n        ///<field name=\"context\" type=\"$data.EntityContext\" />\n\n        this.expression = expression;\n        this.context = context;\n\n        //TODO: expressions get as JSON string?!\n\n        this.expressions = expression;\n        this.defaultType = defaultType;\n        this.result = [];\n        this.rawDataList = [];\n        this.modelBinderConfig = {};\n        this.context = context;\n    },\n\n    rawDataList: { dataType: \"Array\" },\n    result: { dataType: \"Array\" },\n    resultType: {},\n    buildResultSet: function buildResultSet(ctx) {\n        var converter = new _index2.default.ModelBinder(this.context);\n        this.result = converter.call(this.rawDataList, this.modelBinderConfig);\n        return;\n    },\n    getEntitySets: function getEntitySets() {\n        var ret = [];\n        var ctx = this.context;\n\n        var fn = function fn(expression) {\n            if (expression instanceof _index2.default.Expressions.EntitySetExpression) {\n                if (ret.indexOf(ctx._entitySetReferences[expression.elementType.name]) < 0) ret.push(ctx._entitySetReferences[expression.elementType.name]);\n            }\n            if (expression.source) fn(expression.source);\n            if (expression.members) {\n                for (var i = 0; i < expression.members.length; i++) {\n                    fn(expression.members[i].expression);\n                }\n            }\n        };\n\n        fn(this.expression);\n\n        return ret;\n    }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],107:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.queryBuilder', null, null, {\n    constructor: function constructor() {\n        this._fragments = {};\n        this.selectedFragment = null;\n        this._binderConfig = {};\n        this.modelBinderConfig = this._binderConfig;\n        this._binderConfigPropertyStack = [];\n    },\n    selectTextPart: function selectTextPart(name) {\n        if (!this._fragments[name]) {\n            this._fragments[name] = { text: '', params: [] };\n        }\n        this.selectedFragment = this._fragments[name];\n    },\n    getTextPart: function getTextPart(name) {\n        return this._fragments[name];\n    },\n    addText: function addText(textParticle) {\n        this.selectedFragment.text += textParticle;\n    },\n    addParameter: function addParameter(param) {\n        this.selectedFragment.params.push(param);\n    },\n    selectModelBinderProperty: function selectModelBinderProperty(name) {\n        this._binderConfigPropertyStack.push(this.modelBinderConfig);\n        if (!(name in this.modelBinderConfig)) {\n            this.modelBinderConfig[name] = {};\n        }\n        this.modelBinderConfig = this.modelBinderConfig[name];\n    },\n    popModelBinderProperty: function popModelBinderProperty() {\n        if (this._binderConfigPropertyStack.length === 0) {\n            this.modelBinderConfig = this._binderConfig();\n        } else {\n            this.modelBinderConfig = this._binderConfigPropertyStack.pop();\n        }\n    },\n    resetModelBinderProperty: function resetModelBinderProperty(name) {\n        this._binderConfigPropertyStack = [];\n        this.modelBinderConfig = this._binderConfig;\n    },\n    addKeyField: function addKeyField(name) {\n        if (!this.modelBinderConfig['$keys']) {\n            this.modelBinderConfig['$keys'] = new Array();\n        }\n        this.modelBinderConfig['$keys'].push(name);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],108:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.QueryProvider', null, null, {\n    //TODO: instance member?????\n    constructor: function constructor() {\n        this.requiresExpressions = false;\n    },\n    executeQuery: function executeQuery(queryable, resultHandler) {},\n    getTraceString: function getTraceString(queryable) {}\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],109:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Queryable', null, null, {\n    constructor: function constructor(source, rootExpression) {\n        ///\t<signature>\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\n        /// <param name=\"source\" type=\"$data.EntitySet\" />\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\n        ///\t</signature>\n        ///\t<signature>\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\n        /// <param name=\"source\" type=\"$data.EntityContext\" />\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\n        ///\t</signature>\n\n        var context = source instanceof _index2.default.EntityContext ? source : source.entityContext;\n        this.defaultType = source instanceof _index2.default.EntityContext ? null : source.defaultType;\n        this.entityContext = context;\n        this.expression = rootExpression;\n    },\n\n    filter: function filter(predicate, thisArg) {\n        ///<summary>Filters a set of entities using a boolean expression.</summary>\n        ///<param name=\"predicate\" type=\"Function\">A boolean query expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Filters a set of entities using a boolean expression formulated as string.</summary>\n        ///<param name=\"predicate\" type=\"string\">\n        ///The expression body of the predicate function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: filter(\"it.Title == 'Hello'\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Filters a set of entities using a bool expression formulated as a JavaScript function.</summary>\n        ///<param name=\"predicate\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Filtering a set of entities with a predicate function&#10;\n        ///var males = Persons.filter( function( person ) { return person.Gender == 'Male' } );\n        ///</example>\n        ///<example>\n        ///Filtering a set of entities with a predicate function and parameters&#10;\n        ///var draftables = Persons.filter( function( person ) {\n        ///     return person.Gender == this.gender &amp;&amp; person.Age &gt; this.age\n        /// }, { gender: 'Male',  age: 21 });\n        ///</example>\n        ///<example>\n        ///Filtering a set of entities with a predicate as a string and parameters&#10;\n        ///var draftables = Persons.filter(\"it.Gender == this.gender &amp;&amp;  it.Age &gt; this.age\",\n        /// { gender: 'Male',  age: 21 });\n        ///</example>\n        ///</signature>\n        if (arguments.length === 3) {\n            predicate = \"it.\" + arguments[0] + (arguments[1][0] === \".\" ? arguments[1] + \"(param)\" : \" \" + arguments[1] + \" param\");\n            thisArg = { param: arguments[2] };\n        }\n        this._checkOperation('filter');\n        var expression = _index.Container.createCodeExpression(predicate, thisArg);\n        var expressionSource = this.expression;\n        if (this.expression instanceof _index2.default.Expressions.FilterExpression) {\n            expressionSource = this.expression.source;\n\n            var operatorResolution = this.entityContext.storageProvider.resolveBinaryOperator(\"and\");\n            expression = _index.Container.createSimpleBinaryExpression(this.expression.selector, expression, \"and\", \"filter\", \"boolean\", operatorResolution);\n        }\n        var exp = _index.Container.createFilterExpression(expressionSource, expression);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    where: function where(predicate, params) {\n        ///<summary>Where is a convenience alias for C# developers. Use filter instead.</summary>\n        ///<returns type=\"$data.Queryable\" />\n        return this.filter(predicate, params);\n    },\n\n    map: function map(projection, thisArg, mappedTo) {\n        ///\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t<param name=\"projection\" type=\"Function\">A projection expression</param>\n        ///\t<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t\t<param name=\"projection\" type=\"string\">\n        ///\t\t\tThe expression body of the projection function in string. &#10;\n        ///\t\t\tTo reference the lambda parameter use the 'it' context variable. &#10;\n        ///\t\t\tExample: map(\"{ i: it.Id, t: it.Title }\")\n        ///\t\t</param>\n        ///\t\t<param name=\"thisArg\" type=\"Object\" />\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\n        ///\t\t<param name=\"projection\" type=\"Function\">\n        ///\t\t\tProjection function to specify the shape or type of each returned element.\n        ///\t\t</param>\n        ///\t\t<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///\t\t\tContains the projection parameters.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tProjection to get an array of the full name property of a set of Person entities&#10;\n        ///\t\t\tvar personFullNames = Persons.map( function( person ) { return person.FullName; } );\n        ///\t\t</example>\n        ///\t\t<example>\n        ///\t\t\tProjection to get an array of the required fields of Person entities in an anonymous type.&#10;\n        ///\t\t\tvar custom = Persons.map( function( person ) {\n        ///\t\t\t\treturn { FullName: person.FullName, Info: { Address: person.Location.Address, Phone: person.Phone } };\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('map');\n        var codeExpression = _index.Container.createCodeExpression(projection, thisArg);\n        var exp = _index.Container.createProjectionExpression(this.expression, codeExpression);\n\n        if (mappedTo === 'default') exp.projectionAs = this.defaultType;else if (mappedTo) exp.projectionAs = _index.Container.resolveType(mappedTo);else exp.projectionAs = _index2.default.Object;\n\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    select: function select(projection, thisArg, mappedTo) {\n        ///<summary>Select is a convenience alias for C# developers. Use map instead.</summary>\n        ///<returns type=\"$data.Queryable\" />\n        return this.map(projection, thisArg, mappedTo);\n    },\n\n    length: function length(onResult, transaction) {\n        ///\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(cnt) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet the count of Person entities. &#10;\n        ///\t\t\tPersons.length( function( cnt ) { alert(\"There are \" + cnt + \" person(s) in the database.\"); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('length');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var countExpression = _index.Container.createCountExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(countExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    count: function count(onResult, transaction) {\n        ///<summary>Count is a convenience alias for C# developers. Use length instead.</summary>\n        ///<returns type=\"$data.Integer\" />\n        return this.length(onResult, transaction);\n    },\n\n    forEach: function forEach(iterator, transaction) {\n        ///\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\n        ///\t<param name=\"iterator\" type=\"Function\">Iterator function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\n        ///\t\t<param name=\"iterator\" type=\"Function\">\n        ///\t\t\tIterator function to handle the result elements.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('forEach');\n        var pHandler = new _index2.default.PromiseHandler();\n        function iteratorFunc(items) {\n            items.forEach(iterator);\n        }\n        var cbWrapper = pHandler.createCallback(iteratorFunc);\n\n        var forEachExpression = _index.Container.createForEachExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(forEachExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    toArray: function toArray(onResult_items, transaction) {\n        ///\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult_items\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult_items\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet all Person entities. &#10;\n        ///\t\t\tPersons.toArray( function( result ) { console.dir(result); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        if (onResult_items instanceof _index2.default.Array) {\n            return this.toArray(function (results) {\n                onResult_items.length = 0;\n                results.forEach(function (item, idx) {\n                    onResult_items.push(item);\n                });\n            });\n        }\n\n        this._checkOperation('toArray');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult_items);\n\n        var toArrayExpression = _index.Container.createToArrayExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(toArrayExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    toLiveArray: function toLiveArray(onResult, transaction) {\n        var self = this;\n        var result = [];\n\n        var doAction = function doAction(action) {\n            return function (onResult) {\n                var pHandler = new _index2.default.PromiseHandler();\n                var callback = pHandler.createCallback(onResult);\n\n                var successFunc = function successFunc(res) {\n                    result.length = 0;\n\n                    var data = res;\n                    _index2.default.typeSystem.extend(result, data);\n\n                    result.prev = doAction(function (cb) {\n                        data.prev(cb);\n                    });\n                    result.next = doAction(function (cb) {\n                        data.next(cb);\n                    });\n\n                    callback.success.apply(this, [result].concat(Array.prototype.slice.call(arguments, 1)));\n                };\n\n                action({\n                    success: successFunc,\n                    error: callback.error\n                }, transaction);\n\n                var promise = pHandler.getPromise();\n                _index2.default.typeSystem.extend(result, promise);\n\n                return result;\n            };\n        };\n\n        result.refresh = doAction(function (cb) {\n            self.toArray(cb);\n        });\n\n        return result.refresh.apply(result, arguments);\n    },\n\n    single: function single(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet \"George\" from the Person entity set. &#10;\n        ///\t\t\tPersons.single( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('single');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(2);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var singleExpression = _index.Container.createSingleExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(singleExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    some: function some(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///         Is there any person who's first name is \"George\"? &#10;\n        ///\t\t\tPersons.some( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('some');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var someExpression = _index.Container.createSomeExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(someExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    every: function every(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if all elements of the EntitySet is in the result set.</summary>\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a </summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tResult is true when all person are married. &#10;\n        ///\t\t\tPersons.every( function( person ) { return person.Married == true; }, null, {&#10;\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\n        ///\t\t\t\terror: function () { ... }\n        ///\t\t\t});\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('every');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var everyExpression = _index.Container.createEveryExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(everyExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    take: function take(amount) {\n        ///\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to return.</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\n        ///\t\t\tThe number of elements to skip.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.take(10).forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('take');\n        var constExp = _index.Container.createConstantExpression(amount, \"integer\");\n        var takeExp = _index.Container.createPagingExpression(this.expression, constExp, _index2.default.Expressions.ExpressionType.Take);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n    skip: function skip(amount) {\n        ///\t<summary>Skip a specified number of elements from the start of the result set.</summary>\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to skip.</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Skip a specified number of elements from the start of the result set.</summary>\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\n        ///\t\t\tThe number of elements to skip.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tLog the full name of each Person. &#10;\n        ///\t\t\tPersons.skip(1).take(5).forEach( function( person ) { console.log(person.FullName; } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('skip');\n        var constExp = _index.Container.createConstantExpression(amount, \"integer\");\n        var takeExp = _index.Container.createPagingExpression(this.expression, constExp, _index2.default.Expressions.ExpressionType.Skip);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n\n    order: function order(selector) {\n        if (selector === '' || selector === undefined || selector === null) {\n            return this;\n        }\n        if (selector[0] === \"-\") {\n            var orderString = \"it.\" + selector.replace(\"-\", \"\");\n            return this.orderByDescending(orderString);\n        } else {\n            return this.orderBy(\"it.\" + selector);\n        }\n    },\n\n    orderBy: function orderBy(selector, thisArg) {\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"string\">\n        ///The expression body of the order function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: orderBy(\"it.Id\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Order a set of entities using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Ordering a set of entities with a predicate function&#10;\n        ///var males = Persons.orderBy( function( person ) { return person.Id; } );\n        ///</example>\n        ///</signature>\n\n        this._checkOperation('orderBy');\n        var codeExpression = _index.Container.createCodeExpression(selector, thisArg);\n        var exp = _index.Container.createOrderExpression(this.expression, codeExpression, _index2.default.Expressions.ExpressionType.OrderBy);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n    orderByDescending: function orderByDescending(selector, thisArg) {\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<signature>\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"string\">\n        ///The expression body of the order function in string. &#10;\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\n        ///Example: orderBy(\"it.Id\")\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" />\n        ///<returns type=\"$data.Queryable\" />\n        ///</signature>\n        ///<signature>\n        ///<summary>Order a set of entities descending using an expression.</summary>\n        ///<param name=\"selector\" type=\"Function\">\n        ///</param>\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\n        ///Contains the predicate parameters\n        ///</param>\n        ///<returns type=\"$data.Queryable\" />\n        ///<example>\n        ///Ordering a set of entities with a predicate function&#10;\n        ///var males = Persons.orderByDescending( function( person ) { return person.Id; } );\n        ///</example>\n        ///</signature>\n\n        this._checkOperation('orderByDescending');\n        var codeExpression = _index.Container.createCodeExpression(selector, thisArg);\n        var exp = _index.Container.createOrderExpression(this.expression, codeExpression, _index2.default.Expressions.ExpressionType.OrderByDescending);\n        var q = _index.Container.createQueryable(this, exp);\n        return q;\n    },\n\n    first: function first(filterPredicate, thisArg, onResult, transaction) {\n        ///\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\n        ///\t\t\tSame as in filter.\n        ///\t\t</param>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tGet \"George\" from the Person entity set. &#10;\n        ///\t\t\tPersons.first( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, function ( result ){ ... });\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('first');\n        var q = this;\n        if (filterPredicate) {\n            q = this.filter(filterPredicate, thisArg);\n        }\n        q = q.take(1);\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var firstExpression = _index.Container.createFirstExpression(q.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(q.entityContext);\n        try {\n            var expression = preparator.Visit(firstExpression);\n            q.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            q.entityContext.executeQuery(_index.Container.createQueryable(q, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    find: function find(keyValue, onResult, transaction) {\n\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var keys = this.defaultType.memberDefinitions.getKeyProperties();\n\n        try {\n\n            if (keys.length === 1 && (typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                var keyV = {};\n                keyV[keys[0].name] = keyValue;\n                keyValue = keyV;\n            }\n\n            if ((typeof keyValue === 'undefined' ? 'undefined' : _typeof(keyValue)) !== 'object') {\n                throw new _index.Exception('Key parameter is invalid');\n            } else {\n\n                var parameters = [];\n                for (var i = 0; i < keys.length; i++) {\n                    var keyProp = keys[i];\n                    if (!(keyProp.name in keyValue)) {\n                        throw new _index.Exception('Key value missing');\n                    }\n                    parameters.push(_index.Container.createConstantExpression(keyValue[keyProp.name], keyProp.type, keyProp.name));\n                }\n\n                var operation = this.entityContext.storageProvider.supportedSetOperations['find'];\n                if (operation) {\n\n                    var findExpression = _index.Container.createFindExpression(this.expression, parameters);\n                    var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n                    try {\n                        var expression = preparator.Visit(findExpression);\n                        this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n                        this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n                } else {\n                    var predicate = '';\n                    var params = {};\n                    for (var i = 0; i < parameters.length; i++) {\n                        var param = parameters[i];\n                        params[param.name] = param.value;\n                        if (i > 0) predicate += ' && ';\n                        predicate += \"it.\" + param.name + \" == this.\" + param.name;\n                    }\n\n                    this.single(predicate, params, cbWrapper, transaction);\n                }\n            }\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    include: function include(selector) {\n        ///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\n        ///\t\t\tThe name of the entity set you want to include in the query.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tInclude the Category on every Article. &#10;\n        ///\t\t\tArticles.include(\"Category\");\n        ///\t\t</example>\n        ///\t</signature>\n\n        if (this.entityContext && this.entityContext.storageProvider && this.entityContext.storageProvider.name === \"oData\") {\n            return this.include2.apply(this, arguments);\n        }\n\n        this._checkOperation('include');\n        var constExp = _index.Container.createConstantExpression(selector, \"string\");\n        var takeExp = _index.Container.createIncludeExpression(this.expression, constExp);\n        return _index.Container.createQueryable(this, takeExp);\n    },\n    include2: function include2(selector, thisArg) {\n        ///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\n        ///\t<returns type=\"$data.Queryable\" />\n        ///\t<signature>\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\n        ///\t\t\tThe name of the entity set you want to include in the query.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Queryable\" />\n        ///\t\t<example>\n        ///\t\t\tInclude the Category on every Article. &#10;\n        ///\t\t\tArticles.include(\"Category\");\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('include');\n        if (typeof selector === 'string' && (selector.length < 3 || selector.substr(0, 3) !== 'it.') && !/^[^\\.]*(=>)/.test(selector)) {\n            selector = 'it.' + selector;\n        }\n        var expression = _index.Container.createCodeExpression(selector, thisArg);\n        var includeExp = _index.Container.createIncludeExpression(this.expression, expression);\n\n        return _index.Container.createQueryable(this, includeExp);\n    },\n\n    withInlineCount: function withInlineCount(selector) {\n        this._checkOperation('withInlineCount');\n        var constExp = _index.Container.createConstantExpression(selector || 'allpages', \"string\");\n        var inlineCountExp = _index.Container.createInlineCountExpression(this.expression, constExp);\n        return _index.Container.createQueryable(this, inlineCountExp);\n    },\n    withCount: function withCount(selector) {\n        return this.withInlineCount(selector);\n    },\n\n    removeAll: function removeAll(onResult, transaction) {\n        ///\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\n        ///\t<returns type=\"$data.Promise\" />\n        ///\t<signature>\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Function\">\n        ///\t\t\tThe callback function to handle the result.\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t</signature>\n        ///\t<signature>\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\n        ///\t\t<param name=\"onResult\" type=\"Object\">\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.Promise\" />\n        ///\t\t<example>\n        ///\t\t\tDelete all People who are younger than 18 years old. &#10;\n        ///\t\t\tPersons.filter( function( p ){ return p.Age &#60; 18; } ).removeAll( function( result ) { console.dir(result); } );\n        ///\t\t</example>\n        ///\t</signature>\n\n        this._checkOperation('batchDelete');\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        var batchDeleteExpression = _index.Container.createBatchDeleteExpression(this.expression);\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(batchDeleteExpression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    _runQuery: function _runQuery(onResult_items, transaction) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult_items);\n\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        try {\n            var expression = preparator.Visit(this.expression);\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\n\n            this.entityContext.executeQuery(_index.Container.createQueryable(this, expression), cbWrapper, transaction);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n\n    toTraceString: function toTraceString(name) {\n        ///\t<summary>Returns the trace string of the query.</summary>\n        ///\t<param name=\"name\" type=\"$data.String\">Name of the execution method (toArray, length, etc.).</param>\n        ///\t<returns type=\"$data.String\" />\n        ///\t<signature>\n        ///\t\t<summary>Returns the trace string of the query.</summary>\n        ///\t\t<param name=\"name\" type=\"$data.String\">\n        ///\t\t\tName of the execution method (toArray, length, etc.). Optional. Default value is \"toArray\".\n        ///\t\t</param>\n        ///\t\t<returns type=\"$data.String\" />\n        ///\t\t<example>\n        ///\t\t\tGet the trace string for Articles.toArray() &#10;\n        ///\t\t\tArticles.toTraceString();\n        ///\t\t</example>\n        ///\t</signature>\n\n        var expression = this.expression;\n\n        if (name) {\n            expression = _index.Container['create' + name + 'Expression'](expression);\n        } else {\n            expression = _index.Container.createToArrayExpression(expression);\n        }\n\n        var preparator = _index.Container.createQueryExpressionCreator(this.entityContext);\n        expression = preparator.Visit(expression);\n\n        //this.expression = expression;\n        var q = _index.Container.createQueryable(this, expression);\n        return q.entityContext.getTraceString(q);\n    },\n\n    _checkOperation: function _checkOperation(name) {\n        var operation = this.entityContext.resolveSetOperations(name);\n        if (operation.invokable != undefined && !operation.invokable) _index.Guard.raise(new _index.Exception(\"Operation '\" + name + \"' is not invokable with the provider\"));\n    },\n    defaultType: {}\n\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],110:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define(\"$data.RelatedEntityProxy\", null, null, {\n    constructor: function constructor(entityKeyObject, navigationProperty, type, parent, context) {\n        this._entityKeyObject = entityKeyObject;\n        this._navigationProperty = navigationProperty;\n        this._type = type;\n        this._parent = parent;\n        this._context = context;\n    },\n    _entityKeyObject: { type: _index2.default.Object },\n    _ctxFactory: {},\n    _type: {},\n    _navigationProperty: { type: _index2.default.String },\n    _parent: { type: '$data.RelatedEntityProxy' },\n    _context: { type: '$data.EntityContext' },\n\n    read: function read(onResult) {\n        var pHandler = new _index2.default.PromiseHandler();\n        var cbWrapper = pHandler.createCallback(onResult);\n\n        try {\n            var proxyChains = this._chainToArray();\n            var firstProxy = proxyChains[0];\n            var context = firstProxy._context;\n            if (!context) {\n                var storeToken = firstProxy._parent instanceof _index2.default.Entity ? firstProxy._parent.storeToken : firstProxy._type.storeToken;\n                if (storeToken && typeof storeToken.factory === 'function') {\n                    context = storeToken.factory();\n                }\n            }\n\n            if (!context) throw new _index.Exception('ContextNotExists');\n\n            var entitySet = null;\n            var expression = null;\n            if (firstProxy._parent instanceof _index2.default.Entity) {\n                entitySet = context.getEntitySetFromElementType(firstProxy._parent.getType());\n\n                var proxyClass = context._createRelatedEntityProxyClass(entitySet.elementType);\n                proxyChains.unshift(new proxyClass(firstProxy._parent, undefined, entitySet.elementType));\n            } else {\n                entitySet = context.getEntitySetFromElementType(firstProxy._type);\n            }\n\n            expression = entitySet.expression;\n            var returnType = null;\n\n            for (var i = 0; i < proxyChains.length; i++) {\n                var item = proxyChains[i];\n                var keys = item._type.memberDefinitions.getKeyProperties();\n\n                var parameters = [];\n                for (var j = 0; j < keys.length; j++) {\n                    var keyProp = keys[j];\n                    if (!(keyProp.name in item._entityKeyObject)) {\n                        throw new _index.Exception('Key value missing');\n                    }\n                    parameters.push(_index.Container.createConstantExpression(item._entityKeyObject[keyProp.name], keyProp.type, keyProp.name));\n                }\n\n                var member = undefined;\n                if (item._navigationProperty) {\n                    member = _index.Container.createMemberInfoExpression(item._navigationProperty);\n                    returnType = item._navigationProperty.elementType;\n                }\n                expression = _index.Container.createFindExpression(expression, parameters, member);\n            }\n\n            var preparator = _index.Container.createQueryExpressionCreator(context);\n            expression = preparator.Visit(expression);\n            //context.log({ event: \"EntityExpression\", data: expression });\n\n            var queryable = _index.Container.createQueryable(entitySet, expression);\n            queryable.defaultType = returnType || queryable.defaultType;\n            context.executeQuery(queryable, cbWrapper);\n        } catch (e) {\n            cbWrapper.error(e);\n        }\n\n        return pHandler.getPromise();\n    },\n    _chainToArray: function _chainToArray(result) {\n        result = result || [];\n        if (this._parent instanceof _index2.default.RelatedEntityProxy) {\n            this._parent._chainToArray(result);\n        }\n\n        result.push(this);\n        return result;\n    }\n}, {});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],111:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.ServiceOperation', null, null, {}, {\n    translateDefinition: function translateDefinition(propertyDef, name, definedBy) {\n        propertyDef.serviceName = name;\n        var memDef = new _index2.default.MemberDefinition(this.generateServiceOperation(propertyDef), this);\n        memDef.name = name;\n        return memDef;\n    },\n    generateServiceOperation: function generateServiceOperation(cfg) {\n\n        var fn;\n        if (cfg.serviceMethod) {\n            var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : {};\n            if (returnType.isAssignableTo && returnType.isAssignableTo(_index2.default.Queryable)) {\n                fn = cfg.serviceMethod;\n            } else {\n                fn = function fn() {\n                    var lastParam = arguments[arguments.length - 1];\n\n                    var pHandler = new _index2.default.PromiseHandler();\n                    var cbWrapper;\n\n                    var args = arguments;\n                    if (typeof lastParam === 'function') {\n                        cbWrapper = pHandler.createCallback(lastParam);\n                        arguments[arguments.length - 1] = cbWrapper;\n                    } else {\n                        cbWrapper = pHandler.createCallback();\n                        arguments.push(cbWrapper);\n                    }\n\n                    try {\n                        var result = cfg.serviceMethod.apply(this, arguments);\n                        if (result !== undefined) cbWrapper.success(result);\n                    } catch (e) {\n                        cbWrapper.error(e);\n                    }\n\n                    return pHandler.getPromise();\n                };\n            }\n        } else {\n            fn = function fn() {\n                var context = this;\n                var memberdef;\n\n                var boundItem;\n                if (this instanceof _index2.default.Entity || this instanceof _index2.default.EntitySet) {\n                    var entitySet;\n                    if (this instanceof _index2.default.Entity) {\n                        if (this.context) {\n                            context = this.context;\n                            entitySet = context.getEntitySetFromElementType(this.getType());\n                        } else if (this.storeToken && typeof this.storeToken.factory === 'function') {\n                            context = this.storeToken.factory();\n                            entitySet = context.getEntitySetFromElementType(this.getType());\n                        } else {\n                            _index.Guard.raise(new _index.Exception(\"entity can't resolve context\", 'Not Found!', this));\n                            return;\n                        }\n                    } else if (this instanceof _index2.default.EntitySet) {\n                        context = this.entityContext;\n                        entitySet = this;\n\n                        var esDef = context.getType().getMemberDefinition(entitySet.name);\n                        memberdef = _index2.default.MemberDefinition.translateDefinition(esDef.actions[cfg.serviceName], cfg.serviceName, entitySet.getType());\n                    }\n\n                    boundItem = {\n                        data: this,\n                        entitySet: entitySet\n                    };\n                }\n\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(_index.Container.resolveType(cfg.elementType)) : null;\n\n                var paramConstExpression = null;\n                if (cfg.params) {\n                    paramConstExpression = [];\n                    //object as parameter\n                    //FIX: object type parameters with the same property name as the name of the first parameter\n                    if (arguments[0] && _typeof(arguments[0]) === 'object' && arguments[0].constructor === _index2.default.Object && cfg.params && cfg.params[0] && cfg.params[0].name in arguments[0]) {\n                        var argObj = arguments[0];\n                        for (var i = 0; i < cfg.params.length; i++) {\n                            var paramConfig = cfg.params[i];\n                            if (paramConfig.name && paramConfig.type && paramConfig.name in argObj) {\n                                paramConstExpression.push(_index.Container.createConstantExpression(argObj[paramConfig.name], _index.Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\n                            }\n                        }\n                    }\n                    //arg params\n                    else {\n                            for (var i = 0; i < cfg.params.length; i++) {\n                                if (typeof arguments[i] == 'function') break;\n\n                                //TODO: check params type\n                                var paramConfig = cfg.params[i];\n                                if (paramConfig.name && paramConfig.type && arguments[i] !== undefined) {\n                                    paramConstExpression.push(_index.Container.createConstantExpression(arguments[i], _index.Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\n                                }\n                            }\n                        }\n                }\n\n                var ec = _index.Container.createEntityContextExpression(context);\n                if (!memberdef) {\n                    if (boundItem && boundItem.data) {\n                        memberdef = boundItem.data.getType().getMemberDefinition(cfg.serviceName);\n                    } else {\n                        memberdef = context.getType().getMemberDefinition(cfg.serviceName);\n                    }\n                }\n                var es = _index.Container.createServiceOperationExpression(ec, _index.Container.createMemberInfoExpression(memberdef), paramConstExpression, cfg, boundItem);\n\n                //Get callback function\n                var clb = arguments[arguments.length - 1];\n                if (!(typeof clb === 'function' || (typeof clb === 'undefined' ? 'undefined' : _typeof(clb)) === 'object' /*&& clb.constructor === $data.Object*/ && (typeof clb.success === 'function' || typeof clb.error === 'function'))) {\n                    clb = undefined;\n                }\n\n                if (virtualEntitySet) {\n                    var q = _index.Container.createQueryable(virtualEntitySet, es);\n                    if (clb) {\n                        es.isTerminated = true;\n                        return q._runQuery(clb);\n                    }\n                    return q;\n                } else {\n                    var returnType = cfg.returnType ? _index.Container.resolveType(cfg.returnType) : null;\n\n                    var q = _index.Container.createQueryable(context, es);\n                    q.defaultType = returnType || _index2.default.Object;\n\n                    if (returnType === _index2.default.Queryable) {\n                        q.defaultType = _index.Container.resolveType(cfg.elementType);\n                        if (clb) {\n                            es.isTerminated = true;\n                            return q._runQuery(clb);\n                        }\n                        return q;\n                    }\n                    es.isTerminated = true;\n                    return q._runQuery(clb);\n                }\n            };\n        };\n\n        var params = cfg.params || [];\n        _index2.default.typeSystem.extend(fn, cfg, { params: params });\n\n        return fn;\n    }\n});\n\n_index2.default.Class.define('$data.ServiceAction', _index2.default.ServiceOperation, null, {}, {\n    generateServiceOperation: function generateServiceOperation(cfg) {\n        if (!cfg.method) {\n            cfg.method = 'POST'; //default Action method is POST\n        }\n\n        return _index2.default.ServiceOperation.generateServiceOperation.apply(this, arguments);\n    }\n});\n\n_index2.default.Class.define('$data.ServiceFunction', _index2.default.ServiceOperation, null, {}, {\n    generateServiceOperation: function generateServiceOperation(cfg) {\n        if (!cfg.method) {\n            cfg.method = 'GET'; //default Function method is GET\n        }\n\n        return _index2.default.ServiceOperation.generateServiceOperation.apply(this, arguments);\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],112:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.storageProviders = {\n    DbCreationType: {\n        Merge: 10,\n        DropTableIfChanged: 20,\n        DropTableIfChange: 20,\n        DropAllExistingTables: 30,\n        ErrorIfChange: 40,\n        DropDbIfChange: 50\n    }\n};\n\n_index2.default.ConcurrencyMode = { Fixed: 'fixed', None: 'none' };\n_index2.default.Class.define('$data.StorageProviderBase', null, null, {\n    constructor: function constructor(schemaConfiguration, context) {\n        this.providerConfiguration = schemaConfiguration || {};\n\n        this.name = this.getType().name;\n        if (_index2.default.RegisteredStorageProviders) {\n            var keys = Object.keys(_index2.default.RegisteredStorageProviders);\n            for (var i = 0; i < keys.length; i++) {\n                if (this instanceof _index2.default.RegisteredStorageProviders[keys[i]]) {\n                    this.name = keys[i];\n                    break;\n                }\n            }\n        }\n    },\n    providers: {},\n    supportedDataTypes: { value: [], writable: false },\n    initializeStore: function initializeStore(callBack) {\n        _index.Guard.raise(\"Pure class\");\n    },\n\n    executeQuery: function executeQuery(queryable, callBack) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    loadRawData: function loadRawData(tableName, callBack) {\n        callBack = _index2.default.PromiseHandlerBase.createCallbackSettings(callBack);\n        callBack.error(new _index.Exception('loadRawData is not supported', 'Invalid Operation'));\n    },\n\n    buildIndependentBlocks: function buildIndependentBlocks(changedItems) {\n        /// <summary>\n        /// Build and processes a dependency graph from the changed items,\n        /// and generates blocks that can be inserted to the database sequentially.\n        /// </summary>\n        /// <param name=\"changedItems\">Array of changed items to build independent blocks from.</param>\n        var edgesTo = [];\n        var edgesFrom = [];\n\n        function hasOwnProperty(obj) {\n            /// <summary>\n            /// Returns true if object has own property (used for 'hashset'-like objects)\n            /// </summary>\n            /// <param name=\"obj\">Target object</param>\n            /// <returns>True if the object has own property</returns>\n            for (var p in obj) {\n                if (obj.hasOwnProperty(p)) return true;\n            }\n            return false;\n        }\n\n        // Building edgesTo and edgesFrom arrays (containing only indeces of items in changedItems array.\n        for (var i = 0; i < changedItems.length; i++) {\n            var current = changedItems[i];\n            if (!current.dependentOn || current.dependentOn.length == 0) {\n                // This item is independent\n                continue;\n            }\n\n            var to = null;\n            // Iterating over items 'current' depends on\n            for (var j = 0; j < current.dependentOn.length; j++) {\n                var currentDependency = current.dependentOn[j];\n                if (currentDependency.entityState == _index2.default.EntityState.Unchanged) {\n                    continue;\n                }\n                to = to || {};\n                // Getting the index of current dependency\n                var ixDependendOn = -1;\n                for (var k = 0; k < changedItems.length; k++) {\n                    if (changedItems[k].data == currentDependency) {\n                        ixDependendOn = k;\n                        changedItems[k].referredBy = changedItems[k].referredBy || [];\n                        changedItems[k].referredBy.push(current.data);\n                        break;\n                    }\n                }\n                // Sanity check\n                if (ixDependendOn == -1) {\n                    _index.Guard.raise(new _index.Exception('Dependent object not found', 'ObjectNotFound', current.dependentOn[j]));\n                }\n                // Setting edge in 'to' array\n                to[ixDependendOn] = true;\n                // Setting edge in 'from' array\n                var from = edgesFrom[ixDependendOn] || {};\n                from[i] = true;\n                edgesFrom[ixDependendOn] = from;\n            }\n            // Persisting found edges in edgesTo array\n            if (to !== null) edgesTo[i] = to;\n        }\n\n        // Array of sequentialyl independent blocks (containing objects, not just their id's)\n        var independentBlocks = [];\n        // Objects getting their dependency resolved in the current cycle.\n        var currentBlock = [];\n        // Filling currentBlock with initially independent objects.\n        for (var x = 0; x < changedItems.length; x++) {\n            if (!edgesTo.hasOwnProperty(x)) {\n                currentBlock.push(x);\n            }\n        }\n        while (currentBlock.length > 0) {\n            // Shifting currentBlock to cbix,\n            // and clearing currentBlock for next independent block\n            var cbix = [].concat(currentBlock);\n            currentBlock = [];\n            // Iterating over previous independent block, to generate the new one\n            for (var b = 0; b < cbix.length; b++) {\n                var dependentNodes = edgesFrom[cbix[b]];\n                if (typeof dependentNodes !== 'undefined') {\n                    for (var d in dependentNodes) {\n                        // Removing edge from 'edgesTo'\n                        delete edgesTo[d][cbix[b]];\n                        // Check if has any more dependency\n                        if (!hasOwnProperty(edgesTo[d])) {\n                            // It doesn't, so let's clean up a bit\n                            delete edgesTo[d];\n                            // and push the item to 'currentBlock'\n                            currentBlock.push(d);\n                        }\n                    }\n                }\n                // Clearing processed item from 'edgesFrom'\n                delete edgesFrom[cbix[b]];\n            }\n            // Push cbix t to independentBlocks\n            var cb = [];\n            for (var c = 0; c < cbix.length; c++) {\n                var item = changedItems[cbix[c]];\n                if (item.data.entityState != _index2.default.EntityState.Unchanged) cb.push(item);\n            }\n            if (cb.length > 0) independentBlocks.push(cb);\n        }\n        return independentBlocks;\n    },\n    getTraceString: function getTraceString(queryable) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    setContext: function setContext(ctx) {\n        this.context = ctx;\n    },\n\n    _buildContinuationFunction: function _buildContinuationFunction(context, query) {\n        if (Array.isArray(query.result)) {\n            query.result.next = this._buildPagingMethod(context, query, 'next');\n            query.result.prev = this._buildPagingMethod(context, query, 'prev');\n        }\n    },\n    _buildPagingMethod: function _buildPagingMethod(context, query, mode) {\n        return function (onResult_items) {\n            var pHandler = new _index2.default.PromiseHandler();\n            var cbWrapper = pHandler.createCallback(onResult_items);\n\n            var continuation = new _index2.default.Expressions.ContinuationExpressionBuilder(mode);\n            var continuationResult = continuation.compile(query);\n            if (continuationResult.expression) {\n                var queryable = _index.Container.createQueryable(context, continuationResult.expression);\n                queryable.defaultType = query.defaultType;\n                context.executeQuery(queryable, cbWrapper);\n            } else {\n                cbWrapper.error(new _index.Exception(continuationResult.message, 'Invalid Operation', continuationResult));\n            }\n\n            return pHandler.getPromise();\n        };\n    },\n\n    buildDbType_modifyInstanceDefinition: function buildDbType_modifyInstanceDefinition(instanceDefinition, storageModel) {\n        var buildDbType_copyPropertyDefinition = function buildDbType_copyPropertyDefinition(propertyDefinition, refProp) {\n            var cPropertyDef;\n            if (refProp) {\n                cPropertyDef = JSON.parse(JSON.stringify(instanceDefinition[refProp]));\n                cPropertyDef.kind = propertyDefinition.kind;\n                cPropertyDef.name = propertyDefinition.name;\n                cPropertyDef.notMapped = false;\n            } else {\n                cPropertyDef = JSON.parse(JSON.stringify(propertyDefinition));\n            }\n\n            cPropertyDef.dataType = _index.Container.resolveType(propertyDefinition.dataType);\n            cPropertyDef.type = cPropertyDef.dataType;\n            cPropertyDef.key = false;\n            cPropertyDef.computed = false;\n            return cPropertyDef;\n        };\n        var buildDbType_createConstrain = function buildDbType_createConstrain(foreignType, dataType, propertyName, prefix, keyPropertyName) {\n            var constrain = new Object();\n            constrain[foreignType.name] = propertyName;\n            constrain[dataType.name] = keyPropertyName ? keyPropertyName : prefix + '__' + propertyName;\n            return constrain;\n        };\n\n        if (storageModel.Associations) {\n            storageModel.Associations.forEach(function (association) {\n                var addToEntityDef = false;\n                var foreignType = association.FromType;\n                var dataType = association.ToType;\n                var foreignPropName = association.ToPropertyName;\n\n                var memDef = association.FromType.getMemberDefinition(association.FromPropertyName);\n                var keyProperties = [];\n                if (memDef && typeof memDef.keys === \"string\" && memDef.keys) {\n                    keyProperties = [memDef.keys];\n                } else if (memDef && Array.isArray(memDef.keys)) {\n                    keyProperties = [].concat(memDef.keys);\n                }\n\n                association.ReferentialConstraint = association.ReferentialConstraint || [];\n\n                if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") {\n                    foreignType = association.ToType;\n                    dataType = association.FromType;\n                    foreignPropName = association.FromPropertyName;\n                    addToEntityDef = true;\n                }\n\n                foreignType.memberDefinitions.getPublicMappedProperties().filter(function (d) {\n                    return d.key;\n                }).forEach(function (d, i) {\n                    var constraint = buildDbType_createConstrain(foreignType, dataType, d.name, foreignPropName, keyProperties[i]);\n                    if (addToEntityDef) {\n                        //instanceDefinition[foreignPropName + '__' + d.name] = buildDbType_copyPropertyDefinition(d, foreignPropName);\n                        instanceDefinition[constraint[dataType.name]] = buildDbType_copyPropertyDefinition(d, foreignPropName);\n\n                        var dependentMemDef = dataType.getMemberDefinition(keyProperties[i]);\n                        if (dependentMemDef) {\n                            dependentMemDef.isDependentProperty = true;\n                            dependentMemDef.navigationPropertyName = association.FromPropertyName;\n                        }\n                    }\n                    association.ReferentialConstraint.push(constraint);\n                }, this);\n            }, this);\n        }\n        //Copy complex type properties\n        if (storageModel.ComplexTypes) {\n            storageModel.ComplexTypes.forEach(function (complexType) {\n                complexType.ReferentialConstraint = complexType.ReferentialConstraint || [];\n\n                complexType.ToType.memberDefinitions.getPublicMappedProperties().forEach(function (d) {\n                    instanceDefinition[complexType.FromPropertyName + '__' + d.name] = buildDbType_copyPropertyDefinition(d);\n                    complexType.ReferentialConstraint.push(buildDbType_createConstrain(complexType.ToType, complexType.FromType, d.name, complexType.FromPropertyName));\n                }, this);\n            }, this);\n        }\n    },\n    buildDbType_generateConvertToFunction: function buildDbType_generateConvertToFunction(storageModel) {\n        return function (logicalEntity) {\n            var dbInstance = new storageModel.PhysicalType();\n            dbInstance.entityState = logicalEntity.entityState;\n\n            //logicalEntity.changedProperties.forEach(function(memberDef){\n            //}, this);\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\n                if (logicalEntity[property.name] !== undefined) {\n                    dbInstance[property.name] = logicalEntity[property.name];\n                }\n            }, this);\n\n            if (storageModel.Associations) {\n                storageModel.Associations.forEach(function (association) {\n                    if (association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\" || association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\") {\n                        var complexInstance = logicalEntity[association.FromPropertyName];\n                        if (complexInstance !== undefined) {\n                            association.ReferentialConstraint.forEach(function (constrain) {\n                                if (complexInstance !== null) {\n                                    dbInstance[constrain[association.From]] = complexInstance[constrain[association.To]];\n                                } else {\n                                    dbInstance[constrain[association.From]] = null;\n                                }\n                            }, this);\n                        }\n                    }\n                }, this);\n            }\n            if (storageModel.ComplexTypes) {\n                storageModel.ComplexTypes.forEach(function (cmpType) {\n                    var complexInstance = logicalEntity[cmpType.FromPropertyName];\n                    if (complexInstance !== undefined) {\n                        cmpType.ReferentialConstraint.forEach(function (constrain) {\n                            if (complexInstance !== null) {\n                                dbInstance[constrain[cmpType.From]] = complexInstance[constrain[cmpType.To]];\n                            } else {\n                                dbInstance[constrain[cmpType.From]] = null;\n                            }\n                        }, this);\n                    }\n                }, this);\n            }\n            return dbInstance;\n        };\n    },\n\n    bulkInsert: function bulkInsert(a, b, c, callback) {\n        callback.error(new _index.Exception('Not Implemented'));\n    },\n\n    supportedFieldOperations: {\n        value: {\n            length: { dataType: \"number\", allowedIn: \"filter, map\" },\n            substr: { dataType: \"string\", allowedIn: \"filter\", parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }] },\n            toLowerCase: { dataType: \"string\" }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    resolveFieldOperation: function resolveFieldOperation(operationName, expression, frameType) {\n        ///<summary></summary>\n        var result = this.supportedFieldOperations[operationName];\n        if (Array.isArray(result)) {\n            var i = 0;\n            for (; i < result.length; i++) {\n                if (result[i].allowedType === 'default' || _index.Container.resolveType(result[i].allowedType) === _index.Container.resolveType(expression.selector.memberDefinition.type) && frameType && result[i].allowedIn && (Array.isArray(result[i].allowedIn) && result[i].allowedIn.some(function (type) {\n                    return frameType === _index.Container.resolveType(type);\n                }) || !Array.isArray(result[i].allowedIn) && frameType === _index.Container.resolveType(result[i].allowedIn))) {\n                    result = result[i];\n                    break;\n                }\n            }\n            if (i === result.length) {\n                result = undefined;\n            }\n        }\n\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Field operation '\" + operationName + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operationName + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operationName;\n        return result;\n    },\n\n    supportedBinaryOperators: {\n        value: {\n            equal: { mapTo: 'eq', dataType: \"boolean\" }\n        },\n        enumerable: true,\n        writable: true\n    },\n\n    resolveBinaryOperator: function resolveBinaryOperator(operator, expression, frameType) {\n        var result = this.supportedBinaryOperators[operator];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Binary operator '\" + operator + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operator + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operator;\n        return result;\n    },\n\n    supportedUnaryOperators: {\n        value: {\n            not: { mapTo: 'not' }\n        },\n        enumerable: true,\n        writable: true\n    },\n    resolveUnaryOperator: function resolveUnaryOperator(operator, expression, frameType) {\n        var result = this.supportedUnaryOperators[operator];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Unary operator '\" + operator + \"' is not supported by the provider\"));\n        };\n        if (frameType && result.allowedIn) {\n            if (result.allowedIn instanceof Array && !result.allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(result.allowedIn instanceof Array) && frameType !== _index.Container.resolveType(result.allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operator + \" not supported in: \" + frameType.name));\n            }\n        }\n        result.name = operator;\n        return result;\n    },\n\n    supportedSetOperations: {\n        value: {\n            toArray: { invokable: true, allowedIn: [] }\n        },\n        enumerable: true,\n        writable: true\n    },\n    resolveSetOperations: function resolveSetOperations(operation, expression, frameType) {\n        var result = this.supportedSetOperations[operation];\n        if (!result) {\n            _index.Guard.raise(new _index.Exception(\"Operation '\" + operation + \"' is not supported by the provider\"));\n        };\n        var allowedIn = result.allowedIn || [];\n        if (frameType && allowedIn) {\n            if (allowedIn instanceof Array && !allowedIn.some(function (type) {\n                return frameType === _index.Container.resolveType(type);\n            }) || !(allowedIn instanceof Array) && frameType !== _index.Container.resolveType(allowedIn)) {\n                _index.Guard.raise(new _index.Exception(operation + \" not supported in: \" + frameType.name));\n            }\n        }\n        return result;\n    },\n\n    resolveTypeOperations: function resolveTypeOperations(operation, expression, frameType) {\n        _index.Guard.raise(new _index.Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n    },\n\n    resolveContextOperations: function resolveContextOperations(operation, expression, frameType) {\n        _index.Guard.raise(new _index.Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\n    },\n\n    makePhysicalTypeDefinition: function makePhysicalTypeDefinition(entityDefinition, association) {},\n\n    _beginTran: function _beginTran(tables, isWrite, callBack) {\n        callBack.success(new _index2.default.Transaction());\n    },\n\n    getFieldUrl: function getFieldUrl() {\n        return '#';\n    },\n\n    supportedAutoincrementKeys: {\n        value: {}\n    }\n}, {\n    onRegisterProvider: { value: new _index2.default.Event() },\n    registerProvider: function registerProvider(name, provider) {\n        this.onRegisterProvider.fire({ name: name, provider: provider }, this);\n        _index2.default.RegisteredStorageProviders = _index2.default.RegisteredStorageProviders || [];\n        _index2.default.RegisteredStorageProviders[name] = provider;\n    },\n    getProvider: function getProvider(name) {\n        var provider = _index2.default.RegisteredStorageProviders[name];\n        if (!provider) console.warn(\"Provider not found: '\" + name + \"'\");\n        return provider;\n        /*var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            Guard.raise(new Exception(\"Provider not found: '\" + name + \"'\", \"Not Found\"));\r\n        return provider;*/\n    },\n    isSupported: {\n        get: function get() {\n            return true;\n        },\n        set: function set() {}\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],113:[function(_dereq_,module,exports){\n(function (process){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.StorageProviderLoaderBase', null, null, {\n    isSupported: function isSupported(providerName) {\n        _index2.default.Trace.log('Detecting ' + providerName + ' provider support');\n        var supported = true;\n        switch (providerName) {\n            case 'indexedDb':\n                supported = _index2.default.__global.indexedDB || _index2.default.__global.webkitIndexedDB || _index2.default.__global.mozIndexedDB || _index2.default.__global.msIndexedDB && !/^file:/.test(_index2.default.__global.location && _index2.default.__global.location.href);\n                break;\n            case 'storm':\n                supported = 'XMLHttpRequest' in _index2.default.__global;\n                break;\n            case 'webSql':\n            case 'sqLite':\n                supported = 'openDatabase' in _index2.default.__global;\n                break;\n            case 'LocalStore':\n                supported = 'localStorage' in _index2.default.__global && _index2.default.__global.localStorage ? true : false;\n                break;\n            case 'sqLite':\n                supported = 'openDatabase' in _index2.default.__global;\n                break;\n            case 'mongoDB':\n                supported = _index2.default.mongoDBDriver;\n                break;\n            default:\n                break;\n        }\n        _index2.default.Trace.log(providerName + ' provider is ' + (supported ? '' : 'not') + ' supported');\n        return supported;\n    },\n    scriptLoadTimeout: { type: 'int', value: 1000 },\n    scriptLoadInterval: { type: 'int', value: 50 },\n    npmModules: {\n        value: {\n            'indexedDb': 'jaydata-indexeddb',\n            'InMemory': 'jaydata-inmemory',\n            'LocalStore': 'jaydata-inmemory',\n            'mongoDB': 'jaydata-mongodb',\n            'oData': 'jaydata-odata',\n            'webApi': 'jaydata-webapi',\n            'sqLite': 'jaydata-sqlite',\n            'webSql': 'jaydata-sqlite',\n            'storm': 'jaydata-storm'\n        }\n    },\n    ProviderNames: {\n        value: {\n            'indexedDb': 'IndexedDb',\n            'InMemory': 'InMemory',\n            'LocalStore': 'InMemory',\n            'oData': 'oData',\n            'webApi': 'WebApi',\n            'sqLite': 'SqLite',\n            'webSql': 'SqLite',\n            'storm': 'Storm'\n        }\n    },\n    load: function load(providerList, callback) {\n        _index2.default.RegisteredStorageProviders = _index2.default.RegisteredStorageProviders || {};\n\n        _index2.default.Trace.log('Loading provider(s): ' + providerList);\n        callback = _index2.default.PromiseHandlerBase.createCallbackSettings(callback);\n\n        var self = this;\n        var cacheKey = providerList.join(',');\n        self._fallbackCache = self._fallbackCache || {};\n\n        if (self._fallbackCache[cacheKey]) {\n            callback.success(self._fallbackCache[cacheKey]);\n        } else {\n            this.find(providerList, {\n                success: function success(provider, selectedProvider) {\n                    self._fallbackCache[cacheKey] = provider;\n                    callback.success.call(this, provider);\n                },\n                error: callback.error\n            });\n        }\n    },\n    find: function find(providerList, callback) {\n        var currentProvider = providerList.shift();\n        var currentProvider = this.getVirtual(currentProvider);\n        if (Array.isArray(currentProvider)) {\n            providerList = currentProvider;\n            currentProvider = providerList.shift();\n        }\n\n        while (currentProvider && !this.isSupported(currentProvider)) {\n            currentProvider = providerList.shift();\n        }\n\n        _index2.default.Trace.log('First supported provider is ' + currentProvider);\n\n        if (!currentProvider) {\n            _index2.default.Trace.log('Provider fallback failed');\n            callback.error();\n        }\n\n        if (_index2.default.RegisteredStorageProviders) {\n            _index2.default.Trace.log('Is the ' + currentProvider + ' provider already registered?');\n            var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            if (provider) {\n                _index2.default.Trace.log(currentProvider + ' provider registered');\n                callback.success(provider);\n                return;\n            } else {\n                _index2.default.Trace.log(currentProvider + ' provider not registered');\n            }\n        }\n\n        if (!process.browser) {\n            // NodeJS\n            _index2.default.Trace.log('node.js detected trying to load NPM module');\n            this.loadNpmModule(currentProvider, providerList, callback);\n        } else {\n            _index2.default.Trace.log('Browser detected trying to load provider');\n            this.loadProvider(currentProvider, providerList, callback);\n        }\n    },\n    loadProvider: function loadProvider(currentProvider, providerList, callback) {\n        var self = this;\n        var mappedName = _index2.default.StorageProviderLoader.ProviderNames[currentProvider] || currentProvider;\n        _index2.default.Trace.log(currentProvider + ' provider is mapped to name ' + mappedName + 'Provider');\n        if (mappedName) {\n            var url = this.getUrl(mappedName);\n            _index2.default.Trace.log(currentProvider + ' provider from URL: ' + url);\n\n            var loader = this.loadScript;\n            if (document && document.createElement) {\n                _index2.default.Trace.log('document and document.createElement detected, using script element loader method');\n                loader = this.loadScriptElement;\n            }\n\n            loader.call(this, url, currentProvider, function (successful) {\n                var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n                if (successful && provider) {\n                    _index2.default.Trace.log(currentProvider + ' provider successfully registered');\n                    callback.success(provider);\n                } else if (providerList.length > 0) {\n                    _index2.default.Trace.log(currentProvider + ' provider failed to load, trying to fallback to ' + providerList + ' provider(s)');\n                    self.find(providerList, callback);\n                } else {\n                    _index2.default.Trace.log(currentProvider + ' provider failed to load');\n                    callback.error();\n                }\n            });\n        }\n    },\n    getUrl: function getUrl(providerName) {\n        var jaydataScriptMin = document.querySelector('script[src$=\"jaydata.min.js\"]');\n        var jaydataScript = document.querySelector('script[src$=\"jaydata.js\"]');\n        if (jaydataScriptMin) return jaydataScriptMin.src.substring(0, jaydataScriptMin.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.min.js';else if (jaydataScript) return jaydataScript.src.substring(0, jaydataScript.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.js';else return 'jaydataproviders/' + providerName + 'Provider.js';\n    },\n    loadScript: function loadScript(url, currentProvider, callback) {\n        if (!url) {\n            callback(false);\n            return;\n        }\n\n        function getHttpRequest() {\n            if (_index2.default.__global.XMLHttpRequest) return new XMLHttpRequest();else if (_index2.default.__global.ActiveXObject !== undefined) return new ActiveXObject(\"MsXml2.XmlHttp\");else {\n                _index2.default.Trace.log('XMLHttpRequest or MsXml2.XmlHttp ActiveXObject not found');\n                callback(false);\n                return;\n            }\n        }\n\n        var oXmlHttp = getHttpRequest();\n        oXmlHttp.onreadystatechange = function () {\n            _index2.default.Trace.log('HTTP request is in state: ' + oXmlHttp.readyState);\n            if (oXmlHttp.readyState == 4) {\n                if (oXmlHttp.status == 200 || oXmlHttp.status == 304) {\n                    _index2.default.Trace.log('HTTP request succeeded');\n                    _index2.default.Trace.log('HTTP request response text: ' + oXmlHttp.responseText);\n                    eval.call(_index2.default.__global, oXmlHttp.responseText);\n                    if (typeof callback === 'function') callback(true);else _index2.default.Trace.log('Callback function is undefined');\n                } else {\n                    _index2.default.Trace.log('HTTP request status: ', oXmlHttp.status);\n                    if (typeof callback === 'function') callback(false);else _index2.default.Trace.log('Callback function is undefined');\n                }\n            }\n        };\n        oXmlHttp.open('GET', url, true);\n        oXmlHttp.send(null);\n    },\n    loadScriptElement: function loadScriptElement(url, currentProvider, callback) {\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\n\n        var script = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = url;\n        _index2.default.Trace.log('Appending child ' + script + ' to ' + head);\n        head.appendChild(script);\n\n        var loadInterval = this.scriptLoadInterval || 50;\n        var iteration = Math.ceil(this.scriptLoadTimeout / loadInterval);\n        _index2.default.Trace.log('Script element watcher iterating ' + iteration + ' times');\n        function watcher() {\n            _index2.default.Trace.log('Script element watcher iteration ' + iteration);\n            var provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            if (provider) {\n                _index2.default.Trace.log(currentProvider + ' provider registered');\n                callback(true);\n            } else {\n                iteration--;\n                if (iteration > 0) {\n                    _index2.default.Trace.log('Script element watcher next iteration');\n                    setTimeout(watcher, loadInterval);\n                } else {\n                    _index2.default.Trace.log('Script element loader failed');\n                    callback(false);\n                }\n            }\n        }\n        setTimeout(watcher, loadInterval);\n    },\n\n    loadNpmModule: function loadNpmModule(currentProvider, providerList, callback) {\n        var provider = null;\n        try {\n            _dereq_(this.npmModules[currentProvider]);\n            provider = _index2.default.RegisteredStorageProviders[currentProvider];\n            _index2.default.Trace.log('NPM module loader successfully registered ' + currentProvider + ' provider');\n        } catch (e) {\n            _index2.default.Trace.log('NPM module loader failed for ' + currentProvider + ' provider');\n        }\n\n        if (provider) {\n            callback.success(provider);\n        } else if (providerList.length > 0) {\n            this.find(providerList, callback);\n        } else {\n            callback.error();\n        }\n    },\n\n    virtualProviders: {\n        type: _index2.default.Array,\n        value: {\n            local: {\n                fallbacks: ['webSql', 'indexedDb', 'LocalStore']\n            }\n        }\n    },\n    getVirtual: function getVirtual(name) {\n        if (this.virtualProviders[name]) return [].concat(this.virtualProviders[name].fallbacks);\n\n        return name;\n    }\n});\n\n_index2.default.StorageProviderLoader = new _index2.default.StorageProviderLoaderBase();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n}).call(this,_dereq_('_process'))\n\n},{\"../TypeSystem/index.js\":32,\"_process\":14}],114:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _index.$C)('$data.modelBinder.FindProjectionVisitor', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(includes) {\n        this._includes = includes;\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, context) {\n        this.projectionExpression = this.projectionExpression || expression;\n        context && (context.projectionExpression = context.projectionExpression || expression);\n        this.Visit(expression.source, context);\n    },\n    VisitIncludeExpression: function VisitIncludeExpression(expression, context) {\n        this.Visit(expression.source, context);\n        if (!(expression.selector instanceof _index2.default.Expressions.ConstantExpression)) {\n            var selectorContext = {};\n            this.Visit(expression.selector.expression, selectorContext);\n\n            if (selectorContext.hasIncludeProjectionExpression) {\n                var include = this._includes.filter(function (it) {\n                    return it.name === selectorContext.includePath;\n                })[0];\n                if (include) {\n                    include.projectionExpression = selectorContext.includeProjectionExpression;\n                }\n\n                context && (context.hasIncludeProjectionExpression = true);\n            }\n        }\n    },\n    VisitFrameOperationExpression: function VisitFrameOperationExpression(expression, context) {\n        this.Visit(expression.source, context);\n\n        var opDef = expression.operation.memberDefinition;\n        if (opDef && opDef.frameType === _index2.default.Expressions.ProjectionExpression) {\n            var paramCounter = 0;\n            var params = opDef.parameters || [{ name: \"@expression\" }];\n\n            var args = params.map(function (item, index) {\n                if (item.name === \"@expression\") {\n                    return expression.source;\n                } else {\n                    return expression.parameters[paramCounter++];\n                };\n            });\n\n            for (var i = 0; i < args.length; i++) {\n                var arg = args[i];\n\n                if (arg instanceof _index2.default.Expressions.ConstantExpression && arg.value instanceof _index2.default.Queryable) {\n                    var preparator = _index.Container.createQueryExpressionCreator(arg.value.entityContext);\n                    arg = preparator.Visit(arg.value.expression);\n                }\n\n                var visitor = new _index2.default.modelBinder.FindProjectionVisitor(this._inculdes);\n                var visitorContext = {};\n                var compiled = visitor.Visit(arg, visitorContext);\n\n                if (context && visitorContext.projectionExpression) {\n                    context.hasIncludeProjectionExpression = true;\n                    context.includeProjectionExpression = visitorContext.projectionExpression;\n                }\n            }\n        }\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, context) {\n        var propName = expression.associationInfo.FromPropertyName;\n\n        if (context) {\n            context.includePath = context.includePath ? context.includePath + '.' : \"\";\n            context.includePath += propName;\n        }\n    }\n});\n\n(0, _index.$C)('$data.modelBinder.ModelBinderConfigCompiler', _index2.default.Expressions.EntityExpressionVisitor, null, {\n    constructor: function constructor(query, includes, oDataProvider) {\n        this._query = query;\n        this._includes = includes;\n        this._isoDataProvider = oDataProvider || false;\n        this.depth = [];\n    },\n    VisitSingleExpression: function VisitSingleExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitSomeExpression: function VisitSomeExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFindExpression: function VisitFindExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitEveryExpression: function VisitEveryExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitToArrayExpression: function VisitToArrayExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitFirstExpression: function VisitFirstExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitForEachExpression: function VisitForEachExpression(expression) {\n        this._defaultModelBinder(expression);\n    },\n    VisitServiceOperationExpression: function VisitServiceOperationExpression(expression) {\n        if (expression.cfg.returnType) {\n            var returnType = _index.Container.resolveType(expression.cfg.returnType);\n            if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo(_index2.default.Queryable) || returnType === _index2.default.Array) {\n                this._defaultModelBinder(expression);\n            } else {\n                var builder = _index.Container.createqueryBuilder();\n                builder.modelBinderConfig['$type'] = returnType;\n                if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo(_index2.default.Entity)) {\n                    builder.modelBinderConfig['$selector'] = ['json:' + expression.cfg.serviceName];\n                } else {\n                    builder.modelBinderConfig['$type'] = returnType;\n                    builder.modelBinderConfig['$value'] = function (a, v) {\n                        return expression.cfg.serviceName in v ? v[expression.cfg.serviceName] : v.value;\n                    };\n                }\n                this.VisitExpression(expression, builder);\n                builder.resetModelBinderProperty();\n                this._query.modelBinderConfig = builder.modelBinderConfig;\n            }\n        }\n    },\n    VisitCountExpression: function VisitCountExpression(expression) {\n        var builder = _index.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _index2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    VisitBatchDeleteExpression: function VisitBatchDeleteExpression(expression) {\n        var builder = _index.Container.createqueryBuilder();\n\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        builder.selectModelBinderProperty('$item');\n        builder.modelBinderConfig['$type'] = _index2.default.Integer;\n        builder.modelBinderConfig['$source'] = 'cnt';\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    VisitConstantExpression: function VisitConstantExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.type;\n        builder.modelBinderConfig['$value'] = expression.value;\n    },\n\n    VisitExpression: function VisitExpression(expression, builder) {\n        var projVisitor = _index.Container.createFindProjectionVisitor(this._includes);\n        var projContext = {};\n        projVisitor.Visit(expression, projContext);\n\n        if (projContext.projectionExpression) {\n            this.Visit(projContext.projectionExpression, builder);\n        } else {\n            this.DefaultSelection(builder, this._query.defaultType, this._includes, projContext.hasIncludeProjectionExpression);\n        }\n    },\n    _defaultModelBinder: function _defaultModelBinder(expression) {\n        var builder = _index.Container.createqueryBuilder();\n        builder.modelBinderConfig['$type'] = _index2.default.Array;\n        if (this._isoDataProvider) {\n            builder.modelBinderConfig['$selector'] = ['json:d.results', 'json:d', 'json:results', 'json:value'];\n        }\n        builder.modelBinderConfig['$item'] = {};\n        builder.selectModelBinderProperty('$item');\n\n        this.VisitExpression(expression, builder);\n\n        builder.resetModelBinderProperty();\n        this._query.modelBinderConfig = builder.modelBinderConfig;\n    },\n    _addPropertyToModelBinderConfig: function _addPropertyToModelBinderConfig(elementType, builder) {\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\n        if (elementType.memberDefinitions) {\n            elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\n                if (!storageModel || storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name]) {\n\n                    var type = _index.Container.resolveType(prop.dataType);\n                    if (!storageModel && this._query.context.storageProvider.supportedDataTypes.indexOf(type) < 0) {\n                        //complex type\n                        builder.selectModelBinderProperty(prop.name);\n                        builder.modelBinderConfig['$type'] = type;\n                        if (this._isoDataProvider) {\n                            builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\n                        } else {\n                            builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\n                        }\n                        this._addPropertyToModelBinderConfig(type, builder);\n                        builder.popModelBinderProperty();\n                    } else {\n                        if (prop.key) {\n                            builder.addKeyField(prop.name);\n                        }\n                        if (prop.concurrencyMode === _index2.default.ConcurrencyMode.Fixed) {\n                            builder.modelBinderConfig[prop.name] = { $source: '@odata.etag' };\n                        } else if (type === _index2.default.Array && prop.elementType) {\n                            builder.selectModelBinderProperty(prop.name);\n                            builder.modelBinderConfig['$type'] = type;\n                            if (this._isoDataProvider) {\n                                builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\n                            } else {\n                                builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\n                            }\n                            builder.selectModelBinderProperty('$item');\n                            var arrayElementType = _index.Container.resolveType(prop.elementType);\n                            builder.modelBinderConfig['$type'] = arrayElementType;\n                            this._addPropertyToModelBinderConfig(arrayElementType, builder);\n                            builder.popModelBinderProperty();\n                            builder.popModelBinderProperty();\n                        } else {\n                            builder.modelBinderConfig[prop.name] = {\n                                $source: prop.name,\n                                $type: prop.type\n                            };\n                        }\n                    }\n                }\n            }, this);\n        } else {\n            /*builder._binderConfig = {\r\n                $selector: ['json:results'],\r\n                $type: $data.Array,\r\n                $item:{\r\n                    $type: elementType,\r\n                    $value: function (meta, data) { return data; }\r\n                }\r\n            }*/\n            if (builder._binderConfig.$type === _index2.default.Array) {\n                builder._binderConfig.$item = builder._binderConfig.$item || {};\n                builder.modelBinderConfig = builder._binderConfig.$item;\n            }\n        }\n        if (storageModel) {\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\n        }\n    },\n    _addComplexTypeProperties: function _addComplexTypeProperties(complexTypes, builder) {\n        complexTypes.forEach(function (ct) {\n            if (ct.ToType !== _index2.default.Array) {\n                builder.selectModelBinderProperty(ct.FromPropertyName);\n                builder.modelBinderConfig['$type'] = ct.ToType;\n                if (this._isoDataProvider) {\n                    builder.modelBinderConfig['$selector'] = ['json:' + ct.FromPropertyName + '.results', 'json:' + ct.FromPropertyName];\n                } else {\n                    builder.modelBinderConfig['$selector'] = 'json:' + ct.FromPropertyName;\n                }\n                this._addPropertyToModelBinderConfig(ct.ToType, builder);\n\n                builder.popModelBinderProperty();\n            } else {\n                var dt = ct.ToType;\n                var et = _index.Container.resolveType(ct.FromType.memberDefinitions.getMember(ct.FromPropertyName).elementType);\n                if (dt === _index2.default.Array && et && et.isAssignableTo && et.isAssignableTo(_index2.default.Entity)) {\n                    config = {\n                        $type: _index2.default.Array,\n                        $selector: 'json:' + ct.FromPropertyName,\n                        $item: {\n                            $type: et\n                        }\n                    };\n                    var md = et.memberDefinitions.getPublicMappedProperties();\n                    for (var i = 0; i < md.length; i++) {\n                        config.$item[md[i].name] = { $type: md[i].type, $source: md[i].name };\n                    }\n                    builder.modelBinderConfig[ct.FromPropertyName] = config;\n                } else {\n                    builder.modelBinderConfig[ct.FromPropertyName] = {\n                        $type: ct.ToType,\n                        $source: ct.FromPropertyName\n                    };\n                }\n            }\n        }, this);\n    },\n    DefaultSelection: function DefaultSelection(builder, type, allIncludes, custom) {\n        var _this = this;\n\n        //no projection, get all item from entitySet\n        builder.modelBinderConfig['$type'] = custom ? _index2.default.Object : type;\n\n        var storageModel = this._query.context._storageModel.getStorageModel(type);\n        this._addPropertyToModelBinderConfig(type, builder);\n        if (allIncludes) {\n            (function () {\n                var excludeDeepInclude = [];\n                allIncludes.forEach(function (include) {\n                    if (excludeDeepInclude.some(function (incName) {\n                        return include.name.length > incName.length && include.name.substr(0, incName.length) === incName;\n                    })) {\n                        return;\n                    }\n                    this.depth.push(include.name);\n\n                    var includes = include.name.split('.');\n                    var association = null;\n                    var tmpStorageModel = storageModel;\n                    var itemCount = 0;\n                    for (var i = 0; i < includes.length; i++) {\n                        if (builder.modelBinderConfig.$item) {\n                            builder.selectModelBinderProperty('$item');\n                            itemCount++;\n                        }\n                        builder.selectModelBinderProperty(includes[i]);\n                        association = tmpStorageModel.Associations[includes[i]];\n                        tmpStorageModel = this._query.context._storageModel.getStorageModel(association.ToType);\n                    }\n                    if (this._isoDataProvider) {\n                        builder.modelBinderConfig['$selector'] = ['json:' + includes[includes.length - 1] + '.results', 'json:' + includes[includes.length - 1]];\n                    } else {\n                        builder.modelBinderConfig['$selector'] = 'json:' + includes[includes.length - 1];\n                    }\n                    if (association.ToMultiplicity === '*') {\n                        builder.modelBinderConfig['$type'] = _index2.default.Array;\n                        builder.selectModelBinderProperty('$item');\n                        builder.modelBinderConfig['$type'] = include.type;\n                        if (include.projectionExpression) {\n                            excludeDeepInclude.push(include.name);\n                            this.Visit(include.projectionExpression, builder);\n                        } else {\n                            this._addPropertyToModelBinderConfig(include.type, builder);\n                        }\n                        builder.popModelBinderProperty();\n                    } else {\n                        builder.modelBinderConfig['$type'] = include.type;\n                        if (include.projectionExpression) {\n                            excludeDeepInclude.push(include.name);\n                            this.Visit(include.projectionExpression, builder);\n                        } else {\n                            this._addPropertyToModelBinderConfig(include.type, builder);\n                        }\n                    }\n\n                    for (var i = 0; i < includes.length + itemCount; i++) {\n                        builder.popModelBinderProperty();\n                    }\n                    this.depth.pop();\n                }, _this);\n            })();\n        }\n    },\n    VisitProjectionExpression: function VisitProjectionExpression(expression, builder) {\n        this.hasProjection = true;\n        this.Visit(expression.selector, builder);\n\n        if (expression.selector && expression.selector.expression instanceof _index2.default.Expressions.ObjectLiteralExpression) {\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || _index2.default.Object;\n        }\n    },\n    VisitParametricQueryExpression: function VisitParametricQueryExpression(expression, builder) {\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression || expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            this.VisitEntityAsProjection(expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n    },\n    VisitEntityAsProjection: function VisitEntityAsProjection(expression, builder) {\n        this.mapping = '';\n        this.Visit(expression.expression, builder);\n        this.depth.push(this.mapping);\n        this.mapping = this.depth.join('.');\n\n        var includes;\n        var currentInclude;\n        if (this.mapping && this._includes instanceof Array) {\n            includes = this._includes.filter(function (inc) {\n                return inc.name.indexOf(this.mapping + '.') === 0;\n            }, this);\n            includes = includes.map(function (inc) {\n                return { name: inc.name.replace(this.mapping + '.', ''), type: inc.type };\n            }, this);\n\n            // if (includes.length > 0){\n            //     this.DefaultSelection(builder, expression.expression.entityType, includes);\n            //     //console.warn('WARN: include for mapped properties is not supported!');\n            // }\n\n            currentInclude = this._includes.filter(function (inc) {\n                return inc.name === this.mapping;\n            }, this)[0];\n        }\n\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression) {\n            if (currentInclude && currentInclude.projectionExpression) {\n                var tmpIncludes = this._includes;\n                this._includes = includes;\n                var tmpDepth = this.depth;\n                this.depth = [];\n                this.Visit(currentInclude.projectionExpression, builder);\n                this._includes = tmpIncludes;\n                this.depth = tmpDepth;\n            } else {\n                this.DefaultSelection(builder, expression.expression.entityType, includes);\n            }\n        } else if (expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            builder.modelBinderConfig.$type = _index2.default.Array;\n            builder.modelBinderConfig.$item = {};\n            builder.selectModelBinderProperty('$item');\n            if (currentInclude && currentInclude.projectionExpression) {\n                var tmpIncludes = this._includes;\n                this._includes = includes;\n                var tmpDepth = this.depth;\n                this.depth = [];\n                this.Visit(currentInclude.projectionExpression, builder);\n                this._includes = tmpIncludes;\n                this.depth = tmpDepth;\n            } else {\n                this.DefaultSelection(builder, expression.expression.elementType, includes);\n            }\n            builder.popModelBinderProperty();\n        }\n        this.depth.pop();\n    },\n\n    VisitEntityFieldExpression: function VisitEntityFieldExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n    },\n    VisitMemberInfoExpression: function VisitMemberInfoExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\n        if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\n            this._addPropertyToModelBinderConfig(_index.Container.resolveType(expression.memberDefinition.type), builder);\n        } else {\n            if (!(builder.modelBinderConfig.$type && _index.Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo && _index.Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo(_index2.default.Entity))) builder.modelBinderConfig['$source'] = expression.memberName;\n        }\n    },\n    VisitEntitySetExpression: function VisitEntitySetExpression(expression, builder) {\n        if (expression.source instanceof _index2.default.Expressions.EntityExpression) {\n            this.Visit(expression.source, builder);\n            this.Visit(expression.selector, builder);\n        }\n    },\n    VisitComplexTypeExpression: function VisitComplexTypeExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n        this.Visit(expression.selector, builder);\n\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            if (builder.modelBinderConfig.$selector instanceof _index2.default.Array) {\n                var temp = builder.modelBinderConfig.$selector[1];\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.selector.memberName + '.results';\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.selector.memberName;\n            } else {\n                builder.modelBinderConfig.$selector += '.' + expression.selector.memberName;\n            }\n        } else {\n            if (this._isoDataProvider) {\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.selector.memberName + '.results', 'json:' + expression.selector.memberName];\n            } else {\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.selector.memberName;\n            }\n        }\n    },\n    VisitEntityExpression: function VisitEntityExpression(expression, builder) {\n        this.Visit(expression.source, builder);\n    },\n    VisitAssociationInfoExpression: function VisitAssociationInfoExpression(expression, builder) {\n        if ('$selector' in builder.modelBinderConfig && builder.modelBinderConfig.$selector.length > 0) {\n            if (builder.modelBinderConfig.$selector instanceof _index2.default.Array) {\n                var temp = builder.modelBinderConfig.$selector[1];\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.associationInfo.FromPropertyName + '.results';\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.associationInfo.FromPropertyName;\n            } else {\n                builder.modelBinderConfig.$selector += '.' + expression.associationInfo.FromPropertyName;\n            }\n        } else {\n            if (this._isoDataProvider) {\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.associationInfo.FromPropertyName + '.results', 'json:' + expression.associationInfo.FromPropertyName];\n            } else {\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.associationInfo.FromPropertyName;\n            }\n        }\n\n        if (this.mapping && this.mapping.length > 0) {\n            this.mapping += '.';\n        }\n        this.mapping += expression.associationInfo.FromPropertyName;\n    },\n    VisitObjectLiteralExpression: function VisitObjectLiteralExpression(expression, builder) {\n        builder.modelBinderConfig['$type'] = _index2.default.Object;\n        expression.members.forEach(function (of) {\n            this.Visit(of, builder);\n        }, this);\n    },\n    VisitObjectFieldExpression: function VisitObjectFieldExpression(expression, builder) {\n        builder.selectModelBinderProperty(expression.fieldName);\n        if (expression.expression instanceof _index2.default.Expressions.EntityExpression || expression.expression instanceof _index2.default.Expressions.EntitySetExpression) {\n            this.VisitEntityAsProjection(expression, builder);\n        } else {\n            this.Visit(expression.expression, builder);\n        }\n        builder.popModelBinderProperty();\n    }\n});\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],115:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Transaction', null, null, {\n    constructor: function constructor() {\n        this._objectId = new Date().getTime();\n        _index2.default.Trace.log(\"create: \", this._objectId);\n\n        this.oncomplete = new _index2.default.Event(\"oncomplete\", this);\n        this.onerror = new _index2.default.Event(\"onerror\", this);\n    },\n    abort: function abort() {\n        _index.Guard.raise(new _index.Exception('Not Implemented', 'Not Implemented', arguments));\n    },\n\n    _objectId: { type: _index2.default.Integer },\n    transaction: { type: _index2.default.Object },\n\n    oncomplete: { type: _index2.default.Event },\n    onerror: { type: _index2.default.Event }\n}, null);\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32}],116:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Validation.Defaults', null, null, null, {\n    validators: {\n        value: {\n            required: function required(value, definedValue) {\n                return !_index.Guard.isNullOrUndefined(value);\n            },\n            customValidator: function customValidator(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || typeof definedValue == \"function\" ? definedValue(value) : true;\n            },\n\n            minValue: function minValue(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value >= definedValue;\n            },\n            maxValue: function maxValue(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value <= definedValue;\n            },\n\n            minLength: function minLength(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.length >= definedValue;\n            },\n            maxLength: function maxLength(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.length <= definedValue;\n            },\n            length: function length(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.length == definedValue;\n            },\n            regex: function regex(value, definedValue) {\n                return _index.Guard.isNullOrUndefined(value) || value.match(typeof definedValue === 'string' ? new RegExp(definedValue.indexOf('/') === 0 && definedValue.lastIndexOf('/') === definedValue.length - 1 ? definedValue.slice(1, -1) : definedValue) : definedValue);\n            }\n        }\n    },\n\n    _getGroupValidations: function _getGroupValidations(validations) {\n        var validators = {};\n        if (Array.isArray(validations)) {\n            for (var i = 0; i < validations.length; i++) {\n                var validator = validations[i];\n                if (typeof this.validators[validator] === 'function') {\n                    validators[validator] = this.validators[validator];\n                }\n            }\n        }\n\n        return validators;\n    }\n});\n\n_index2.default.Class.define('$data.Validation.EntityValidation', _index2.default.Validation.EntityValidationBase, null, {\n\n    ValidateEntity: function ValidateEntity(entity) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n\n        var errors = [];\n        entity.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\n            errors = errors.concat(this.ValidateEntityField(entity, memDef, undefined, true));\n        }, this);\n        return errors;\n    },\n    ValidateEntityField: function ValidateEntityField(entity, memberDefinition, newValue, valueNotSet) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        var errors = [];\n        var resolvedType = _index.Container.resolveType(memberDefinition.dataType);\n        var typeName = _index.Container.resolveName(resolvedType);\n        var value = !valueNotSet ? newValue : entity[memberDefinition.name];\n\n        if (!memberDefinition.inverseProperty && resolvedType && typeof resolvedType.isAssignableTo === 'function' && resolvedType.isAssignableTo(_index2.default.Entity)) {\n            typeName = _index2.default.Entity.fullName;\n        }\n\n        this.fieldValidate(entity, memberDefinition, value, errors, typeName);\n        return errors;\n    },\n\n    getValidationValue: function getValidationValue(memberDefinition, validationName) {\n        var value;\n        if (memberDefinition[validationName] && memberDefinition[validationName].value) value = memberDefinition[validationName].value;else value = memberDefinition[validationName];\n\n        if (this.convertableValidation[validationName]) {\n            var typeToConvert;\n            if (this.convertableValidation[validationName] === true) {\n                typeToConvert = memberDefinition.type;\n            } else {\n                typeToConvert = this.convertableValidation[validationName];\n            }\n\n            if (typeToConvert) value = _index.Container.convertTo(value, typeToConvert, memberDefinition.elementType);\n        }\n\n        return value;\n    },\n    getValidationMessage: function getValidationMessage(memberDefinition, validationName, defaultMessage) {\n        var eMessage = defaultMessage;\n        if (_typeof(memberDefinition[validationName]) == \"object\" && memberDefinition[validationName].message) eMessage = memberDefinition[validationName].message;else if (memberDefinition.errorMessage) eMessage = memberDefinition.errorMessage;\n\n        return eMessage;\n    },\n    createValidationError: function createValidationError(memberDefinition, validationName, defaultMessage) {\n        return new _index2.default.Validation.ValidationError(this.getValidationMessage(memberDefinition, validationName, defaultMessage), memberDefinition, validationName);\n    },\n\n    convertableValidation: {\n        value: {\n            required: '$data.Boolean',\n            minValue: true,\n            maxValue: true,\n            minLength: '$data.Integer',\n            maxLength: '$data.Integer',\n            length: '$data.Integer'\n        }\n\n    },\n    supportedValidations: {\n        value: {\n            //'$data.Entity': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.ObjectID': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Byte': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.SByte': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Decimal': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Float': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Number': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int16': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Integer': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int32': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Int64': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.String': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length', 'regex']),\n            '$data.Date': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.DateTimeOffset': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Time': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Day': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\n            '$data.Duration': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Boolean': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Array': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'length']),\n            '$data.Object': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Guid': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.Blob': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length']),\n            '$data.GeographyPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyMultiPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeographyCollection': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiPoint': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiLineString': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryMultiPolygon': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\n            '$data.GeometryCollection': _index2.default.Validation.Defaults._getGroupValidations(['required', 'customValidator'])\n        }\n    },\n\n    fieldValidate: function fieldValidate(entity, memberDefinition, value, errors, validationTypeName) {\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        ///<param name=\"value\" type=\"Object\" />\n        ///<param name=\"errors\" type=\"Array\" />\n        ///<param name=\"validationTypeName\" type=\"string\" />\n        if (entity.entityState == _index2.default.EntityState.Modified && entity.changedProperties && entity.changedProperties.indexOf(memberDefinition) < 0) return;\n\n        var validatonGroup = this.supportedValidations[validationTypeName];\n        if (validatonGroup) {\n            var validations = Object.keys(validatonGroup);\n            validations.forEach(function (validation) {\n                if (memberDefinition[validation] && validatonGroup[validation] && !validatonGroup[validation].call(entity, value, this.getValidationValue(memberDefinition, validation))) errors.push(this.createValidationError(memberDefinition, validation, 'Validation error!'));\n            }, this);\n\n            if (validationTypeName === _index2.default.Entity.fullName && value instanceof _index2.default.Entity && !value.isValid()) {\n                errors.push(this.createValidationError(memberDefinition, 'ComplexProperty', 'Validation error!'));\n            }\n        }\n    }\n\n}, null);\n\n_index2.default.Validation.Entity = new _index2.default.Validation.EntityValidation();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],117:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _index = _dereq_('../../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_index2.default.Class.define('$data.Validation.ValidationError', null, null, {\n    constructor: function constructor(message, propertyDefinition, type) {\n        ///<param name=\"message\" type=\"string\" />\n        ///<param name=\"propertyDefinition\" type=\"$data.MemberDefinition\" />\n\n        this.Message = message;\n        this.PropertyDefinition = propertyDefinition;\n        this.Type = type;\n    },\n    Type: { dataType: 'string' },\n    Message: { dataType: \"string\" },\n    PropertyDefinition: { dataType: _index2.default.MemberDefinition }\n}, null);\n\n_index2.default.Class.define('$data.Validation.EntityValidationBase', null, null, {\n\n    ValidateEntity: function ValidateEntity(entity) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        return [];\n    },\n\n    ValidateEntityField: function ValidateEntityField(entity, memberDefinition) {\n        ///<param name=\"entity\" type=\"$data.Entity\" />\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\n        return [];\n    },\n\n    getValidationValue: function getValidationValue(memberDefinition, validationName) {\n        _index.Guard.raise(\"Pure class\");\n    },\n    getValidationMessage: function getValidationMessage(memberDefinition, validationName, defaultMessage) {\n        _index.Guard.raise(\"Pure class\");\n    }\n\n}, null);\n\n_index2.default.Validation = _index2.default.Validation || {};\n_index2.default.Validation.Entity = new _index2.default.Validation.EntityValidationBase();\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../../TypeSystem/index.js\":32}],118:[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = _dereq_('../TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = _dereq_('./Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _EntityValidationBase = _dereq_('./Validation/EntityValidationBase.js');\n\nvar _EntityValidationBase2 = _interopRequireDefault(_EntityValidationBase);\n\nvar _EntityValidation = _dereq_('./Validation/EntityValidation.js');\n\nvar _EntityValidation2 = _interopRequireDefault(_EntityValidation);\n\nvar _ChangeDistributorBase = _dereq_('./Notifications/ChangeDistributorBase.js');\n\nvar _ChangeDistributorBase2 = _interopRequireDefault(_ChangeDistributorBase);\n\nvar _ChangeCollectorBase = _dereq_('./Notifications/ChangeCollectorBase.js');\n\nvar _ChangeCollectorBase2 = _interopRequireDefault(_ChangeCollectorBase);\n\nvar _ChangeDistributor = _dereq_('./Notifications/ChangeDistributor.js');\n\nvar _ChangeDistributor2 = _interopRequireDefault(_ChangeDistributor);\n\nvar _ChangeCollector = _dereq_('./Notifications/ChangeCollector.js');\n\nvar _ChangeCollector2 = _interopRequireDefault(_ChangeCollector);\n\nvar _Transaction = _dereq_('./Transaction.js');\n\nvar _Transaction2 = _interopRequireDefault(_Transaction);\n\nvar _Access = _dereq_('./Access.js');\n\nvar _Access2 = _interopRequireDefault(_Access);\n\nvar _Entity = _dereq_('./Entity.js');\n\nvar _Entity2 = _interopRequireDefault(_Entity);\n\nvar _Enum = _dereq_('./Enum.js');\n\nvar _Enum2 = _interopRequireDefault(_Enum);\n\nvar _RelatedEntityProxy = _dereq_('./RelatedEntityProxy.js');\n\nvar _RelatedEntityProxy2 = _interopRequireDefault(_RelatedEntityProxy);\n\nvar _EntityContext = _dereq_('./EntityContext.js');\n\nvar _EntityContext2 = _interopRequireDefault(_EntityContext);\n\nvar _QueryProvider = _dereq_('./QueryProvider.js');\n\nvar _QueryProvider2 = _interopRequireDefault(_QueryProvider);\n\nvar _ModelBinder = _dereq_('./ModelBinder.js');\n\nvar _ModelBinder2 = _interopRequireDefault(_ModelBinder);\n\nvar _QueryBuilder = _dereq_('./QueryBuilder.js');\n\nvar _QueryBuilder2 = _interopRequireDefault(_QueryBuilder);\n\nvar _Query = _dereq_('./Query.js');\n\nvar _Query2 = _interopRequireDefault(_Query);\n\nvar _Queryable = _dereq_('./Queryable.js');\n\nvar _Queryable2 = _interopRequireDefault(_Queryable);\n\nvar _EntitySet = _dereq_('./EntitySet.js');\n\nvar _EntitySet2 = _interopRequireDefault(_EntitySet);\n\nvar _EntityState = _dereq_('./EntityState.js');\n\nvar _EntityState2 = _interopRequireDefault(_EntityState);\n\nvar _EntityAttachModes = _dereq_('./EntityAttachModes.js');\n\nvar _EntityAttachModes2 = _interopRequireDefault(_EntityAttachModes);\n\nvar _EntityStateManager = _dereq_('./EntityStateManager.js');\n\nvar _EntityStateManager2 = _interopRequireDefault(_EntityStateManager);\n\nvar _ItemStore = _dereq_('./ItemStore.js');\n\nvar _ItemStore2 = _interopRequireDefault(_ItemStore);\n\nvar _StorageProviderLoader = _dereq_('./StorageProviderLoader.js');\n\nvar _StorageProviderLoader2 = _interopRequireDefault(_StorageProviderLoader);\n\nvar _StorageProviderBase = _dereq_('./StorageProviderBase.js');\n\nvar _StorageProviderBase2 = _interopRequireDefault(_StorageProviderBase);\n\nvar _ServiceOperation = _dereq_('./ServiceOperation.js');\n\nvar _ServiceOperation2 = _interopRequireDefault(_ServiceOperation);\n\nvar _EntityWrapper = _dereq_('./EntityWrapper.js');\n\nvar _EntityWrapper2 = _interopRequireDefault(_EntityWrapper);\n\nvar _jQueryAjaxWrapper = _dereq_('./Ajax/jQueryAjaxWrapper.js');\n\nvar _jQueryAjaxWrapper2 = _interopRequireDefault(_jQueryAjaxWrapper);\n\nvar _WinJSAjaxWrapper = _dereq_('./Ajax/WinJSAjaxWrapper.js');\n\nvar _WinJSAjaxWrapper2 = _interopRequireDefault(_WinJSAjaxWrapper);\n\nvar _ExtJSAjaxWrapper = _dereq_('./Ajax/ExtJSAjaxWrapper.js');\n\nvar _ExtJSAjaxWrapper2 = _interopRequireDefault(_ExtJSAjaxWrapper);\n\nvar _AjaxStub = _dereq_('./Ajax/AjaxStub.js');\n\nvar _AjaxStub2 = _interopRequireDefault(_AjaxStub);\n\nvar _modelBinderConfigCompiler = _dereq_('./StorageProviders/modelBinderConfigCompiler.js');\n\nvar _modelBinderConfigCompiler2 = _interopRequireDefault(_modelBinderConfigCompiler);\n\nvar _AuthenticationBase = _dereq_('./Authentication/AuthenticationBase.js');\n\nvar _AuthenticationBase2 = _interopRequireDefault(_AuthenticationBase);\n\nvar _Anonymous = _dereq_('./Authentication/Anonymous.js');\n\nvar _Anonymous2 = _interopRequireDefault(_Anonymous);\n\nvar _FacebookAuth = _dereq_('./Authentication/FacebookAuth.js');\n\nvar _FacebookAuth2 = _interopRequireDefault(_FacebookAuth);\n\nvar _BasicAuth = _dereq_('./Authentication/BasicAuth.js');\n\nvar _BasicAuth2 = _interopRequireDefault(_BasicAuth);\n\nvar _jaydataPromiseHandler = _dereq_('jaydata-promise-handler');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import Promise from './Promise.js';\n\n_jaydataPromiseHandler.PromiseHandler.use(_index2.default);\n//import JaySvcUtil from '../JaySvcUtil/JaySvcUtil.js';\n//import deferred from '../JayDataModules/deferred.js';\n//import JayStorm from './JayStorm.js';\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"../TypeSystem/index.js\":32,\"./Access.js\":35,\"./Ajax/AjaxStub.js\":36,\"./Ajax/ExtJSAjaxWrapper.js\":37,\"./Ajax/WinJSAjaxWrapper.js\":38,\"./Ajax/jQueryAjaxWrapper.js\":39,\"./Authentication/Anonymous.js\":40,\"./Authentication/AuthenticationBase.js\":41,\"./Authentication/BasicAuth.js\":42,\"./Authentication/FacebookAuth.js\":43,\"./Entity.js\":44,\"./EntityAttachModes.js\":45,\"./EntityContext.js\":46,\"./EntitySet.js\":47,\"./EntityState.js\":48,\"./EntityStateManager.js\":49,\"./EntityWrapper.js\":50,\"./Enum.js\":51,\"./Expressions/index.js\":99,\"./ItemStore.js\":100,\"./ModelBinder.js\":101,\"./Notifications/ChangeCollector.js\":102,\"./Notifications/ChangeCollectorBase.js\":103,\"./Notifications/ChangeDistributor.js\":104,\"./Notifications/ChangeDistributorBase.js\":105,\"./Query.js\":106,\"./QueryBuilder.js\":107,\"./QueryProvider.js\":108,\"./Queryable.js\":109,\"./RelatedEntityProxy.js\":110,\"./ServiceOperation.js\":111,\"./StorageProviderBase.js\":112,\"./StorageProviderLoader.js\":113,\"./StorageProviders/modelBinderConfigCompiler.js\":114,\"./Transaction.js\":115,\"./Validation/EntityValidation.js\":116,\"./Validation/EntityValidationBase.js\":117,\"jaydata-promise-handler\":8}],\"jaydata/core\":[function(_dereq_,module,exports){\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = _dereq_('./TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = _dereq_('./Types/Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _index5 = _dereq_('./JaySvcUtil/index.js');\n\nvar _index6 = _interopRequireDefault(_index5);\n\nvar _index7 = _dereq_('./Types/index.js');\n\nvar _index8 = _interopRequireDefault(_index7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n\n},{\"./JaySvcUtil/index.js\":17,\"./TypeSystem/index.js\":32,\"./Types/Expressions/index.js\":99,\"./Types/index.js\":118}]},{},[])\n\n\t/*var $data = require('jaydata/core');\r\n\t$data.version = 'JayData 1.5.1';\r\n\t$data.versionNumber = '1.5.1';*/\r\n\r\n\tif (typeof exports === \"object\" && typeof module !== \"undefined\") {\r\n\t\tmodule.exports = require('jaydata/core')\r\n\t} else if (typeof define === \"function\" && define.amd) {\r\n\t\tvar interopRequire = require;\r\n\t\tdefine([], function(){\r\n\t\t\treturn interopRequire('jaydata/core');\r\n\t\t});\r\n\r\n\t\tdefine('jaydata/core', [], function(){\r\n\t\t\treturn interopRequire('jaydata/core');\r\n\t\t});\r\n\t} else {\r\n\t\tvar g;\r\n\t\tif (typeof window !== \"undefined\") {\r\n\t\t\twindow.require = require;\r\n\t\t\tg = window\r\n\t\t} else if (typeof global !== \"undefined\") {\r\n\t\t\tg = global\r\n\t\t} else if (typeof self !== \"undefined\") {\r\n\t\t\tg = self\r\n\t\t} else {\r\n\t\t\tg = this\r\n\t\t}\r\n\t\tg.$data = require('jaydata/core');\r\n\t}\r\n})();\r\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.acorn = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar pp = _state.Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp.checkPropClash = function (prop, propHash) {\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;\n  var key = prop.key;var name = undefined;\n  switch (key.type) {\n    case \"Identifier\":\n      name = key.name;break;\n    case \"Literal\":\n      name = String(key.value);break;\n    default:\n      return;\n  }\n  var kind = prop.kind;\n\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) this.raise(key.start, \"Redefinition of __proto__ property\");\n      propHash.proto = true;\n    }\n    return;\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var isGetSet = kind !== \"init\";\n    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init)) this.raise(key.start, \"Redefinition of property\");\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp.parseExpression = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === _tokentype.types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(_tokentype.types.comma)) node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));\n    return this.finishNode(node, \"SequenceExpression\");\n  }\n  return expr;\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.type == _tokentype.types._yield && this.inGenerator) return this.parseYield();\n\n  var validateDestructuring = false;\n  if (!refDestructuringErrors) {\n    refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n    validateDestructuring = true;\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  if (this.type == _tokentype.types.parenL || this.type == _tokentype.types.name) this.potentialArrowAt = this.start;\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);\n  if (this.type.isAssign) {\n    if (validateDestructuring) this.checkPatternErrors(refDestructuringErrors, true);\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === _tokentype.types.eq ? this.toAssignable(left) : left;\n    refDestructuringErrors.shorthandAssign = 0; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\");\n  } else {\n    if (validateDestructuring) this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return left;\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp.parseMaybeConditional = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  if (this.eat(_tokentype.types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(_tokentype.types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  return expr;\n};\n\n// Start the precedence parser.\n\npp.parseExprOps = function (noIn, refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {\n    if (prec > minPrec) {\n      var node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.left = left;\n      node.operator = this.value;\n      var op = this.type;\n      this.next();\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n      this.finishNode(node, op === _tokentype.types.logicalOR || op === _tokentype.types.logicalAND ? \"LogicalExpression\" : \"BinaryExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n  }\n  return left;\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp.parseMaybeUnary = function (refDestructuringErrors) {\n  if (this.type.prefix) {\n    var node = this.startNode(),\n        update = this.type === _tokentype.types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary();\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === \"delete\" && node.argument.type === \"Identifier\") this.raise(node.start, \"Deleting local variable in strict mode\");\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprSubscripts(refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;\n  while (this.type.postfix && !this.canInsertSemicolon()) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.prefix = false;\n    node.argument = expr;\n    this.checkLVal(expr);\n    this.next();\n    expr = this.finishNode(node, \"UpdateExpression\");\n  }\n  return expr;\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp.parseExprSubscripts = function (refDestructuringErrors) {\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;\n  return this.parseSubscripts(expr, startPos, startLoc);\n};\n\npp.parseSubscripts = function (base, startPos, startLoc, noCalls) {\n  for (;;) {\n    if (this.eat(_tokentype.types.dot)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseIdent(true);\n      node.computed = false;\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(_tokentype.types.bracketL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(_tokentype.types.bracketR);\n      base = this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.eat(_tokentype.types.parenL)) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseExprList(_tokentype.types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (this.type === _tokentype.types.backQuote) {\n      var node = this.startNodeAt(startPos, startLoc);\n      node.tag = base;\n      node.quasi = this.parseTemplate();\n      base = this.finishNode(node, \"TaggedTemplateExpression\");\n    } else {\n      return base;\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp.parseExprAtom = function (refDestructuringErrors) {\n  var node = undefined,\n      canBeArrow = this.potentialArrowAt == this.start;\n  switch (this.type) {\n    case _tokentype.types._super:\n      if (!this.inFunction) this.raise(this.start, \"'super' outside of function or class\");\n    case _tokentype.types._this:\n      var type = this.type === _tokentype.types._this ? \"ThisExpression\" : \"Super\";\n      node = this.startNode();\n      this.next();\n      return this.finishNode(node, type);\n\n    case _tokentype.types._yield:\n      if (this.inGenerator) this.unexpected();\n\n    case _tokentype.types.name:\n      var startPos = this.start,\n          startLoc = this.startLoc;\n      var id = this.parseIdent(this.type !== _tokentype.types.name);\n      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id]);\n      return id;\n\n    case _tokentype.types.regexp:\n      var value = this.value;\n      node = this.parseLiteral(value.value);\n      node.regex = { pattern: value.pattern, flags: value.flags };\n      return node;\n\n    case _tokentype.types.num:case _tokentype.types.string:\n      return this.parseLiteral(this.value);\n\n    case _tokentype.types._null:case _tokentype.types._true:case _tokentype.types._false:\n      node = this.startNode();\n      node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;\n      node.raw = this.type.keyword;\n      this.next();\n      return this.finishNode(node, \"Literal\");\n\n    case _tokentype.types.parenL:\n      return this.parseParenAndDistinguishExpression(canBeArrow);\n\n    case _tokentype.types.bracketL:\n      node = this.startNode();\n      this.next();\n      // check whether this is array comprehension or regular array\n      if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {\n        return this.parseComprehension(node, false);\n      }\n      node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);\n      return this.finishNode(node, \"ArrayExpression\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(false, refDestructuringErrors);\n\n    case _tokentype.types._function:\n      node = this.startNode();\n      this.next();\n      return this.parseFunction(node, false);\n\n    case _tokentype.types._class:\n      return this.parseClass(this.startNode(), false);\n\n    case _tokentype.types._new:\n      return this.parseNew();\n\n    case _tokentype.types.backQuote:\n      return this.parseTemplate();\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseLiteral = function (value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\");\n};\n\npp.parseParenExpression = function () {\n  this.expect(_tokentype.types.parenL);\n  var val = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  return val;\n};\n\npp.parseParenAndDistinguishExpression = function (canBeArrow) {\n  var startPos = this.start,\n      startLoc = this.startLoc,\n      val = undefined;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {\n      return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);\n    }\n\n    var innerStartPos = this.start,\n        innerStartLoc = this.startLoc;\n    var exprList = [],\n        first = true;\n    var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 },\n        spreadStart = undefined,\n        innerParenStart = undefined;\n    while (this.type !== _tokentype.types.parenR) {\n      first ? first = false : this.expect(_tokentype.types.comma);\n      if (this.type === _tokentype.types.ellipsis) {\n        spreadStart = this.start;\n        exprList.push(this.parseParenItem(this.parseRest()));\n        break;\n      } else {\n        if (this.type === _tokentype.types.parenL && !innerParenStart) {\n          innerParenStart = this.start;\n        }\n        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start,\n        innerEndLoc = this.startLoc;\n    this.expect(_tokentype.types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, true);\n      if (innerParenStart) this.unexpected(innerParenStart);\n      return this.parseParenArrowList(startPos, startLoc, exprList);\n    }\n\n    if (!exprList.length) this.unexpected(this.lastTokStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\");\n  } else {\n    return val;\n  }\n};\n\npp.parseParenItem = function (item) {\n  return item;\n};\n\npp.parseParenArrowList = function (startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty = [];\n\npp.parseNew = function () {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {\n    node.meta = meta;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\") this.raise(node.property.start, \"The only valid meta property for new is new.target\");\n    if (!this.inFunction) this.raise(node.start, \"new.target can only be used in functions\");\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  var startPos = this.start,\n      startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(_tokentype.types.parenL)) node.arguments = this.parseExprList(_tokentype.types.parenR, false);else node.arguments = empty;\n  return this.finishNode(node, \"NewExpression\");\n};\n\n// Parse template expression.\n\npp.parseTemplateElement = function () {\n  var elem = this.startNode();\n  elem.value = {\n    raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, '\\n'),\n    cooked: this.value\n  };\n  this.next();\n  elem.tail = this.type === _tokentype.types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\");\n};\n\npp.parseTemplate = function () {\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement();\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    this.expect(_tokentype.types.dollarBraceL);\n    node.expressions.push(this.parseExpression());\n    this.expect(_tokentype.types.braceR);\n    node.quasis.push(curElt = this.parseTemplateElement());\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\");\n};\n\n// Parse an object literal or binding pattern.\n\npp.parseObj = function (isPattern, refDestructuringErrors) {\n  var node = this.startNode(),\n      first = true,\n      propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var prop = this.startNode(),\n        isGenerator = undefined,\n        startPos = undefined,\n        startLoc = undefined;\n    if (this.options.ecmaVersion >= 6) {\n      prop.method = false;\n      prop.shorthand = false;\n      if (isPattern || refDestructuringErrors) {\n        startPos = this.start;\n        startLoc = this.startLoc;\n      }\n      if (!isPattern) isGenerator = this.eat(_tokentype.types.star);\n    }\n    this.parsePropertyName(prop);\n    this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors);\n    this.checkPropClash(prop, propHash);\n    node.properties.push(this.finishNode(prop, \"Property\"));\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n};\n\npp.parsePropertyValue = function (prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {\n  if (this.eat(_tokentype.types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {\n    if (isPattern) this.unexpected();\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator);\n  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.type != _tokentype.types.comma && this.type != _tokentype.types.braceR)) {\n    if (isGenerator || isPattern) this.unexpected();\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\") this.raise(start, \"getter should have no params\");else this.raise(start, \"setter should have exactly one param\");\n    }\n    if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") this.raise(prop.value.params[0].start, \"Setter cannot use rest params\");\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    prop.kind = \"init\";\n    if (isPattern) {\n      if (this.keywords.test(prop.key.name) || (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name)) this.raise(prop.key.start, \"Binding \" + prop.key.name);\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {\n      if (!refDestructuringErrors.shorthandAssign) refDestructuringErrors.shorthandAssign = this.start;\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else this.unexpected();\n};\n\npp.parsePropertyName = function (prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(_tokentype.types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(_tokentype.types.bracketR);\n      return prop.key;\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);\n};\n\n// Initialize empty function node.\n\npp.initFunction = function (node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n};\n\n// Parse object or class method.\n\npp.parseMethod = function (isGenerator) {\n  var node = this.startNode();\n  this.initFunction(node);\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false);\n  if (this.options.ecmaVersion >= 6) node.generator = isGenerator;\n  this.parseFunctionBody(node, false);\n  return this.finishNode(node, \"FunctionExpression\");\n};\n\n// Parse arrow function expression with given parameters.\n\npp.parseArrowExpression = function (node, params) {\n  this.initFunction(node);\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n  return this.finishNode(node, \"ArrowFunctionExpression\");\n};\n\n// Parse function body and check parameters.\n\npp.parseFunctionBody = function (node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n  } else {\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldInFunc = this.inFunction,\n        oldInGen = this.inGenerator,\n        oldLabels = this.labels;\n    this.inFunction = true;this.inGenerator = node.generator;this.labels = [];\n    node.body = this.parseBlock(true);\n    node.expression = false;\n    this.inFunction = oldInFunc;this.inGenerator = oldInGen;this.labels = oldLabels;\n  }\n\n  // If this is a strict mode function, verify that argument names\n  // are not repeated, and it does not try to bind the words `eval`\n  // or `arguments`.\n  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {\n    var oldStrict = this.strict;\n    this.strict = true;\n    if (node.id) this.checkLVal(node.id, true);\n    this.checkParams(node);\n    this.strict = oldStrict;\n  } else if (isArrowFunction) {\n    this.checkParams(node);\n  }\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp.checkParams = function (node) {\n  var nameHash = {};\n  for (var i = 0; i < node.params.length; i++) {\n    this.checkLVal(node.params[i], true, nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.type === close && refDestructuringErrors && !refDestructuringErrors.trailingComma) {\n        refDestructuringErrors.trailingComma = this.lastTokStart;\n      }\n      if (allowTrailingComma && this.afterTrailingComma(close)) break;\n    } else first = false;\n\n    var elt = undefined;\n    if (allowEmpty && this.type === _tokentype.types.comma) elt = null;else if (this.type === _tokentype.types.ellipsis) elt = this.parseSpread(refDestructuringErrors);else elt = this.parseMaybeAssign(false, refDestructuringErrors);\n    elts.push(elt);\n  }\n  return elts;\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp.parseIdent = function (liberal) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved == \"never\") liberal = false;\n  if (this.type === _tokentype.types.name) {\n    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf(\"\\\\\") == -1)) this.raise(this.start, \"The keyword '\" + this.value + \"' is reserved\");\n    node.name = this.value;\n  } else if (liberal && this.type.keyword) {\n    node.name = this.type.keyword;\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  return this.finishNode(node, \"Identifier\");\n};\n\n// Parses yield expression inside generator.\n\npp.parseYield = function () {\n  var node = this.startNode();\n  this.next();\n  if (this.type == _tokentype.types.semi || this.canInsertSemicolon() || this.type != _tokentype.types.star && !this.type.startsExpr) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(_tokentype.types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\");\n};\n\n// Parses array and generator comprehensions.\n\npp.parseComprehension = function (node, isGenerator) {\n  node.blocks = [];\n  while (this.type === _tokentype.types._for) {\n    var block = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    block.left = this.parseBindingAtom();\n    this.checkLVal(block.left, true);\n    this.expectContextual(\"of\");\n    block.right = this.parseExpression();\n    this.expect(_tokentype.types.parenR);\n    node.blocks.push(this.finishNode(block, \"ComprehensionBlock\"));\n  }\n  node.filter = this.eat(_tokentype.types._if) ? this.parseParenExpression() : null;\n  node.body = this.parseExpression();\n  this.expect(isGenerator ? _tokentype.types.parenR : _tokentype.types.bracketR);\n  node.generator = isGenerator;\n  return this.finishNode(node, \"ComprehensionExpression\");\n};\n\n},{\"./state\":10,\"./tokentype\":14}],2:[function(_dereq_,module,exports){\n// This is a trick taken from Esprima. It turns out that, on\n// non-Chrome browsers, to check whether a string is in a set, a\n// predicate containing a big ugly `switch` statement is faster than\n// a regular expression, and on Chrome the two are about on par.\n// This function uses `eval` (non-lexical) to produce such a\n// predicate from a space-separated string of words.\n//\n// It starts by sorting the words by length.\n\n// Reserved word lists for various dialects of the language\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isIdentifierStart = isIdentifierStart;\nexports.isIdentifierChar = isIdentifierChar;\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\nexports.reservedWords = reservedWords;\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" let const class extends export import yield super\"\n};\n\nexports.keywords = keywords;\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ\";\nvar nonASCIIidentifierChars = \"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by tools/generate-identifier-regex.js\nvar astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];\nvar astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) return code === 36;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  if (astral === false) return false;\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\n},{}],3:[function(_dereq_,module,exports){\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.parse = parse;\nexports.parseExpressionAt = parseExpressionAt;\nexports.tokenizer = tokenizer;\n\nvar _state = _dereq_(\"./state\");\n\n_dereq_(\"./parseutil\");\n\n_dereq_(\"./statement\");\n\n_dereq_(\"./lval\");\n\n_dereq_(\"./expression\");\n\n_dereq_(\"./location\");\n\nexports.Parser = _state.Parser;\nexports.plugins = _state.plugins;\n\nvar _options = _dereq_(\"./options\");\n\nexports.defaultOptions = _options.defaultOptions;\n\nvar _locutil = _dereq_(\"./locutil\");\n\nexports.Position = _locutil.Position;\nexports.SourceLocation = _locutil.SourceLocation;\nexports.getLineInfo = _locutil.getLineInfo;\n\nvar _node = _dereq_(\"./node\");\n\nexports.Node = _node.Node;\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nexports.TokenType = _tokentype.TokenType;\nexports.tokTypes = _tokentype.types;\n\nvar _tokencontext = _dereq_(\"./tokencontext\");\n\nexports.TokContext = _tokencontext.TokContext;\nexports.tokContexts = _tokencontext.types;\n\nvar _identifier = _dereq_(\"./identifier\");\n\nexports.isIdentifierChar = _identifier.isIdentifierChar;\nexports.isIdentifierStart = _identifier.isIdentifierStart;\n\nvar _tokenize = _dereq_(\"./tokenize\");\n\nexports.Token = _tokenize.Token;\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nexports.isNewLine = _whitespace.isNewLine;\nexports.lineBreak = _whitespace.lineBreak;\nexports.lineBreakG = _whitespace.lineBreakG;\nvar version = \"2.7.0\";\n\nexports.version = version;\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new _state.Parser(options, input).parse();\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new _state.Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression();\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new _state.Parser(options, input);\n}\n\n},{\"./expression\":1,\"./identifier\":2,\"./location\":4,\"./locutil\":5,\"./lval\":6,\"./node\":7,\"./options\":8,\"./parseutil\":9,\"./state\":10,\"./statement\":11,\"./tokencontext\":12,\"./tokenize\":13,\"./tokentype\":14,\"./whitespace\":16}],4:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar pp = _state.Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp.raise = function (pos, message) {\n  var loc = _locutil.getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos;err.loc = loc;err.raisedAt = this.pos;\n  throw err;\n};\n\npp.curPosition = function () {\n  if (this.options.locations) {\n    return new _locutil.Position(this.curLine, this.pos - this.lineStart);\n  }\n};\n\n},{\"./locutil\":5,\"./state\":10}],5:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getLineInfo = getLineInfo;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = (function () {\n  function Position(line, col) {\n    _classCallCheck(this, Position);\n\n    this.line = line;\n    this.column = col;\n  }\n\n  Position.prototype.offset = function offset(n) {\n    return new Position(this.line, this.column + n);\n  };\n\n  return Position;\n})();\n\nexports.Position = Position;\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  _classCallCheck(this, SourceLocation);\n\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) this.source = p.sourceFile;\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\n;\n\nexports.SourceLocation = SourceLocation;\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    _whitespace.lineBreakG.lastIndex = cur;\n    var match = _whitespace.lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur);\n    }\n  }\n}\n\n},{\"./whitespace\":16}],6:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _util = _dereq_(\"./util\");\n\nvar pp = _state.Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp.toAssignable = function (node, isBinding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (var i = 0; i < node.properties.length; i++) {\n          var prop = node.properties[i];\n          if (prop.kind !== \"init\") this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n          this.toAssignable(prop.value, isBinding);\n        }\n        break;\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, isBinding);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator === \"=\") {\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          // falls through to AssignmentPattern\n        } else {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n            break;\n          }\n\n      case \"AssignmentPattern\":\n        if (node.right.type === \"YieldExpression\") this.raise(node.right.start, \"Yield expression cannot be a default value\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isBinding);\n        break;\n\n      case \"MemberExpression\":\n        if (!isBinding) break;\n\n      default:\n        this.raise(node.start, \"Assigning to rvalue\");\n    }\n  }\n  return node;\n};\n\n// Convert list of expression atoms to binding list.\n\npp.toAssignableList = function (exprList, isBinding) {\n  var end = exprList.length;\n  if (end) {\n    var last = exprList[end - 1];\n    if (last && last.type == \"RestElement\") {\n      --end;\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\";\n      var arg = last.argument;\n      this.toAssignable(arg, isBinding);\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\") this.unexpected(arg.start);\n      --end;\n    }\n\n    if (isBinding && last.type === \"RestElement\" && last.argument.type !== \"Identifier\") this.unexpected(last.argument.start);\n  }\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) this.toAssignable(elt, isBinding);\n  }\n  return exprList;\n};\n\n// Parses spread element.\n\npp.parseSpread = function (refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\");\n};\n\npp.parseRest = function (allowNonIdent) {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (allowNonIdent) node.argument = this.type === _tokentype.types.name ? this.parseIdent() : this.unexpected();else node.argument = this.type === _tokentype.types.name || this.type === _tokentype.types.bracketL ? this.parseBindingAtom() : this.unexpected();\n\n  return this.finishNode(node, \"RestElement\");\n};\n\n// Parses lvalue (assignable) atom.\n\npp.parseBindingAtom = function () {\n  if (this.options.ecmaVersion < 6) return this.parseIdent();\n  switch (this.type) {\n    case _tokentype.types.name:\n      return this.parseIdent();\n\n    case _tokentype.types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\");\n\n    case _tokentype.types.braceL:\n      return this.parseObj(true);\n\n    default:\n      this.unexpected();\n  }\n};\n\npp.parseBindingList = function (close, allowEmpty, allowTrailingComma, allowNonIdent) {\n  var elts = [],\n      first = true;\n  while (!this.eat(close)) {\n    if (first) first = false;else this.expect(_tokentype.types.comma);\n    if (allowEmpty && this.type === _tokentype.types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break;\n    } else if (this.type === _tokentype.types.ellipsis) {\n      var rest = this.parseRest(allowNonIdent);\n      this.parseBindingListItem(rest);\n      elts.push(rest);\n      this.expect(close);\n      break;\n    } else {\n      var elem = this.parseMaybeDefault(this.start, this.startLoc);\n      this.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts;\n};\n\npp.parseBindingListItem = function (param) {\n  return param;\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp.parseMaybeDefault = function (startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq)) return left;\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\");\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp.checkLVal = function (expr, isBinding, checkClashes) {\n  switch (expr.type) {\n    case \"Identifier\":\n      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raise(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\");\n      if (checkClashes) {\n        if (_util.has(checkClashes, expr.name)) this.raise(expr.start, \"Argument name clash\");\n        checkClashes[expr.name] = true;\n      }\n      break;\n\n    case \"MemberExpression\":\n      if (isBinding) this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\");\n      break;\n\n    case \"ObjectPattern\":\n      for (var i = 0; i < expr.properties.length; i++) {\n        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);\n      }break;\n\n    case \"ArrayPattern\":\n      for (var i = 0; i < expr.elements.length; i++) {\n        var elem = expr.elements[i];\n        if (elem) this.checkLVal(elem, isBinding, checkClashes);\n      }\n      break;\n\n    case \"AssignmentPattern\":\n      this.checkLVal(expr.left, isBinding, checkClashes);\n      break;\n\n    case \"RestElement\":\n      this.checkLVal(expr.argument, isBinding, checkClashes);\n      break;\n\n    case \"ParenthesizedExpression\":\n      this.checkLVal(expr.expression, isBinding, checkClashes);\n      break;\n\n    default:\n      this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./util\":15}],7:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar Node = function Node(parser, pos, loc) {\n  _classCallCheck(this, Node);\n\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations) this.loc = new _locutil.SourceLocation(parser, loc);\n  if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;\n  if (parser.options.ranges) this.range = [pos, 0];\n}\n\n// Start an AST node, attaching a start offset.\n\n;\n\nexports.Node = Node;\nvar pp = _state.Parser.prototype;\n\npp.startNode = function () {\n  return new Node(this, this.start, this.startLoc);\n};\n\npp.startNodeAt = function (pos, loc) {\n  return new Node(this, pos, loc);\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations) node.loc.end = loc;\n  if (this.options.ranges) node.range[1] = pos;\n  return node;\n}\n\npp.finishNode = function (node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);\n};\n\n// Finish node at given position\n\npp.finishNodeAt = function (node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc);\n};\n\n},{\"./locutil\":5,\"./state\":10}],8:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.getOptions = getOptions;\n\nvar _util = _dereq_(\"./util\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, or 5, or 6. This influences support for strict\n  // mode, the set of reserved words, support for getters and\n  // setters and other features.\n  ecmaVersion: 5,\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\nexports.defaultOptions = defaultOptions;\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n  for (var opt in defaultOptions) {\n    options[opt] = opts && _util.has(opts, opt) ? opts[opt] : defaultOptions[opt];\n  }if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;\n\n  if (_util.isArray(options.onToken)) {\n    (function () {\n      var tokens = options.onToken;\n      options.onToken = function (token) {\n        return tokens.push(token);\n      };\n    })();\n  }\n  if (_util.isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);\n\n  return options;\n}\n\nfunction pushComment(options, array) {\n  return function (block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? 'Block' : 'Line',\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations) comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);\n    if (options.ranges) comment.range = [start, end];\n    array.push(comment);\n  };\n}\n\n},{\"./locutil\":5,\"./util\":15}],9:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ## Parser utilities\n\n// Test whether a statement node is the string literal `\"use strict\"`.\n\npp.isUseStrict = function (stmt) {\n  return this.options.ecmaVersion >= 5 && stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && stmt.expression.raw.slice(1, -1) === \"use strict\";\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function (type) {\n  if (this.type === type) {\n    this.next();\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function (name) {\n  return this.type === _tokentype.types.name && this.value === name;\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function (name) {\n  return this.value === name && this.eat(_tokentype.types.name);\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function (name) {\n  if (!this.eatContextual(name)) this.unexpected();\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function () {\n  return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n};\n\npp.insertSemicolon = function () {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);\n    return true;\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function () {\n  if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon()) this.unexpected();\n};\n\npp.afterTrailingComma = function (tokType) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);\n    this.next();\n    return true;\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function (type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function (pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\npp.checkPatternErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.trailingComma;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Trailing comma is not permitted in destructuring patterns\");\n};\n\npp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {\n  var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign;\n  if (!andThrow) return !!pos;\n  if (pos) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\");\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],10:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar _options = _dereq_(\"./options\");\n\n// Registered plugins\nvar plugins = {};\n\nexports.plugins = plugins;\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(\" + words.replace(/ /g, \"|\") + \")$\");\n}\n\nvar Parser = (function () {\n  function Parser(options, input, startPos) {\n    _classCallCheck(this, Parser);\n\n    this.options = options = _options.getOptions(options);\n    this.sourceFile = options.sourceFile;\n    this.keywords = keywordRegexp(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n    var reserved = options.allowReserved ? \"\" : _identifier.reservedWords[options.ecmaVersion] + (options.sourceType == \"module\" ? \" await\" : \"\");\n    this.reservedWords = keywordRegexp(reserved);\n    var reservedStrict = (reserved ? reserved + \" \" : \"\") + _identifier.reservedWords.strict;\n    this.reservedWordsStrict = keywordRegexp(reservedStrict);\n    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + _identifier.reservedWords.strictBind);\n    this.input = String(input);\n\n    // Used to signal to callers of `readWord1` whether the word\n    // contained any escape sequences. This is needed because words with\n    // escape sequences must not be interpreted as keywords.\n    this.containsEsc = false;\n\n    // Load plugins\n    this.loadPlugins(options.plugins);\n\n    // Set up token state\n\n    // The current position of the tokenizer in the input.\n    if (startPos) {\n      this.pos = startPos;\n      this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos));\n      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;\n    } else {\n      this.pos = this.lineStart = 0;\n      this.curLine = 1;\n    }\n\n    // Properties of the current token:\n    // Its type\n    this.type = _tokentype.types.eof;\n    // For tokens that include more information than their type, the value\n    this.value = null;\n    // Its start and end offset\n    this.start = this.end = this.pos;\n    // And, if locations are used, the {line, column} object\n    // corresponding to those offsets\n    this.startLoc = this.endLoc = this.curPosition();\n\n    // Position information for the previous token\n    this.lastTokEndLoc = this.lastTokStartLoc = null;\n    this.lastTokStart = this.lastTokEnd = this.pos;\n\n    // The context stack is used to superficially track syntactic\n    // context to predict whether a regular expression is allowed in a\n    // given position.\n    this.context = this.initialContext();\n    this.exprAllowed = true;\n\n    // Figure out if it's a module code.\n    this.strict = this.inModule = options.sourceType === \"module\";\n\n    // Used to signify the start of a potential arrow function\n    this.potentialArrowAt = -1;\n\n    // Flags to track whether we are in a function, a generator.\n    this.inFunction = this.inGenerator = false;\n    // Labels in scope.\n    this.labels = [];\n\n    // If enabled, skip leading hashbang line.\n    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!') this.skipLineComment(2);\n  }\n\n  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\n\n  Parser.prototype.isKeyword = function isKeyword(word) {\n    return this.keywords.test(word);\n  };\n\n  Parser.prototype.isReservedWord = function isReservedWord(word) {\n    return this.reservedWords.test(word);\n  };\n\n  Parser.prototype.extend = function extend(name, f) {\n    this[name] = f(this[name]);\n  };\n\n  Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {\n    for (var _name in pluginConfigs) {\n      var plugin = plugins[_name];\n      if (!plugin) throw new Error(\"Plugin '\" + _name + \"' not found\");\n      plugin(this, pluginConfigs[_name]);\n    }\n  };\n\n  Parser.prototype.parse = function parse() {\n    var node = this.options.program || this.startNode();\n    this.nextToken();\n    return this.parseTopLevel(node);\n  };\n\n  return Parser;\n})();\n\nexports.Parser = Parser;\n\n},{\"./identifier\":2,\"./options\":8,\"./tokentype\":14,\"./whitespace\":16}],11:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar pp = _state.Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp.parseTopLevel = function (node) {\n  var first = true;\n  if (!node.body) node.body = [];\n  while (this.type !== _tokentype.types.eof) {\n    var stmt = this.parseStatement(true, true);\n    node.body.push(stmt);\n    if (first) {\n      if (this.isUseStrict(stmt)) this.setStrict(true);\n      first = false;\n    }\n  }\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\");\n};\n\nvar loopLabel = { kind: \"loop\" },\n    switchLabel = { kind: \"switch\" };\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp.parseStatement = function (declaration, topLevel) {\n  var starttype = this.type,\n      node = this.startNode();\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case _tokentype.types._break:case _tokentype.types._continue:\n      return this.parseBreakContinueStatement(node, starttype.keyword);\n    case _tokentype.types._debugger:\n      return this.parseDebuggerStatement(node);\n    case _tokentype.types._do:\n      return this.parseDoStatement(node);\n    case _tokentype.types._for:\n      return this.parseForStatement(node);\n    case _tokentype.types._function:\n      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();\n      return this.parseFunctionStatement(node);\n    case _tokentype.types._class:\n      if (!declaration) this.unexpected();\n      return this.parseClass(node, true);\n    case _tokentype.types._if:\n      return this.parseIfStatement(node);\n    case _tokentype.types._return:\n      return this.parseReturnStatement(node);\n    case _tokentype.types._switch:\n      return this.parseSwitchStatement(node);\n    case _tokentype.types._throw:\n      return this.parseThrowStatement(node);\n    case _tokentype.types._try:\n      return this.parseTryStatement(node);\n    case _tokentype.types._let:case _tokentype.types._const:\n      if (!declaration) this.unexpected(); // NOTE: falls through to _var\n    case _tokentype.types._var:\n      return this.parseVarStatement(node, starttype);\n    case _tokentype.types._while:\n      return this.parseWhileStatement(node);\n    case _tokentype.types._with:\n      return this.parseWithStatement(node);\n    case _tokentype.types.braceL:\n      return this.parseBlock();\n    case _tokentype.types.semi:\n      return this.parseEmptyStatement(node);\n    case _tokentype.types._export:\n    case _tokentype.types._import:\n      if (!this.options.allowImportExportEverywhere) {\n        if (!topLevel) this.raise(this.start, \"'import' and 'export' may only appear at the top level\");\n        if (!this.inModule) this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\");\n      }\n      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node);\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    default:\n      var maybeName = this.value,\n          expr = this.parseExpression();\n      if (starttype === _tokentype.types.name && expr.type === \"Identifier\" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);\n  }\n};\n\npp.parseBreakContinueStatement = function (node, keyword) {\n  var isBreak = keyword == \"break\";\n  this.next();\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    var lab = this.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n      if (node.label && isBreak) break;\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword);\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n};\n\npp.parseDebuggerStatement = function (node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\");\n};\n\npp.parseDoStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(_tokentype.types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();\n  return this.finishNode(node, \"DoWhileStatement\");\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp.parseForStatement = function (node) {\n  this.next();\n  this.labels.push(loopLabel);\n  this.expect(_tokentype.types.parenL);\n  if (this.type === _tokentype.types.semi) return this.parseFor(node, null);\n  if (this.type === _tokentype.types._var || this.type === _tokentype.types._let || this.type === _tokentype.types._const) {\n    var _init = this.startNode(),\n        varKind = this.type;\n    this.next();\n    this.parseVar(_init, true, varKind);\n    this.finishNode(_init, \"VariableDeclaration\");\n    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) && _init.declarations.length === 1 && !(varKind !== _tokentype.types._var && _init.declarations[0].init)) return this.parseForIn(node, _init);\n    return this.parseFor(node, _init);\n  }\n  var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\")) {\n    this.checkPatternErrors(refDestructuringErrors, true);\n    this.toAssignable(init);\n    this.checkLVal(init);\n    return this.parseForIn(node, init);\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  return this.parseFor(node, init);\n};\n\npp.parseFunctionStatement = function (node) {\n  this.next();\n  return this.parseFunction(node, true);\n};\n\npp.parseIfStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  node.consequent = this.parseStatement(false);\n  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement(false) : null;\n  return this.finishNode(node, \"IfStatement\");\n};\n\npp.parseReturnStatement = function (node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, \"'return' outside of function\");\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {\n    node.argument = this.parseExpression();this.semicolon();\n  }\n  return this.finishNode(node, \"ReturnStatement\");\n};\n\npp.parseSwitchStatement = function (node) {\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(_tokentype.types.braceL);\n  this.labels.push(switchLabel);\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault = false; this.type != _tokentype.types.braceR;) {\n    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {\n      var isCase = this.type === _tokentype.types._case;\n      if (cur) this.finishNode(cur, \"SwitchCase\");\n      node.cases.push(cur = this.startNode());\n      cur.consequent = [];\n      this.next();\n      if (isCase) {\n        cur.test = this.parseExpression();\n      } else {\n        if (sawDefault) this.raise(this.lastTokStart, \"Multiple default clauses\");\n        sawDefault = true;\n        cur.test = null;\n      }\n      this.expect(_tokentype.types.colon);\n    } else {\n      if (!cur) this.unexpected();\n      cur.consequent.push(this.parseStatement(true));\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\");\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\");\n};\n\npp.parseThrowStatement = function (node) {\n  this.next();\n  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, \"Illegal newline after throw\");\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\");\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp.parseTryStatement = function (node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === _tokentype.types._catch) {\n    var clause = this.startNode();\n    this.next();\n    this.expect(_tokentype.types.parenL);\n    clause.param = this.parseBindingAtom();\n    this.checkLVal(clause.param, true);\n    this.expect(_tokentype.types.parenR);\n    clause.body = this.parseBlock();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer) this.raise(node.start, \"Missing catch or finally clause\");\n  return this.finishNode(node, \"TryStatement\");\n};\n\npp.parseVarStatement = function (node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\");\n};\n\npp.parseWhileStatement = function (node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\");\n};\n\npp.parseWithStatement = function (node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\");\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\");\n};\n\npp.parseEmptyStatement = function (node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\");\n};\n\npp.parseLabeledStatement = function (node, maybeName, expr) {\n  for (var i = 0; i < this.labels.length; ++i) {\n    if (this.labels[i].name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  }var kind = this.type.isLoop ? \"loop\" : this.type === _tokentype.types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label = this.labels[i];\n    if (label.statementStart == node.start) {\n      label.statementStart = this.start;\n      label.kind = kind;\n    } else break;\n  }\n  this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });\n  node.body = this.parseStatement(true);\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\");\n};\n\npp.parseExpressionStatement = function (node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\");\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp.parseBlock = function (allowStrict) {\n  var node = this.startNode(),\n      first = true,\n      oldStrict = undefined;\n  node.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    var stmt = this.parseStatement(true);\n    node.body.push(stmt);\n    if (first && allowStrict && this.isUseStrict(stmt)) {\n      oldStrict = this.strict;\n      this.setStrict(this.strict = true);\n    }\n    first = false;\n  }\n  if (oldStrict === false) this.setStrict(false);\n  return this.finishNode(node, \"BlockStatement\");\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp.parseFor = function (node, init) {\n  node.init = init;\n  this.expect(_tokentype.types.semi);\n  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();\n  this.expect(_tokentype.types.semi);\n  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\");\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp.parseForIn = function (node, init) {\n  var type = this.type === _tokentype.types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  node.left = init;\n  node.right = this.parseExpression();\n  this.expect(_tokentype.types.parenR);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type);\n};\n\n// Parse a list of variable declarations.\n\npp.parseVar = function (node, isFor, kind) {\n  node.declarations = [];\n  node.kind = kind.keyword;\n  for (;;) {\n    var decl = this.startNode();\n    this.parseVarId(decl);\n    if (this.eat(_tokentype.types.eq)) {\n      decl.init = this.parseMaybeAssign(isFor);\n    } else if (kind === _tokentype.types._const && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n      this.unexpected();\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this.type === _tokentype.types._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n    if (!this.eat(_tokentype.types.comma)) break;\n  }\n  return node;\n};\n\npp.parseVarId = function (decl) {\n  decl.id = this.parseBindingAtom();\n  this.checkLVal(decl.id, true);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseFunction = function (node, isStatement, allowExpressionBody) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6) node.generator = this.eat(_tokentype.types.star);\n  if (isStatement || this.type === _tokentype.types.name) node.id = this.parseIdent();\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n};\n\npp.parseFunctionParams = function (node) {\n  this.expect(_tokentype.types.parenL);\n  node.params = this.parseBindingList(_tokentype.types.parenR, false, false, true);\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseClass = function (node, isStatement) {\n  this.next();\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (this.eat(_tokentype.types.semi)) continue;\n    var method = this.startNode();\n    var isGenerator = this.eat(_tokentype.types.star);\n    var isMaybeStatic = this.type === _tokentype.types.name && this.value === \"static\";\n    this.parsePropertyName(method);\n    method[\"static\"] = isMaybeStatic && this.type !== _tokentype.types.parenL;\n    if (method[\"static\"]) {\n      if (isGenerator) this.unexpected();\n      isGenerator = this.eat(_tokentype.types.star);\n      this.parsePropertyName(method);\n    }\n    method.kind = \"method\";\n    var isGetSet = false;\n    if (!method.computed) {\n      var key = method.key;\n\n      if (!isGenerator && key.type === \"Identifier\" && this.type !== _tokentype.types.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true;\n        method.kind = key.name;\n        key = this.parsePropertyName(method);\n      }\n      if (!method[\"static\"] && (key.type === \"Identifier\" && key.name === \"constructor\" || key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this.raise(key.start, \"Duplicate constructor in the same class\");\n        if (isGetSet) this.raise(key.start, \"Constructor can't have get/set modifier\");\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\");\n        method.kind = \"constructor\";\n        hadConstructor = true;\n      }\n    }\n    this.parseClassMethod(classBody, method, isGenerator);\n    if (isGetSet) {\n      var paramCount = method.kind === \"get\" ? 0 : 1;\n      if (method.value.params.length !== paramCount) {\n        var start = method.value.start;\n        if (method.kind === \"get\") this.raise(start, \"getter should have no params\");else this.raise(start, \"setter should have exactly one param\");\n      }\n      if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\") this.raise(method.value.params[0].start, \"Setter cannot use rest params\");\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n};\n\npp.parseClassMethod = function (classBody, method, isGenerator) {\n  method.value = this.parseMethod(isGenerator);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp.parseClassId = function (node, isStatement) {\n  node.id = this.type === _tokentype.types.name ? this.parseIdent() : isStatement ? this.unexpected() : null;\n};\n\npp.parseClassSuper = function (node) {\n  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp.parseExport = function (node) {\n  this.next();\n  // export * from '...'\n  if (this.eat(_tokentype.types.star)) {\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\");\n  }\n  if (this.eat(_tokentype.types._default)) {\n    // export default ...\n    var expr = this.parseMaybeAssign();\n    var needsSemi = true;\n    if (expr.type == \"FunctionExpression\" || expr.type == \"ClassExpression\") {\n      needsSemi = false;\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\" ? \"FunctionDeclaration\" : \"ClassDeclaration\";\n      }\n    }\n    node.declaration = expr;\n    if (needsSemi) this.semicolon();\n    return this.finishNode(node, \"ExportDefaultDeclaration\");\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    node.specifiers = [];\n    node.source = null;\n  } else {\n    // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers();\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0; i < node.specifiers.length; i++) {\n        if (this.keywords.test(node.specifiers[i].local.name) || this.reservedWords.test(node.specifiers[i].local.name)) {\n          this.unexpected(node.specifiers[i].local.start);\n        }\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\");\n};\n\npp.shouldParseExportStatement = function () {\n  return this.type.keyword;\n};\n\n// Parses a comma-separated list of module exports.\n\npp.parseExportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  // export { x, y as z } [from '...']\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.local = this.parseIdent(this.type === _tokentype.types._default);\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local;\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes;\n};\n\n// Parses import declaration.\n\npp.parseImport = function (node) {\n  this.next();\n  // import '...'\n  if (this.type === _tokentype.types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\");\n};\n\n// Parses a comma-separated list of module imports.\n\npp.parseImportSpecifiers = function () {\n  var nodes = [],\n      first = true;\n  if (this.type === _tokentype.types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(_tokentype.types.comma)) return nodes;\n  }\n  if (this.type === _tokentype.types.star) {\n    var node = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportNamespaceSpecifier\"));\n    return nodes;\n  }\n  this.expect(_tokentype.types.braceL);\n  while (!this.eat(_tokentype.types.braceR)) {\n    if (!first) {\n      this.expect(_tokentype.types.comma);\n      if (this.afterTrailingComma(_tokentype.types.braceR)) break;\n    } else first = false;\n\n    var node = this.startNode();\n    node.imported = this.parseIdent(true);\n    if (this.eatContextual(\"as\")) {\n      node.local = this.parseIdent();\n    } else {\n      node.local = node.imported;\n      if (this.isKeyword(node.local.name)) this.unexpected(node.local.start);\n      if (this.reservedWordsStrict.test(node.local.name)) this.raise(node.local.start, \"The keyword '\" + node.local.name + \"' is reserved\");\n    }\n    this.checkLVal(node.local, true);\n    nodes.push(this.finishNode(node, \"ImportSpecifier\"));\n  }\n  return nodes;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],12:[function(_dereq_,module,exports){\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _state = _dereq_(\"./state\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override) {\n  _classCallCheck(this, TokContext);\n\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n};\n\nexports.TokContext = TokContext;\nvar types = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", true),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) {\n    return p.readTmplToken();\n  }),\n  f_expr: new TokContext(\"function\", true)\n};\n\nexports.types = types;\nvar pp = _state.Parser.prototype;\n\npp.initialContext = function () {\n  return [types.b_stat];\n};\n\npp.braceIsBlock = function (prevType) {\n  if (prevType === _tokentype.types.colon) {\n    var _parent = this.curContext();\n    if (_parent === types.b_stat || _parent === types.b_expr) return !_parent.isExpr;\n  }\n  if (prevType === _tokentype.types._return) return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));\n  if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR) return true;\n  if (prevType == _tokentype.types.braceL) return this.curContext() === types.b_stat;\n  return !this.exprAllowed;\n};\n\npp.updateContext = function (prevType) {\n  var update = undefined,\n      type = this.type;\n  if (type.keyword && prevType == _tokentype.types.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;\n};\n\n// Token-specific context update code\n\n_tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {\n  if (this.context.length == 1) {\n    this.exprAllowed = true;\n    return;\n  }\n  var out = this.context.pop();\n  if (out === types.b_stat && this.curContext() === types.f_expr) {\n    this.context.pop();\n    this.exprAllowed = false;\n  } else if (out === types.b_tmpl) {\n    this.exprAllowed = true;\n  } else {\n    this.exprAllowed = !out.isExpr;\n  }\n};\n\n_tokentype.types.braceL.updateContext = function (prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.dollarBraceL.updateContext = function () {\n  this.context.push(types.b_tmpl);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.parenL.updateContext = function (prevType) {\n  var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;\n  this.context.push(statementParens ? types.p_stat : types.p_expr);\n  this.exprAllowed = true;\n};\n\n_tokentype.types.incDec.updateContext = function () {\n  // tokExprAllowed stays unchanged\n};\n\n_tokentype.types._function.updateContext = function () {\n  if (this.curContext() !== types.b_stat) this.context.push(types.f_expr);\n  this.exprAllowed = false;\n};\n\n_tokentype.types.backQuote.updateContext = function () {\n  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);\n  this.exprAllowed = false;\n};\n\n},{\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],13:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _identifier = _dereq_(\"./identifier\");\n\nvar _tokentype = _dereq_(\"./tokentype\");\n\nvar _state = _dereq_(\"./state\");\n\nvar _locutil = _dereq_(\"./locutil\");\n\nvar _whitespace = _dereq_(\"./whitespace\");\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  _classCallCheck(this, Token);\n\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations) this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);\n  if (p.options.ranges) this.range = [p.start, p.end];\n}\n\n// ## Tokenizer\n\n;\n\nexports.Token = Token;\nvar pp = _state.Parser.prototype;\n\n// Are we running under Rhino?\nvar isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\";\n\n// Move to the next token\n\npp.next = function () {\n  if (this.options.onToken) this.options.onToken(new Token(this));\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp.getToken = function () {\n  this.next();\n  return new Token(this);\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\") pp[Symbol.iterator] = function () {\n  var self = this;\n  return { next: function next() {\n      var token = self.getToken();\n      return {\n        done: token.type === _tokentype.types.eof,\n        value: token\n      };\n    } };\n};\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function (strict) {\n  this.strict = strict;\n  if (this.type !== _tokentype.types.num && this.type !== _tokentype.types.string) return;\n  this.pos = this.start;\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1;\n      --this.curLine;\n    }\n  }\n  this.nextToken();\n};\n\npp.curContext = function () {\n  return this.context[this.context.length - 1];\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function () {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) this.skipSpace();\n\n  this.start = this.pos;\n  if (this.options.locations) this.startLoc = this.curPosition();\n  if (this.pos >= this.input.length) return this.finishToken(_tokentype.types.eof);\n\n  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());\n};\n\npp.readToken = function (code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (_identifier.isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */) return this.readWord();\n\n  return this.getTokenFromCode(code);\n};\n\npp.fullCharCodeAtPos = function () {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) return code;\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00;\n};\n\npp.skipBlockComment = function () {\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos,\n      end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\");\n  this.pos = end + 2;\n  if (this.options.locations) {\n    _whitespace.lineBreakG.lastIndex = start;\n    var match = undefined;\n    while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine;\n      this.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());\n};\n\npp.skipLineComment = function (startSkip) {\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos;\n    ch = this.input.charCodeAt(this.pos);\n  }\n  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function () {\n  loop: while (this.pos < this.input.length) {\n    var ch = this.input.charCodeAt(this.pos);\n    switch (ch) {\n      case 32:case 160:\n        // ' '\n        ++this.pos;\n        break;\n      case 13:\n        if (this.input.charCodeAt(this.pos + 1) === 10) {\n          ++this.pos;\n        }\n      case 10:case 8232:case 8233:\n        ++this.pos;\n        if (this.options.locations) {\n          ++this.curLine;\n          this.lineStart = this.pos;\n        }\n        break;\n      case 47:\n        // '/'\n        switch (this.input.charCodeAt(this.pos + 1)) {\n          case 42:\n            // '*'\n            this.skipBlockComment();\n            break;\n          case 47:\n            this.skipLineComment(2);\n            break;\n          default:\n            break loop;\n        }\n        break;\n      default:\n        if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n          ++this.pos;\n        } else {\n          break loop;\n        }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function (type, val) {\n  this.end = this.pos;\n  if (this.options.locations) this.endLoc = this.curPosition();\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function () {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) return this.readNumber(true);\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {\n    // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(_tokentype.types.ellipsis);\n  } else {\n    ++this.pos;\n    return this.finishToken(_tokentype.types.dot);\n  }\n};\n\npp.readToken_slash = function () {\n  // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) {\n    ++this.pos;return this.readRegexp();\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.slash, 1);\n};\n\npp.readToken_mult_modulo = function (code) {\n  // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 42 ? _tokentype.types.star : _tokentype.types.modulo, 1);\n};\n\npp.readToken_pipe_amp = function (code) {\n  // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);\n};\n\npp.readToken_caret = function () {\n  // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.bitwiseXOR, 1);\n};\n\npp.readToken_plus_min = function (code) {\n  // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken();\n    }\n    return this.finishOp(_tokentype.types.incDec, 2);\n  }\n  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);\n  return this.finishOp(_tokentype.types.plusMin, 1);\n};\n\npp.readToken_lt_gt = function (code) {\n  // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(_tokentype.types.assign, size + 1);\n    return this.finishOp(_tokentype.types.bitShift, size);\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected();\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken();\n  }\n  if (next === 61) size = this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2;\n  return this.finishOp(_tokentype.types.relational, size);\n};\n\npp.readToken_eq_excl = function (code) {\n  // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {\n    // '=>'\n    this.pos += 2;\n    return this.finishToken(_tokentype.types.arrow);\n  }\n  return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);\n};\n\npp.getTokenFromCode = function (code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n    case 46:\n      // '.'\n      return this.readToken_dot();\n\n    // Punctuation tokens.\n    case 40:\n      ++this.pos;return this.finishToken(_tokentype.types.parenL);\n    case 41:\n      ++this.pos;return this.finishToken(_tokentype.types.parenR);\n    case 59:\n      ++this.pos;return this.finishToken(_tokentype.types.semi);\n    case 44:\n      ++this.pos;return this.finishToken(_tokentype.types.comma);\n    case 91:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketL);\n    case 93:\n      ++this.pos;return this.finishToken(_tokentype.types.bracketR);\n    case 123:\n      ++this.pos;return this.finishToken(_tokentype.types.braceL);\n    case 125:\n      ++this.pos;return this.finishToken(_tokentype.types.braceR);\n    case 58:\n      ++this.pos;return this.finishToken(_tokentype.types.colon);\n    case 63:\n      ++this.pos;return this.finishToken(_tokentype.types.question);\n\n    case 96:\n      // '`'\n      if (this.options.ecmaVersion < 6) break;\n      ++this.pos;\n      return this.finishToken(_tokentype.types.backQuote);\n\n    case 48:\n      // '0'\n      var next = this.input.charCodeAt(this.pos + 1);\n      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n      if (this.options.ecmaVersion >= 6) {\n        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n      }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:\n      // 1-9\n      return this.readNumber(false);\n\n    // Quotes produce strings.\n    case 34:case 39:\n      // '\"', \"'\"\n      return this.readString(code);\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case 47:\n      // '/'\n      return this.readToken_slash();\n\n    case 37:case 42:\n      // '%*'\n      return this.readToken_mult_modulo(code);\n\n    case 124:case 38:\n      // '|&'\n      return this.readToken_pipe_amp(code);\n\n    case 94:\n      // '^'\n      return this.readToken_caret();\n\n    case 43:case 45:\n      // '+-'\n      return this.readToken_plus_min(code);\n\n    case 60:case 62:\n      // '<>'\n      return this.readToken_lt_gt(code);\n\n    case 61:case 33:\n      // '=!'\n      return this.readToken_eq_excl(code);\n\n    case 126:\n      // '~'\n      return this.finishOp(_tokentype.types.prefix, 1);\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp.finishOp = function (type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str);\n};\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags);\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message);\n      throw e;\n    }\n  }\n}\n\nvar regexpUnicodeSupport = !!tryCreateRegexp(\"￿\", \"u\");\n\npp.readRegexp = function () {\n  var _this = this;\n\n  var escaped = undefined,\n      inClass = undefined,\n      start = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\");\n    var ch = this.input.charAt(this.pos);\n    if (_whitespace.lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\");\n    if (!escaped) {\n      if (ch === \"[\") inClass = true;else if (ch === \"]\" && inClass) inClass = false;else if (ch === \"/\" && !inClass) break;\n      escaped = ch === \"\\\\\";\n    } else escaped = false;\n    ++this.pos;\n  }\n  var content = this.input.slice(start, this.pos);\n  ++this.pos;\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  var mods = this.readWord1();\n  var tmp = content;\n  if (mods) {\n    var validFlags = /^[gim]*$/;\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/;\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\");\n    if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {\n      // Replace each astral symbol and every Unicode escape sequence that\n      // possibly represents an astral symbol or a paired surrogate with a\n      // single ASCII symbol to avoid throwing on regular expressions that\n      // are only valid in combination with the `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n      // be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, function (_match, code, offset) {\n        code = Number(\"0x\" + code);\n        if (code > 0x10FFFF) _this.raise(start + offset + 3, \"Code point out of bounds\");\n        return \"x\";\n      });\n      tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\");\n    }\n  }\n  // Detect invalid regular expressions.\n  var value = null;\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, undefined, start, this);\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods);\n  }\n  return this.finishToken(_tokentype.types.regexp, { pattern: content, flags: mods, value: value });\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function (radix, len) {\n  var start = this.pos,\n      total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this.input.charCodeAt(this.pos),\n        val = undefined;\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n      else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n        else val = Infinity;\n    if (val >= radix) break;\n    ++this.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null;\n\n  return total;\n};\n\npp.readRadixNumber = function (radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix);\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function (startsWithDot) {\n  var start = this.pos,\n      isFloat = false,\n      octal = this.input.charCodeAt(this.pos) === 48;\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\");\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46) {\n    // '.'\n    ++this.pos;\n    this.readInt(10);\n    isFloat = true;\n    next = this.input.charCodeAt(this.pos);\n  }\n  if (next === 69 || next === 101) {\n    // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n    isFloat = true;\n  }\n  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\");\n\n  var str = this.input.slice(start, this.pos),\n      val = undefined;\n  if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\");else val = parseInt(str, 8);\n  return this.finishToken(_tokentype.types.num, val);\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function () {\n  var ch = this.input.charCodeAt(this.pos),\n      code = undefined;\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected();\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\");\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code;\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code);\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);\n}\n\npp.readString = function (quote) {\n  var out = \"\",\n      chunkStart = ++this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === quote) break;\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(false);\n      chunkStart = this.pos;\n    } else {\n      if (_whitespace.isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\");\n      ++this.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(_tokentype.types.string, out);\n};\n\n// Reads template string tokens.\n\npp.readTmplToken = function () {\n  var out = \"\",\n      chunkStart = this.pos;\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\");\n    var ch = this.input.charCodeAt(this.pos);\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {\n      // '`', '${'\n      if (this.pos === this.start && this.type === _tokentype.types.template) {\n        if (ch === 36) {\n          this.pos += 2;\n          return this.finishToken(_tokentype.types.dollarBraceL);\n        } else {\n          ++this.pos;\n          return this.finishToken(_tokentype.types.backQuote);\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos);\n      return this.finishToken(_tokentype.types.template, out);\n    }\n    if (ch === 92) {\n      // '\\'\n      out += this.input.slice(chunkStart, this.pos);\n      out += this.readEscapedChar(true);\n      chunkStart = this.pos;\n    } else if (_whitespace.isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos);\n      ++this.pos;\n      switch (ch) {\n        case 13:\n          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;\n        case 10:\n          out += \"\\n\";\n          break;\n        default:\n          out += String.fromCharCode(ch);\n          break;\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n      chunkStart = this.pos;\n    } else {\n      ++this.pos;\n    }\n  }\n};\n\n// Used to read escaped characters\n\npp.readEscapedChar = function (inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n    case 110:\n      return \"\\n\"; // 'n' -> '\\n'\n    case 114:\n      return \"\\r\"; // 'r' -> '\\r'\n    case 120:\n      return String.fromCharCode(this.readHexChar(2)); // 'x'\n    case 117:\n      return codePointToString(this.readCodePoint()); // 'u'\n    case 116:\n      return \"\\t\"; // 't' -> '\\t'\n    case 98:\n      return \"\\b\"; // 'b' -> '\\b'\n    case 118:\n      return \"\\u000b\"; // 'v' -> '\\u000b'\n    case 102:\n      return \"\\f\"; // 'f' -> '\\f'\n    case 13:\n      if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n    case 10:\n      // ' \\n'\n      if (this.options.locations) {\n        this.lineStart = this.pos;++this.curLine;\n      }\n      return \"\";\n    default:\n      if (ch >= 48 && ch <= 55) {\n        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n        var octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n          this.raise(this.pos - 2, \"Octal literal in strict mode\");\n        }\n        this.pos += octalStr.length - 1;\n        return String.fromCharCode(octal);\n      }\n      return String.fromCharCode(ch);\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function (len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\");\n  return n;\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function () {\n  this.containsEsc = false;\n  var word = \"\",\n      first = true,\n      chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this.fullCharCodeAtPos();\n    if (_identifier.isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) {\n      // \"\\\"\n      this.containsEsc = true;\n      word += this.input.slice(chunkStart, this.pos);\n      var escStart = this.pos;\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n      ++this.pos;\n      var esc = this.readCodePoint();\n      if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral)) this.raise(escStart, \"Invalid Unicode escape\");\n      word += codePointToString(esc);\n      chunkStart = this.pos;\n    } else {\n      break;\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos);\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function () {\n  var word = this.readWord1();\n  var type = _tokentype.types.name;\n  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word)) type = _tokentype.keywords[word];\n  return this.finishToken(type, word);\n};\n\n},{\"./identifier\":2,\"./locutil\":5,\"./state\":10,\"./tokentype\":14,\"./whitespace\":16}],14:[function(_dereq_,module,exports){\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\n\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar TokenType = function TokenType(label) {\n  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  _classCallCheck(this, TokenType);\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nexports.TokenType = TokenType;\n\nfunction binop(name, prec) {\n  return new TokenType(name, { beforeExpr: true, binop: prec });\n}\nvar beforeExpr = { beforeExpr: true },\n    startsExpr = { startsExpr: true };\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", { beforeExpr: true, startsExpr: true }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", { beforeExpr: true, startsExpr: true }),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", { beforeExpr: true, startsExpr: true }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", { beforeExpr: true, startsExpr: true }),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", { beforeExpr: true, isAssign: true }),\n  assign: new TokenType(\"_=\", { beforeExpr: true, isAssign: true }),\n  incDec: new TokenType(\"++/--\", { prefix: true, postfix: true, startsExpr: true }),\n  prefix: new TokenType(\"prefix\", { beforeExpr: true, prefix: true, startsExpr: true }),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=\", 6),\n  relational: binop(\"</>\", 7),\n  bitShift: binop(\"<</>>\", 8),\n  plusMin: new TokenType(\"+/-\", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10)\n};\n\nexports.types = types;\n// Map keyword names to token types.\n\nvar keywords = {};\n\nexports.keywords = keywords;\n// Succinct definitions of keyword token types\nfunction kw(name) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  options.keyword = name;\n  keywords[name] = types[\"_\" + name] = new TokenType(name, options);\n}\n\nkw(\"break\");\nkw(\"case\", beforeExpr);\nkw(\"catch\");\nkw(\"continue\");\nkw(\"debugger\");\nkw(\"default\", beforeExpr);\nkw(\"do\", { isLoop: true, beforeExpr: true });\nkw(\"else\", beforeExpr);\nkw(\"finally\");\nkw(\"for\", { isLoop: true });\nkw(\"function\", startsExpr);\nkw(\"if\");\nkw(\"return\", beforeExpr);\nkw(\"switch\");\nkw(\"throw\", beforeExpr);\nkw(\"try\");\nkw(\"var\");\nkw(\"let\");\nkw(\"const\");\nkw(\"while\", { isLoop: true });\nkw(\"with\");\nkw(\"new\", { beforeExpr: true, startsExpr: true });\nkw(\"this\", startsExpr);\nkw(\"super\", startsExpr);\nkw(\"class\");\nkw(\"extends\", beforeExpr);\nkw(\"export\");\nkw(\"import\");\nkw(\"yield\", { beforeExpr: true, startsExpr: true });\nkw(\"null\", startsExpr);\nkw(\"true\", startsExpr);\nkw(\"false\", startsExpr);\nkw(\"in\", { beforeExpr: true, binop: 7 });\nkw(\"instanceof\", { beforeExpr: true, binop: 7 });\nkw(\"typeof\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"void\", { beforeExpr: true, prefix: true, startsExpr: true });\nkw(\"delete\", { beforeExpr: true, prefix: true, startsExpr: true });\n\n},{}],15:[function(_dereq_,module,exports){\n\"use strict\";\n\nexports.__esModule = true;\nexports.isArray = isArray;\nexports.has = has;\n\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) === \"[object Array]\";\n}\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return Object.prototype.hasOwnProperty.call(obj, propName);\n}\n\n},{}],16:[function(_dereq_,module,exports){\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\n\"use strict\";\n\nexports.__esModule = true;\nexports.isNewLine = isNewLine;\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nexports.lineBreak = lineBreak;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nexports.lineBreakG = lineBreakG;\n\nfunction isNewLine(code) {\n  return code === 10 || code === 13 || code === 0x2028 || code == 0x2029;\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\nexports.nonASCIIwhitespace = nonASCIIwhitespace;\n\n},{}]},{},[3])(3)\n});","\"use strict\";\r\nvar containsField = function (obj, field, cb) {\r\n    // if (field in (obj || {})) {\r\n    //     cb(obj[field])\r\n    // }\r\n    if (obj && field in obj && typeof obj[field] !== \"undefined\") {\r\n        cb(obj[field]);\r\n    }\r\n};\r\nvar parsebool = function (b, d) {\r\n    if (\"boolean\" === typeof b) {\r\n        return b;\r\n    }\r\n    switch (b) {\r\n        case \"true\": return true;\r\n        case \"false\": return false;\r\n        default: return d;\r\n    }\r\n};\r\nvar _collectionRegex = /^Collection\\((.*)\\)$/;\r\nvar Metadata = (function () {\r\n    function Metadata($data, options, metadata) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.metadata = metadata;\r\n        this.options.container = this.$data.Container; //this.options.container || $data.createContainer()\r\n    }\r\n    Metadata.prototype._getMaxValue = function (maxValue) {\r\n        if (\"number\" === typeof maxValue)\r\n            return maxValue;\r\n        if (\"max\" === maxValue)\r\n            return Number.MAX_VALUE;\r\n        return parseInt(maxValue);\r\n    };\r\n    Metadata.prototype.createTypeDefinition = function (propertySchema, definition) {\r\n        var _this = this;\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.type = _this.options.collectionBaseType || 'Array';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.type = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createReturnTypeDefinition = function (propertySchema, definition) {\r\n        containsField(propertySchema, \"type\", function (v) {\r\n            var match = _collectionRegex.exec(v);\r\n            if (match) {\r\n                definition.returnType = '$data.Queryable';\r\n                definition.elementType = match[1];\r\n            }\r\n            else {\r\n                definition.returnType = v;\r\n            }\r\n        });\r\n    };\r\n    Metadata.prototype.createProperty = function (entitySchema, propertySchema) {\r\n        var _this = this;\r\n        var self = this;\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"maxLength\", function (v) {\r\n            definition.maxLength = _this._getMaxValue(v);\r\n        });\r\n        containsField(entitySchema, \"key\", function (keys) {\r\n            if (keys.propertyRefs.some(function (pr) { return pr.name === propertySchema.name; })) {\r\n                definition.key = true;\r\n            }\r\n        });\r\n        containsField(propertySchema, \"concurrencyMode\", function (v) {\r\n            definition.concurrencyMode = self.$data.ConcurrencyMode[v];\r\n        });\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createNavigationProperty = function (entitySchema, propertySchema) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {};\r\n        this.createTypeDefinition(propertySchema, definition);\r\n        containsField(propertySchema, \"nullable\", function (v) {\r\n            definition.nullable = parsebool(v, true),\r\n                definition.required = parsebool(v, true) === false;\r\n        });\r\n        containsField(propertySchema, \"partner\", function (p) {\r\n            definition.inverseProperty = p;\r\n        });\r\n        if (!definition.inverseProperty) {\r\n            definition.inverseProperty = '$$unbound';\r\n        }\r\n        return {\r\n            name: propertySchema.name,\r\n            definition: definition\r\n        };\r\n    };\r\n    Metadata.prototype.createEntityDefinition = function (entitySchema) {\r\n        var props = (entitySchema.properties || []).map(this.createProperty.bind(this, entitySchema));\r\n        var navigationProps = (entitySchema.navigationProperties || []).map(this.createNavigationProperty.bind(this, entitySchema));\r\n        props = props.concat(navigationProps);\r\n        var result = props.reduce(function (p, c) {\r\n            p[c.name] = c.definition;\r\n            return p;\r\n        }, {});\r\n        return result;\r\n    };\r\n    Metadata.prototype.createEntityType = function (entitySchema, namespace) {\r\n        var baseType = (entitySchema.baseType ? entitySchema.baseType : this.options.baseType) || this.$data.Entity;\r\n        var definition = this.createEntityDefinition(entitySchema);\r\n        var entityFullName = namespace + \".\" + entitySchema.name;\r\n        var staticDefinition = {};\r\n        containsField(entitySchema, \"openType\", function (v) {\r\n            if (parsebool(v, false)) {\r\n                staticDefinition.openType = { value: true };\r\n            }\r\n        });\r\n        return {\r\n            namespace: namespace,\r\n            typeName: entityFullName,\r\n            baseType: baseType,\r\n            params: [entityFullName, this.options.container, definition, staticDefinition],\r\n            definition: definition,\r\n            type: 'entity'\r\n        };\r\n    };\r\n    Metadata.prototype.createEnumOption = function (entitySchema, propertySchema, i) {\r\n        if (!propertySchema) {\r\n            propertySchema = entitySchema;\r\n            entitySchema = undefined;\r\n        }\r\n        var definition = {\r\n            name: propertySchema.name,\r\n            index: i\r\n        };\r\n        containsField(propertySchema, \"value\", function (value) {\r\n            var v = +value;\r\n            if (!isNaN(v)) {\r\n                definition.value = v;\r\n            }\r\n        });\r\n        return definition;\r\n    };\r\n    Metadata.prototype.createEnumDefinition = function (enumSchema) {\r\n        var props = (enumSchema.members || []).map(this.createEnumOption.bind(this, enumSchema));\r\n        return props;\r\n    };\r\n    Metadata.prototype.createEnumType = function (enumSchema, namespace) {\r\n        var self = this;\r\n        var definition = this.createEnumDefinition(enumSchema);\r\n        var enumFullName = namespace + \".\" + enumSchema.name;\r\n        return {\r\n            namespace: namespace,\r\n            typeName: enumFullName,\r\n            baseType: self.$data.Enum,\r\n            params: [enumFullName, this.options.container, enumSchema.underlyingType, definition],\r\n            definition: definition,\r\n            type: 'enum'\r\n        };\r\n    };\r\n    Metadata.prototype.createEntitySetProperty = function (entitySetSchema, contextSchema) {\r\n        //var c = this.options.container\r\n        var t = entitySetSchema.entityType; //c.classTypes[c.classNames[entitySetSchema.entityType]] // || entitySetSchema.entityType\r\n        var prop = {\r\n            name: entitySetSchema.name,\r\n            definition: {\r\n                type: this.options.entitySetType || '$data.EntitySet',\r\n                elementType: t\r\n            }\r\n        };\r\n        return prop;\r\n    };\r\n    Metadata.prototype.indexBy = function (fieldName, pick) {\r\n        return [function (p, c) { p[c[fieldName]] = c[pick]; return p; }, {}];\r\n    };\r\n    Metadata.prototype.createContextDefinition = function (contextSchema, namespace) {\r\n        var _this = this;\r\n        var props = (contextSchema.entitySets || []).map(function (es) { return _this.createEntitySetProperty(es, contextSchema); });\r\n        var result = props.reduce.apply(props, this.indexBy(\"name\", \"definition\"));\r\n        return result;\r\n    };\r\n    Metadata.prototype.createContextType = function (contextSchema, namespace) {\r\n        if (Array.isArray(contextSchema)) {\r\n            throw new Error(\"Array type is not supported here\");\r\n        }\r\n        var definition = this.createContextDefinition(contextSchema, namespace);\r\n        var baseType = this.options.contextType || this.$data.EntityContext;\r\n        var typeName = namespace + \".\" + contextSchema.name;\r\n        var contextImportMethods = [];\r\n        contextSchema.actionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.actionImports);\r\n        contextSchema.functionImports && contextImportMethods.push.apply(contextImportMethods, contextSchema.functionImports);\r\n        return {\r\n            namespace: namespace,\r\n            typeName: typeName,\r\n            baseType: baseType,\r\n            params: [typeName, this.options.container, definition],\r\n            definition: definition,\r\n            type: 'context',\r\n            contextImportMethods: contextImportMethods\r\n        };\r\n    };\r\n    Metadata.prototype.createMethodParameter = function (parameter, definition) {\r\n        var paramDef = {\r\n            name: parameter.name\r\n        };\r\n        this.createTypeDefinition(parameter, paramDef);\r\n        definition.params.push(paramDef);\r\n    };\r\n    Metadata.prototype.applyBoundMethod = function (actionInfo, ns, typeDefinitions, type) {\r\n        var _this = this;\r\n        var definition = {\r\n            type: type,\r\n            namespace: ns,\r\n            returnType: null,\r\n            params: []\r\n        };\r\n        containsField(actionInfo, \"returnType\", function (value) {\r\n            _this.createReturnTypeDefinition(value, definition);\r\n        });\r\n        var parameters = [].concat(actionInfo.parameters);\r\n        parameters.forEach(function (p) { return _this.createMethodParameter(p, definition); });\r\n        if (parsebool(actionInfo.isBound, false)) {\r\n            var bindingParameter = definition.params.shift();\r\n            if (bindingParameter.type === (this.options.collectionBaseType || 'Array')) {\r\n                var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.namespace === ns && d.type === 'context'; });\r\n                filteredContextDefinitions.forEach(function (ctx) {\r\n                    for (var setName in ctx.definition) {\r\n                        var set = ctx.definition[setName];\r\n                        if (set.elementType === bindingParameter.elementType) {\r\n                            set.actions = set.actions = {};\r\n                            set.actions[actionInfo.name] = definition;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                var filteredTypeDefinitions = typeDefinitions.filter(function (d) { return d.typeName === bindingParameter.type && d.type === 'entity'; });\r\n                filteredTypeDefinitions.forEach(function (t) {\r\n                    t.definition[actionInfo.name] = definition;\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            delete definition.namespace;\r\n            var methodFullName = ns + '.' + actionInfo.name;\r\n            var filteredContextDefinitions = typeDefinitions.filter(function (d) { return d.type === 'context'; });\r\n            filteredContextDefinitions.forEach(function (ctx) {\r\n                ctx.contextImportMethods.forEach(function (methodImportInfo) {\r\n                    if (methodImportInfo.action === methodFullName || methodImportInfo.function === methodFullName) {\r\n                        ctx.definition[actionInfo.name] = definition;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    Metadata.prototype.processMetadata = function (createdTypes) {\r\n        var _this = this;\r\n        var types = createdTypes || [];\r\n        var typeDefinitions = [];\r\n        var serviceMethods = [];\r\n        var self = this;\r\n        this.metadata.dataServices.schemas.forEach(function (schema) {\r\n            var ns = schema.namespace;\r\n            if (schema.enumTypes) {\r\n                var enumTypes = schema.enumTypes.map(function (ct) { return _this.createEnumType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, enumTypes);\r\n            }\r\n            if (schema.complexTypes) {\r\n                var complexTypes = schema.complexTypes.map(function (ct) { return _this.createEntityType(ct, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, complexTypes);\r\n            }\r\n            if (schema.entityTypes) {\r\n                var entityTypes = schema.entityTypes.map(function (et) { return _this.createEntityType(et, ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, entityTypes);\r\n            }\r\n            if (schema.actions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.actions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceAction'); }; }));\r\n            }\r\n            if (schema.functions) {\r\n                serviceMethods.push.apply(serviceMethods, schema.functions.map(function (m) { return function (defs) { return _this.applyBoundMethod(m, ns, defs, '$data.ServiceFunction'); }; }));\r\n            }\r\n            if (schema.entityContainer) {\r\n                var contexts = schema.entityContainer.map(function (ctx) { return _this.createContextType(ctx, self.options.namespace || ns); });\r\n                typeDefinitions.push.apply(typeDefinitions, contexts);\r\n            }\r\n        });\r\n        serviceMethods.forEach(function (m) { return m(typeDefinitions); });\r\n        types.src = '(function(mod) {\\n' +\r\n            '  if (typeof exports == \"object\" && typeof module == \"object\") return mod(exports, require(\"jaydata/core\")); // CommonJS\\n' +\r\n            '  if (typeof define == \"function\" && define.amd) return define([\"exports\"], mod); // AMD\\n' +\r\n            '  mod($data.generatedContext || ($data.generatedContext = {}), $data); // Plain browser env\\n' +\r\n            '})(function(exports, $data) {\\n\\n' +\r\n            'var types = {};\\n\\n';\r\n        types.push.apply(types, typeDefinitions.map(function (d) {\r\n            var srcPart = '';\r\n            if (d.baseType == self.$data.Enum) {\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = $data.createEnum(\"' + d.params[0] + '\", [\\n' +\r\n                    Object.keys(d.params[3]).map(function (dp) { return '  ' + JSON.stringify(d.params[3][dp]); }).join(',\\n') +\r\n                    '\\n]);\\n\\n';\r\n            }\r\n            else {\r\n                var typeName = _this.options.container.resolveName(d.baseType);\r\n                if (d.baseType == self.$data.EntityContext)\r\n                    srcPart += 'exports.type = ';\r\n                srcPart += 'types[\"' + d.params[0] + '\"] = ' +\r\n                    (typeName == '$data.Entity' || typeName == '$data.EntityContext' ? typeName : 'types[\"' + typeName + '\"]') +\r\n                    '.extend(\"' + d.params[0] + '\", ';\r\n                if (d.params[2] && Object.keys(d.params[2]).length > 0)\r\n                    srcPart += '{\\n' + Object.keys(d.params[2]).map(function (dp) { return '  ' + dp + ': ' + JSON.stringify(d.params[2][dp]); }).join(',\\n') + '\\n}';\r\n                else\r\n                    srcPart += 'null';\r\n                if (d.params[3] && Object.keys(d.params[3]).length > 0)\r\n                    srcPart += ', {\\n' + Object.keys(d.params[3]).map(function (dp) { return '  ' + dp + ': ' + JSON.stringify(d.params[3][dp]); }).join(',\\n') + '\\n}';\r\n                srcPart += ');\\n\\n';\r\n            }\r\n            types.src += srcPart;\r\n            if (_this.options.debug)\r\n                console.log('Type generated:', d.params[0]);\r\n            var baseType = _this.options.container.resolveType(d.baseType);\r\n            return baseType.extend.apply(baseType, d.params);\r\n        }));\r\n        types.src += 'var ctxType = exports.type;\\n' +\r\n            'exports.factory = function(config){\\n' +\r\n            '  if (ctxType){\\n' +\r\n            '    var cfg = $data.typeSystem.extend({\\n' +\r\n            '      name: \"oData\",\\n' +\r\n            '      oDataServiceHost: \"' + this.options.url.replace('/$metadata', '') + '\",\\n' +\r\n            '      withCredentials: ' + (this.options.withCredentials || false) + ',\\n' +\r\n            '      maxDataServiceVersion: \"' + (this.options.maxDataServiceVersion || '4.0') + '\"\\n' +\r\n            '    }, config);\\n' +\r\n            '    return new ctxType(cfg);\\n' +\r\n            '  }else{\\n' +\r\n            '    return null;\\n' +\r\n            '  }\\n' +\r\n            '};\\n\\n';\r\n        if (this.options.autoCreateContext) {\r\n            var contextName = typeof this.options.autoCreateContext == 'string' ? this.options.autoCreateContext : 'context';\r\n            types.src += 'exports[\"' + contextName + '\"] = exports.factory();\\n\\n';\r\n        }\r\n        types.src += '});';\r\n        return types;\r\n    };\r\n    return Metadata;\r\n}());\r\nexports.Metadata = Metadata;\r\n//# sourceMappingURL=metadata.js.map","\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar odata_metadata_1 = require('odata-metadata');\r\nvar metadata_1 = require('./metadata');\r\nvar odatajs = (typeof window !== \"undefined\" ? window['odatajs'] : typeof global !== \"undefined\" ? global['odatajs'] : null);\r\nvar extend = require('extend');\r\nvar MetadataHandler = (function () {\r\n    function MetadataHandler($data, options) {\r\n        this.$data = $data;\r\n        this.options = options || {};\r\n        this.prepareRequest = options.prepareRequest || function () { };\r\n        if (typeof odatajs === 'undefined' || typeof odatajs.oData === 'undefined') {\r\n            console.error('Not Found!:', 'odatajs is required');\r\n        }\r\n        else {\r\n            this.oData = odatajs.oData;\r\n        }\r\n    }\r\n    MetadataHandler.prototype.parse = function (text) {\r\n        var _this = this;\r\n        var edmMetadata = new odata_metadata_1.Edm.Edmx(this.oData.metadata.metadataParser(null, text));\r\n        var metadata = new metadata_1.Metadata(this.$data, this.options, edmMetadata);\r\n        var types = metadata.processMetadata();\r\n        var contextType = types.filter(function (t) { return t.isAssignableTo(_this.$data.EntityContext); })[0];\r\n        var factory = this._createFactoryFunc(contextType);\r\n        factory.type = contextType;\r\n        factory.src = types.src;\r\n        return factory;\r\n    };\r\n    MetadataHandler.prototype.load = function () {\r\n        var self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var serviceUrl = self.options.url.replace('/$metadata', '');\r\n            var metadataUrl = serviceUrl.replace(/\\/+$/, '') + '/$metadata';\r\n            self.options.serivceUri = serviceUrl;\r\n            var requestData = [\r\n                {\r\n                    requestUri: metadataUrl,\r\n                    method: self.options.method || \"GET\",\r\n                    headers: self.options.headers || {}\r\n                },\r\n                function (data) {\r\n                    var edmMetadata = new odata_metadata_1.Edm.Edmx(data);\r\n                    var metadata = new metadata_1.Metadata(self.$data, self.options, edmMetadata);\r\n                    var types = metadata.processMetadata();\r\n                    var contextType = types.filter(function (t) { return t.isAssignableTo(self.$data.EntityContext); })[0];\r\n                    var factory = self._createFactoryFunc(contextType);\r\n                    factory.type = contextType;\r\n                    factory.src = types.src;\r\n                    resolve(factory);\r\n                },\r\n                reject,\r\n                self.oData.metadataHandler\r\n            ];\r\n            self._appendBasicAuth(requestData[0], self.options.user, self.options.password, self.options.withCredentials);\r\n            self.prepareRequest.call(self, requestData);\r\n            self.oData.request.apply(self.oData, requestData);\r\n        });\r\n    };\r\n    MetadataHandler.prototype._createFactoryFunc = function (ctxType) {\r\n        var _this = this;\r\n        return function (config) {\r\n            if (ctxType) {\r\n                var cfg = extend({\r\n                    name: 'oData',\r\n                    oDataServiceHost: _this.options.url.replace('/$metadata', ''),\r\n                    user: _this.options.user,\r\n                    password: _this.options.password,\r\n                    withCredentials: _this.options.withCredentials,\r\n                    maxDataServiceVersion: _this.options.maxDataServiceVersion || '4.0'\r\n                }, config);\r\n                return new ctxType(cfg);\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        };\r\n    };\r\n    MetadataHandler.prototype._appendBasicAuth = function (request, user, password, withCredentials) {\r\n        request.headers = request.headers || {};\r\n        if (!request.headers.Authorization && user && password) {\r\n            request.headers.Authorization = \"Basic \" + this.__encodeBase64(user + \":\" + password);\r\n        }\r\n        if (withCredentials) {\r\n            request.withCredentials = withCredentials;\r\n        }\r\n    };\r\n    MetadataHandler.prototype.__encodeBase64 = function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n            \"QRSTUVWXYZabcdef\" +\r\n            \"ghijklmnopqrstuv\" +\r\n            \"wxyz0123456789+/\" +\r\n            \"=\";\r\n        var input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3;\r\n        var enc1, enc2, enc3, enc4;\r\n        var i = 0;\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            }\r\n            else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n            base64 = base64 +\r\n                b64array.charAt(enc1) +\r\n                b64array.charAt(enc2) +\r\n                b64array.charAt(enc3) +\r\n                b64array.charAt(enc4);\r\n        } while (i < input.length);\r\n        return base64;\r\n    };\r\n    return MetadataHandler;\r\n}());\r\nexports.MetadataHandler = MetadataHandler;\r\n//# sourceMappingURL=metadataHandler.js.map","\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar metadataHandler_1 = require('./metadataHandler');\r\nvar jaydata_error_handler_1 = require('jaydata-error-handler');\r\nvar jaydata_promise_handler_1 = require('jaydata-promise-handler');\r\nvar metadataHandler_2 = require('./metadataHandler');\r\nexports.MetadataHandler = metadataHandler_2.MetadataHandler;\r\nvar ServiceParams = (function () {\r\n    function ServiceParams() {\r\n        this.config = {};\r\n    }\r\n    return ServiceParams;\r\n}());\r\nexports.ServiceParams = ServiceParams;\r\nvar DynamicMetadata = (function () {\r\n    function DynamicMetadata($data) {\r\n        this.$data = $data;\r\n    }\r\n    DynamicMetadata.prototype.service = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        var self = this;\r\n        new metadataHandler_1.MetadataHandler(this.$data, params.config).load().then(function (factory) {\r\n            var type = factory.type;\r\n            //register to local store\r\n            var storeAlias = params.config.serviceName || params.config.storeAlias;\r\n            if (storeAlias && 'addStore' in self.$data) {\r\n                self.$data.addStore(storeAlias, factory, params.config.isDefault === undefined || params.config.isDefault);\r\n            }\r\n            _callback.success(factory, type);\r\n        }, function (err) {\r\n            _callback.error(err);\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.prototype.initService = function (serviceUri, config, callback) {\r\n        var params = new ServiceParams();\r\n        DynamicMetadata.getParam(config, params);\r\n        DynamicMetadata.getParam(callback, params);\r\n        if (typeof serviceUri == 'object') {\r\n            extend(params.config, serviceUri);\r\n        }\r\n        else if (typeof serviceUri == 'string') {\r\n            params.config = params.config || {};\r\n            params.config.url = serviceUri;\r\n        }\r\n        var pHandler = new jaydata_promise_handler_1.PromiseHandler();\r\n        var _callback = pHandler.createCallback(params.callback);\r\n        this.service(params.config.url, params.config, {\r\n            success: function (factory) {\r\n                var ctx = factory();\r\n                if (ctx) {\r\n                    return ctx.onReady(_callback);\r\n                }\r\n                return _callback.error(new jaydata_error_handler_1.Exception(\"Missing Context Type\"));\r\n            },\r\n            error: _callback.error\r\n        });\r\n        return pHandler.getPromise();\r\n    };\r\n    DynamicMetadata.use = function ($data) {\r\n        var dynamicMetadata = new DynamicMetadata($data);\r\n        $data.service = dynamicMetadata.service;\r\n        $data.initService = dynamicMetadata.initService;\r\n    };\r\n    DynamicMetadata.getParam = function (paramValue, params) {\r\n        switch (typeof paramValue) {\r\n            case 'object':\r\n                if (typeof paramValue.success === 'function' || typeof paramValue.error === 'function') {\r\n                    params.callback = paramValue;\r\n                }\r\n                else {\r\n                    params.config = paramValue;\r\n                }\r\n                break;\r\n            case 'function':\r\n                params.callback = paramValue;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    return DynamicMetadata;\r\n}());\r\nexports.DynamicMetadata = DynamicMetadata;\r\n//# sourceMappingURL=service.js.map","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar Exception = (function (_super) {\r\n    __extends(Exception, _super);\r\n    function Exception(message, name, data) {\r\n        _super.call(this);\r\n        if (Error.captureStackTrace) {\r\n            Error.captureStackTrace(this, this.constructor);\r\n        }\r\n        this.name = name || \"Exception\";\r\n        this.message = message;\r\n        this.data = data;\r\n    }\r\n    Exception.prototype._getStackTrace = function () { };\r\n    return Exception;\r\n}(Error));\r\nexports.Exception = Exception;\r\nvar Guard = (function () {\r\n    function Guard() {\r\n    }\r\n    Guard.requireValue = function (name, value) {\r\n        if (typeof value === 'undefined' || value === null) {\r\n            Guard.raise(name + \" requires a value other than undefined or null\");\r\n        }\r\n    };\r\n    Guard.requireType = function (name, value, typeOrTypes) {\r\n        var types = typeOrTypes instanceof Array ? typeOrTypes : [typeOrTypes];\r\n        return types.some(function (item) {\r\n            switch (typeof item) {\r\n                case \"string\":\r\n                    return typeof value === item;\r\n                case \"function\":\r\n                    return value instanceof item;\r\n                default:\r\n                    Guard.raise(\"Unknown type format : \" + typeof item + \" for: \" + name);\r\n            }\r\n        });\r\n    };\r\n    Guard.raise = function (exception) {\r\n        if (typeof exports.intellisense === 'undefined') {\r\n            if (exception instanceof Exception) {\r\n                console.error(exception.name + ':', exception.message + '\\n', exception);\r\n            }\r\n            else {\r\n                console.error(exception);\r\n            }\r\n            throw exception;\r\n        }\r\n    };\r\n    Guard.isNullOrUndefined = function (value) {\r\n        return value === undefined || value === null;\r\n    };\r\n    return Guard;\r\n}());\r\nexports.Guard = Guard;\r\n//# sourceMappingURL=errorHandler.js.map","\"use strict\";\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar promiseHandlerBase_1 = require('./promiseHandlerBase');\r\nvar PromiseHandler = (function (_super) {\r\n    __extends(PromiseHandler, _super);\r\n    function PromiseHandler() {\r\n        _super.call(this);\r\n        var self = this;\r\n        var promise = new Promise(function (resolve, reject) {\r\n            self.resolve = resolve;\r\n            self.reject = reject;\r\n        });\r\n        this.deferred = {\r\n            resolve: function () { self.resolve.apply(promise, arguments); },\r\n            reject: function () { self.reject.apply(promise, arguments); },\r\n            promise: promise\r\n        };\r\n    }\r\n    PromiseHandler.prototype.createCallback = function (callback) {\r\n        var settings = promiseHandlerBase_1.PromiseHandlerBase.createCallbackSettings(callback);\r\n        var self = this;\r\n        var result = new promiseHandlerBase_1.CallbackSettings();\r\n        result = extend(result, {\r\n            success: function () {\r\n                settings.success.apply(self.deferred, arguments);\r\n                self.resolve.apply(self.deferred, arguments);\r\n            },\r\n            error: function () {\r\n                Array.prototype.push.call(arguments, self.deferred);\r\n                settings.error.apply(self.deferred, arguments);\r\n            },\r\n            notify: function () {\r\n                settings.notify.apply(self.deferred, arguments);\r\n            }\r\n        });\r\n        return result;\r\n    };\r\n    PromiseHandler.prototype.getPromise = function () {\r\n        return this.deferred.promise;\r\n    };\r\n    PromiseHandler.compatibilityMode = function () {\r\n        Promise.prototype['fail'] = function (onReject) {\r\n            return this.then(null, function (reason) {\r\n                onReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n        Promise.prototype['always'] = function (onResolveOrReject) {\r\n            return this.then(onResolveOrReject, function (reason) {\r\n                onResolveOrReject(reason);\r\n                throw reason;\r\n            });\r\n        };\r\n    };\r\n    PromiseHandler.use = function ($data) {\r\n        $data.PromiseHandler = typeof Promise == 'function' ? PromiseHandler : promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.PromiseHandlerBase = promiseHandlerBase_1.PromiseHandlerBase;\r\n        $data.Promise = promiseHandlerBase_1.PromiseNotImplemented;\r\n    };\r\n    return PromiseHandler;\r\n}(promiseHandlerBase_1.PromiseHandlerBase));\r\nexports.PromiseHandler = PromiseHandler;\r\n//# sourceMappingURL=promise.js.map","\"use strict\";\r\n/// <reference path=\"../typings/tsd.d.ts\"/>\r\nvar extend = require('extend');\r\nvar jaydata_error_handler_1 = require('jaydata-error-handler');\r\nvar CallbackSettings = (function () {\r\n    function CallbackSettings() {\r\n    }\r\n    return CallbackSettings;\r\n}());\r\nexports.CallbackSettings = CallbackSettings;\r\nvar PromiseNotImplemented = (function () {\r\n    function PromiseNotImplemented() {\r\n    }\r\n    PromiseNotImplemented.prototype.always = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.always', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.done = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.done', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.fail = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.fail', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isRejected = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isRejected', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.isResolved = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.isResolved', 'Not implemented!')); };\r\n    //notify() { Guard.raise(new Exception('$data.Promise.notify', 'Not implemented!')); }\r\n    //notifyWith() { Guard.raise(new Exception('$data.Promise.notifyWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.pipe = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.pipe', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.progress = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.progress', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.promise = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.promise', 'Not implemented!')); };\r\n    //reject() { Guard.raise(new Exception('$data.Promise.reject', 'Not implemented!')); }\r\n    //rejectWith() { Guard.raise(new Exception('$data.Promise.rejectWith', 'Not implemented!')); }\r\n    //resolve() { Guard.raise(new Exception('$data.Promise.resolve', 'Not implemented!')); }\r\n    //resolveWith() { Guard.raise(new Exception('$data.Promise.resolveWith', 'Not implemented!')); }\r\n    PromiseNotImplemented.prototype.state = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.state', 'Not implemented!')); };\r\n    PromiseNotImplemented.prototype.then = function () { jaydata_error_handler_1.Guard.raise(new jaydata_error_handler_1.Exception('$data.Promise.then', 'Not implemented!')); };\r\n    return PromiseNotImplemented;\r\n}());\r\nexports.PromiseNotImplemented = PromiseNotImplemented;\r\nvar PromiseHandlerBase = (function () {\r\n    function PromiseHandlerBase() {\r\n    }\r\n    PromiseHandlerBase.defaultSuccessCallback = function () { };\r\n    PromiseHandlerBase.defaultNotifyCallback = function () { };\r\n    PromiseHandlerBase.defaultErrorCallback = function () {\r\n        if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n            (console.error || console.log).call(console, arguments[0]);\r\n            arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n        }\r\n        else {\r\n            if (arguments[0] instanceof Error) {\r\n                console.error(arguments[0]);\r\n            }\r\n            else {\r\n                console.error(\"DefaultError:\", \"DEFAULT ERROR CALLBACK!\", arguments);\r\n            }\r\n        }\r\n    };\r\n    PromiseHandlerBase.createCallbackSettings = function (callback, defaultSettings) {\r\n        var settings = defaultSettings || {\r\n            success: PromiseHandlerBase.defaultSuccessCallback,\r\n            error: PromiseHandlerBase.defaultErrorCallback,\r\n            notify: PromiseHandlerBase.defaultNotifyCallback\r\n        };\r\n        var result = new CallbackSettings();\r\n        if (callback == null || callback == undefined) {\r\n            result = settings;\r\n        }\r\n        else if (typeof callback == 'function') {\r\n            result = extend(settings, {\r\n                success: callback\r\n            });\r\n        }\r\n        else {\r\n            result = extend(settings, callback);\r\n        }\r\n        var wrapCode = function (fn) {\r\n            var t = this;\r\n            function r() {\r\n                fn.apply(t, arguments);\r\n                fn = function () { };\r\n            }\r\n            return r;\r\n        };\r\n        if (typeof result.error === 'function')\r\n            result.error = wrapCode(result.error);\r\n        return result;\r\n    };\r\n    PromiseHandlerBase.prototype.createCallback = function (callback) {\r\n        return PromiseHandlerBase.createCallbackSettings(callback);\r\n    };\r\n    PromiseHandlerBase.prototype.getPromise = function () {\r\n        return new PromiseNotImplemented();\r\n    };\r\n    return PromiseHandlerBase;\r\n}());\r\nexports.PromiseHandlerBase = PromiseHandlerBase;\r\n//# sourceMappingURL=promiseHandlerBase.js.map","var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar metacode = require('./metacode');\r\nvar Edm;\r\n(function (Edm) {\r\n    var PrimitiveType = (function () {\r\n        function PrimitiveType(className) {\r\n            this.className = className;\r\n        }\r\n        PrimitiveType.prototype.toString = function () { return this.className; };\r\n        return PrimitiveType;\r\n    })();\r\n    Edm.PrimitiveType = PrimitiveType;\r\n    Edm.Binary = new PrimitiveType('Edm.Binary');\r\n    Edm.Boolean = new PrimitiveType('Edm.Boolean');\r\n    Edm.Byte = new PrimitiveType('Edm.Byte');\r\n    Edm.Date = new PrimitiveType('Edm.Date');\r\n    Edm.DateTimeOffset = new PrimitiveType('Edm.DateTimeOffset');\r\n    Edm.Decimal = new PrimitiveType('Edm.Decimal');\r\n    Edm.Double = new PrimitiveType('Edm.Double');\r\n    Edm.Duration = new PrimitiveType('Edm.Duration');\r\n    Edm.Guid = new PrimitiveType('Edm.Guid');\r\n    Edm.Int16 = new PrimitiveType('Edm.Int16');\r\n    Edm.Int32 = new PrimitiveType('Edm.Int32');\r\n    Edm.Int64 = new PrimitiveType('Edm.Int64');\r\n    Edm.SByte = new PrimitiveType('Edm.SByte');\r\n    Edm.Single = new PrimitiveType('Edm.Single');\r\n    Edm.Stream = new PrimitiveType('Edm.Stream');\r\n    Edm.String = new PrimitiveType('Edm.String');\r\n    Edm.TimeOfDay = new PrimitiveType('Edm.TimeOfDay');\r\n    Edm.Geography = new PrimitiveType('Edm.Geography');\r\n    Edm.GeographyPoint = new PrimitiveType('Edm.GeographyPoint');\r\n    Edm.GeographyLineString = new PrimitiveType('Edm.GeographyLineString');\r\n    Edm.GeographyPolygon = new PrimitiveType('Edm.GeographyPolygon');\r\n    Edm.GeographyMultiPoint = new PrimitiveType('Edm.GeographyMultiPoint');\r\n    Edm.GeographyMultiLineString = new PrimitiveType('Edm.GeographyMultiLineString');\r\n    Edm.GeographyMultiPolygon = new PrimitiveType('Edm.GeographyMultiPolygon');\r\n    Edm.GeographyCollection = new PrimitiveType('Edm.GeographyCollection');\r\n    Edm.Geometry = new PrimitiveType('Edm.Geometry');\r\n    Edm.GeometryPoint = new PrimitiveType('Edm.GeometryPoint');\r\n    Edm.GeometryLineString = new PrimitiveType('Edm.GeometryLineString');\r\n    Edm.GeometryPolygon = new PrimitiveType('Edm.GeometryPolygon');\r\n    Edm.GeometryMultiPoint = new PrimitiveType('Edm.GeometryMultiPoint');\r\n    Edm.GeometryMultiLineString = new PrimitiveType('Edm.GeometryMultiLineString');\r\n    Edm.GeometryMultiPolygon = new PrimitiveType('Edm.GeometryMultiPolygon');\r\n    Edm.GeometryCollection = new PrimitiveType('Edm.GeometryCollection');\r\n    var MemberAttribute = metacode.MemberAttribute;\r\n    var parse = metacode.parse;\r\n    var required = metacode.required;\r\n    var defaultValue = metacode.defaultValue;\r\n    var parseAs = metacode.parseAs;\r\n    var AttributeFunctionChain = metacode.AttributeFunctionChain;\r\n    var mapArray = function (sourceField, factory) { return new metacode.AttributeFunctionChain(function (d, i) { return d[sourceField]; }, function (props, i) { return Array.isArray(props) ? props : (props ? [props] : []); }, function (props, i) { return props.map(function (prop) { return factory(prop, i); }); }); };\r\n    var EdmItemBase = (function () {\r\n        function EdmItemBase(definition, parent) {\r\n            this.parent = parent;\r\n            definition && this.loadFrom(definition);\r\n        }\r\n        EdmItemBase.prototype.loadFrom = function (definition) {\r\n            var _this = this;\r\n            var proto = Object.getPrototypeOf(this);\r\n            MemberAttribute.getMembers(proto).forEach(function (membername) {\r\n                var parser = MemberAttribute.getAttributeValue(proto, membername, \"serialize\");\r\n                var v = parser.invoke(definition, _this);\r\n                _this[membername] = v;\r\n            });\r\n        };\r\n        return EdmItemBase;\r\n    })();\r\n    Edm.EdmItemBase = EdmItemBase;\r\n    var Property = (function (_super) {\r\n        __extends(Property, _super);\r\n        function Property() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Property.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Property.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Property.prototype, \"SRID\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"defaultValue\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Object)\r\n        ], Property.prototype, \"concurrencyMode\", void 0);\r\n        return Property;\r\n    })(EdmItemBase);\r\n    Edm.Property = Property;\r\n    var NavigationProperty = (function (_super) {\r\n        __extends(NavigationProperty, _super);\r\n        function NavigationProperty() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], NavigationProperty.prototype, \"partner\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], NavigationProperty.prototype, \"containsTarget\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"referentialConstraint\", function (prop, i) { return new ReferentialConstraint(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], NavigationProperty.prototype, \"referentialConstraints\", void 0);\r\n        return NavigationProperty;\r\n    })(EdmItemBase);\r\n    Edm.NavigationProperty = NavigationProperty;\r\n    var ReferentialConstraint = (function (_super) {\r\n        __extends(ReferentialConstraint, _super);\r\n        function ReferentialConstraint() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"property\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ReferentialConstraint.prototype, \"referencedProperty\", void 0);\r\n        return ReferentialConstraint;\r\n    })(EdmItemBase);\r\n    Edm.ReferentialConstraint = ReferentialConstraint;\r\n    var PropertyRef = (function (_super) {\r\n        __extends(PropertyRef, _super);\r\n        function PropertyRef() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], PropertyRef.prototype, \"alias\", void 0);\r\n        return PropertyRef;\r\n    })(EdmItemBase);\r\n    Edm.PropertyRef = PropertyRef;\r\n    var Key = (function (_super) {\r\n        __extends(Key, _super);\r\n        function Key() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"propertyRef\", function (prop, i) { return new PropertyRef(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Key.prototype, \"propertyRefs\", void 0);\r\n        return Key;\r\n    })(EdmItemBase);\r\n    Edm.Key = Key;\r\n    var EntityType = (function (_super) {\r\n        __extends(EntityType, _super);\r\n        function EntityType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.key; }, function (props, i) { return props || []; }, function (props, i) { return props.map(function (prop) { return new Key(prop, i); }); }, function (props) { return props[0]; })), \r\n            __metadata('design:type', Key)\r\n        ], EntityType.prototype, \"key\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EntityType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityType.prototype, \"navigationProperties\", void 0);\r\n        return EntityType;\r\n    })(EdmItemBase);\r\n    Edm.EntityType = EntityType;\r\n    var ComplexType = (function (_super) {\r\n        __extends(ComplexType, _super);\r\n        function ComplexType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ComplexType.prototype, \"baseType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"abstract\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"openType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], ComplexType.prototype, \"hasStream\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"property\", function (prop, i) { return new Property(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"properties\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"navigationProperty\", function (prop, i) { return new NavigationProperty(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], ComplexType.prototype, \"navigationProperties\", void 0);\r\n        return ComplexType;\r\n    })(EdmItemBase);\r\n    Edm.ComplexType = ComplexType;\r\n    var Parameter = (function (_super) {\r\n        __extends(Parameter, _super);\r\n        function Parameter() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Parameter.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"nullable\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"maxLength\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"precision\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"scale\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Parameter.prototype, \"unicode\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(0), \r\n            __metadata('design:type', Number)\r\n        ], Parameter.prototype, \"SRID\", void 0);\r\n        return Parameter;\r\n    })(EdmItemBase);\r\n    Edm.Parameter = Parameter;\r\n    var ReturnType = (function (_super) {\r\n        __extends(ReturnType, _super);\r\n        function ReturnType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], ReturnType.prototype, \"type\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(true), \r\n            __metadata('design:type', Boolean)\r\n        ], ReturnType.prototype, \"nullable\", void 0);\r\n        return ReturnType;\r\n    })(EdmItemBase);\r\n    Edm.ReturnType = ReturnType;\r\n    var Invokable = (function (_super) {\r\n        __extends(Invokable, _super);\r\n        function Invokable() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        return Invokable;\r\n    })(EdmItemBase);\r\n    Edm.Invokable = Invokable;\r\n    var Action = (function (_super) {\r\n        __extends(Action, _super);\r\n        function Action() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Action.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Action.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Action.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Action.prototype, \"returnType\", void 0);\r\n        return Action;\r\n    })(Invokable);\r\n    Edm.Action = Action;\r\n    var Function = (function (_super) {\r\n        __extends(Function, _super);\r\n        function Function() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isBound\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Function.prototype, \"entitySetPath\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"parameter\", function (prop, i) { return new Parameter(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Function.prototype, \"parameters\", void 0);\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (d, i) { return d.returnType; }, function (rt, i) { return new ReturnType(rt, i); })), \r\n            __metadata('design:type', ReturnType)\r\n        ], Function.prototype, \"returnType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], Function.prototype, \"isComposable\", void 0);\r\n        return Function;\r\n    })(Invokable);\r\n    Edm.Function = Function;\r\n    var Member = (function (_super) {\r\n        __extends(Member, _super);\r\n        function Member() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Member.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Number)\r\n        ], Member.prototype, \"value\", void 0);\r\n        return Member;\r\n    })(EdmItemBase);\r\n    Edm.Member = Member;\r\n    var EnumType = (function (_super) {\r\n        __extends(EnumType, _super);\r\n        function EnumType() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EnumType.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(Edm.Int32), \r\n            __metadata('design:type', PrimitiveType)\r\n        ], EnumType.prototype, \"underlyingType\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', Boolean)\r\n        ], EnumType.prototype, \"isFlags\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"member\", function (prop, i) { return new Member(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EnumType.prototype, \"members\", void 0);\r\n        return EnumType;\r\n    })(EdmItemBase);\r\n    Edm.EnumType = EnumType;\r\n    var EntitySet = (function (_super) {\r\n        __extends(EntitySet, _super);\r\n        function EntitySet() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], EntitySet.prototype, \"entityType\", void 0);\r\n        return EntitySet;\r\n    })(EdmItemBase);\r\n    Edm.EntitySet = EntitySet;\r\n    var ActionImport = (function (_super) {\r\n        __extends(ActionImport, _super);\r\n        function ActionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], ActionImport.prototype, \"action\", void 0);\r\n        return ActionImport;\r\n    })(EdmItemBase);\r\n    Edm.ActionImport = ActionImport;\r\n    var FunctionImport = (function (_super) {\r\n        __extends(FunctionImport, _super);\r\n        function FunctionImport() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], FunctionImport.prototype, \"function\", void 0);\r\n        __decorate([\r\n            parse,\r\n            defaultValue(false), \r\n            __metadata('design:type', Boolean)\r\n        ], FunctionImport.prototype, \"includeInServiceDocument\", void 0);\r\n        return FunctionImport;\r\n    })(EdmItemBase);\r\n    Edm.FunctionImport = FunctionImport;\r\n    var EntityContainer = (function (_super) {\r\n        __extends(EntityContainer, _super);\r\n        function EntityContainer() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], EntityContainer.prototype, \"name\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entitySet\", function (prop, i) { return new EntitySet(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"entitySets\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"actionImport\", function (prop, i) { return new ActionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"actionImports\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"functionImport\", function (prop, i) { return new FunctionImport(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], EntityContainer.prototype, \"functionImports\", void 0);\r\n        return EntityContainer;\r\n    })(EdmItemBase);\r\n    Edm.EntityContainer = EntityContainer;\r\n    var Schema = (function (_super) {\r\n        __extends(Schema, _super);\r\n        function Schema() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parse,\r\n            required, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"namespace\", void 0);\r\n        __decorate([\r\n            parse, \r\n            __metadata('design:type', String)\r\n        ], Schema.prototype, \"alias\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"enumType\", function (prop, i) { return new EnumType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"enumTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"complexType\", function (prop, i) { return new ComplexType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"complexTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityType\", function (prop, i) { return new EntityType(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityTypes\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"action\", function (prop, i) { return new Action(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"actions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"function\", function (prop, i) { return new Edm.Function(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"functions\", void 0);\r\n        __decorate([\r\n            parseAs(mapArray(\"entityContainer\", function (prop, i) { return new Edm.EntityContainer(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], Schema.prototype, \"entityContainer\", void 0);\r\n        return Schema;\r\n    })(EdmItemBase);\r\n    Edm.Schema = Schema;\r\n    var DataServices = (function (_super) {\r\n        __extends(DataServices, _super);\r\n        function DataServices() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(mapArray(\"schema\", function (prop, i) { return new Schema(prop, i); })), \r\n            __metadata('design:type', Array)\r\n        ], DataServices.prototype, \"schemas\", void 0);\r\n        return DataServices;\r\n    })(EdmItemBase);\r\n    Edm.DataServices = DataServices;\r\n    var Edmx = (function (_super) {\r\n        __extends(Edmx, _super);\r\n        function Edmx() {\r\n            _super.apply(this, arguments);\r\n        }\r\n        __decorate([\r\n            parseAs(new AttributeFunctionChain(function (edm) { return new Edm.DataServices(edm.dataServices); })), \r\n            __metadata('design:type', Array)\r\n        ], Edmx.prototype, \"dataServices\", void 0);\r\n        return Edmx;\r\n    })(EdmItemBase);\r\n    Edm.Edmx = Edmx;\r\n})(Edm = exports.Edm || (exports.Edm = {}));\r\n//# sourceMappingURL=edm.js.map","var __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/// <reference path=\"../node_modules/reflect-metadata/reflect-metadata.d.ts\" />\r\nrequire('reflect-metadata');\r\nfunction isFunction(o) {\r\n    return \"function\" === typeof o;\r\n}\r\nfunction isUndefined(o) {\r\n    return o === undefined;\r\n}\r\nvar MemberAttribute = (function () {\r\n    function MemberAttribute(attributeName) {\r\n        this.attributeName = attributeName;\r\n    }\r\n    MemberAttribute.prototype.registerMember = function (target, key) {\r\n        var md = (Reflect.getMetadata(\"members\", target) || []);\r\n        if (md.indexOf(key) < 0) {\r\n            md.push(key);\r\n        }\r\n        Reflect.defineMetadata(\"members\", md, target);\r\n    };\r\n    MemberAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        return presentedValue;\r\n    };\r\n    MemberAttribute.prototype.decorate = function (value) {\r\n        var _this = this;\r\n        return function (target, key, descriptor) {\r\n            _this.registerMember(target, key);\r\n            var decoratorValue = _this.getDecoratorValue(target, key, value);\r\n            //console.log(\"decorator runs\",key, this.attributeName, decoratorValue, value)\r\n            Reflect.defineMetadata(_this.attributeName, decoratorValue, target, key);\r\n        };\r\n    };\r\n    Object.defineProperty(MemberAttribute.prototype, \"decorator\", {\r\n        get: function () {\r\n            return this.decorate();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MemberAttribute.prototype.isApplied = function (instance, memberName) {\r\n        return Reflect.getMetadataKeys(Object.getPrototypeOf(instance), memberName).indexOf(this.attributeName) > -1;\r\n    };\r\n    MemberAttribute.getMembers = function (target) {\r\n        return Reflect.getMetadata(\"members\", isFunction(target) ? target.prototype : target);\r\n    };\r\n    MemberAttribute.getAttributeNames = function (target, memberName) {\r\n        return Reflect.getMetadataKeys(target, memberName);\r\n    };\r\n    MemberAttribute.getAttributeValue = function (target, memberName, attributeName) {\r\n        return Reflect.getMetadata(attributeName, target, memberName);\r\n    };\r\n    return MemberAttribute;\r\n})();\r\nexports.MemberAttribute = MemberAttribute;\r\nvar AttributeFunctionChain = (function () {\r\n    function AttributeFunctionChain() {\r\n        var steps = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            steps[_i - 0] = arguments[_i];\r\n        }\r\n        this.steps = [];\r\n        this.steps = steps;\r\n    }\r\n    AttributeFunctionChain.prototype.invoke = function (definition, instance) {\r\n        var result = definition;\r\n        this.steps.forEach(function (fn) {\r\n            result = fn(result, instance);\r\n        });\r\n        return result;\r\n    };\r\n    return AttributeFunctionChain;\r\n})();\r\nexports.AttributeFunctionChain = AttributeFunctionChain;\r\nvar ParseAttribute = (function (_super) {\r\n    __extends(ParseAttribute, _super);\r\n    function ParseAttribute() {\r\n        _super.call(this, \"serialize\");\r\n    }\r\n    ParseAttribute.prototype.getDecoratorValue = function (target, key, presentedValue) {\r\n        if (!isUndefined(presentedValue)) {\r\n            return presentedValue;\r\n        }\r\n        return new AttributeFunctionChain(function (d) { return d[key]; });\r\n    };\r\n    return ParseAttribute;\r\n})(MemberAttribute);\r\nexports.ParseAttribute = ParseAttribute;\r\nexports.required = new MemberAttribute(\"required\").decorate(true);\r\nexports.defaultValueAttribute = new MemberAttribute(\"defaultValue\");\r\nexports.defaultValue = exports.defaultValueAttribute.decorate.bind(exports.defaultValueAttribute);\r\nexports.parseAttribute = new ParseAttribute();\r\nexports.parse = exports.parseAttribute.decorator;\r\nexports.parseAs = exports.parseAttribute.decorate.bind(exports.parseAttribute);\r\nexports.typeArgument = new MemberAttribute(\"typeArgument\");\r\n//# sourceMappingURL=metacode.js.map","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\nvar Reflect;\r\n(function (Reflect) {\r\n    \"use strict\";\r\n    // Load global or shim versions of Map, Set, and WeakMap\r\n    var functionPrototype = Object.getPrototypeOf(Function);\r\n    var _Map = typeof Map === \"function\" ? Map : CreateMapPolyfill();\r\n    var _Set = typeof Set === \"function\" ? Set : CreateSetPolyfill();\r\n    var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\r\n    // [[Metadata]] internal slot\r\n    var __Metadata__ = new _WeakMap();\r\n    /**\r\n      * Applies a set of decorators to a property of a target object.\r\n      * @param decorators An array of decorators.\r\n      * @param target The target object.\r\n      * @param targetKey (Optional) The property key to decorate.\r\n      * @param targetDescriptor (Optional) The property descriptor for the target key\r\n      * @remarks Decorators are applied in reverse order.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     C = Reflect.decorate(decoratorsArray, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.decorate(decoratorsArray, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.decorate(decoratorsArray, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Object.defineProperty(C, \"staticMethod\",\r\n      *         Reflect.decorate(decoratorsArray, C, \"staticMethod\",\r\n      *             Object.getOwnPropertyDescriptor(C, \"staticMethod\")));\r\n      *\r\n      *     // method (on prototype)\r\n      *     Object.defineProperty(C.prototype, \"method\",\r\n      *         Reflect.decorate(decoratorsArray, C.prototype, \"method\",\r\n      *             Object.getOwnPropertyDescriptor(C.prototype, \"method\")));\r\n      *\r\n      */\r\n    function decorate(decorators, target, targetKey, targetDescriptor) {\r\n        if (!IsUndefined(targetDescriptor)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (IsUndefined(targetKey)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(targetDescriptor)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsObject(target)) {\r\n                throw new TypeError();\r\n            }\r\n            targetKey = ToPropertyKey(targetKey);\r\n            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);\r\n        }\r\n        else {\r\n            if (!IsArray(decorators)) {\r\n                throw new TypeError();\r\n            }\r\n            else if (!IsConstructor(target)) {\r\n                throw new TypeError();\r\n            }\r\n            return DecorateConstructor(decorators, target);\r\n        }\r\n    }\r\n    Reflect.decorate = decorate;\r\n    /**\r\n      * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n      * @param metadataKey The key for the metadata entry.\r\n      * @param metadataValue The value for the metadata entry.\r\n      * @returns A decorator function.\r\n      * @remarks\r\n      * If `metadataKey` is already defined for the target and target key, the\r\n      * metadataValue for that key will be overwritten.\r\n      * @example\r\n      *\r\n      *     // constructor\r\n      *     @Reflect.metadata(key, value)\r\n      *     class C {\r\n      *     }\r\n      *\r\n      *     // property (on constructor, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticProperty;\r\n      *     }\r\n      *\r\n      *     // property (on prototype, TypeScript only)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         property;\r\n      *     }\r\n      *\r\n      *     // method (on constructor)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         static staticMethod() { }\r\n      *     }\r\n      *\r\n      *     // method (on prototype)\r\n      *     class C {\r\n      *         @Reflect.metadata(key, value)\r\n      *         method() { }\r\n      *     }\r\n      *\r\n      */\r\n    function metadata(metadataKey, metadataValue) {\r\n        function decorator(target, targetKey) {\r\n            if (!IsUndefined(targetKey)) {\r\n                if (!IsObject(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                targetKey = ToPropertyKey(targetKey);\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n            }\r\n            else {\r\n                if (!IsConstructor(target)) {\r\n                    throw new TypeError();\r\n                }\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, /*targetKey*/ undefined);\r\n            }\r\n        }\r\n        return decorator;\r\n    }\r\n    Reflect.metadata = metadata;\r\n    /**\r\n      * Define a unique metadata entry on the target.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param metadataValue A value that contains attached metadata.\r\n      * @param target The target object on which to define metadata.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     Reflect.defineMetadata(\"custom:annotation\", options, C.prototype, \"method\");\r\n      *\r\n      *     // decorator factory as metadata-producing annotation.\r\n      *     function MyAnnotation(options): Decorator {\r\n      *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n      *     }\r\n      *\r\n      */\r\n    function defineMetadata(metadataKey, metadataValue, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);\r\n    }\r\n    Reflect.defineMetadata = defineMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasMetadata = hasMetadata;\r\n    /**\r\n      * Gets a value indicating whether the target object has the provided metadata key defined.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.hasOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function hasOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.hasOwnMetadata = hasOwnMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getMetadata = getMetadata;\r\n    /**\r\n      * Gets the metadata value for the provided metadata key on the target object.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadata = getOwnMetadata;\r\n    /**\r\n      * Gets the metadata keys defined on the target object or its prototype chain.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getMetadataKeys = getMetadataKeys;\r\n    /**\r\n      * Gets the unique metadata keys defined on the target object.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns An array of unique metadata keys.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.getOwnMetadataKeys(C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.getOwnMetadataKeys(C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.getOwnMetadataKeys(C.prototype, \"method\");\r\n      *\r\n      */\r\n    function getOwnMetadataKeys(target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        return OrdinaryOwnMetadataKeys(target, targetKey);\r\n    }\r\n    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;\r\n    /**\r\n      * Deletes the metadata entry from the target object with the provided key.\r\n      * @param metadataKey A key used to store and retrieve metadata.\r\n      * @param target The target object on which the metadata is defined.\r\n      * @param targetKey (Optional) The property key for the target.\r\n      * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n      * @example\r\n      *\r\n      *     class C {\r\n      *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n      *         // static staticProperty;\r\n      *         // property;\r\n      *\r\n      *         constructor(p) { }\r\n      *         static staticMethod(p) { }\r\n      *         method(p) { }\r\n      *     }\r\n      *\r\n      *     // constructor\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C);\r\n      *\r\n      *     // property (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticProperty\");\r\n      *\r\n      *     // property (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"property\");\r\n      *\r\n      *     // method (on constructor)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C, \"staticMethod\");\r\n      *\r\n      *     // method (on prototype)\r\n      *     result = Reflect.deleteMetadata(\"custom:annotation\", C.prototype, \"method\");\r\n      *\r\n      */\r\n    function deleteMetadata(metadataKey, target, targetKey) {\r\n        if (!IsObject(target)) {\r\n            throw new TypeError();\r\n        }\r\n        else if (!IsUndefined(targetKey)) {\r\n            targetKey = ToPropertyKey(targetKey);\r\n        }\r\n        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        if (IsUndefined(metadataMap)) {\r\n            return false;\r\n        }\r\n        if (!metadataMap.delete(metadataKey)) {\r\n            return false;\r\n        }\r\n        if (metadataMap.size > 0) {\r\n            return true;\r\n        }\r\n        var targetMetadata = __Metadata__.get(target);\r\n        targetMetadata.delete(targetKey);\r\n        if (targetMetadata.size > 0) {\r\n            return true;\r\n        }\r\n        __Metadata__.delete(target);\r\n        return true;\r\n    }\r\n    Reflect.deleteMetadata = deleteMetadata;\r\n    function DecorateConstructor(decorators, target) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsConstructor(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                target = decorated;\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            var decorated = decorator(target, propertyKey, descriptor);\r\n            if (!IsUndefined(decorated)) {\r\n                if (!IsObject(decorated)) {\r\n                    throw new TypeError();\r\n                }\r\n                descriptor = decorated;\r\n            }\r\n        }\r\n        return descriptor;\r\n    }\r\n    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {\r\n        for (var i = decorators.length - 1; i >= 0; --i) {\r\n            var decorator = decorators[i];\r\n            decorator(target, propertyKey);\r\n        }\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-\r\n    function GetOrCreateMetadataMap(target, targetKey, create) {\r\n        var targetMetadata = __Metadata__.get(target);\r\n        if (!targetMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            targetMetadata = new _Map();\r\n            __Metadata__.set(target, targetMetadata);\r\n        }\r\n        var keyMetadata = targetMetadata.get(targetKey);\r\n        if (!keyMetadata) {\r\n            if (!create) {\r\n                return undefined;\r\n            }\r\n            keyMetadata = new _Map();\r\n            targetMetadata.set(targetKey, keyMetadata);\r\n        }\r\n        return keyMetadata;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-\r\n    function OrdinaryHasMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return true;\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n        }\r\n        return false;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-\r\n    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return false;\r\n        }\r\n        return Boolean(metadataMap.has(MetadataKey));\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-\r\n    function OrdinaryGetMetadata(MetadataKey, O, P) {\r\n        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n        if (hasOwn) {\r\n            return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n        }\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent !== null) {\r\n            return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n        }\r\n        return undefined;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-\r\n    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ false);\r\n        if (metadataMap === undefined) {\r\n            return undefined;\r\n        }\r\n        return metadataMap.get(MetadataKey);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-\r\n    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\r\n        var metadataMap = GetOrCreateMetadataMap(O, P, /*create*/ true);\r\n        metadataMap.set(MetadataKey, MetadataValue);\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-\r\n    function OrdinaryMetadataKeys(O, P) {\r\n        var ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n        var parent = GetPrototypeOf(O);\r\n        if (parent === null) {\r\n            return ownKeys;\r\n        }\r\n        var parentKeys = OrdinaryMetadataKeys(parent, P);\r\n        if (parentKeys.length <= 0) {\r\n            return ownKeys;\r\n        }\r\n        if (ownKeys.length <= 0) {\r\n            return parentKeys;\r\n        }\r\n        var set = new _Set();\r\n        var keys = [];\r\n        for (var _i = 0; _i < ownKeys.length; _i++) {\r\n            var key = ownKeys[_i];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        for (var _a = 0; _a < parentKeys.length; _a++) {\r\n            var key = parentKeys[_a];\r\n            var hasKey = set.has(key);\r\n            if (!hasKey) {\r\n                set.add(key);\r\n                keys.push(key);\r\n            }\r\n        }\r\n        return keys;\r\n    }\r\n    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-\r\n    function OrdinaryOwnMetadataKeys(target, targetKey) {\r\n        var metadataMap = GetOrCreateMetadataMap(target, targetKey, /*create*/ false);\r\n        var keys = [];\r\n        if (metadataMap) {\r\n            metadataMap.forEach(function (_, key) { return keys.push(key); });\r\n        }\r\n        return keys;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type\r\n    function IsUndefined(x) {\r\n        return x === undefined;\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray\r\n    function IsArray(x) {\r\n        return Array.isArray(x);\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type\r\n    function IsObject(x) {\r\n        return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor\r\n    function IsConstructor(x) {\r\n        return typeof x === \"function\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type\r\n    function IsSymbol(x) {\r\n        return typeof x === \"symbol\";\r\n    }\r\n    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey\r\n    function ToPropertyKey(value) {\r\n        if (IsSymbol(value)) {\r\n            return value;\r\n        }\r\n        return String(value);\r\n    }\r\n    function GetPrototypeOf(O) {\r\n        var proto = Object.getPrototypeOf(O);\r\n        if (typeof O !== \"function\" || O === functionPrototype) {\r\n            return proto;\r\n        }\r\n        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. \r\n        // Try to determine the superclass constructor. Compatible implementations\r\n        // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n        // or ensure each class has a valid `constructor` property on its prototype that\r\n        // points back to the constructor.\r\n        // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n        // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n        if (proto !== functionPrototype) {\r\n            return proto;\r\n        }\r\n        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n        var prototype = O.prototype;\r\n        var prototypeProto = Object.getPrototypeOf(prototype);\r\n        if (prototypeProto == null || prototypeProto === Object.prototype) {\r\n            return proto;\r\n        }\r\n        // if the constructor was not a function, then we cannot determine the heritage.\r\n        var constructor = prototypeProto.constructor;\r\n        if (typeof constructor !== \"function\") {\r\n            return proto;\r\n        }\r\n        // if we have some kind of self-reference, then we cannot determine the heritage.\r\n        if (constructor === O) {\r\n            return proto;\r\n        }\r\n        // we have a pretty good guess at the heritage.\r\n        return constructor;\r\n    }\r\n    // naive Map shim\r\n    function CreateMapPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Map() {\r\n            this._keys = [];\r\n            this._values = [];\r\n            this._cache = cacheSentinel;\r\n        }\r\n        Map.prototype = {\r\n            get size() {\r\n                return this._keys.length;\r\n            },\r\n            has: function (key) {\r\n                if (key === this._cache) {\r\n                    return true;\r\n                }\r\n                if (this._find(key) >= 0) {\r\n                    this._cache = key;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._cache = key;\r\n                    return this._values[index];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (key, value) {\r\n                this.delete(key);\r\n                this._keys.push(key);\r\n                this._values.push(value);\r\n                this._cache = key;\r\n                return this;\r\n            },\r\n            delete: function (key) {\r\n                var index = this._find(key);\r\n                if (index >= 0) {\r\n                    this._keys.splice(index, 1);\r\n                    this._values.splice(index, 1);\r\n                    this._cache = cacheSentinel;\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                this._keys.length = 0;\r\n                this._values.length = 0;\r\n                this._cache = cacheSentinel;\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                var size = this.size;\r\n                for (var i = 0; i < size; ++i) {\r\n                    var key = this._keys[i];\r\n                    var value = this._values[i];\r\n                    this._cache = key;\r\n                    callback.call(this, value, key, this);\r\n                }\r\n            },\r\n            _find: function (key) {\r\n                var keys = this._keys;\r\n                var size = keys.length;\r\n                for (var i = 0; i < size; ++i) {\r\n                    if (keys[i] === key) {\r\n                        return i;\r\n                    }\r\n                }\r\n                return -1;\r\n            }\r\n        };\r\n        return Map;\r\n    }\r\n    // naive Set shim\r\n    function CreateSetPolyfill() {\r\n        var cacheSentinel = {};\r\n        function Set() {\r\n            this._map = new _Map();\r\n        }\r\n        Set.prototype = {\r\n            get size() {\r\n                return this._map.length;\r\n            },\r\n            has: function (value) {\r\n                return this._map.has(value);\r\n            },\r\n            add: function (value) {\r\n                this._map.set(value, value);\r\n                return this;\r\n            },\r\n            delete: function (value) {\r\n                return this._map.delete(value);\r\n            },\r\n            clear: function () {\r\n                this._map.clear();\r\n            },\r\n            forEach: function (callback, thisArg) {\r\n                this._map.forEach(callback, thisArg);\r\n            }\r\n        };\r\n        return Set;\r\n    }\r\n    // naive WeakMap shim\r\n    function CreateWeakMapPolyfill() {\r\n        var UUID_SIZE = 16;\r\n        var isNode = typeof global !== \"undefined\" && Object.prototype.toString.call(global.process) === '[object process]';\r\n        var nodeCrypto = isNode && require(\"crypto\");\r\n        var hasOwn = Object.prototype.hasOwnProperty;\r\n        var keys = {};\r\n        var rootKey = CreateUniqueKey();\r\n        function WeakMap() {\r\n            this._key = CreateUniqueKey();\r\n        }\r\n        WeakMap.prototype = {\r\n            has: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return this._key in table;\r\n                }\r\n                return false;\r\n            },\r\n            get: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table) {\r\n                    return table[this._key];\r\n                }\r\n                return undefined;\r\n            },\r\n            set: function (target, value) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ true);\r\n                table[this._key] = value;\r\n                return this;\r\n            },\r\n            delete: function (target) {\r\n                var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                if (table && this._key in table) {\r\n                    return delete table[this._key];\r\n                }\r\n                return false;\r\n            },\r\n            clear: function () {\r\n                // NOTE: not a real clear, just makes the previous data unreachable\r\n                this._key = CreateUniqueKey();\r\n            }\r\n        };\r\n        function FillRandomBytes(buffer, size) {\r\n            for (var i = 0; i < size; ++i) {\r\n                buffer[i] = Math.random() * 255 | 0;\r\n            }\r\n        }\r\n        function GenRandomBytes(size) {\r\n            if (nodeCrypto) {\r\n                var data = nodeCrypto.randomBytes(size);\r\n                return data;\r\n            }\r\n            else if (typeof Uint8Array === \"function\") {\r\n                var data = new Uint8Array(size);\r\n                if (typeof crypto !== \"undefined\") {\r\n                    crypto.getRandomValues(data);\r\n                }\r\n                else if (typeof msCrypto !== \"undefined\") {\r\n                    msCrypto.getRandomValues(data);\r\n                }\r\n                else {\r\n                    FillRandomBytes(data, size);\r\n                }\r\n                return data;\r\n            }\r\n            else {\r\n                var data = new Array(size);\r\n                FillRandomBytes(data, size);\r\n                return data;\r\n            }\r\n        }\r\n        function CreateUUID() {\r\n            var data = GenRandomBytes(UUID_SIZE);\r\n            // mark as random - RFC 4122 § 4.4\r\n            data[6] = data[6] & 0x4f | 0x40;\r\n            data[8] = data[8] & 0xbf | 0x80;\r\n            var result = \"\";\r\n            for (var offset = 0; offset < UUID_SIZE; ++offset) {\r\n                var byte = data[offset];\r\n                if (offset === 4 || offset === 6 || offset === 8) {\r\n                    result += \"-\";\r\n                }\r\n                if (byte < 16) {\r\n                    result += \"0\";\r\n                }\r\n                result += byte.toString(16).toLowerCase();\r\n            }\r\n            return result;\r\n        }\r\n        function CreateUniqueKey() {\r\n            var key;\r\n            do {\r\n                key = \"@@WeakMap@@\" + CreateUUID();\r\n            } while (hasOwn.call(keys, key));\r\n            keys[key] = true;\r\n            return key;\r\n        }\r\n        function GetOrCreateWeakMapTable(target, create) {\r\n            if (!hasOwn.call(target, rootKey)) {\r\n                if (!create) {\r\n                    return undefined;\r\n                }\r\n                Object.defineProperty(target, rootKey, { value: Object.create(null) });\r\n            }\r\n            return target[rootKey];\r\n        }\r\n        return WeakMap;\r\n    }\r\n    // hook global Reflect\r\n    (function (__global) {\r\n        if (typeof __global.Reflect !== \"undefined\") {\r\n            if (__global.Reflect !== Reflect) {\r\n                for (var p in Reflect) {\r\n                    __global.Reflect[p] = Reflect[p];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            __global.Reflect = Reflect;\r\n        }\r\n    })(typeof window !== \"undefined\" ? window :\r\n        typeof WorkerGlobalScope !== \"undefined\" ? self :\r\n            typeof global !== \"undefined\" ? global :\r\n                Function(\"return this;\")());\r\n})(Reflect || (Reflect = {}));\r\n//# sourceMappingURL=Reflect.js.map","module.exports={\r\n  \"name\": \"jaydata\",\r\n  \"description\": \"Cross-platform HTML5 data-management, JavaScript Language Query (JSLQ) support for OData, SQLite, WebSQL, IndexedDB, YQL and Facebook (packaged for Node.JS)\",\r\n  \"keywords\": [\r\n    \"HTML5 data management\",\r\n    \"JavaScript\",\r\n    \"JavaScript Language Query\",\r\n    \"JSLQ\",\r\n    \"OData\",\r\n    \"SQLite\",\r\n    \"WebSQL\",\r\n    \"IndexedDB\",\r\n    \"YQL\",\r\n    \"Facebook\",\r\n    \"cross-platform\",\r\n    \"iPhone\",\r\n    \"Android\"\r\n  ],\r\n  \"version\": \"1.5.1\",\r\n  \"homepage\": \"http://jaydata.org\",\r\n  \"author\": {\r\n    \"name\": \"JayData\",\r\n    \"url\": \"http://jaydata.org\"\r\n  },\r\n  \"dependencies\": {\r\n    \"acorn\": \"^3.0.2\",\r\n    \"atob\": \"^2.0.0\",\r\n    \"btoa\": \"^1.1.2\",\r\n    \"dot\": \"^1.0.3\",\r\n    \"jaydata-dynamic-metadata\": \"^0.0.5\",\r\n    \"jaydata-error-handler\": \"^0.0.1\",\r\n    \"jaydata-odatajs\": \"^4.0.0\",\r\n    \"jaydata-promise-handler\": \"^0.0.1\",\r\n    \"odata-metadata\": \"^0.1.0\",\r\n    \"xmldom\": \"^0.1.19\"\r\n  },\r\n  \"contributors\": [\r\n    {\r\n      \"name\": \"Dániel József\"\r\n    },\r\n    {\r\n      \"name\": \"Hajnalka Battancs\"\r\n    },\r\n    {\r\n      \"name\": \"János Roden\"\r\n    },\r\n    {\r\n      \"name\": \"László Horváth\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Zentai\"\r\n    },\r\n    {\r\n      \"name\": \"Péter Nochta\"\r\n    },\r\n    {\r\n      \"name\": \"Róbert Bónay\"\r\n    },\r\n    {\r\n      \"name\": \"Szabolcs Czinege\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Borza\"\r\n    },\r\n    {\r\n      \"name\": \"Viktor Lázár\"\r\n    },\r\n    {\r\n      \"name\": \"Zoltán Gyebrovszki\"\r\n    }\r\n  ],\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git://github.com/jaydata/jaydata.git\"\r\n  },\r\n  \"engines\": {\r\n    \"node\": \">=0.6.0\"\r\n  },\r\n  \"license\": \"(MIT OR GPL-2.0)\",\r\n  \"devDependencies\": {\r\n    \"babel\": \"^6.1.18\",\r\n    \"babel-eslint\": \"^5.0.0-beta4\",\r\n    \"babel-plugin-add-module-exports\": \"^0.1.1\",\r\n    \"babel-preset-es2015\": \"^6.1.18\",\r\n    \"babel-register\": \"^6.2.0\",\r\n    \"babelify\": \"^7.2.0\",\r\n    \"browserify\": \"^12.0.1\",\r\n    \"browserify-derequire\": \"^0.9.4\",\r\n    \"browserify-shim\": \"^3.8.11\",\r\n    \"chai\": \"^3.4.1\",\r\n    \"del\": \"^2.2.0\",\r\n    \"google-closure-compiler\": \"^20151015.0.0\",\r\n    \"gulp\": \"^3.9.0\",\r\n    \"gulp-babel\": \"^6.1.1\",\r\n    \"gulp-browserify\": \"^0.5.1\",\r\n    \"gulp-closure-compiler\": \"^0.3.1\",\r\n    \"gulp-concat\": \"^2.6.0\",\r\n    \"gulp-derequire\": \"^2.1.0\",\r\n    \"gulp-eslint\": \"^1.1.1\",\r\n    \"gulp-footer\": \"^1.0.5\",\r\n    \"gulp-header\": \"^1.7.1\",\r\n    \"gulp-nightwatch\": \"^0.2.6\",\r\n    \"gulp-nuget-pack\": \"0.0.6\",\r\n    \"gulp-rename\": \"^1.2.2\",\r\n    \"gulp-replace\": \"^0.5.4\",\r\n    \"gulp-sourcemaps\": \"^1.6.0\",\r\n    \"gulp-uglify\": \"^1.5.1\",\r\n    \"gulp-vinyl-zip\": \"^1.1.2\",\r\n    \"gulp-webserver\": \"^0.9.1\",\r\n    \"istanbul\": \"^0.4.1\",\r\n    \"jaguarjs-jsdoc\": \"0.0.1\",\r\n    \"jsdoc\": \"^3.4.0\",\r\n    \"minimist\": \"^1.2.0\",\r\n    \"nightwatch\": \"^0.8.8\",\r\n    \"npm\": \"^3.5.2\",\r\n    \"selenium-standalone\": \"^4.7.2\",\r\n    \"vinyl-buffer\": \"^1.0.0\",\r\n    \"vinyl-source-stream\": \"^1.1.0\",\r\n    \"yargs\": \"^3.31.0\"\r\n  },\r\n  \"browserify-shim\": {\r\n    \"atob\": \"global:atob\",\r\n    \"btoa\": \"global:btoa\",\r\n    \"jquery\": \"global:jQuery\",\r\n    \"jaydata-odatajs\": \"global:odatajs\",\r\n    \"angular\": \"global:angular\",\r\n    \"Handlebars\": \"global:Handlebars\",\r\n    \"kendo\": \"global:kendo\",\r\n    \"ko\": \"global:ko\",\r\n    \"q\": \"global:Q\",\r\n    \"Ext\": \"global:Ext\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"mocha --compilers js:babel-register\"\r\n  }\r\n}\r\n","import $data from '../TypeSystem/index.js';\r\nimport { DynamicMetadata } from 'jaydata-dynamic-metadata';\r\n\r\n$data.DynamicMetadata = DynamicMetadata;\r\nvar dynamicMetadata = new DynamicMetadata($data);\r\n$data.service = dynamicMetadata.service.bind(dynamicMetadata);\r\n$data.initService = dynamicMetadata.initService.bind(dynamicMetadata);\r\n\r\nexport default $data\r\n","import $data from './initializeJayData.js';\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\nimport { StringFunctions } from './Extensions.js'\r\n\r\n\r\nvar Container = new ContainerCtor()\r\n\r\nexport var ContainerInstance = Container\r\n\r\nexport function ContainerCtor(parentContainer) {\r\n    var parent = parentContainer;\r\n    if (parent) {\r\n      parent.addChildContainer(this);\r\n    }\r\n\r\n    var classNames = {};\r\n    var consolidatedClassNames = [];\r\n    var classTypes = [];\r\n\r\n    this.classNames = classNames;\r\n    this.consolidatedClassNames = consolidatedClassNames;\r\n    this.classTypes = classTypes;\r\n\r\n    var mappedTo = [];\r\n    this.mappedTo = mappedTo;\r\n\r\n    var self = this;\r\n\r\n    this[\"holder\"] = null;\r\n\r\n    var IoC = function(type, parameters) {\r\n      var t = self.resolveType(type);\r\n      var inst = Object.create(t.prototype);\r\n      t.apply(inst, parameters);\r\n      return inst;\r\n    };\r\n\r\n    var pendingResolutions = {};\r\n    this.pendingResolutions = pendingResolutions;\r\n\r\n    function addPendingResolution(name, onResolved) {\r\n      pendingResolutions[name] = pendingResolutions[name] || [];\r\n      pendingResolutions[name].push(onResolved);\r\n    }\r\n\r\n    this.addChildContainer = function(container) {\r\n      //children.push(container);\r\n    }\r\n\r\n    this.createInstance = function(type, parameters) {\r\n      return IoC(type, parameters);\r\n    };\r\n\r\n    this.mapType = function(aliasTypeOrName, realTypeOrName) {\r\n        Guard.requireValue(\"aliasType\", aliasTypeOrName);\r\n        Guard.requireValue(\"realType\", realTypeOrName);\r\n        var aliasT = this.getType(aliasTypeOrName);\r\n        var realT = this.getType(realTypeOrName);\r\n        var aliasPos = classTypes.indexOf(aliasT);\r\n        var realPos = classTypes.indexOf(realT);\r\n        mappedTo[aliasPos] = realPos;\r\n      },\r\n\r\n      //this.resolve = function (type, parameters) {\r\n      //    var classFunction = this.resolveType(type, parameters);\r\n      //    return new classFunction(parameters);\r\n      //};\r\n\r\n\r\n\r\n      this.isPrimitiveType = function(type) {\r\n        var t = this.resolveType(type);\r\n\r\n        switch (true) {\r\n          case t === Number:\r\n          case t === String:\r\n          case t === Date:\r\n          case t === Boolean:\r\n          case t === Array:\r\n          case t === Object:\r\n\r\n          case t === $data.Number:\r\n          case t === $data.Integer:\r\n          case t === $data.Date:\r\n          case t === $data.String:\r\n          case t === $data.Boolean:\r\n          case t === $data.Array:\r\n          case t === $data.Object:\r\n          case t === $data.Guid:\r\n\r\n          case t === $data.Byte:\r\n          case t === $data.SByte:\r\n          case t === $data.Decimal:\r\n          case t === $data.Float:\r\n          case t === $data.Int16:\r\n          case t === $data.Int32:\r\n          case t === $data.Int64:\r\n          case t === $data.DateTimeOffset:\r\n          case t === $data.Time:\r\n          case t === $data.Day:\r\n          case t === $data.Duration:\r\n\r\n          case t === $data.SimpleBase:\r\n          case t === $data.Geospatial:\r\n          case t === $data.GeographyBase:\r\n          case t === $data.GeographyPoint:\r\n          case t === $data.GeographyLineString:\r\n          case t === $data.GeographyPolygon:\r\n          case t === $data.GeographyMultiPoint:\r\n          case t === $data.GeographyMultiLineString:\r\n          case t === $data.GeographyMultiPolygon:\r\n          case t === $data.GeographyCollection:\r\n          case t === $data.GeometryBase:\r\n          case t === $data.GeometryPoint:\r\n          case t === $data.GeometryLineString:\r\n          case t === $data.GeometryPolygon:\r\n          case t === $data.GeometryMultiPoint:\r\n          case t === $data.GeometryMultiLineString:\r\n          case t === $data.GeometryMultiPolygon:\r\n          case t === $data.GeometryCollection:\r\n\r\n            return true;\r\n          default:\r\n            return false;\r\n        }\r\n      };\r\n\r\n\r\n    this.resolveName = function(type) {\r\n      var t = this.resolveType(type);\r\n      var tPos = classTypes.indexOf(t);\r\n      return consolidatedClassNames[tPos];\r\n    };\r\n\r\n    this.resolveType = function(typeOrName, onResolved) {\r\n      var t = typeOrName;\r\n      t = this.getType(t, onResolved ? true : false, onResolved);\r\n      var posT = classTypes.indexOf(t);\r\n      return typeof mappedTo[posT] === 'undefined' ? t : classTypes[mappedTo[posT]];\r\n    };\r\n\r\n\r\n\r\n    this.getType = function(typeOrName, doNotThrow, onResolved) {\r\n      Guard.requireValue(\"typeOrName\", typeOrName);\r\n      if (typeof typeOrName === 'function') {\r\n        return typeOrName;\r\n      };\r\n\r\n      if (!(typeOrName in classNames)) {\r\n        if (parent) {\r\n          var tp = parent.getType(typeOrName, true);\r\n          if (tp) return tp;\r\n        }\r\n        if (onResolved) {\r\n          addPendingResolution(typeOrName, onResolved);\r\n          return;\r\n        } else if (doNotThrow) {\r\n          return undefined;\r\n        } else {\r\n          Guard.raise(new Exception(\"Unable to resolve type:\" + typeOrName));\r\n        }\r\n      };\r\n      var result = classTypes[classNames[typeOrName]];\r\n      if (onResolved) {\r\n        onResolved(result);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    this.getName = function(typeOrName) {\r\n      var t = this.getType(typeOrName);\r\n      var tPos = classTypes.indexOf(t);\r\n      if (tPos == -1)\r\n        Guard.raise(\"unknown type to request name for: \" + typeOrName);\r\n      return consolidatedClassNames[tPos];\r\n    };\r\n\r\n    this.getTypes = function() {\r\n      var keys = Object.keys(classNames);\r\n      var ret = [];\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var className = keys[i];\r\n        ret.push({\r\n          name: className,\r\n          type: classTypes[classNames[className]],\r\n          toString: function() {\r\n            return this.name;\r\n          }\r\n        });\r\n      }\r\n      return ret;\r\n    };\r\n\r\n    //this.getTypeName( in type);\r\n    //this.resolveType()\r\n    //this.inferTypeFromValue = function (value) {\r\n\r\n    this.getTypeName = function(value) {\r\n      //TODO refactor\r\n      switch (typeof value) {\r\n        case 'object':\r\n          if (value == null) return '$data.Object';\r\n          if (value instanceof Array) return '$data.Array';\r\n          if (value.getType) return value.getType().fullName;\r\n          if (value instanceof Date) return '$data.Date';\r\n          if (value instanceof $data.Guid) return '$data.Guid';\r\n          if (value instanceof $data.DateTimeOffset) return '$data.DateTimeOffset';\r\n          if (value instanceof $data.GeographyPoint) return '$data.GeographyPoint';\r\n          if (value instanceof $data.GeographyLineString) return '$data.GeographyLineString';\r\n          if (value instanceof $data.GeographyPolygon) return '$data.GeographyPolygon';\r\n          if (value instanceof $data.GeographyMultiPoint) return '$data.GeographyMultiPoint';\r\n          if (value instanceof $data.GeographyMultiLineString) return '$data.GeographyMultiLineString';\r\n          if (value instanceof $data.GeographyMultiPolygon) return '$data.GeographyMultiPolygon';\r\n          if (value instanceof $data.GeographyCollection) return '$data.GeographyCollection';\r\n          if (value instanceof $data.GeographyBase) return '$data.GeographyBase';\r\n          if (value instanceof $data.GeometryPoint) return '$data.GeometryPoint';\r\n          if (value instanceof $data.GeometryLineString) return '$data.GeometryLineString';\r\n          if (value instanceof $data.GeometryPolygon) return '$data.GeometryPolygon';\r\n          if (value instanceof $data.GeometryMultiPoint) return '$data.GeometryMultiPoint';\r\n          if (value instanceof $data.GeometryMultiLineString) return '$data.GeometryMultiLineString';\r\n          if (value instanceof $data.GeometryMultiPolygon) return '$data.GeometryMultiPolygon';\r\n          if (value instanceof $data.GeometryCollection) return '$data.GeometryCollection';\r\n          if (value instanceof $data.GeometryBase) return '$data.GeometryBase';\r\n          if (value instanceof $data.Geospatial) return '$data.Geospatial';\r\n          if (value instanceof $data.SimpleBase) return '$data.SimpleBase';\r\n          if (typeof value.toHexString === 'function') return '$data.ObjectID';\r\n          //if(value instanceof \"number\") return\r\n        default:\r\n          return typeof value;\r\n      }\r\n    };\r\n\r\n    this.isTypeRegistered = function(typeOrName) {\r\n      if (typeof typeOrName === 'function') {\r\n        return classTypes.indexOf(typeOrName) > -1;\r\n      } else {\r\n        return typeOrName in classNames;\r\n      }\r\n    };\r\n\r\n    this.unregisterType = function(type) {\r\n      Guard.raise(\"Unimplemented\");\r\n    };\r\n\r\n\r\n\r\n    this.getDefault = function(typeOrName) {\r\n      var t = this.resolveType(typeOrName);\r\n      switch (t) {\r\n        case $data.Number:\r\n          return 0.0;\r\n        case $data.Float:\r\n          return 0.0;\r\n        case $data.Decimal:\r\n          return '0.0';\r\n        case $data.Integer:\r\n          return 0;\r\n        case $data.Int16:\r\n          return 0;\r\n        case $data.Int32:\r\n          return 0;\r\n        case $data.Int64:\r\n          return '0';\r\n        case $data.Byte:\r\n          return 0;\r\n        case $data.SByte:\r\n          return 0;\r\n        case $data.String:\r\n          return null;\r\n        case $data.Boolean:\r\n          return false;\r\n        default:\r\n          return null;\r\n      }\r\n    };\r\n\r\n    //name array ['', '', '']\r\n    this.getIndex = function(typeOrName) {\r\n      var t = this.resolveType(typeOrName);\r\n      return classTypes.indexOf(t);\r\n    }\r\n\r\n    this.resolveByIndex = function(index) {\r\n      return classTypes[index];\r\n    }\r\n\r\n    this.registerType = function(nameOrNamesArray, type, factoryFunc) {\r\n      ///<signature>\r\n      ///<summary>Registers a type and optionally a lifetimeManager with a name\r\n      ///that can be used to later resolve the type or create new instances</summary>\r\n      ///<param name=\"nameOrNamesArray\" type=\"Array\">The names of the type</param>\r\n      ///<param name=\"type\" type=\"Function\">The type to register</param>\r\n      ///<param name=\"instanceManager\" type=\"Function\"></param>\r\n      ///</signature>\r\n      ///<signature>\r\n      ///<summary>Registers a new type that </summary>\r\n      ///<param name=\"aliasType\" type=\"Function\">The name of the type</param>\r\n      ///<param name=\"actualType\" type=\"Function\">The type to register</param>\r\n      ///</signature>\r\n\r\n\r\n      ///TODO remove\r\n      /*if (typeof typeNameOrAlias === 'string') {\r\n          if (classNames.indexOf(typeNameOrAlias) > -1) {\r\n              Guard.raise(\"Type already registered. Remove first\");\r\n          }\r\n      }*/\r\n\r\n      if (!nameOrNamesArray) {\r\n        return;\r\n      }\r\n\r\n      //todo add ('number', 'number')\r\n      if (typeof type === \"string\") {\r\n        type = self.resolveType(type);\r\n      }\r\n\r\n      var namesArray = [];\r\n      if (typeof nameOrNamesArray === 'string') {\r\n        var tmp = [];\r\n        tmp.push(nameOrNamesArray);\r\n        namesArray = tmp;\r\n      } else {\r\n        namesArray = nameOrNamesArray;\r\n      }\r\n\r\n      for (var i = 0; i < namesArray.length; i++) {\r\n        var parts = namesArray[i].split('.');\r\n        var item = {};\r\n        item.shortName = parts[parts.length - 1];\r\n        item.fullName = namesArray[i];\r\n        namesArray[i] = item;\r\n      }\r\n\r\n      //if (type.\r\n\r\n\r\n      var creatorFnc = function() {\r\n        return IoC(type, arguments);\r\n      };\r\n\r\n      if (typeof intellisense !== 'undefined') {\r\n        intellisense.annotate(creatorFnc, type);\r\n      }\r\n\r\n      for (var i = 0, l = namesArray.length; i < l; i++) {\r\n        var item = namesArray[i];\r\n        if (!((\"create\" + item.shortName) in self)) {\r\n          if (typeof factoryFunc === 'function') {\r\n            self[\"create\" + item.shortName] = factoryFunc;\r\n          } else {\r\n            self[\"create\" + item.shortName] = creatorFnc;\r\n          }\r\n        }\r\n\r\n        var typePos = classTypes.indexOf(type);\r\n        if (typePos == -1) {\r\n          //new type\r\n          typePos = classTypes.push(type) - 1;\r\n          var fn = item.fullName;\r\n          consolidatedClassNames[typePos] = item.fullName;\r\n        };\r\n\r\n        classNames[item.fullName] = typePos;\r\n\r\n        var pending = pendingResolutions[item.fullName] || [];\r\n        if (pending.length > 0) {\r\n          pending.forEach(function(t) {\r\n            t(type);\r\n          });\r\n          pendingResolutions[item.fullName] = [];\r\n        }\r\n      }\r\n      if (parent) {\r\n        parent.registerType.apply(parent, arguments);\r\n      }\r\n      if (!type.name) {\r\n        try{ type.name = namesArray[0].shortName; }catch(err){ }\r\n      }\r\n    };\r\n\r\n\r\n    var _converters = {\r\n      from: {},\r\n      to: {}\r\n    };\r\n    this.converters = _converters;\r\n\r\n    this.convertTo = function(value, tType, eType /*if Array*/ , options) {\r\n      Guard.requireValue(\"typeOrName\", tType);\r\n\r\n      if (Guard.isNullOrUndefined(value))\r\n        return value;\r\n\r\n      var sourceTypeName = Container.getTypeName(value);\r\n      var sourceType = Container.resolveType(sourceTypeName);\r\n      var sourceTypeName = Container.resolveName(sourceType);\r\n      var targetType = Container.resolveType(tType);\r\n      var targetTypeName = Container.resolveName(targetType);\r\n\r\n      var result;\r\n      try {\r\n        if (typeof targetType['from' + sourceTypeName] === 'function') {\r\n          // target from\r\n          result = targetType['from' + sourceTypeName].apply(targetType, arguments);\r\n\r\n        } else if (typeof sourceType['to' + targetTypeName] === 'function') {\r\n          // source to\r\n          result = sourceType['to' + targetTypeName].apply(sourceType, arguments);\r\n\r\n        } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName][sourceTypeName]) {\r\n          // target from source\r\n          result = _converters.to[targetTypeName][sourceTypeName].apply(_converters, arguments);\r\n\r\n        } else if (_converters.from[sourceTypeName] && _converters.from[sourceTypeName][targetTypeName]) {\r\n          // source to target\r\n          result = _converters.from[sourceTypeName][targetTypeName].apply(_converters, arguments);\r\n\r\n        } else if (targetTypeName === sourceTypeName || value instanceof targetType) {\r\n          result = value;\r\n\r\n        } else if (_converters.to[targetTypeName] && _converters.to[targetTypeName]['default']) {\r\n          // target from anything\r\n          result = _converters.to[targetTypeName]['default'].apply(_converters, arguments);\r\n\r\n        } else {\r\n          throw \"converter not found\";\r\n        }\r\n      } catch (e) {\r\n        Guard.raise(new Exception(\"Value '\" + sourceTypeName + \"' not convertable to '\" + targetTypeName + \"'\", 'TypeError', value));\r\n      }\r\n\r\n      if (targetType === $data.Array && eType && Array.isArray(result)) {\r\n        for (var i = 0; i < result.length; i++) {\r\n          result[i] = this.convertTo.call(this, result[i], eType, undefined, options);\r\n        }\r\n      }\r\n\r\n      return result;\r\n    };\r\n    this.registerConverter = function(target, sourceOrToConverters, toConverterOrFromConverters, fromConverter) {\r\n      //registerConverter($data.Guid, { $data.String: fn, int: fn }, { string: fn, int:fn })\r\n      //registerConverter($data.Guid, $data.String, fn, fn);\r\n\r\n      var targetName = Container.resolveName(target);\r\n      if (Container.isTypeRegistered(sourceOrToConverters)) {\r\n        //isSource\r\n        _converters.to[targetName] = _converters.to[targetName] || {};\r\n        _converters.from[targetName] = _converters.from[targetName] || {};\r\n\r\n        var sourceName = Container.resolveName(sourceOrToConverters);\r\n\r\n        if (toConverterOrFromConverters)\r\n          _converters.to[targetName][sourceName] = toConverterOrFromConverters;\r\n        if (fromConverter)\r\n          _converters.from[targetName][sourceName] = fromConverter;\r\n\r\n      } else {\r\n        // converterGroup\r\n\r\n        //fromConverters\r\n        if (_converters.to[targetName]) {\r\n          _converters.to[targetName] = $data.typeSystem.extend(_converters.to[targetName], sourceOrToConverters);\r\n        } else {\r\n          _converters.to[targetName] = sourceOrToConverters;\r\n        }\r\n\r\n        //toConverters\r\n        if (_converters.from[targetName]) {\r\n          _converters.from[targetName] = $data.typeSystem.extend(_converters.from[targetName], toConverterOrFromConverters);\r\n        } else {\r\n          _converters.from[targetName] = toConverterOrFromConverters;\r\n        }\r\n      }\r\n    };\r\n\r\n    this.createOrGetNamespace = function(parts, root) {\r\n      for (var i = 0; i < parts.length; i++) {\r\n        var part = parts[i];\r\n        if (!root[part]) {\r\n          var ns = {};\r\n          ns.__namespace = true;\r\n          root[part] = ns;\r\n        }\r\n        root = root[part];\r\n      }\r\n      return root;\r\n    };\r\n  }\r\n","export var StringFunctions = {\r\n    startsWith: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.indexOf(str) === 0;\r\n    },\r\n    endsWith: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.slice(-str.length) === str;\r\n    },\r\n    contains: function () {\r\n        var self, str;\r\n        if (arguments.length == 2) {\r\n            self = arguments[0];\r\n            str = arguments[1];\r\n        } else if (arguments.length == 1 && typeof this === 'string') {\r\n            self = this;\r\n            str = arguments[0];\r\n        } else if (this instanceof String) {\r\n            self = this.valueOf();\r\n            str = arguments[0];\r\n        } else\r\n            return false;\r\n\r\n        if (typeof self !== 'string') return false;\r\n        return self.indexOf(str) >= 0;\r\n    }\r\n};\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Class.define('$data.Logger', $data.TraceBase, null, {\r\n    log: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.log.apply(console, arguments);\r\n    },\r\n    warn: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.warn.apply(console, arguments);\r\n    },\r\n    error: function () {\r\n        Array.prototype.unshift.call(arguments, this.getDateFormat());\r\n        console.error.apply(console, arguments);\r\n    },\r\n\r\n    getDateFormat: function () {\r\n        var date = new Date();\r\n        return date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '.' + date.getMilliseconds();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Class.define('$data.TraceBase', null, null, {\r\n    log: function () { },\r\n    warn: function () { },\r\n    error: function () { }\r\n});\r\n\r\n$data.Trace = new $data.TraceBase();\r\n\r\nexport default $data\r\n","import $data from './initializeJayData.js';\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\nimport { StringFunctions } from './Extensions.js'\r\nimport {ContainerInstance, ContainerCtor} from './Container.js'\r\n\r\n\r\n$data.StringFunctions = StringFunctions\r\n\r\nvar _modelHolder = null;\r\n$data.setModelContainer = function(modelHolder){\r\n  _modelHolder = modelHolder;\r\n};\r\n\r\n$data.defaults = $data.defaults || {}\r\n$data.defaults.openTypeDefaultPropertyName = \"dynamicProperties\";\r\n$data.defaults.openTypeDefaultType = '$data.Object';\r\n$data.defaults.openTypeDefaultValue = function() { return {}; };\r\n\r\n$data.__global = process.browser ? window : global\r\n$data.setGlobal = function(obj){\r\n  $data.__global = obj;\r\n};\r\n\r\n(function init($data) {\r\n\r\n  function il(msg) {\r\n    if (typeof intellisense !== 'undefined') {\r\n      if (!intellisense.i) {\r\n        intellisense.i = 0;\r\n      }\r\n      intellisense.i = intellisense.i + 1;\r\n      intellisense.logMessage(msg + \":\" + intellisense.i);\r\n    }\r\n  }\r\n\r\n  function MemberDefinition(memberDefinitionData, definedClass) {\r\n\r\n    ///<field name=\"name\" type=\"String\">*</field>\r\n    ///<field name=\"dataType\" type=\"Object\">*</field>\r\n    ///<field name=\"elementType\" type=\"Object\"></field>\r\n    ///<field name=\"kind\" type=\"String\" />\r\n    ///<field name=\"classMember\" type=\"Boolean\" />\r\n    ///<field name=\"set\" type=\"Function\" />\r\n    ///<field name=\"get\" type=\"Function\" />\r\n    ///<field name=\"value\" type=\"Object\" />\r\n    ///<field name=\"initialValue\" type=\"Object\" />\r\n    ///<field name=\"method\" type=\"Function\" />\r\n    ///<field name=\"enumerable\" type=\"Boolean\" />\r\n    ///<field name=\"configurable\" type=\"Boolean\" />\r\n    ///<field name=\"key\" type=\"Boolean\" />\r\n    ///<field name=\"computed\" type=\"Boolean\" />\r\n    ///<field name=\"storeOnObject\" type=\"Boolean\">[false] if false value is stored in initData, otherwise on the object</field>\r\n    ///<field name=\"monitorChanges\" type=\"Boolean\">[true] if set to false propertyChange events are not raise and property tracking is disabled</field>\r\n\r\n    this.kind = MemberTypes.property;\r\n    //this.definedBy = definedClass;\r\n    Object.defineProperty(this, 'definedBy', {\r\n      value: definedClass,\r\n      enumerable: false,\r\n      configurable: false,\r\n      writable: false\r\n    });\r\n    if (memberDefinitionData) {\r\n      if (typeof memberDefinitionData === 'function' || typeof memberDefinitionData.asFunction === 'function') {\r\n        this.method = memberDefinitionData;\r\n        this.kind = MemberTypes.method;\r\n      } else {\r\n        this.enumerable = true;\r\n        this.configurable = true;\r\n        if (typeof memberDefinitionData === \"number\") {\r\n          this.value = memberDefinitionData;\r\n          this.type = $data.Number;\r\n          this.dataType = $data.Number;\r\n        } else if (typeof memberDefinitionData === \"string\") {\r\n          this.value = memberDefinitionData;\r\n          this.dataType = $data.String;\r\n          this.type = $data.String;\r\n        } else {\r\n          for (var item in memberDefinitionData) {\r\n            if (memberDefinitionData.hasOwnProperty(item)) {\r\n              this[item] = memberDefinitionData[item];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (this.type !== undefined) {\r\n        this.dataType = this.dataType || this.type;\r\n      } else {\r\n        this.type = this.dataType;\r\n      }\r\n\r\n      this.originalType = this.type;\r\n      if (this.elementType !== undefined) {\r\n        this.originalElementType = this.elementType;\r\n      }\r\n    }\r\n  }\r\n  MemberDefinition.prototype.createPropertyDescriptor = function(classFunction, value) {\r\n    ///<returns type=\"Object\" />\r\n    var pd = this;\r\n    var result = {\r\n      enumerable: this.enumerable == undefined ? true : this.enumerable,\r\n      configurable: this.configurable == undefined ? true : this.configurable\r\n    };\r\n    if (this.set && this.get) {\r\n      result.set = this.set;\r\n      result.get = this.get;\r\n    } else if (\"value\" in this || value) {\r\n      result.value = value || this.value;\r\n      //TODO\r\n      //result.writable = this.writable;\r\n      result.writable = true;\r\n    } else {\r\n      result.set = function(value) {\r\n        this.storeProperty(pd, value);\r\n      };\r\n      result.get = function() {\r\n        return this.retrieveProperty(pd);\r\n      };\r\n    }\r\n    return result;\r\n  };\r\n  MemberDefinition.prototype.createStorePropertyDescriptor = function(value) {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: true,\r\n      configurable: pd.configurable,\r\n      value: value\r\n    };\r\n  };\r\n  MemberDefinition.prototype.createGetMethod = function() {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: false,\r\n      value: function(callback, tran) {\r\n        return this.getProperty(pd, callback, tran);\r\n      }\r\n    };\r\n  };\r\n  MemberDefinition.prototype.createSetMethod = function() {\r\n    var pd = this;\r\n    return {\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: false,\r\n      value: function(value, callback, tran) {\r\n        return this.setProperty(pd, value, callback, tran);\r\n      }\r\n    };\r\n  };\r\n  MemberDefinition.translateDefinition = function(memDef, name, classFunction) {\r\n    var holder = classFunction;\r\n    var memberDefinition;\r\n\r\n    if (memDef.type && Container.isTypeRegistered(memDef.type)) {\r\n      holder = Container.resolveType(memDef.type);\r\n      if (typeof holder.translateDefinition === 'function') {\r\n        memberDefinition = holder.translateDefinition.apply(holder, arguments);\r\n        memberDefinition.name = memberDefinition.name || name;\r\n      } else {\r\n        holder = classFunction;\r\n      }\r\n    }\r\n\r\n\r\n    if (!(memberDefinition instanceof MemberDefinition)) {\r\n      memberDefinition = new MemberDefinition(memberDefinition || memDef, holder);\r\n      memberDefinition.name = name;\r\n    }\r\n    classFunction.resolverThunks = classFunction.resolverThunks || [];\r\n    classFunction.childResolverThunks = classFunction.childResolverThunks || [];\r\n\r\n\r\n    var t = memberDefinition.type;\r\n    var et = memberDefinition.elementType;\r\n\r\n    function addChildThunk(referencedType) {\r\n      if (referencedType && referencedType.isAssignableTo && $data.Entity && referencedType.isAssignableTo($data.Entity)) {\r\n        classFunction.childResolverThunks.push(function() {\r\n          if (referencedType.resolveForwardDeclarations) {\r\n            referencedType.resolveForwardDeclarations();\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    addChildThunk(t);\r\n    addChildThunk(et);\r\n\r\n    if (\"string\" === typeof t) {\r\n      if (\"@\" === t[0]) {\r\n        memberDefinition.type = t.substr(1);\r\n        memberDefinition.dataType = t.substr(1);\r\n      } else {\r\n        //forward declared types get this callback when type is registered\r\n        classFunction.resolverThunks.push(function() {\r\n          var rt = classFunction.container.resolveType(t);\r\n          addChildThunk(rt);\r\n          memberDefinition.type = rt;\r\n          memberDefinition.dataType = rt;\r\n        });\r\n      }\r\n    }\r\n\r\n    if (et) {\r\n      if (\"string\" === typeof et) {\r\n        if (\"@\" === et[0]) {\r\n          memberDefinition.elementType = et.substr(1);\r\n        } else {\r\n          //forward declared types get this callback when type is registered\r\n          classFunction.resolverThunks.push(function() {\r\n            var rt = classFunction.container.resolveType(et);\r\n            addChildThunk(rt);\r\n            memberDefinition.elementType = rt;\r\n          });\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    //if (!classFunction)\r\n\r\n    classFunction.resolveForwardDeclarations = function() {\r\n      classFunction.resolveForwardDeclarations = function() {};\r\n      $data.Trace.log(\"resolving: \" + classFunction.fullName);\r\n      this.resolverThunks.forEach(function(thunk) {\r\n        thunk();\r\n      });\r\n      //this.resolverThunks = [];\r\n      this.childResolverThunks.forEach(function(thunk) {\r\n        thunk();\r\n      });\r\n      //this.childResolverThunks = [];\r\n    }\r\n\r\n    return memberDefinition;\r\n  };\r\n\r\n  MemberDefinition.prototype.toJSON = function() {\r\n    var property = {};\r\n    for (var name in this) {\r\n      if (name !== 'defineBy' && name !== 'storageModel') {\r\n        if ((name === 'type' || name === 'dataType') && (this[name] && typeof this[name] === 'function')) {\r\n          try {\r\n            property[name] = Container.resolveName(this[name]);\r\n          } catch (e) {\r\n            property[name] = this[name];\r\n          }\r\n        } else {\r\n          property[name] = this[name];\r\n        }\r\n      }\r\n    }\r\n    return property;\r\n  }\r\n\r\n  $data.MemberDefinition = MemberDefinition;\r\n\r\n  var memberDefinitionPrefix = '$';\r\n\r\n  function MemberDefinitionCollection() {};\r\n  MemberDefinitionCollection.prototype = {\r\n    clearCache: function() {\r\n      this.arrayCache = undefined;\r\n      this.pubMapPropsCache = undefined;\r\n      this.keyPropsCache = undefined;\r\n      this.propByTypeCache = undefined;\r\n      this.pubMapMethodsCache = undefined;\r\n      this.pubMapPropNamesCache = undefined;\r\n    },\r\n    asArray: function() {\r\n      if (!this.arrayCache) {\r\n        this.arrayCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0)\r\n            this.arrayCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.arrayCache;\r\n    },\r\n    getPublicMappedProperties: function() {\r\n      if (!this.pubMapPropsCache) {\r\n        this.pubMapPropsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable)\r\n            this.pubMapPropsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.pubMapPropsCache; // || (this.pubMapPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && !m.notMapped && m.enumerable; }));\r\n    },\r\n    getPublicMappedPropertyNames: function() {\r\n      if (!this.pubMapPropNamesCache) {\r\n        this.pubMapPropNamesCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && !this[i].notMapped && this[i].enumerable)\r\n            this.pubMapPropNamesCache.push(this[i].name);\r\n        }\r\n      }\r\n      return this.pubMapPropNamesCache;\r\n    },\r\n    getKeyProperties: function() {\r\n      if (!this.keyPropsCache) {\r\n        this.keyPropsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'property' && this[i].key)\r\n            this.keyPropsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.keyPropsCache;\r\n      //return this.keyPropsCache || (this.keyPropsCache = this.asArray().filter(function (m) { return m.kind == 'property' && m.key; }));\r\n    },\r\n    getPublicMappedMethods: function() {\r\n      if (!this.pubMapMethodsCache) {\r\n        this.pubMapMethodsCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].kind == 'method' && this[i].method /* && this.hasOwnProperty(i)*/ )\r\n            this.pubMapMethodsCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.pubMapMethodsCache;\r\n    },\r\n    getPropertyByType: function(type) {\r\n      if (!this.propByTypeCache) {\r\n        this.propByTypeCache = [];\r\n        for (var i in this) {\r\n          if (i.indexOf(memberDefinitionPrefix) === 0 && this[i].dataType == type)\r\n            this.propByTypeCache.push(this[i]);\r\n        }\r\n      }\r\n      return this.propByTypeCache;\r\n      //return this.propByTypeCache || (this.propByTypeCache = this.asArray().filter(function (m) { return m.dataType == type; }));\r\n    },\r\n    getMember: function(name) {\r\n      return this[memberDefinitionPrefix + name];\r\n    },\r\n    setMember: function(value) {\r\n      this[memberDefinitionPrefix + value.name] = value;\r\n    }\r\n  };\r\n  MemberDefinitionCollection.prototype.constructor = MemberDefinitionCollection;\r\n  $data.MemberDefinitionCollection = MemberDefinitionCollection;\r\n\r\n  function ClassEngineBase() {\r\n    this.classNames = {};\r\n  }\r\n\r\n  function MemberTypes() {\r\n    ///<field name=\"method\" type=\"string\" />\r\n    ///<field name=\"property\" type=\"string\" />\r\n    ///<field name=\"field\" type=\"string\" />\r\n    ///<field name=\"complexProperty\" type=\"string\" />\r\n  }\r\n  MemberTypes.__enum = true;\r\n\r\n  MemberTypes.method = \"method\";\r\n  MemberTypes.property = \"property\";\r\n  MemberTypes.navProperty = \"navProperty\";\r\n  MemberTypes.complexProperty = \"complexProperty\";\r\n  MemberTypes.field = \"field\";\r\n\r\n  $data.MemberTypes = MemberTypes;\r\n\r\n  //function classToJSON() {\r\n  //    var ret = {};\r\n  //    for (var i in this) {\r\n  //        if (this.hasOwnProperty(i)) {\r\n  //            ret[i] = this[i];\r\n  //        }\r\n  //    }\r\n  //    return ret;\r\n  //}\r\n  //$data.Base.toJSON = classToJSON;\r\n\r\n  ClassEngineBase.prototype = {\r\n\r\n    //getClass: function (classReference) {\r\n    //},\r\n\r\n    //getProperties: function (classFunction) {\r\n    //    return classFunction.propertyDefinitions;\r\n    //},\r\n\r\n    define: function(className, baseClass, container, instanceDefinition, classDefinition) {\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClass\" type=\"Function\">Basetype of the class</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', $data.Base, null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n\r\n      return this.defineEx(className, [{\r\n        type: baseClass\r\n      }], container, instanceDefinition, classDefinition);\r\n    },\r\n    defineEx: function(className, baseClasses, container, instanceDefinition, classDefinition) {\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Functions\">Basetypes of the class. First is a real base, others are mixins</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', [$data.Base, $data.Mixin1, $data.Mixin2], null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n      /// <signature>\r\n      ///     <summary>Creates a Jaydata type</summary>\r\n      ///     <param name=\"className\" type=\"String\">Name of the class</param>\r\n      ///     <param name=\"baseClasses\" type=\"Array\" elementType=\"Object\">Basetypes of the class. First is a real base, others are mixins or propagations</param>\r\n      ///     <param name=\"interfaces\" type=\"Object\" elementType=\"Function\" />\r\n      ///     <param name=\"instanceDefinition\" type=\"Object\">Class definition (properties, methods, etc)</param>\r\n      ///     <param name=\"classDefinition\" type=\"Object\">Class static definition</param>\r\n      ///     <example>\r\n      ///\r\n      ///         var t = new $data.Class.define('Types.A', [\r\n      ///                         { type: $data.Base, params: [1, 'secondParameterValue', new $data.Class.ConstructorParameter(0)] },\r\n      ///                         { type: $data.Mixin1, },\r\n      ///                         { type: $data.Mixin2, },\r\n      ///                         { type: $data.Propagation1, params: [new $data.Class.ConstructorParameter(1)], propagateTo:'Propagation1' },\r\n      ///                         { type: $data.Propagation2, params: ['firstParameterValue'], propagateTo:'Propagation2' }\r\n      ///                     ], null, {\r\n      ///             constructor: function(){ },\r\n      ///             func1: function(){ },\r\n      ///             member1: { type: 'string' }\r\n      ///         }, {\r\n      ///             staticFunc1: function() {}\r\n      ///         })\r\n      ///\r\n      ///     </example>\r\n      /// </signature>\r\n\r\n      container = container || $data.Container;\r\n\r\n      if (baseClasses.length == 0) {\r\n        baseClasses.push({\r\n          type: $data.Base\r\n        });\r\n      } else if (baseClasses.length > 0 && !baseClasses[0].type) {\r\n        baseClasses[0].type = $data.Base;\r\n      }\r\n      for (var i = 0, l = baseClasses.length; i < l; i++) {\r\n        if (typeof baseClasses[i] === 'function')\r\n          baseClasses[i] = {\r\n            type: baseClasses[i]\r\n          };\r\n      }\r\n\r\n      var providedCtor = instanceDefinition ? instanceDefinition.constructor : undefined;\r\n\r\n      var classNameParts = className.split('.');\r\n      var shortClassName = classNameParts.splice(classNameParts.length - 1, 1)[0];\r\n\r\n      $data.models = $data.models || {}\r\n      var root = container === $data.Container ? $data.models : container;\r\n      root = $data.Container.createOrGetNamespace(classNameParts, root)\r\n\r\n      var classFunction = null;\r\n      classFunction = this.classFunctionBuilder(shortClassName, baseClasses, classDefinition, instanceDefinition);\r\n      classFunction.fullName = className;\r\n      classFunction.namespace = classNameParts.join('.'); //classname splitted\r\n      //classFunction.name = shortClassName;\r\n      classFunction.container = container;\r\n      classFunction.container.registerType(className, classFunction);\r\n\r\n      this.buildType(classFunction, baseClasses, instanceDefinition, classDefinition);\r\n\r\n\r\n\r\n      if (typeof intellisense !== 'undefined') {\r\n        if (instanceDefinition && instanceDefinition.constructor) {\r\n          intellisense.annotate(classFunction, instanceDefinition.constructor);\r\n        }\r\n      }\r\n\r\n      root[shortClassName] = this.classNames[className] = classFunction;\r\n\r\n      if(classNameParts[0] == '$data') {\r\n        var _classNameParts = [].concat(classNameParts)\r\n        _classNameParts.shift()\r\n        var _root = $data.Container.createOrGetNamespace(_classNameParts, $data)\r\n        _root[shortClassName] = classFunction\r\n      }\r\n      if(_modelHolder && container == $data.Container){\r\n        var innerNS = $data.Container.createOrGetNamespace(classNameParts, _modelHolder)\r\n        innerNS[shortClassName] = classFunction\r\n      }\r\n\r\n      //classFunction.toJSON = classToJSON;\r\n      var baseCount = classFunction.baseTypes.length;\r\n      for (var i = 0; i < baseCount; i++) {\r\n        var b = classFunction.baseTypes[i];\r\n        if (\"inheritedTypeProcessor\" in b) {\r\n          b.inheritedTypeProcessor(classFunction);\r\n        }\r\n      }\r\n      //classFunction.prototype.constructor = instanceDefinition.constructor;\r\n      //classFunction.constructor = instanceDefinition.constructor;\r\n      //classFunction.toJSON = function () { return classFunction.memberDefinitions.filter( function(md) { return md; };\r\n      return classFunction;\r\n    },\r\n    classFunctionBuilder: function(name, base, classDefinition, instanceDefinition) {\r\n      var body = this.bodyBuilder(base, classDefinition, instanceDefinition);\r\n      return new Function('base', 'classDefinition', 'instanceDefinition', 'name', '$data', 'return function ' + name + ' (){ ' +\r\n        body + ' \\n}; ')(base, classDefinition, instanceDefinition, name, $data);\r\n    },\r\n    bodyBuilder: function(bases, classDefinition, instanceDefinition) {\r\n      var mixin = '';\r\n      var body = '';\r\n      var propagation = '';\r\n\r\n      for (var i = 0, l = bases.length; i < l; i++) {\r\n        var base = bases[i];\r\n        var index = i;\r\n        if (index == 0) { //ctor func\r\n          if (base && base.type && base.type !== $data.Base && base.type.fullName) {\r\n            body += '    var baseArguments = $data.typeSystem.createCtorParams(arguments, base[' + index + '].params, this); \\n';\r\n            body += '    $data.models.' + base.type.fullName + '.apply(this, baseArguments); \\n';\r\n          }\r\n        } else {\r\n          if (base && base.type && base.propagateTo) {\r\n            //propagation\r\n            propagation += '    ' + (!propagation ? 'var ' : '' + '') + 'propagationArguments = $data.typeSystem.createCtorParams(arguments, base[' +\r\n              index + '].params, this); \\n';\r\n            propagation += '    this[\"' + base.propagateTo + '\"] =  Object.create($data.models.' + base.type.fullName + '.prototype); \\n' +\r\n              '    $data.models.' + base.type.fullName + '.apply(this[\"' + base.propagateTo + '\"], propagationArguments); \\n';\r\n          } else if (base && base.type && base.type.memberDefinitions && base.type.memberDefinitions.$constructor && !base.propagateTo) {\r\n            //mixin\r\n            mixin += '    $data.models.' + base.type.fullName + '.memberDefinitions.$constructor.method.apply(this); \\n';\r\n          }\r\n        }\r\n      }\r\n      if (instanceDefinition && instanceDefinition.constructor != Object)\r\n        body += \"    instanceDefinition.constructor.apply(this, arguments); \\n\";\r\n\r\n      return '\\n    //mixins \\n' + mixin + '\\n    //construction \\n' + body + '\\n    //propagations \\n' + propagation;\r\n    },\r\n\r\n    buildType: function(classFunction, baseClasses, instanceDefinition, classDefinition) {\r\n      var baseClass = baseClasses[0].type;\r\n      classFunction.inheritsFrom = baseClass;\r\n\r\n      if (baseClass) {\r\n        classFunction.prototype = Object.create(baseClass.prototype);\r\n        classFunction.memberDefinitions = Object.create(baseClass.memberDefinitions || new MemberDefinitionCollection());\r\n        classFunction.memberDefinitions.clearCache();\r\n\r\n        var staticDefs = baseClass.staticDefinitions;\r\n        if (staticDefs) {\r\n          staticDefs = staticDefs.asArray();\r\n          if (staticDefs) {\r\n            for (var i = 0; i < staticDefs.length; i++) {\r\n              this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\r\n            }\r\n          }\r\n        }\r\n        classFunction.baseTypes = baseClass.baseTypes ? [].concat(baseClass.baseTypes) : [];\r\n        for (var i = 0; i < baseClasses.length; i++) {\r\n          classFunction.baseTypes.push(baseClasses[i].type);\r\n        }\r\n        //classFunction.baseTypes = (baseClass.baseTypes || []).concat(baseClasses.map(function (base) { return base.type; }));\r\n        if (!classFunction.isAssignableTo) {\r\n          Object.defineProperty(classFunction, \"isAssignableTo\", {\r\n            value: function(type) {\r\n              return this === type || this.baseTypes.indexOf(type) >= 0;\r\n            },\r\n            writable: false,\r\n            enumerable: false,\r\n            configurable: false\r\n          });\r\n        }\r\n      }\r\n\r\n      var openTypeDefinition = classFunction.staticDefinitions && classFunction.staticDefinitions.getMember('openType');\r\n      if (classDefinition) {\r\n        if(openTypeDefinition) delete classDefinition.openType;\r\n        this.buildStaticMembers(classFunction, classDefinition);\r\n\r\n        if (classDefinition.constructor)\r\n          classFunction.classConstructor = classDefinition.constructor;\r\n      }\r\n\r\n      if (instanceDefinition) {\r\n\r\n        //build open type member\r\n        if (!openTypeDefinition && classDefinition && (typeof classFunction.openType === \"string\" || classFunction.openType === true) && classFunction.isAssignableTo($data.Entity)) {\r\n          var openTypePropertyName = $data.defaults.openTypeDefaultPropertyName;\r\n          var openTypeDefaultType = Container.resolveType($data.defaults.openTypeDefaultType);\r\n          var openTypeDefaultValue = $data.defaults.openTypeDefaultValue;\r\n          if (typeof classFunction.openType == \"string\") {\r\n            openTypePropertyName = classFunction.openType;\r\n          }\r\n\r\n          var definedOpenTypeMember = classFunction.getMemberDefinition(openTypePropertyName);\r\n          if(definedOpenTypeMember && Container.resolveType(definedOpenTypeMember.type || definedOpenTypeMember.dataType) !== openTypeDefaultType) {\r\n            Guard.raise(new Exception(\"Type Error\", \"OpenType default type missmatch\"));\r\n          }\r\n          if (!definedOpenTypeMember && instanceDefinition[openTypePropertyName]) {\r\n            var memberType = Container.resolveType(instanceDefinition[openTypePropertyName].type || instanceDefinition[openTypePropertyName].dataType);\r\n            if(memberType !== openTypeDefaultType){\r\n              Guard.raise(new Exception(\"Type Error\", \"OpenType default type missmatch\"));\r\n            }\r\n          }\r\n          if(!definedOpenTypeMember && !instanceDefinition[openTypePropertyName]){\r\n            var defaultValue = typeof openTypeDefaultValue !== \"undefined\" ? openTypeDefaultValue : (function() { return {}; });\r\n            instanceDefinition[openTypePropertyName] = { type: openTypeDefaultType, defaultValue:  defaultValue };\r\n          }\r\n        }\r\n\r\n        this.buildInstanceMembers(classFunction, instanceDefinition);\r\n      }\r\n\r\n      var mixins = [].concat(baseClasses);\r\n      mixins.shift();\r\n      if (Object.keys(mixins).length > 0)\r\n        this.buildInstanceMixins(classFunction, mixins);\r\n\r\n      classFunction.__class = true;\r\n\r\n      classFunction.prototype.constructor = classFunction;\r\n\r\n      Object.defineProperty(classFunction.prototype, \"getType\", {\r\n        value: function() {\r\n          return classFunction;\r\n        },\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false\r\n      });\r\n    },\r\n\r\n    addMethod: function(holder, name, method, propagation) {\r\n      if (!propagation || (typeof intellisense !== 'undefined')) {\r\n        holder[name] = method;\r\n      } else {\r\n        holder[name] = function() {\r\n          return method.apply(this[propagation], arguments);\r\n        };\r\n      }\r\n    },\r\n\r\n    addProperty: function(holder, name, propertyDescriptor, propagation) {\r\n\r\n      //holder[name] = {};\r\n\r\n      if (propagation) {\r\n        propertyDescriptor.configurable = true;\r\n        if (propertyDescriptor.get) {\r\n          var origGet = propertyDescriptor.get;\r\n          propertyDescriptor.get = function() {\r\n            if (!this[propagation])\r\n              Guard.raise(new Exception(\"not inicialized\"));\r\n            return origGet.apply(this[propagation], arguments);\r\n          };\r\n        }\r\n        if (propertyDescriptor.set) {\r\n          var origSet = propertyDescriptor.set;\r\n          propertyDescriptor.set = function() {\r\n            if (!this[propagation])\r\n              Guard.raise(new Exception(\"not inicialized\"));\r\n            origSet.apply(this[propagation], arguments);\r\n          };\r\n        }\r\n      }\r\n\r\n      Object.defineProperty(holder, name, propertyDescriptor);\r\n    },\r\n\r\n    addField: function(holder, name, field) {\r\n      Guard.raise(\"not implemented\");\r\n    },\r\n\r\n    buildMethod: function(classFunction, memberDefinition, propagation) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\r\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\r\n      this.addMethod(holder, memberDefinition.name, memberDefinition.method, propagation);\r\n    },\r\n\r\n    buildProperty: function(classFunction, memberDefinition, propagation) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The object that will receive member</param>\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\">the newly added member</param>\r\n      var holder = memberDefinition.classMember ? classFunction : classFunction.prototype;\r\n      var pd = memberDefinition.createPropertyDescriptor(classFunction);\r\n      this.addProperty(holder, memberDefinition.name, pd, propagation);\r\n\r\n      //if lazyload TODO\r\n      if (!memberDefinition.classMember && classFunction.__setPropertyfunctions == true && memberDefinition.withoutGetSetMethod !== true &&\r\n        !('get_' + memberDefinition.name in holder || 'set_' + memberDefinition.name in holder)) {\r\n        var pdGetMethod = memberDefinition.createGetMethod();\r\n        this.addProperty(holder, 'get_' + memberDefinition.name, pdGetMethod, propagation);\r\n\r\n        var pdSetMethod = memberDefinition.createSetMethod();\r\n        this.addProperty(holder, 'set_' + memberDefinition.name, pdSetMethod, propagation);\r\n      }\r\n    },\r\n\r\n\r\n    buildMember: function(classFunction, memberDefinition, propagation, memberCollectionName) {\r\n      ///<param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n      memberCollectionName = memberCollectionName || 'memberDefinitions';\r\n      classFunction[memberCollectionName] = classFunction[memberCollectionName] || new MemberDefinitionCollection();\r\n      classFunction[memberCollectionName].setMember(memberDefinition);\r\n\r\n      switch (memberDefinition.kind) {\r\n        case MemberTypes.method:\r\n          this.buildMethod(classFunction, memberDefinition, propagation);\r\n          break;\r\n        case MemberTypes.navProperty:\r\n        case MemberTypes.complexProperty:\r\n        case MemberTypes.property:\r\n          this.buildProperty(classFunction, memberDefinition, propagation);\r\n          break;\r\n        default:\r\n          Guard.raise(\"Unknown member type: \" + memberDefinition.kind + \",\" + memberDefinition.name);\r\n      }\r\n    },\r\n\r\n    buildStaticMembers: function(classFunction, memberListDefinition) {\r\n      ///<param name=\"classFunction\" type=\"Object\">The class constructor that will be extended</param>\r\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\r\n      var t = this;\r\n      for (var item in memberListDefinition) {\r\n        if (memberListDefinition.hasOwnProperty(item)) {\r\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\r\n          memberDefinition.classMember = true;\r\n          t.buildMember(classFunction, memberDefinition, undefined, 'staticDefinitions');\r\n        }\r\n      }\r\n    },\r\n\r\n    buildInstanceMembers: function(classFunction, memberListDefinition) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"memberListDefinition\" type=\"Object\"></param>\r\n      ///pinning t outside of the closure seems actually faster then passing in the this  and referencing\r\n      var t = this;\r\n      for (var item in memberListDefinition) {\r\n        if (memberListDefinition.hasOwnProperty(item)) {\r\n          var memberDefinition = MemberDefinition.translateDefinition(memberListDefinition[item], item, classFunction);\r\n          t.buildMember(classFunction, memberDefinition, undefined, 'memberDefinitions');\r\n        }\r\n      }\r\n    },\r\n\r\n    copyMembers: function(sourceType, targetType) {\r\n      ///<param name=\"sourceType\" type=\"Function\" />\r\n      ///<param name=\"targetType\" type=\"Function\" />\r\n      function il(msg) {\r\n        if (typeof intellisense === 'undefined') {\r\n          return;\r\n        }\r\n        intellisense.logMessage(msg);\r\n      }\r\n\r\n      Object.keys(sourceType.prototype).forEach(function(item, i, src) {\r\n        if (item !== 'constructor' && item !== 'toString') {\r\n          il(\"copying item:\" + item);\r\n          targetType.prototype[item] = sourceType[item];\r\n        }\r\n      });\r\n    },\r\n\r\n    buildInstanceMixins: function(classFunction, mixinList) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"mixinList\" type=\"Array\"></param>\r\n\r\n      classFunction.mixins = classFunction.mixins || [];\r\n      classFunction.propagations = classFunction.propagations || [];\r\n\r\n      for (var i = 0; i < mixinList.length; i++) {\r\n        var item = mixinList[i];\r\n        //if (classFunction.memberDefinitions.getMember(item.type.name)) {\r\n        if (item.propagateTo) {\r\n          this.buildInstancePropagation(classFunction, item);\r\n          classFunction.propagations.push(item);\r\n          classFunction.propagations[item.type.name] = true;\r\n        } else {\r\n          this.buildInstanceMixin(classFunction, item);\r\n          classFunction.mixins.push(item);\r\n          classFunction.mixins[item.type.name] = true;\r\n        }\r\n      };\r\n    },\r\n    buildInstanceMixin: function(classFunction, typeObj) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"typeObj\" type=\"Object\"></param>\r\n\r\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\r\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\r\n        var itemName = memberDefs[i].name;\r\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n          this.buildMember(classFunction, memberDefs[i]);\r\n        }\r\n      }\r\n\r\n      if (typeObj.type.staticDefinitions) {\r\n        var staticDefs = typeObj.type.staticDefinitions.asArray();\r\n        for (var i = 0, l = staticDefs.length; i < l; i++) {\r\n          var itemName = staticDefs[i].name;\r\n          if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n            this.buildMember(classFunction, staticDefs[i], undefined, 'staticDefinitions');\r\n          }\r\n        }\r\n      }\r\n    },\r\n    buildInstancePropagation: function(classFunction, typeObj) {\r\n      ///<param name=\"classFunction\" type=\"Function\">The class constructor whose prototype will be extended</param>\r\n      ///<param name=\"typeObj\" type=\"Object\"></param>\r\n\r\n      var memberDefs = typeObj.type.memberDefinitions.asArray();\r\n      for (var i = 0, l = memberDefs.length; i < l; i++) {\r\n        var itemName = memberDefs[i].name;\r\n        if (itemName !== 'constructor' && !classFunction.memberDefinitions.getMember(itemName)) {\r\n          this.buildMember(classFunction, memberDefs[i], typeObj.propagateTo);\r\n        }\r\n      }\r\n    }\r\n\r\n  };\r\n  var Class\r\n  $data.Class = Class = new ClassEngineBase();\r\n\r\n\r\n  $data.ContainerClass = ContainerCtor;\r\n\r\n  var c;\r\n  $data.Container = c = ContainerInstance\r\n\r\n  $data.createContainer = function() {\r\n    return new ContainerCtor($data.Container);\r\n  }\r\n\r\n  var storeProperty = function(memberDefinition, value) {\r\n    var backingFieldName = \"_\" + memberDefinition.name;\r\n    if (!this[backingFieldName]) {\r\n      Object.defineProperty(this, backingFieldName, memberDefinition.createStorePropertyDescriptor(value));\r\n    } else {\r\n      this[backingFieldName] = value;\r\n    }\r\n  };\r\n  var retrieveProperty = function(memberDefinition) {\r\n    var backingFieldName = \"_\" + memberDefinition.name;\r\n    return this[backingFieldName];\r\n  };\r\n\r\n\r\n  $data.Class.define('$data.Base', function Base() {}, null, {\r\n    storeProperty: storeProperty,\r\n    retrieveProperty: retrieveProperty,\r\n    setProperty: function(memberDefinition, value, callback) {\r\n      this[memberDefinition.name] = value;\r\n      callback();\r\n    },\r\n    getProperty: function(memberDefinition, callback) {\r\n      callback.apply(this, [this[memberDefinition.name]]);\r\n    }\r\n  }, {\r\n    create: function() {\r\n      return Container.createInstance(this, arguments);\r\n    },\r\n    extend: function(name, container, instanceDefinition, classDefinition) {\r\n      if (container && !(container instanceof ContainerCtor)) {\r\n        classDefinition = instanceDefinition;\r\n        instanceDefinition = container;\r\n        container = undefined;\r\n      }\r\n      return $data.Class.define(name, this, container, instanceDefinition, classDefinition);\r\n    },\r\n    getMemberDefinition: function(name) {\r\n      return this.memberDefinitions.getMember(name);\r\n    },\r\n    addProperty: function(name, getterOrType, setterOrGetter, setter) {\r\n      var _getter = getterOrType;\r\n      var _setter = setterOrGetter;\r\n      var _type;\r\n      if (typeof _getter === 'string') {\r\n        _type = getterOrType;\r\n        _getter = setterOrGetter;\r\n        _setter = setter;\r\n      }\r\n\r\n      var propDef = {\r\n        notMapped: true,\r\n        storeOnObject: true,\r\n        get: typeof _getter === 'function' ? _getter : function() {},\r\n        set: typeof _setter === 'function' ? _setter : function() {},\r\n        type: _type\r\n      };\r\n\r\n      var memberDefinition = MemberDefinition.translateDefinition(propDef, name, this);\r\n      $data.Class.buildMember(this, memberDefinition);\r\n\r\n      this.memberDefinitions.clearCache();\r\n\r\n      return this;\r\n    },\r\n    addMember: function(name, definition, isClassMember) {\r\n      var memberDefinition = MemberDefinition.translateDefinition(definition, name, this);\r\n\r\n      if (isClassMember) {\r\n        memberDefinition.classMember = true;\r\n        $data.Class.buildMember(this, memberDefinition, undefined, 'staticDefinitions');\r\n        this.staticDefinitions.clearCache();\r\n      } else {\r\n        $data.Class.buildMember(this, memberDefinition);\r\n        this.memberDefinitions.clearCache();\r\n      }\r\n      return this;\r\n    },\r\n    describeField: function(name, definition) {\r\n      var memDef = this.memberDefinitions.getMember(name);\r\n      if (!memDef) {\r\n        this.addMember(name, definition);\r\n      } else {\r\n        Guard.raise(new Exception(\"Field '\" + name + \"' already defined!\", \"Invalid operation\"));\r\n      }\r\n      return this;\r\n    },\r\n    storeProperty: storeProperty,\r\n    retrieveProperty: retrieveProperty,\r\n    'from$data.Object': function(value) {\r\n      return value;\r\n    }\r\n  });\r\n\r\n\r\n  //override after typeSystem initialized\r\n\r\n\r\n  $data.Class.ConstructorParameter = $data.Class.define('ConstructorParameter', null, null, {\r\n    constructor: function(paramIndex) {\r\n      ///<param name=\"paramIndex\" type=\"integer\" />\r\n      this.paramIndex = paramIndex;\r\n    },\r\n    paramIndex: {}\r\n  });\r\n  /*$data.Class.MixinParameter = MixinParameter = $data.Class.define('MixinParameter', null, null, {\r\n      constructor: function (typeName) {\r\n          ///<param name=\"paramIndex\" type=\"integer\">\r\n          this.typeName = typeName;\r\n      },\r\n      typeName: {}\r\n  });*/\r\n\r\n  //var e = new Entity();\r\n\r\n\r\n  /*$data.Interface = Class.define(\"Interface\", null, null, {\r\n      constructor: function() { Guard.raise(\"Can not create an interface\"); }\r\n  },\r\n  {\r\n      define: function (name, definition) {\r\n          var result = Class.define(name, $data.Interface, null, null, definition);\r\n          delete result.__class;\r\n          result.__interface = true;\r\n          return result;\r\n      }\r\n  });\r\n\r\n\r\n\r\n  $data.Observable = Observable = Class.define(\"Observable\", null, null, {\r\n      propertyChanged: { dataType: $data.Event }\r\n  }, {\r\n      createFromInstance: function(instance) {\r\n          var propNames = instance.getClass().memberDefinitions.f\r\n      }\r\n  });*/\r\n\r\n\r\n\r\n})($data);\r\n\r\n$data.defaultErrorCallback = function() {\r\n  //console.log('DEFAULT ERROR CALLBACK:');\r\n  /*if (console.dir)\r\n      console.dir(arguments);\r\n  else\r\n      console.log(arguments);*/\r\n  if (arguments.length > 0 && arguments[arguments.length - 1] && typeof arguments[arguments.length - 1].reject === 'function') {\r\n    (console.error || console.log).call(console, arguments[0]);\r\n    arguments[arguments.length - 1].reject.apply(arguments[arguments.length - 1], arguments);\r\n  } else {\r\n    if (arguments[0] instanceof Error) {\r\n      Guard.raise(arguments[0]);\r\n    } else {\r\n      Guard.raise(new Exception(\"DEFAULT ERROR CALLBACK!\", \"DefaultError\", arguments));\r\n    }\r\n  }\r\n};\r\n$data.defaultSuccessCallback = function() { /*console.log('DEFAULT SUCCES CALLBACK');*/ };\r\n$data.defaultNotifyCallback = function() { /*console.log('DEFAULT NOTIFY CALLBACK');*/ };\r\n\r\n$data.typeSystem = {\r\n  __namespace: true,\r\n  /*inherit: function (ctor, baseType) {\r\n      var proto = new baseType();\r\n      ctor.prototype = $.extend(proto, ctor.prototype);\r\n      //console.dir(proto);\r\n      ctor.prototype.base = new baseType();\r\n      //console.dir(ctor.prototype.base);\r\n      ctor.prototype.constructor = ctor;\r\n      return ctor;\r\n  },*/\r\n  //mix: function (type, mixin) {\r\n  //    type.prototype = $.extend(type.prototype || {}, mixin.prototype || {});\r\n  //    type.mixins = type.mixins || [];\r\n  //    type.mixins.push(mixin);\r\n  //    return type;\r\n  //},\r\n  extend: function(target) {\r\n    /// <summary>\r\n    /// Extends an object with properties of additional parameters.\r\n    /// </summary>\r\n    /// <signature>\r\n    /// <param name=\"target\" type=\"Object\">Object that will be extended.</param>\r\n    /// <param name=\"object\" type=\"Object\">Object to extend target with.</param>\r\n    /// <param name=\"objectN\" optional=\"true\" parameterArray=\"true\" type=\"Object\">Object to extend target with.</param>\r\n    /// </signature>\r\n    /// <returns></returns>\r\n    if (typeof target !== 'object' && typeof target !== 'function')\r\n      Guard.raise('Target must be object or function');\r\n\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var obj = arguments[i];\r\n      if (obj === null || typeof obj === 'undefined')\r\n        continue;\r\n      for (var key in obj) {\r\n        target[key] = obj[key];\r\n      }\r\n    }\r\n    return target;\r\n  },\r\n  createCallbackSetting: function(callBack, defaultSetting) {\r\n    var setting = {\r\n      success: $data.defaultSuccessCallback,\r\n      error: $data.defaultErrorCallback,\r\n      notify: $data.defaultNotifyCallback\r\n    };\r\n\r\n    if (defaultSetting != undefined && defaultSetting != null) {\r\n      setting = defaultSetting;\r\n    }\r\n\r\n    var result;\r\n    if (callBack == null || callBack == undefined) {\r\n      result = setting;\r\n\r\n    } else if (typeof callBack == 'function') {\r\n      result = this.extend(setting, {\r\n        success: callBack\r\n      });\r\n\r\n    } else {\r\n      result = this.extend(setting, callBack);\r\n    }\r\n\r\n    function wrapCode(fn) {\r\n      var t = this;\r\n\r\n      function r() {\r\n        fn.apply(t, arguments);\r\n        fn = function() {}\r\n      }\r\n      return r;\r\n    }\r\n\r\n    if (typeof result.error === 'function')\r\n      result.error = wrapCode(result.error);\r\n\r\n    return result;\r\n  },\r\n  createCtorParams: function(source, indexes, thisObj) {\r\n    ///<param name=\"source\" type=\"Array\" />Paramerter array\r\n    ///<param name=\"indexes\" type=\"Array\" />\r\n    ///<param name=\"thisObj\" type=\"Object\" />\r\n    if (indexes) {\r\n      var paramArray = [];\r\n      for (var i = 0, l = indexes.length; i < l; i++) {\r\n        var item = i;\r\n        if (indexes[item] instanceof $data.Class.ConstructorParameter)\r\n          paramArray.push(source[indexes[item].paramIndex]);\r\n        else if (typeof indexes[item] === \"function\")\r\n          paramArray.push(indexes[item].apply(thisObj));\r\n        else\r\n          paramArray.push(indexes[item]);\r\n      }\r\n      return paramArray;\r\n    }\r\n    return source;\r\n  },\r\n  writePropertyValues: function(obj) {\r\n    if (obj && obj.getType && obj.getType().memberDefinitions) {\r\n      this.writeProperties(obj, obj.getType().memberDefinitions.asArray().filter(\r\n        function(md) {\r\n          return (md.kind == \"property\" || md.kind == \"navProperty\" || md.kind == \"complexProperty\") && !md.prototypeProperty;\r\n        }\r\n      ));\r\n    }\r\n  },\r\n  writeProperties: function(obj, members) {\r\n    var defines = {};\r\n    for (var i = 0, l = members.length; i < l; i++) {\r\n      var memDef = members[i];\r\n      defines[memDef.name] = memDef.createPropertyDescriptor(null, memDef.value);\r\n    }\r\n\r\n    Object.defineProperties(obj, defines);\r\n\r\n  },\r\n  writeProperty: function(obj, member, value) {\r\n    var memDef = typeof member === 'string' ? obj.getType().memberDefinitions.getMember(member) : member;\r\n    if (memDef) {\r\n      var propDef = memDef.createPropertyDescriptor(null, value);\r\n      //////OPTIMIZATION\r\n      Object.defineProperty(obj, memDef.name, propDef);\r\n    }\r\n  }\r\n};\r\n\r\n$data.debug = function() {\r\n  (console.debug || console.log).apply(console, arguments);\r\n};\r\n\r\n$data.debugWith = function() {\r\n  var cArgs = arguments;\r\n  return function(r) {\r\n    (console.debug || console.log).apply(console, cArgs);\r\n    if ((typeof Error !== 'undefined' && r instanceof Error) ||\r\n      (typeof Exception !== 'undefined' && r instanceof Exception)) {\r\n      (console.error || console.log).apply(console, arguments);\r\n    } else {\r\n      (console.debug || console.log).apply(console, arguments);\r\n    }\r\n  }\r\n};\r\n\r\n$data.fdebug = {\r\n  success: $data.debugWith('success'),\r\n  error: $data.debugWith('error')\r\n};\r\n\r\n\r\nexport var $C = function() {\r\n  $data.Class.define.apply($data.Class, arguments);\r\n}\r\nexport var Container = $data.Container\r\nexport var MemberDefinition = $data.MemberDefinition\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\nimport btoa from 'btoa'\r\n\r\nvar bufferOrArray = eval('typeof Buf' + 'fer !== \"undefined\" ? Buf' + 'fer : Uint8Array');\r\n$data.Blob = function Blob(){};\r\n\r\n$data.Blob.createFromHexString = function(value){\r\n    if (value != value.match(new RegExp('[0-9a-fA-F]+'))[0]){\r\n        Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Blob', value));\r\n    }else{\r\n        //if (value.length & 1) value = '0' + value;\r\n        var arr = new (bufferOrArray)(value.length >> 1);\r\n        for (var i = 0, j = 1, k = 0; i < value.length; i += 2, j += 2, k++) {\r\n            arr[k] = parseInt('0x' + value[i] + value[j], 16);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n};\r\n\r\n$data.Blob.toString = function(value){\r\n    if (!value || !value.length) return null;\r\n    var s = '';\r\n    for (var i = 0; i < value.length; i++){\r\n        s += String.fromCharCode(value[i]);\r\n    }\r\n\r\n    return s;\r\n};\r\n\r\n$data.Blob.toBase64 = function(value){\r\n    if (!value || !value.length) return null;\r\n    return btoa($data.Blob.toString(value));\r\n};\r\n\r\n$data.Blob.toArray = function(src){\r\n    if (!src || !src.length) return null;\r\n    var arr = new Array(src.length);\r\n    for (var i = 0; i < src.length; i++){\r\n        arr[i] = src[i];\r\n    }\r\n\r\n    return arr;\r\n};\r\n\r\n/*$data.Blob.toJSON = function(value){\r\n    return JSON.stringify($data.Blob.toArray(value));\r\n};*/\r\n\r\n$data.Blob.toHexString = function(value){\r\n    if (!value || !value.length) return null;\r\n    var s = '';\r\n    for (var i = 0; i < value.length; i++){\r\n        s += ('00' + value[i].toString(16)).slice(-2);\r\n    }\r\n\r\n    return s.toUpperCase();\r\n};\r\n\r\n$data.Blob.toDataURL = function(value){\r\n    if (!value || !value.length) return null;\r\n    return 'data:application/octet-stream;base64,' + btoa($data.Blob.toString(value));\r\n};\r\n\r\n$data.Container.registerType([\"$data.Blob\", \"blob\", \"JayBlob\"], $data.Blob);\r\n$data.Container.registerConverter('$data.Blob',{\r\n    '$data.String': function (value){\r\n        if (value && value.length){\r\n            var blob = new (bufferOrArray)(value.length);\r\n            for (var i = 0; i < value.length; i++){\r\n                blob[i] = value.charCodeAt(i);\r\n            }\r\n\r\n            return blob;\r\n        }else return null;\r\n    },\r\n    '$data.Array': function(value){\r\n        return new (bufferOrArray)(value);\r\n    },\r\n    '$data.Number': function(value){\r\n        return new (bufferOrArray)($data.packIEEE754(value, 11, 52).reverse());\r\n    },\r\n    '$data.Boolean': function(value){\r\n        return new (bufferOrArray)([value | 0]);\r\n    },\r\n    'default': function(value){\r\n        if (typeof Blob !== 'undefined' && value instanceof Blob){\r\n            var req = new XMLHttpRequest();\r\n            req.open('GET', URL.createObjectURL(value), false);\r\n            req.send(null);\r\n            return $data.Container.convertTo(req.response, $data.Blob);\r\n        } else if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\r\n            return new (bufferOrArray)(new Uint8Array(value));\r\n        }else if (value instanceof Uint8Array){\r\n            //if (typeof Buffer !== 'undefined') return new Buffer(value);\r\n            //else\r\n            return value;\r\n        }else /*if (typeof Buffer !== 'undefined' ? value instanceof Buffer : false){\r\n            return value;\r\n        }else*/ if (value.buffer){\r\n            return new (bufferOrArray)(value);\r\n        }else if (typeof value == 'object' && value instanceof Object){\r\n            var arr = [];\r\n            for (var i in value){\r\n                arr[i] = value[i];\r\n            }\r\n            if (!arr.length) throw 0;\r\n            return new (bufferOrArray)(arr);\r\n        }\r\n        throw 0;\r\n    }\r\n}, {\r\n    '$data.String': function(value){\r\n        return $data.Blob.toString(value);\r\n    },\r\n    '$data.Array': function(value){\r\n        return $data.Blob.toArray(value);\r\n    }\r\n});\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Container.registerConverter('$data.Boolean', {\r\n    '$data.String': function(value){\r\n        if (value.toLowerCase() == 'true') return true;\r\n        if (value.toLowerCase() == 'false') return false;\r\n\r\n        return !!value;\r\n    },\r\n    'default': function(value){\r\n        return !!value;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Integer', {\r\n    'default': function (value) {\r\n        if (value === Number.POSITIVE_INFINITY ||\r\n            value === Number.NEGATIVE_INFINITY ||\r\n            value === Number.MAX_VALUE ||\r\n            value === Number.MIN_VALUE) {\r\n            return value;\r\n        }\r\n\r\n        var r = parseInt(+value, 10);\r\n        if (isNaN(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int32', {\r\n    'default': function (value) {\r\n        return value | 0;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Number', {\r\n    'default': function(value){\r\n        var r = +value;\r\n        if (isNaN(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Byte', {\r\n    'default': function(value){\r\n        return (value | 0) & 0xff;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Date', {\r\n    'default': function(value){\r\n        var d = new Date(value);\r\n        if (isNaN(d)) throw 0;\r\n        return d;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.DateTimeOffset', {\r\n    '$data.Date': function(value){\r\n        return value;\r\n    },\r\n    'default': function(value){\r\n        var d = new Date(value);\r\n        if (isNaN(d)) throw 0;\r\n        return d;\r\n    }\r\n});\r\n(function () {\r\n    function parseFromString(value) {\r\n        var regex = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])(:([0-5][0-9]|[0-9])(\\.(\\d+))?)?$/;\r\n\r\n        var matches = regex.exec(value)\r\n        if (!matches) throw 0;\r\n        var time = '';\r\n        time += ('00' + matches[1]).slice(-2);\r\n        time += ':' + ('00' + matches[2]).slice(-2);\r\n        if (matches[4]) {\r\n            time += ':' + ('00' + matches[4]).slice(-2);\r\n        } else {\r\n            time += ':00';\r\n        }\r\n        if (matches[6])\r\n            time += '.' + (matches[6] + '000').slice(0, 3);\r\n\r\n        return time;\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Time', {\r\n        '$data.String': parseFromString,\r\n        '$data.Number': function tt(value) {\r\n            var metrics = [1000, 60, 60];\r\n            var result = [0, 0, 0, value | 0];\r\n\r\n            for (var i = 0; i < metrics.length; i++) {\r\n                result[metrics.length - (i + 1)] = (result[metrics.length - i] / metrics[i]) | 0;\r\n                result[metrics.length - i] -= result[metrics.length - (i + 1)] * metrics[i];\r\n            }\r\n\r\n            var time = '';\r\n            for (var i = 0; i < result.length; i++) {\r\n                if (i < result.length - 1) {\r\n                    time += ('00' + result[i]).slice(-2);\r\n                    if (i < result.length - 2) time += ':';\r\n                } else {\r\n                    time += '.' + ('000' + result[i]).slice(-3);\r\n                }\r\n            }\r\n\r\n            return parseFromString(time);\r\n        },\r\n        '$data.Date': function (value) {\r\n            var val = value.getHours() + ':' + value.getMinutes() + ':' + value.getSeconds();\r\n            var ms = value.getMilliseconds()\r\n            if (ms) {\r\n                val += '.' + ms;\r\n            }\r\n\r\n            return parseFromString(val);\r\n        }\r\n    });\r\n})();\r\n(function () {\r\n    function parseFromString(value) {\r\n        var regex = /^(-?)([0-9]{1,4})-(1[0-2]|0[0-9]|[0-9])-([0-2][0-9]|3[0-1]|[0-9])$/;\r\n\r\n        var matches = regex.exec(value)\r\n        if (!matches) throw 0;\r\n        var date = matches[1];\r\n        date += ('0000' + matches[2]).slice(-4);\r\n        date += '-' + ('00' + matches[3]).slice(-2);\r\n        date += '-' + ('00' + matches[4]).slice(-2);\r\n        return date;\r\n    }\r\n    function parseFromDate(value){\r\n        var val = value.getFullYear() + '-' + (value.getMonth() + 1) + '-' + value.getDate();\r\n        return parseFromString(val);\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Day', {\r\n        '$data.String': parseFromString,\r\n        '$data.Number': function tt(value) {\r\n            var t = 1000*60*60*24;\r\n            var day = value * t;\r\n            if(isNaN(day)) throw 0;\r\n            \r\n            return parseFromDate(new Date(day));\r\n        },\r\n        '$data.Date': parseFromDate\r\n    });\r\n})();\r\n(function () {\r\n    function parseFromString(value) {\r\n        return value;\r\n    }\r\n\r\n    $data.Container.registerConverter('$data.Duration', {\r\n        '$data.String': parseFromString\r\n    });\r\n})();\r\n$data.Container.registerConverter('$data.Decimal', {\r\n    '$data.Boolean': function(value){\r\n        return value ? '1' : '0';\r\n    },\r\n    '$data.Number': function(value){\r\n        return value.toString();\r\n    },\r\n    '$data.String': function(value){\r\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\r\n        return value;\r\n    },\r\n    '$data.Date': function(value){\r\n        var r = value.valueOf();\r\n        if (isNaN(r)) throw 0;\r\n        return r.toString();\r\n    }\r\n});\r\n\r\n$data.packIEEE754 = function(v, ebits, fbits){\r\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str, bytes;\r\n\r\n    // Compute sign, exponent, fraction\r\n    if (v !== v){\r\n        // NaN\r\n        // http://dev.w3.org/2006/webapi/WebIDL/#es-type-mapping\r\n        e = (1 << bias) - 1; f = Math.pow(2, fbits - 1); s = 0;\r\n    }else if (v === Infinity || v === -Infinity){\r\n        e = (1 << bias) - 1; f = 0; s = (v < 0) ? 1 : 0;\r\n    }else if (v === 0){\r\n        e = 0; f = 0; s = (1 / v === -Infinity) ? 1 : 0;\r\n    }else{\r\n        s = v < 0;\r\n        v = Math.abs(v);\r\n\r\n        if (v >= Math.pow(2, 1 - bias)){\r\n            // Normalized\r\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\r\n            e = ln + bias;\r\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\r\n        }else{\r\n            // Denormalized\r\n            e = 0;\r\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\r\n        }\r\n    }\r\n\r\n    // Pack sign, exponent, fraction\r\n    bits = [];\r\n    for (i = fbits; i; i -= 1) { bits.push(f % 2 ? 1 : 0); f = Math.floor(f / 2); }\r\n    for (i = ebits; i; i -= 1) { bits.push(e % 2 ? 1 : 0); e = Math.floor(e / 2); }\r\n    bits.push(s ? 1 : 0);\r\n    bits.reverse();\r\n    str = bits.join('');\r\n\r\n    // Bits to bytes\r\n    bytes = [];\r\n    while (str.length){\r\n        bytes.push(parseInt(str.substring(0, 8), 2));\r\n        str = str.substring(8);\r\n    }\r\n\r\n    return bytes;\r\n};\r\n\r\n$data.unpackIEEE754 = function(bytes, ebits, fbits){\r\n    // Bytes to bits\r\n    var bits = [], i, j, b, str, bias, s, e, f;\r\n\r\n    for (i = bytes.length; i; i -= 1){\r\n        b = bytes[i - 1];\r\n        for (j = 8; j; j -= 1){\r\n            bits.push(b % 2 ? 1 : 0); b = b >> 1;\r\n        }\r\n    }\r\n    bits.reverse();\r\n    str = bits.join('');\r\n\r\n    // Unpack sign, exponent, fraction\r\n    bias = (1 << (ebits - 1)) - 1;\r\n    s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\r\n    e = parseInt(str.substring(1, 1 + ebits), 2);\r\n    f = parseInt(str.substring(1 + ebits), 2);\r\n\r\n    // Produce number\r\n    if (e === (1 << ebits) - 1){\r\n        return f !== 0 ? NaN : s * Infinity;\r\n    }else if (e > 0){\r\n        // Normalized\r\n        return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\r\n    }else if (f !== 0){\r\n        // Denormalized\r\n        return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\r\n    }else{\r\n        return s < 0 ? -0 : 0;\r\n    }\r\n};\r\n\r\n$data.IEEE754 = function(v, e, f){\r\n    return $data.unpackIEEE754($data.packIEEE754(v, e, f), e, f);\r\n};\r\n\r\n$data.Container.registerConverter('$data.Float', {\r\n    'default': function(value){\r\n        var r = +value;\r\n        if (isNaN(r)) throw 0;\r\n        return $data.IEEE754(r, 8, 23);\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int16', {\r\n    'default': function(value){\r\n        var r = (value | 0) & 0xffff;\r\n        if (r >= 0x8000) return r - 0x10000;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Int64', {\r\n    '$data.Boolean': function(value){\r\n        return value ? '1' : '0';\r\n    },\r\n    '$data.Number': function(value){\r\n        var r = value.toString();\r\n        if (r.indexOf('.') > 0) return r.split('.')[0];\r\n        if (r.indexOf('.') == 0) throw 0;\r\n        return r;\r\n    },\r\n    '$data.String': function(value){\r\n        if (!/^\\-?([0-9]+(\\.[0-9]+)?|Infinity)$/.test(value)) throw 0;\r\n        if (value.indexOf('.') > 0) return value.split('.')[0];\r\n        if (value.indexOf('.') == 0) throw 0;\r\n        return value;\r\n    },\r\n    '$data.Date': function(value){\r\n        var r = value.valueOf();\r\n        if (isNaN(r)) throw 0;\r\n        return r.toString();\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.SByte', {\r\n    'default': function(value){\r\n        var r = (value | 0) & 0xff;\r\n        if (r >= 0x80) return r - 0x100;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.String', {\r\n    '$data.Date': function(value){\r\n        return value.toISOString();\r\n    },\r\n    '$data.ObjectID': function(value){\r\n        return btoa(value.toString());\r\n    },\r\n    'default': function(value){\r\n        if (typeof value === 'object') return JSON.stringify(value);\r\n        return value.toString();\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Object', {\r\n    '$data.String': function(value){\r\n        return JSON.parse(value);\r\n    },\r\n    '$data.Function': function(){\r\n        throw 0;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.Array', {\r\n    '$data.String': function(value){\r\n        var r = JSON.parse(value);\r\n        if (!Array.isArray(r)) throw 0;\r\n        return r;\r\n    }\r\n});\r\n\r\n$data.Container.registerConverter('$data.ObjectID', {\r\n    '$data.ObjectID': function(value){\r\n        try{\r\n            return btoa(value.toString());\r\n        }catch(e){\r\n            return value;\r\n        }\r\n    },\r\n    '$data.String': function(id){\r\n        return id;\r\n    }\r\n});\r\n\r\n$data.Container.proxyConverter = function(v){ return v; };\r\n$data.Container.defaultConverter = function(type){ return function(v){ return $data.Container.convertTo(v, type); }; };\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n(function ($data) {\r\n\r\n    function Edm_Boolean() { };\r\n    $data.Container.registerType('Edm.Boolean', Edm_Boolean);\r\n    $data.Container.mapType(Edm_Boolean, $data.Boolean);\r\n\r\n    function Edm_Binary() { };\r\n    $data.Container.registerType('Edm.Binary', Edm_Binary);\r\n    $data.Container.mapType(Edm_Binary, $data.Blob);\r\n\r\n    function Edm_DateTime() { };\r\n    $data.Container.registerType('Edm.DateTime', Edm_DateTime);\r\n    $data.Container.mapType(Edm_DateTime, $data.Date);\r\n\r\n    function Edm_DateTimeOffset() { };\r\n    $data.Container.registerType('Edm.DateTimeOffset', Edm_DateTimeOffset);\r\n    $data.Container.mapType(Edm_DateTimeOffset, $data.DateTimeOffset);\r\n\r\n    function Edm_Time() { };\r\n    $data.Container.registerType('Edm.Time', Edm_Time);\r\n    $data.Container.mapType(Edm_Time, $data.Time);\r\n\r\n    function Edm_TimeOfDay() { };\r\n    $data.Container.registerType('Edm.TimeOfDay', Edm_TimeOfDay);\r\n    $data.Container.mapType(Edm_TimeOfDay, $data.Time);\r\n    \r\n    function Edm_Date() { };\r\n    $data.Container.registerType('Edm.Date', Edm_Date);\r\n    $data.Container.mapType(Edm_Date, $data.Day);\r\n\r\n    function Edm_Duration() { }    ;\r\n    $data.Container.registerType('Edm.Duration', Edm_Duration);\r\n    $data.Container.mapType(Edm_Duration, $data.Duration);\r\n\r\n    function Edm_Decimal() { };\r\n    $data.Container.registerType('Edm.Decimal', Edm_Decimal);\r\n    $data.Container.mapType(Edm_Decimal, $data.Decimal);\r\n\r\n    function Edm_Float() { };\r\n    $data.Container.registerType('Edm.Float', Edm_Float);\r\n    $data.Container.mapType(Edm_Float, $data.Float);\r\n\r\n    function Edm_Single() { };\r\n    $data.Container.registerType('Edm.Single', Edm_Single);\r\n    $data.Container.mapType(Edm_Single, $data.Float);\r\n\r\n    function Edm_Double() { };\r\n    $data.Container.registerType('Edm.Double', Edm_Double);\r\n    $data.Container.mapType(Edm_Double, $data.Number);\r\n\r\n    function Edm_Guid() { };\r\n    $data.Container.registerType('Edm.Guid', Edm_Guid);\r\n    $data.Container.mapType(Edm_Guid, $data.Guid);\r\n\r\n    function Edm_Int16() { };\r\n    $data.Container.registerType('Edm.Int16', Edm_Int16);\r\n    $data.Container.mapType(Edm_Int16, $data.Int16);\r\n\r\n    function Edm_Int32() { };\r\n    $data.Container.registerType('Edm.Int32', Edm_Int32);\r\n    $data.Container.mapType(Edm_Int32, $data.Integer);\r\n\r\n    function Edm_Int64() { };\r\n    $data.Container.registerType('Edm.Int64', Edm_Int64);\r\n    $data.Container.mapType(Edm_Int64, $data.Int64);\r\n\r\n    function Edm_Byte() { };\r\n    $data.Container.registerType('Edm.Byte', Edm_Byte);\r\n    $data.Container.mapType(Edm_Byte, $data.Byte);\r\n\r\n    function Edm_SByte() { };\r\n    $data.Container.registerType('Edm.SByte', Edm_SByte);\r\n    $data.Container.mapType(Edm_SByte, $data.SByte);\r\n\r\n    function Edm_String() { };\r\n    $data.Container.registerType('Edm.String', Edm_String);\r\n    $data.Container.mapType(Edm_String, $data.String);\r\n\r\n    function Edm_GeographyPoint() { };\r\n    $data.Container.registerType('Edm.GeographyPoint', Edm_GeographyPoint);\r\n    $data.Container.mapType(Edm_GeographyPoint, $data.GeographyPoint);\r\n\r\n    function Edm_GeographyLineString() { };\r\n    $data.Container.registerType('Edm.GeographyLineString', Edm_GeographyLineString);\r\n    $data.Container.mapType(Edm_GeographyLineString, $data.GeographyLineString);\r\n\r\n    function Edm_GeographyPolygon() { };\r\n    $data.Container.registerType('Edm.GeographyPolygon', Edm_GeographyPolygon);\r\n    $data.Container.mapType(Edm_GeographyPolygon, $data.GeographyPolygon);\r\n\r\n    function Edm_GeographyMultiPoint() { };\r\n    $data.Container.registerType('Edm.GeographyMultiPoint', Edm_GeographyMultiPoint);\r\n    $data.Container.mapType(Edm_GeographyMultiPoint, $data.GeographyMultiPoint);\r\n\r\n    function Edm_GeographyMultiLineString() { };\r\n    $data.Container.registerType('Edm.GeographyMultiLineString', Edm_GeographyMultiLineString);\r\n    $data.Container.mapType(Edm_GeographyMultiLineString, $data.GeographyMultiLineString);\r\n\r\n    function Edm_GeographyMultiPolygon() { };\r\n    $data.Container.registerType('Edm.GeographyMultiPolygon', Edm_GeographyMultiPolygon);\r\n    $data.Container.mapType(Edm_GeographyMultiPolygon, $data.GeographyMultiPolygon);\r\n\r\n    function Edm_GeographyCollection() { };\r\n    $data.Container.registerType('Edm.GeographyCollection', Edm_GeographyCollection);\r\n    $data.Container.mapType(Edm_GeographyCollection, $data.GeographyCollection);\r\n\r\n    function Edm_GeometryPoint() { };\r\n    $data.Container.registerType('Edm.GeometryPoint', Edm_GeometryPoint);\r\n    $data.Container.mapType(Edm_GeometryPoint, $data.GeometryPoint);\r\n\r\n    function Edm_GeometryLineString() { };\r\n    $data.Container.registerType('Edm.GeometryLineString', Edm_GeometryLineString);\r\n    $data.Container.mapType(Edm_GeometryLineString, $data.GeometryLineString);\r\n\r\n    function Edm_GeometryPolygon() { };\r\n    $data.Container.registerType('Edm.GeometryPolygon', Edm_GeometryPolygon);\r\n    $data.Container.mapType(Edm_GeometryPolygon, $data.GeometryPolygon);\r\n\r\n    function Edm_GeometryMultiPoint() { };\r\n    $data.Container.registerType('Edm.GeometryMultiPoint', Edm_GeometryMultiPoint);\r\n    $data.Container.mapType(Edm_GeometryMultiPoint, $data.GeometryMultiPoint);\r\n\r\n    function Edm_GeometryMultiLineString() { };\r\n    $data.Container.registerType('Edm.GeometryMultiLineString', Edm_GeometryMultiLineString);\r\n    $data.Container.mapType(Edm_GeometryMultiLineString, $data.GeometryMultiLineString);\r\n\r\n    function Edm_GeometryMultiPolygon() { };\r\n    $data.Container.registerType('Edm.GeometryMultiPolygon', Edm_GeometryMultiPolygon);\r\n    $data.Container.mapType(Edm_GeometryMultiPolygon, $data.GeometryMultiPolygon);\r\n\r\n    function Edm_GeometryCollection() { };\r\n    $data.Container.registerType('Edm.GeometryCollection', Edm_GeometryCollection);\r\n    $data.Container.mapType(Edm_GeometryCollection, $data.GeometryCollection);\r\n\r\n    $data.oDataEdmMapping = {\r\n        '$data.Byte': 'Edm.Byte',\r\n        '$data.SByte': 'Edm.SByte',\r\n        '$data.Decimal': 'Edm.Decimal',\r\n        '$data.Float': 'Edm.Float',\r\n        '$data.Int16': 'Edm.Int16',\r\n        '$data.Int64': 'Edm.Int64',\r\n        '$data.DateTimeOffset': 'Edm.DateTimeOffset',\r\n        '$data.Time': 'Edm.TimeOfDay',\r\n        '$data.Day': 'Edm.Date',\r\n        '$data.Duration': 'Edm.Duration',\r\n        '$data.Boolean': 'Edm.Boolean',\r\n        '$data.Blob': 'Edm.Binary',\r\n        '$data.Date': 'Edm.DateTime',\r\n        '$data.Number': 'Edm.Double',\r\n        '$data.Integer': 'Edm.Int32',\r\n        '$data.Int32': 'Edm.Int32',\r\n        '$data.String': 'Edm.String',\r\n        '$data.ObjectID': 'Edm.String',\r\n        '$data.GeographyPoint': 'Edm.GeographyPoint',\r\n        '$data.GeographyLineString': 'Edm.GeographyLineString',\r\n        '$data.GeographyPolygon': 'Edm.GeographyPolygon',\r\n        '$data.GeographyMultiPoint': 'Edm.GeographyMultiPoint',\r\n        '$data.GeographyMultiLineString': 'Edm.GeographyMultiLineString',\r\n        '$data.GeographyMultiPolygon': 'Edm.GeographyMultiPolygon',\r\n        '$data.GeographyCollection': 'Edm.GeographyCollection',\r\n        '$data.GeometryPoint': 'Edm.GeometryPoint',\r\n        '$data.GeometryLineString': 'Edm.GeometryLineString',\r\n        '$data.GeometryPolygon': 'Edm.GeometryPolygon',\r\n        '$data.GeometryMultiPoint': 'Edm.GeometryMultiPoint',\r\n        '$data.GeometryMultiLineString': 'Edm.GeometryMultiLineString',\r\n        '$data.GeometryMultiPolygon': 'Edm.GeometryMultiPolygon',\r\n        '$data.GeometryCollection': 'Edm.GeometryCollection',\r\n        '$data.Guid': 'Edm.Guid'\r\n    };\r\n\r\n})($data);\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\n\r\n/* $data.GeographyBase */\r\n$data.GeographyBase = function GeographyBase() {\r\n    $data.Geospatial.apply(this, arguments);\r\n\r\n    this.crs = this.crs || $data.GeographyBase.defaultCrs;\r\n    $data.GeographyBase.validateGeoJSON(this);\r\n};\r\n\r\n$data.GeographyBase.disableSRID = false;\r\n$data.GeographyBase.defaultCrs = {\r\n    properties: {\r\n        name: 'EPSG:4326'\r\n    },\r\n    type: 'name'\r\n};\r\n\r\n$data.GeographyBase.parseFromString = function (strData) {\r\n    var lparenIdx = strData.indexOf('(');\r\n    if(lparenIdx >= 0){\r\n        var name = strData.substring(0, lparenIdx).toLowerCase();\r\n        var type = $data.GeographyBase.registered[name];\r\n\r\n        if (type && type.parseFromString && type != $data.GeographyBase) {\r\n            return type.parseFromString(strData);\r\n        } else {\r\n            Guard.raise(new Exception('parseFromString', 'Not Implemented', strData));\r\n        }\r\n    }\r\n};\r\n$data.GeographyBase.stringifyToUrl = function (geoData) {\r\n    if (geoData instanceof $data.GeographyBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\r\n        return geoData.constructor.stringifyToUrl(geoData);\r\n    } else if (geoData instanceof $data.GeographyBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\r\n        var data = \"geography'\";\r\n        function getSRID(g){\r\n            if(!$data.GeographyBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name){\r\n                var r = /EPSG:(\\d+)/i;\r\n                var matches = r.exec(g.crs.properties.name);\r\n                if(matches){\r\n                    data +=\"SRID=\" + matches[1] + \";\";\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        data = getSRID(geoData);\r\n        data += geoData.type + '(';\r\n        function buildArray(d) {\r\n            if (Array.isArray(d[0])) {\r\n\r\n                for (var i = 0; i < d.length; i++) {\r\n                    if (i > 0) data += ',';\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += '(';\r\n\r\n                    buildArray(d[i]);\r\n\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += ')';\r\n                }\r\n\r\n            } else {\r\n                data += d.join(' ');\r\n            }\r\n            return data;\r\n        }\r\n        data = buildArray(geoData.coordinates);\r\n\r\n        data += \")'\";\r\n        return data;\r\n    } else {\r\n        Guard.raise(new Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\r\n    }\r\n};\r\n$data.GeographyBase.registerType = function (name, type, base) {\r\n    $data.SimpleBase.registerType(name, type, base || $data.GeographyBase);\r\n\r\n    $data.GeographyBase.registered = $data.GeographyBase.registered || {};\r\n    $data.GeographyBase.registered[name.toLowerCase()] = type;\r\n};\r\n$data.GeographyBase.validateGeoJSON = function (geoData) {\r\n    var type = geoData.type;\r\n    if (type) {\r\n        var geoType = $data.GeographyBase.registered[type.toLowerCase()];\r\n        if (typeof geoType.validateGeoJSON === 'function') {\r\n            var isValid = geoType.validateGeoJSON(geoData);\r\n            if (isValid) {\r\n                return isValid;\r\n            } else {\r\n                Guard.raise(new Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\r\n            }\r\n        }\r\n    }\r\n    console.log('GeoJSON validation missing', geoData);\r\n    return;\r\n};\r\n$data.SimpleBase.registerType('GeographyBase', $data.GeographyBase, $data.Geospatial);\r\n$data.Container.registerType(['$data.GeographyBase'], $data.GeographyBase);\r\n\r\n/* $data.GeographyPoint */\r\n$data.GeographyPoint = function GeographyPoint(lon, lat) {\r\n    if (lon && typeof lon === 'object' && Array.isArray(lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: lon });\r\n    } else if (lon && typeof lon === 'object' && ('longitude' in lon || 'latitude' in lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: [lon.longitude, lon.latitude] });\r\n    } else if (lon && typeof lon === 'object' && ('lng' in lon || 'lat' in lon)) {\r\n        $data.GeographyBase.call(this, { coordinates: [lon.lng, lon.lat] });\r\n    } else if (lon && typeof lon === 'object') {\r\n        $data.GeographyBase.call(this, lon);\r\n    } else {\r\n        $data.GeographyBase.call(this, { coordinates: [lon || 0, lat || 0] });\r\n    }\r\n};\r\n$data.GeographyPoint.validateGeoJSON = function (geoData) {\r\n    return geoData &&\r\n        Array.isArray(geoData.coordinates) &&\r\n        geoData.coordinates.length == 2 &&\r\n        typeof geoData.coordinates[0] === 'number' &&\r\n        typeof geoData.coordinates[1] === 'number';\r\n};\r\n$data.GeographyPoint.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var values = data.split(' ');\r\n\r\n    return new $data.GeographyPoint(parseFloat(values[0]), parseFloat(values[1]));\r\n};\r\n$data.GeographyPoint.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('Point', $data.GeographyPoint);\r\nObject.defineProperty($data.GeographyPoint.prototype, 'longitude', { get: function () { return this.coordinates[0]; }, set: function (v) { this.coordinates[0] = v; } });\r\nObject.defineProperty($data.GeographyPoint.prototype, 'latitude', { get: function () { return this.coordinates[1]; }, set: function (v) { this.coordinates[1] = v; } });\r\n$data.Container.registerType(['$data.GeographyPoint', 'GeographyPoint', '$data.Geography', 'Geography', 'geography', 'geo'], $data.GeographyPoint);\r\n$data.Geography = $data.GeographyPoint;\r\n\r\n/* $data.GeographyLineString */\r\n$data.GeographyLineString = function GeographyLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyLineString.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('LineString', $data.GeographyLineString);\r\n$data.Container.registerType(['$data.GeographyLineString', 'GeographyLineString'], $data.GeographyLineString);\r\n\r\n/* $data.GeographyPolygon */\r\n$data.GeographyPolygon = function GeographyPolygon(data) {\r\n    if (typeof data === 'object' && (('topLeft' in data && 'bottomRight' in data) || ('topRight' in data && 'bottomLeft' in data))) {\r\n        var tl, tr, bl, br;\r\n\r\n        if ('topLeft' in data && 'bottomRight' in data) {\r\n            tl = data.topLeft instanceof $data.GeographyPoint ? data.topLeft : new $data.GeographyPoint(data.topLeft);\r\n            br = data.bottomRight instanceof $data.GeographyPoint ? data.bottomRight : new $data.GeographyPoint(data.bottomRight);\r\n            tr = new $data.GeographyPoint([br.coordinates[0], tl.coordinates[1]]);\r\n            bl = new $data.GeographyPoint([tl.coordinates[0], br.coordinates[1]]);\r\n        } else {\r\n            tr = data.topRight instanceof $data.GeographyPoint ? data.topRight : new $data.GeographyPoint(data.topRight);\r\n            bl = data.bottomLeft instanceof $data.GeographyPoint ? data.bottomLeft : new $data.GeographyPoint(data.bottomLeft);\r\n            tl = new $data.GeographyPoint([bl.coordinates[0], tr.coordinates[1]]);\r\n            br = new $data.GeographyPoint([tr.coordinates[0], bl.coordinates[1]]);\r\n        }\r\n\r\n        var coordinates = [];\r\n        coordinates.push([].concat(tl.coordinates));\r\n        coordinates.push([].concat(tr.coordinates));\r\n        coordinates.push([].concat(br.coordinates));\r\n        coordinates.push([].concat(bl.coordinates));\r\n        coordinates.push([].concat(tl.coordinates));\r\n\r\n        $data.GeographyBase.call(this, { coordinates: [coordinates] });\r\n\r\n    }else if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyPolygon.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\r\n\r\n    var data = [];\r\n    for (var i = 0; i < rings.length; i++) {\r\n        var polyPoints = [];\r\n        var pairs = rings[i].split(',');\r\n        for (var j = 0; j < pairs.length; j++) {\r\n            var values = pairs[j].split(' ');\r\n\r\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\r\n        }\r\n        data.push(polyPoints);\r\n    }\r\n\r\n    return new $data.GeographyPolygon(data);\r\n};\r\n$data.GeographyPolygon.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('Polygon', $data.GeographyPolygon);\r\n$data.Container.registerType(['$data.GeographyPolygon', 'GeographyPolygon'], $data.GeographyPolygon);\r\n\r\n/* $data.GeographyMultiPoint */\r\n$data.GeographyMultiPoint = function GeographyMultiPoint(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiPoint.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiPoint.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiPoint', $data.GeographyMultiPoint);\r\n$data.Container.registerType(['$data.GeographyMultiPoint', 'GeographyMultiPoint'], $data.GeographyMultiPoint);\r\n\r\n/* $data.GeographyMultiLineString */\r\n$data.GeographyMultiLineString = function GeographyMultiLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiLineString.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiLineString', $data.GeographyMultiLineString);\r\n$data.Container.registerType(['$data.GeographyMultiLineString', 'GeographyMultiLineString'], $data.GeographyMultiLineString);\r\n\r\n/* $data.GeographyMultiPolygon */\r\n$data.GeographyMultiPolygon = function GeographyMultiPolygon(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyMultiPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\r\n        var polygons = geoData.coordinates[k];\r\n        var isValid = isValid && Array.isArray(polygons);\r\n\r\n        for (var i = 0; isValid && i < polygons.length; i++) {\r\n            var polygon = polygons[i];\r\n            var isValid = isValid && Array.isArray(polygon);\r\n\r\n            for (var j = 0; isValid && j < polygon.length; j++) {\r\n                var point = polygon[j];\r\n\r\n                isValid = isValid &&\r\n                    Array.isArray(point) &&\r\n                    point.length == 2 &&\r\n                    typeof point[0] === 'number' &&\r\n                    typeof point[1] === 'number';\r\n            }\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyMultiPolygon.validMembers = ['coordinates'];\r\n$data.GeographyBase.registerType('MultiPolygon', $data.GeographyMultiPolygon);\r\n$data.Container.registerType(['$data.GeographyMultiPolygon', 'GeographyMultiPolygon'], $data.GeographyMultiPolygon);\r\n\r\n/* $data.GeographyCollection */\r\n$data.GeographyCollection = function GeographyCollection(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeographyBase.call(this, { geometries: data });\r\n    } else {\r\n        $data.GeographyBase.call(this, data);\r\n    }\r\n};\r\n$data.GeographyCollection.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.geometries);\r\n\r\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\r\n        var geometry = geoData.geometries[i];\r\n        try {\r\n            isValid = isValid && $data.GeographyBase.validateGeoJSON(geometry);\r\n        } catch (e) {\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeographyCollection.validMembers = ['geometries'];\r\n$data.GeographyBase.registerType('GeometryCollection', $data.GeographyCollection);\r\n$data.Container.registerType(['$data.GeographyCollection', 'GeographyCollection'], $data.GeographyCollection);\r\n\r\n\r\n/* converters */\r\n$data.Container.registerConverter($data.GeographyPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeographyPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeographyLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeographyPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyMultiPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeographyMultiPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeographyCollection, $data.Object, function (value) {\r\n    return value ? new $data.GeographyCollection(value) : value;\r\n});\r\n\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\nimport { Guard, Exception } from 'jaydata-error-handler';\r\n\r\n/* $data.Geometry */\r\n$data.GeometryBase = function GeometryBase() {\r\n    $data.Geospatial.apply(this, arguments);\r\n\r\n    this.crs = this.crs || $data.GeometryBase.defaultCrs;\r\n    $data.GeometryBase.validateGeoJSON(this);\r\n};\r\n\r\n$data.GeometryBase.disableSRID = false;\r\n$data.GeometryBase.defaultCrs = {\r\n    properties: {\r\n        name: 'EPSG:0'\r\n    },\r\n    type: 'name'\r\n};\r\n\r\n$data.GeometryBase.parseFromString = function (strData) {\r\n    var lparenIdx = strData.indexOf('(');\r\n    if (lparenIdx >= 0) {\r\n        var name = strData.substring(0, lparenIdx).toLowerCase();\r\n        var type = $data.GeometryBase.registered[name];\r\n\r\n        if (type && type.parseFromString && type != $data.GeometryBase) {\r\n            return type.parseFromString(strData);\r\n        } else {\r\n            Guard.raise(new Exception('parseFromString', 'Not Implemented', strData));\r\n        }\r\n    }\r\n};\r\n$data.GeometryBase.stringifyToUrl = function (geoData) {\r\n    if (geoData instanceof $data.GeometryBase && geoData.constructor && geoData.constructor.stringifyToUrl) {\r\n        return geoData.constructor.stringifyToUrl(geoData);\r\n    } else if (geoData instanceof $data.GeometryBase && geoData.constructor && Array.isArray(geoData.constructor.validMembers) && geoData.constructor.validMembers[0] === 'coordinates') {\r\n        var data = \"geometry'\";\r\n        function getSRID(g){\r\n            if(!$data.GeometryBase.disableSRID && g.crs && g.crs.properties && g.crs.properties.name){\r\n                var r = /EPSG:(\\d+)/i;\r\n                var matches = r.exec(g.crs.properties.name);\r\n                if(matches){\r\n                    data +=\"SRID=\" + matches[1] + \";\";\r\n                }\r\n            }\r\n            return data;\r\n        }\r\n        data = getSRID(geoData);\r\n        data += geoData.type + '(';\r\n        function buildArray(d) {\r\n            if (Array.isArray(d[0])) {\r\n\r\n                for (var i = 0; i < d.length; i++) {\r\n                    if (i > 0) data += ',';\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += '(';\r\n\r\n                    buildArray(d[i]);\r\n\r\n                    if (Array.isArray(d[i][0]))\r\n                        data += ')';\r\n                }\r\n\r\n            } else {\r\n                data += d.join(' ');\r\n            }\r\n            return data;\r\n        }\r\n        data = buildArray(geoData.coordinates);\r\n\r\n        data += \")'\";\r\n        return data;\r\n    } else {\r\n        Guard.raise(new Exception('stringifyToUrl on instance type', 'Not Implemented', geoData));\r\n    }\r\n};\r\n$data.GeometryBase.registerType = function (name, type, base) {\r\n    $data.SimpleBase.registerType(name, type, base || $data.GeometryBase);\r\n\r\n    $data.GeometryBase.registered = $data.GeometryBase.registered || {};\r\n    $data.GeometryBase.registered[name.toLowerCase()] = type;\r\n};\r\n$data.GeometryBase.validateGeoJSON = function (geoData) {\r\n    var type = geoData.type;\r\n    if (type) {\r\n        var geoType = $data.GeometryBase.registered[type.toLowerCase()];\r\n        if (typeof geoType.validateGeoJSON === 'function') {\r\n            var isValid = geoType.validateGeoJSON(geoData);\r\n            if (isValid) {\r\n                return isValid;\r\n            } else {\r\n                Guard.raise(new Exception(\"Invalid '\" + type + \"' format!\", 'Format Exception', geoData));\r\n            }\r\n        }\r\n    }\r\n    console.log('GeoJSON validation missing', geoData);\r\n    return;\r\n};\r\n$data.SimpleBase.registerType('GeometryBase', $data.GeometryBase, $data.Geospatial);\r\n$data.Container.registerType(['$data.GeometryBase'], $data.GeometryBase);\r\n\r\n/* $data.GeometryPoint */\r\n$data.GeometryPoint = function GeometryPoint(x, y) {\r\n    var param = x;\r\n    if (param && typeof param === 'object' && Array.isArray(param)) {\r\n        $data.GeometryBase.call(this, { coordinates: param });\r\n    } else if (param && typeof param === 'object' && ('x' in param || 'y' in param)) {\r\n        $data.GeometryBase.call(this, { coordinates: [param.x, param.y] });\r\n    } else if (param && typeof param === 'object') {\r\n        $data.GeometryBase.call(this, param);\r\n    } else {\r\n        $data.GeometryBase.call(this, { coordinates: [x || 0, y || 0] });\r\n    }\r\n};\r\n$data.GeometryPoint.validateGeoJSON = function (geoData) {\r\n    return geoData &&\r\n        Array.isArray(geoData.coordinates) &&\r\n        geoData.coordinates.length == 2 &&\r\n        typeof geoData.coordinates[0] === 'number' &&\r\n        typeof geoData.coordinates[1] === 'number';\r\n};\r\n$data.GeometryPoint.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var values = data.split(' ');\r\n\r\n    return new $data.GeometryPoint(parseFloat(values[0]), parseFloat(values[1]));\r\n};\r\n$data.GeometryPoint.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('Point', $data.GeometryPoint);\r\nObject.defineProperty($data.GeometryPoint.prototype, 'x', { get: function () { return this.coordinates[0]; }, set: function (v) { this.coordinates[0] = v; } });\r\nObject.defineProperty($data.GeometryPoint.prototype, 'y', { get: function () { return this.coordinates[1]; }, set: function (v) { this.coordinates[1] = v; } });\r\n$data.Container.registerType(['$data.GeometryPoint', 'GeometryPoint'], $data.GeometryPoint);\r\n\r\n/* $data.GeometryLineString */\r\n$data.GeometryLineString = function GeometryLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryLineString.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('LineString', $data.GeometryLineString);\r\n$data.Container.registerType(['$data.GeometryLineString', 'GeometryLineString'], $data.GeometryLineString);\r\n\r\n/* $data.GeometryPolygon */\r\n$data.GeometryPolygon = function GeometryPolygon(data) {\r\n    if (typeof data === 'object' && (('topLeft' in data && 'bottomRight' in data) || ('topRight' in data && 'bottomLeft' in data))) {\r\n        var tl, tr, bl, br;\r\n\r\n        if ('topLeft' in data && 'bottomRight' in data) {\r\n            tl = data.topLeft instanceof $data.GeometryPoint ? data.topLeft : new $data.GeometryPoint(data.topLeft);\r\n            br = data.bottomRight instanceof $data.GeometryPoint ? data.bottomRight : new $data.GeometryPoint(data.bottomRight);\r\n            tr = new $data.GeometryPoint([br.coordinates[0], tl.coordinates[1]]);\r\n            bl = new $data.GeometryPoint([tl.coordinates[0], br.coordinates[1]]);\r\n        } else {\r\n            tr = data.topRight instanceof $data.GeometryPoint ? data.topRight : new $data.GeometryPoint(data.topRight);\r\n            bl = data.bottomLeft instanceof $data.GeometryPoint ? data.bottomLeft : new $data.GeometryPoint(data.bottomLeft);\r\n            tl = new $data.GeometryPoint([bl.coordinates[0], tr.coordinates[1]]);\r\n            br = new $data.GeometryPoint([tr.coordinates[0], bl.coordinates[1]]);\r\n        }\r\n\r\n        var coordinates = [];\r\n        coordinates.push([].concat(tl.coordinates));\r\n        coordinates.push([].concat(tr.coordinates));\r\n        coordinates.push([].concat(br.coordinates));\r\n        coordinates.push([].concat(bl.coordinates));\r\n        coordinates.push([].concat(tl.coordinates));\r\n\r\n        $data.GeometryBase.call(this, { coordinates: [coordinates] });\r\n\r\n    }else if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryPolygon.parseFromString = function (strData) {\r\n    var data = strData.substring(strData.indexOf('(') + 1, strData.lastIndexOf(')'));\r\n    var rings = data.substring(data.indexOf('(') + 1, data.lastIndexOf(')')).split('),(');\r\n\r\n    var data = [];\r\n    for (var i = 0; i < rings.length; i++) {\r\n        var polyPoints = [];\r\n        var pairs = rings[i].split(',');\r\n        for (var j = 0; j < pairs.length; j++) {\r\n            var values = pairs[j].split(' ');\r\n\r\n            polyPoints.push([parseFloat(values[0]), parseFloat(values[1])]);\r\n        }\r\n        data.push(polyPoints);\r\n    }\r\n\r\n    return new $data.GeometryPolygon(data);\r\n};\r\n$data.GeometryPolygon.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('Polygon', $data.GeometryPolygon);\r\n$data.Container.registerType(['$data.GeometryPolygon', 'GeometryPolygon'], $data.GeometryPolygon);\r\n\r\n/* $data.GeometryMultiPoint */\r\n$data.GeometryMultiPoint = function GeometryMultiPoint(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiPoint.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var point = geoData.coordinates[i];\r\n        isValid = isValid &&\r\n            Array.isArray(point) &&\r\n            point.length == 2 &&\r\n            typeof point[0] === 'number' &&\r\n            typeof point[1] === 'number';\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiPoint.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiPoint', $data.GeometryMultiPoint);\r\n$data.Container.registerType(['$data.GeometryMultiPoint', 'GeometryMultiPoint'], $data.GeometryMultiPoint);\r\n\r\n/* $data.GeometryMultiLineString */\r\n$data.GeometryMultiLineString = function GeometryMultiLineString(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiLineString.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var i = 0; isValid && i < geoData.coordinates.length; i++) {\r\n        var polygon = geoData.coordinates[i];\r\n        var isValid = isValid && Array.isArray(polygon);\r\n\r\n        for (var j = 0; isValid && j < polygon.length; j++) {\r\n            var point = polygon[j];\r\n\r\n            isValid = isValid &&\r\n                Array.isArray(point) &&\r\n                point.length == 2 &&\r\n                typeof point[0] === 'number' &&\r\n                typeof point[1] === 'number';\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiLineString.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiLineString', $data.GeometryMultiLineString);\r\n$data.Container.registerType(['$data.GeometryMultiLineString', 'GeometryMultiLineString'], $data.GeometryMultiLineString);\r\n\r\n/* $data.GeometryMultiPolygon */\r\n$data.GeometryMultiPolygon = function GeometryMultiPolygon(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { coordinates: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryMultiPolygon.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.coordinates);\r\n\r\n    for (var k = 0; isValid && k < geoData.coordinates.length; k++) {\r\n        var polygons = geoData.coordinates[k];\r\n        var isValid = isValid && Array.isArray(polygons);\r\n\r\n        for (var i = 0; isValid && i < polygons.length; i++) {\r\n            var polygon = polygons[i];\r\n            var isValid = isValid && Array.isArray(polygon);\r\n\r\n            for (var j = 0; isValid && j < polygon.length; j++) {\r\n                var point = polygon[j];\r\n\r\n                isValid = isValid &&\r\n                    Array.isArray(point) &&\r\n                    point.length == 2 &&\r\n                    typeof point[0] === 'number' &&\r\n                    typeof point[1] === 'number';\r\n            }\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryMultiPolygon.validMembers = ['coordinates'];\r\n$data.GeometryBase.registerType('MultiPolygon', $data.GeometryMultiPolygon);\r\n$data.Container.registerType(['$data.GeometryMultiPolygon', 'GeometryMultiPolygon'], $data.GeometryMultiPolygon);\r\n\r\n/* $data.GeometryCollection */\r\n$data.GeometryCollection = function GeometryCollection(data) {\r\n    if (Array.isArray(data)) {\r\n        $data.GeometryBase.call(this, { geometries: data });\r\n    } else {\r\n        $data.GeometryBase.call(this, data);\r\n    }\r\n};\r\n$data.GeometryCollection.validateGeoJSON = function (geoData) {\r\n    var isValid = geoData &&\r\n        Array.isArray(geoData.geometries);\r\n\r\n    for (var i = 0; isValid && i < geoData.geometries.length; i++) {\r\n        var geometry = geoData.geometries[i];\r\n        try {\r\n            isValid = isValid && $data.GeometryBase.validateGeoJSON(geometry);\r\n        } catch (e) {\r\n            isValid = false;\r\n        }\r\n    }\r\n\r\n    return isValid;\r\n};\r\n$data.GeometryCollection.validMembers = ['geometries'];\r\n$data.GeometryBase.registerType('GeometryCollection', $data.GeometryCollection);\r\n$data.Container.registerType(['$data.GeometryCollection', 'GeometryCollection'], $data.GeometryCollection);\r\n\r\n/* converters */\r\n$data.Container.registerConverter($data.GeometryPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeometryPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeometryLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeometryPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiPoint, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiPoint(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiLineString, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiLineString(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryMultiPolygon, $data.Object, function (value) {\r\n    return value ? new $data.GeometryMultiPolygon(value) : value;\r\n});\r\n$data.Container.registerConverter($data.GeometryCollection, $data.Object, function (value) {\r\n    return value ? new $data.GeometryCollection(value) : value;\r\n});\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Geospatial = function Geospatial() {\r\n    this.type = this.constructor.type;\r\n    if (Array.isArray(this.constructor.validMembers)) {\r\n        for (var i = 0; i < this.constructor.validMembers.length; i++) {\r\n            var name = this.constructor.validMembers[i];\r\n            this[name] = undefined;\r\n        }\r\n    }\r\n\r\n    $data.SimpleBase.apply(this, arguments);\r\n    this.type = this.constructor.type || 'Unknown';\r\n};\r\n$data.SimpleBase.registerType('Geospatial', $data.Geospatial);\r\n$data.Container.registerType(['$data.Geospatial', 'Geospatial'], $data.Geospatial);\r\n\r\n$data.point = function (arg) {\r\n    if (arg && arg.crs) {\r\n        if (arg.crs.properties && arg.crs.properties.name === $data.GeometryBase.defaultCrs.properties.name) {\r\n            return new $data.GeometryPoint(arg);\r\n        } else {\r\n            return new $data.GeographyPoint(arg);\r\n        }\r\n    } else if(arg) {\r\n        if ('x' in arg && 'y' in arg) {\r\n            return new $data.GeometryPoint(arg.x, arg.y);\r\n        } else if ('longitude' in arg && 'latitude' in arg) {\r\n            return new $data.GeographyPoint(arg.longitude, arg.latitude);\r\n        } else if ('lng' in arg && 'lat' in arg) {\r\n            return new $data.GeographyPoint(arg.lng, arg.lat);\r\n        }\r\n    }\r\n};\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\n\n$data.Guid = function Guid(value) {\n    ///<param name=\"value\" type=\"string\" />\n\n    if (value === undefined || (typeof value === 'string' && /^[a-zA-z0-9]{8}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{4}-[a-zA-z0-9]{12}$/.test(value))) {\r\n        this.value = value || '00000000-0000-0000-0000-000000000000';\r\n    } else {\r\n        throw Guard.raise(new Exception('TypeError: ', 'value not convertable to $data.Guid', value));\r\n    }\n};\n$data.Container.registerType(['$data.Guid', 'Guid', 'guid'], $data.Guid);\n$data.Container.registerConverter('$data.Guid', {\r\n    '$data.String': function (value) {\r\n        return value ? $data.parseGuid(value).toString() : value;\r\n    },\r\n    '$data.Guid': function (value) {\r\n        return value ? value.toString() : value;\r\n    }\r\n}, {\r\n    '$data.String': function (value) {\r\n        return value ? value.toString() : value;\r\n    }\r\n});\n\n\n$data.Guid.prototype.toJSON = function () {\n    return this.value;\n};\n\n$data.Guid.prototype.valueOf = function () {\n    return this.value;\n};\n\n$data.Guid.prototype.toString = function () {\n    return this.value;\n};\n\n$data.Guid.NewGuid = function () {\n    return $data.createGuid();\n};\n\n$data.parseGuid = function (guid) {\n    return new $data.Guid(guid);\n};\n\n(function () {\r\n    /*!\r\n    Math.uuid.js (v1.4)\r\n    http://www.broofa.com\r\n    mailto:robert@broofa.com\r\n\r\n    Copyright (c) 2010 Robert Kieffer\r\n    Dual licensed under the MIT and GPL licenses.\r\n    */\r\n\r\n    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\r\n\r\n    $data.createGuid = function (guidString) {\r\n        if (guidString) {\r\n            return new $data.Guid(guidString);\r\n        };\r\n\r\n        var len;\r\n        var chars = CHARS, uuid = [], i;\r\n        var radix = chars.length;\r\n\r\n        if (len) {\r\n            // Compact form\r\n            for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];\r\n        } else {\r\n            // rfc4122, version 4 form\r\n            var r;\r\n\r\n            // rfc4122 requires these characters\r\n            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\r\n            uuid[14] = '4';\r\n\r\n            // Fill in random data.  At i==19 set the high bits of clock sequence as\r\n            // per rfc4122, sec. 4.1.5\r\n            for (i = 0; i < 36; i++) {\r\n                if (!uuid[i]) {\r\n                    r = 0 | Math.random() * 16;\r\n                    uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\r\n                }\r\n            }\r\n        }\r\n\r\n        return $data.parseGuid(uuid.join(''));\r\n    };\r\n})();\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n/* $data.SimpleBase */\r\n$data.SimpleBase = function SimpleBase(data) {\r\n    if (typeof data === 'object' && data) {\r\n        if (Array.isArray(this.constructor.validMembers)) {\r\n            for (var i = 0; i < this.constructor.validMembers.length; i++) {\r\n                var name = this.constructor.validMembers[i];\r\n\r\n                if (data[name] !== undefined) {\r\n                    this[name] = data[name];\r\n                }\r\n            }\r\n\r\n        } else {\r\n            delete data.type;\r\n            $data.typeSystem.extend(this, data);\r\n        }\r\n    }\r\n}\r\n$data.SimpleBase.registerType = function (name, type, base) {\r\n    base = base || $data.SimpleBase;\r\n\r\n    type.type = name;\r\n    type.prototype = Object.create(base.prototype);\r\n    type.prototype.constructor = type;\r\n}\r\n$data.Container.registerType(['$data.SimpleBase', 'SimpleBase'], $data.SimpleBase);\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem.js'\r\n\r\n$data.Number = typeof Number !== 'undefined' ? Number : function JayNumber() { };\r\n$data.Date = typeof Date !== 'undefined' ? Date : function JayDate() { };\r\n$data.String = typeof String !== 'undefined' ? String : function JayString() { };\r\n$data.Boolean = typeof Boolean !== 'undefined' ? Boolean : function JayBoolean() { };\r\n$data.Array = typeof Array !== 'undefined' ? Array : function JayArray() { };\r\n$data.Object = typeof Object !== 'undefined' ? Object : function JayObject() { };\r\n$data.Function = Function;\r\n\r\n$data.Byte = function JayByte() { };\r\n$data.SByte = function JaySByte() { };\r\n$data.Decimal = function JayDecimal() { };\r\n$data.Float = $data.Single = function JayFloat() { };\r\n$data.Integer = function JayInteger() { };\r\n$data.Int16 = function JayInt16(v) { };\r\n$data.Int32 = function JayInt32() { };\r\n$data.Int64 = function JayInt64(v) { };\r\n$data.ObjectID = typeof $data.mongoDBDriver !== 'undefined' && typeof $data.mongoDBDriver.ObjectID !== 'undefined' ? $data.mongoDBDriver.ObjectID : function JayObjectID() { };\r\n$data.Time = function JayTime() { };\r\n$data.Day = function JayDay() { };\r\n$data.Duration = function JayDuration() { };\r\n$data.DateTimeOffset = function JayDateTimeOffset(val) {\r\n    this.value = val;\r\n};\r\n$data.DateTimeOffset.prototype.toJSON = function () {\r\n    return this.value instanceof Date ? this.value.toISOString() : this.value;\r\n};\r\n\r\n$data.Container.registerType([\"$data.Number\", \"number\", \"JayNumber\", \"double\"], $data.Number);\r\n$data.Container.registerType([\"$data.Integer\", \"int\", \"integer\", \"JayInteger\"], $data.Integer);\r\n$data.Container.registerType([\"$data.Int32\", \"int32\", \"JayInt32\"], $data.Int32);\r\n$data.Container.registerType([\"$data.Byte\", \"byte\", \"JayByte\"], $data.Byte);\r\n$data.Container.registerType([\"$data.SByte\", \"sbyte\", \"JaySByte\"], $data.SByte);\r\n$data.Container.registerType([\"$data.Decimal\", \"decimal\", \"JayDecimal\"], $data.Decimal);\r\n$data.Container.registerType([\"$data.Float\", \"$data.Single\", \"float\", \"single\", \"JayFloat\"], $data.Float);\r\n$data.Container.registerType([\"$data.Int16\", \"int16\", \"word\", \"JayInt16\"], $data.Int16);\r\n$data.Container.registerType([\"$data.Int64\", \"int64\", \"long\", \"JayInt64\"], $data.Int64);\r\n$data.Container.registerType([\"$data.String\", \"string\", \"text\", \"character\", \"JayString\"], $data.String);\r\n$data.Container.registerType([\"$data.Array\", \"array\", \"Array\", \"[]\", \"JayArray\"], $data.Array, function () {\r\n    return $data.Array.apply(undefined, arguments);\r\n});\r\n$data.Container.registerType([\"$data.Date\", \"datetime\", \"date\", \"JayDate\"], $data.Date);\r\n$data.Container.registerType([\"$data.Time\", \"time\", \"JayTime\"], $data.Time);\r\n$data.Container.registerType([\"$data.Day\", \"day\", \"JayDay\"], $data.Day);\r\n$data.Container.registerType([\"$data.Duration\", \"duration\", \"JayDuration\"], $data.Duration);\r\n$data.Container.registerType([\"$data.DateTimeOffset\", \"offset\", \"datetimeoffset\", \"JayDateTimeOffset\"], $data.DateTimeOffset);\r\n$data.Container.registerType([\"$data.Boolean\", \"bool\", \"boolean\", \"JayBoolean\"], $data.Boolean);\r\n$data.Container.registerType([\"$data.Object\", \"Object\", \"object\", \"{}\", \"JayObject\"], $data.Object);\r\n$data.Container.registerType([\"$data.Function\", \"Function\", \"function\"], $data.Function);\r\n$data.Container.registerType(['$data.ObjectID', 'ObjectID', 'objectId', 'objectid', 'ID', 'Id', 'id', 'JayObjectID'], $data.ObjectID);\r\n\r\nexport default $data\r\n","import $data, { $C as _$C, Container as _container } from './TypeSystem.js';\r\nimport Types from './Types/Types.js';\r\nimport Trace from './Trace/Trace.js';\r\nimport Logger from './Trace/Logger.js';\r\nimport SimpleBase from './Types/SimpleBase.js';\r\nimport Geospatial from './Types/Geospatial.js';\r\nimport Geography from './Types/Geography.js';\r\nimport Geometry from './Types/Geometry.js';\r\nimport Guid from './Types/Guid.js';\r\nimport Blob from './Types/Blob.js';\r\nimport EdmTypes from './Types/EdmTypes.js';\r\nimport Converter from './Types/Converter.js';\r\n\r\nimport { Guard as _guard, Exception as _exception } from 'jaydata-error-handler';\r\n\r\nexport var Guard = _guard;\r\n$data.Guard = _guard;\r\n\r\nexport var Exception = _exception;\r\n$data.Exception = _exception;\r\n\r\nexport var $C = _$C;\r\n$data.$C = _$C;\r\n\r\nexport var Container = _container;\r\nexport default $data;\r\n","import $data from './initializeJayDataClient.js';\r\nimport * as acorn from 'acorn';\r\nimport * as pkg from '../../package.json';\r\n\r\nif (typeof console === 'undefined') {\r\n  console = {\r\n    warn: function() {},\r\n    error: function() {},\r\n    log: function() {},\r\n    dir: function() {},\r\n    time: function() {},\r\n    timeEnd: function() {}\r\n  };\r\n}\r\n\r\nif (!console.warn) console.warn = function() {};\r\nif (!console.error) console.error = function() {};\r\n\r\n(function($data) {\r\n  ///<summary>\r\n  /// Collection of JayData services\r\n  ///</summary>\r\n  $data.__namespace = true;\r\n  $data.version = \"JayData \" + pkg.version;\r\n  $data.versionNumber = pkg.version;\r\n  $data.root = {};\r\n  $data.Acorn = acorn;\r\n\r\n})($data);\r\nexport default $data\r\n  // Do not remove this block, it is used by jsdoc\r\n  /**\r\n      @name $data.Base\r\n      @class base class\r\n  */\r\n","export default function _data_handler() {\r\n  console.log(\"@@@@\", this);\r\n  if (this instanceof _data_handler) {\r\n    var type = _data_handler[\"implementation\"].apply(this, arguments);\r\n    return new type(arguments[1]);\r\n  } else {\r\n    return _data_handler[\"implementation\"].apply(this, arguments)\r\n  }\r\n};\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Access', null, null, {}, {\r\n    isAuthorized: function(access, user, sets, callback){\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n\r\n        //clbWrapper.error('Authorization failed', 'Access authorization');\r\n        clbWrapper.success(true);\r\n\r\n        return pHandlerResult;\r\n\r\n        /*var error;\r\n\r\n        if (!access) error = 'Access undefined';\r\n        if (typeof access !== 'number') error = 'Invalid access type';\r\n        if (!user) user = {}; //error = 'User undefined';\r\n        if (!user.roles) user.roles = {}; //error = 'User has no roles';\r\n        if (!roles) roles = {}; //error = 'Roles undefined';\r\n        if (!(roles instanceof Array || typeof roles === 'object')) error = 'Invald roles type';\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n\r\n        if (error){\r\n            clbWrapper.error(error, 'Access authorization');\r\n            return pHandlerResult;\r\n        }\r\n\r\n        if (user.roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < user.roles.length; i++){\r\n                if (typeof user.roles[i] === 'string') r[user.roles[i]] = true;\r\n            }\r\n            user.roles = r;\r\n        }\r\n\r\n        if (roles instanceof Array){\r\n            var r = {};\r\n            for (var i = 0; i < roles.length; i++){\r\n                if (typeof roles[i] === 'string') r[roles[i]] = true;\r\n            }\r\n            roles = r;\r\n        }\r\n\r\n        var args = arguments;\r\n        var readyFn = function(result){\r\n            if (result) clbWrapper.success(result);\r\n            else clbWrapper.error('Authorization failed', args);\r\n        };\r\n\r\n        var rolesKeys = Object.getOwnPropertyNames(roles);\r\n        var i = 0;\r\n\r\n        var callbackFn = function(result){\r\n            if (result) readyFn(result);\r\n\r\n            if (typeof roles[rolesKeys[i]] === 'boolean' && roles[rolesKeys[i]]){\r\n                if (user.roles[rolesKeys[i]]) readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'function'){\r\n                var r = roles[rolesKeys[i]].call(user);\r\n\r\n                if (typeof r === 'function') r.call(user, (i < rolesKeys.length ? callbackFn : readyFn));\r\n                else{\r\n                    if (r) readyFn(true);\r\n                    else{\r\n                        i++;\r\n                        if (i < rolesKeys.length) callbackFn();\r\n                        else readyFn(false);\r\n                    }\r\n                }\r\n            }else if (typeof roles[rolesKeys[i]] === 'number'){\r\n                if (((typeof user.roles[rolesKeys[i]] === 'number' && (user.roles[rolesKeys[i]] & access)) ||\r\n                    (typeof user.roles[rolesKeys[i]] !== 'number' && user.roles[rolesKeys[i]])) &&\r\n                    (roles[rolesKeys[i]] & access)) user.roles[rolesKeys[i]] &&  readyFn(true);\r\n                else{\r\n                    i++;\r\n                    if (i < rolesKeys.length) callbackFn();\r\n                    else readyFn(false);\r\n                }\r\n            }\r\n        };\r\n\r\n        callbackFn();\r\n\r\n        return pHandlerResult;*/\r\n    },\r\n    getAccessBitmaskFromPermission: function(p){\r\n        var access = $data.Access.None;\r\n\r\n        if (p.Create) access |= $data.Access.Create;\r\n        if (p.Read) access |= $data.Access.Read;\r\n        if (p.Update) access |= $data.Access.Update;\r\n        if (p.Delete) access |= $data.Access.Delete;\r\n        if (p.DeleteBatch) access |= $data.Access.DeleteBatch;\r\n        if (p.Execute) access |= $data.Access.Execute;\r\n\r\n        return access;\r\n    },\r\n    None: { value: 0 },\r\n    Create: { value: 1 },\r\n    Read: { value: 2 },\r\n    Update: { value: 4 },\r\n    Delete: { value: 8 },\r\n    DeleteBatch: { value: 16 },\r\n    Execute: { value: 32 }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.ajax = $data.ajax || function () {\r\n    var cfg = arguments[arguments.length - 1];\r\n    var clb = $data.PromiseHandlerBase.createCallbackSettings(cfg);\r\n    clb.error(\"Not implemented\");\r\n};\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof Ext !== 'undefined' && typeof Ext.Ajax) {\r\n    $data.ajax = $data.ajax || function (options) {\r\n        Ext.Ajax.request(options);\r\n    };\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof WinJS !== 'undefined' && WinJS.xhr) {\r\n    $data.ajax = $data.ajax || function (options) {\r\n        $data.typeSystem.extend(options, {\r\n            dataType: 'json',\r\n            headers: {}\r\n        });\r\n        var dataTypes = {\r\n            'json': {\r\n                accept: 'application/json, text/javascript',\r\n                convert: JSON.parse\r\n            },\r\n            'text': {\r\n                accept: 'text/plain',\r\n                convert: function (e) { return e; }\r\n            },\r\n            'html': {\r\n                accept: 'text/html',\r\n                convert: function (e) { return e; }\r\n            },\r\n            'xml': {\r\n                accept: 'application/xml, text/xml',\r\n                convert: function (e) {\r\n                    // TODO?\r\n                    return e;\r\n                }\r\n            }\r\n        }\r\n        var dataTypeContext = dataTypes[options.dataType.toLowerCase()];\r\n\r\n        options.headers.Accept = dataTypeContext.accept;\r\n\r\n        var successClb = options.success || $data.defaultSuccessCallback;\r\n        var errorClb = options.error || $data.defaultErrorCallback;\r\n        var progressClb = options.progress;\r\n\r\n        var success = function (r) {\r\n            var result = dataTypeContext.convert(r.responseText);\r\n            successClb(result);\r\n        }\r\n        var error = function (r) {\r\n            var error = dataTypeContext.convert(r.responseText);\r\n            errorClb(error);\r\n        }\r\n        var progress = progressClb;\r\n\r\n        WinJS.xhr(options)\r\n        .done(success, error, progress);\r\n    }\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\nif (typeof jQuery !== 'undefined' && jQuery.ajax) {\r\n    $data.ajax = $data.ajax || jQuery.ajax;\r\n}\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.Anonymous\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = cfg || {};\r\n        this.Authenticated = false;\r\n    },\r\n    /// { error:, abort:, pending:, success: }\r\n    Login: function (callbacks) {\r\n    },\r\n    Logout: function () {\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        $data.ajax(cfg);\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.AuthenticationBase\", null, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = cfg || {};\r\n        this.Authenticated = false;\r\n    },\r\n    /// { error:, abort:, pending:, success: }\r\n    Login: function (callbacks) {\r\n         Guard.raise(\"Pure class\");\r\n    },\r\n    Logout: function () {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.BasicAuth.BasicAuth\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = $data.typeSystem.extend({\r\n            Username: '',\r\n            Password: ''\r\n        }, cfg);\r\n    },\r\n    Login: function (callbacks) {\r\n        if (callbacks && typeof callbacks.pending == \"function\")\r\n            callbacks.pending();\r\n    },\r\n    Logout: function () {\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        if (!cfg)\r\n            return;\r\n        var _this = this;\r\n\r\n        var origBeforeSend = cfg.beforeSend;\r\n        cfg.beforeSend = function (xhr) {\r\n            xhr.setRequestHeader(\"Authorization\", \"Basic  \" + _this.__encodeBase64(_this.configuration.Username + \":\" + _this.configuration.Password));\r\n\r\n            if(typeof origBeforeSend == \"function\")\r\n                origBeforeSend(xhr);\r\n        };\r\n\r\n        $data.ajax(cfg);\r\n    },\r\n    __encodeBase64: function (val) {\r\n        var b64array = \"ABCDEFGHIJKLMNOP\" +\r\n                           \"QRSTUVWXYZabcdef\" +\r\n                           \"ghijklmnopqrstuv\" +\r\n                           \"wxyz0123456789+/\" +\r\n                           \"=\";\r\n\r\n        input = val;\r\n        var base64 = \"\";\r\n        var hex = \"\";\r\n        var chr1, chr2, chr3 = \"\";\r\n        var enc1, enc2, enc3, enc4 = \"\";\r\n        var i = 0;\r\n\r\n        do {\r\n            chr1 = input.charCodeAt(i++);\r\n            chr2 = input.charCodeAt(i++);\r\n            chr3 = input.charCodeAt(i++);\r\n\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            } else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n\r\n            base64 = base64 +\r\n                        b64array.charAt(enc1) +\r\n                        b64array.charAt(enc2) +\r\n                        b64array.charAt(enc3) +\r\n                        b64array.charAt(enc4);\r\n            chr1 = chr2 = chr3 = \"\";\r\n            enc1 = enc2 = enc3 = enc4 = \"\";\r\n        } while (i < input.length);\r\n\r\n        return base64;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.Authentication.FacebookAuth\", $data.Authentication.AuthenticationBase, null, {\r\n    constructor: function (cfg) {\r\n        this.configuration = $data.typeSystem.extend({\r\n            Url_code: '',\r\n            type_code: '',\r\n            scope: '',\r\n            Url_token: '',\r\n            type_token: '',\r\n            access_token: '',\r\n            app_id: ''\r\n        }, cfg);\r\n    },\r\n    Login: function (callbacks) {\r\n        if (this.Authenticated) {\r\n            return;\r\n        }\r\n\r\n        var provider = this;\r\n        provider.configuration.stateCallbacks = callbacks || {};\r\n\r\n        $data.ajax({\r\n            url: this.configuration.Url_code,\r\n            data: 'type=' + provider.configuration.type_code + '&client_id=' + provider.configuration.app_id + '&scope=' + provider.configuration.scope,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            success: function (data) {\r\n                if (typeof provider.configuration.stateCallbacks.pending == \"function\")\r\n                    provider.configuration.stateCallbacks.pending(data);\r\n                provider._processRequestToken(data);\r\n                provider.Authenticated = true;\r\n            },\r\n            error: function () {\r\n                if (typeof provider.configuration.stateCallbacks.error == \"function\")\r\n                    provider.configuration.stateCallbacks.error(arguments);\r\n            }\r\n        });\r\n    },\r\n    Logout: function () {\r\n        this.Authenticated = false;\r\n    },\r\n    CreateRequest: function (cfg) {\r\n        if (!cfg)\r\n            return;\r\n        var _this = this;\r\n\r\n        if (cfg.url.indexOf('access_token=') === -1) {\r\n            if (cfg.url && this.Authenticated) {\r\n                var andChar = '?';\r\n                if (cfg.url.indexOf(andChar) > 0)\r\n                    andChar = '&';\r\n\r\n                if (this.configuration.access_token)\r\n                    cfg.url = cfg.url + andChar + 'access_token=' + this.configuration.access_token;\r\n            }\r\n        }\r\n\r\n        $data.ajax(cfg);\r\n    },\r\n    _processRequestToken: function (verification_data) {\r\n        var provider = this;\r\n\r\n        $data.ajax({\r\n            url: provider.configuration.Url_token,\r\n            data: 'type=' + provider.configuration.type_token + '&client_id=' + provider.configuration.app_id + '&code=' + verification_data.code,\r\n            type: 'POST',\r\n            dataType: 'json',\r\n            success: function(result) {\r\n                provider.configuration.access_token = result.access_token;\r\n                if (typeof provider.configuration.stateCallbacks.success == \"function\")\r\n                    provider.configuration.stateCallbacks.success(result);\r\n            },\r\n            error: function(obj) {\r\n                var data = eval('(' + obj.responseText + ')');\r\n                if (data.error) {\r\n                    if (data.error.message == \"authorization_pending\") {\r\n                        setTimeout(function() {\r\n                            provider._processRequestToken(verification_data);\r\n                        }, 2000);\r\n                    } else if (\"authorization_declined\") {\r\n                        if (typeof provider.configuration.stateCallbacks.abort == \"function\")\r\n                            provider.configuration.stateCallbacks.abort(arguments);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from '../TypeSystem/index.js';\r\n\r\nvar EventSubscriber = $data.Class.define(\"EventSubscriber\", null, null, {\r\n    constructor: function (handler, state, thisArg) {\r\n        /// <param name=\"handler\" type=\"Function\">\r\n        ///     <summary>event handler</summary>\r\n        ///     <signature>\r\n        ///         <param name=\"sender\" type=\"$data.Entity\" />\r\n        ///         <param name=\"eventData\" type=\"EventData\" />\r\n        ///         <param name=\"state\" type=\"Object\" />\r\n        ///     </signature>\r\n        /// </param>\r\n        /// <param name=\"state\" type=\"Object\" optional=\"true\">custom state object</param>\r\n        /// <param name=\"thisArg\" type=\"Object\" optional=\"true\">[i]this[/i] context for handler</param>\r\n        ///\r\n        /// <field name=\"handler\" type=\"function($data.Entity sender, EventData eventData, Object state)\">event handler</field>\r\n        /// <field name=\"state\" type=\"Object\">custom state object</field>\r\n        /// <field name=\"thisArg\">[i]this[/i] context for handler</field>\r\n        this.handler = handler;\r\n        this.state = state;\r\n        this.thisArg = thisArg;\r\n    },\r\n    handler: {},\r\n    state: {},\r\n    thisArg: {}\r\n});\r\n\r\n$data.Event = $data.Class.define(\"$data.Event\", null, null, {\r\n    constructor: function (name, sender) {\r\n        ///<param name=\"name\" type=\"string\">The name of the event</param>\r\n        ///<param name=\"sender\" type=\"Object\">The originator/sender of the event. [this] in handlers will be set to this</param>\r\n        var subscriberList = null;\r\n        var parentObject = sender;\r\n\r\n        function detachHandler(list, handler) {\r\n            ///<param name=\"list\" type=\"Array\" elementType=\"EventSubscriber\" />\r\n            ///<param name=\"handler\" type=\"Function\" />\r\n            list.forEach(function (item, index) {\r\n                if (item.handler == handler) {\r\n                    list.splice(index, 1);\r\n                }\r\n            });\r\n        }\r\n\r\n        this.attach = function (handler, state, thisArg) {\r\n            ///<param name=\"handler\" type=\"Function\">\r\n            ///<signature>\r\n            ///<param name=\"sender\" type=\"Object\" />\r\n            ///<param name=\"eventData\" type=\"Object\" />\r\n            ///<param name=\"state\" type=\"Object\" />\r\n            ///</signature>\r\n            ///</param>\r\n            ///<param name=\"state\" type=\"Object\" optional=\"true\" />\r\n            ///<param name=\"thisArg\" type=\"Object\" optional=\"true\" />\r\n            if (!subscriberList) {\r\n                subscriberList = [];\r\n            }\r\n            subscriberList.push(new EventSubscriber(handler, state, thisArg || sender));\r\n        };\r\n        this.detach = function (handler) {\r\n            detachHandler(subscriberList, handler);\r\n        };\r\n        this.fire = function (eventData, snder) {\r\n            var snd = snder || sender || this;\r\n            //eventData.eventName = name;\r\n            ///<value name=\"subscriberList type=\"Array\" />\r\n            if (subscriberList) {\r\n                subscriberList.forEach(function (subscriber) {\r\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\r\n                    try {\r\n                        subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state);\r\n                    } catch(ex) {\r\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\r\n                        console.dir(ex);\r\n                    }\r\n                });\r\n            }\r\n        };\r\n        this.fireCancelAble = function (eventData, snder) {\r\n            var snd = snder || sender || this;\r\n            //eventData.eventName = name;\r\n            ///<value name=\"subscriberList type=\"Array\" />\r\n            var isValid = true;\r\n            if (subscriberList) {\r\n                subscriberList.forEach(function (subscriber) {\r\n                    ///<param name=\"subscriber\" type=\"EventSubscriber\" />\r\n                    try {\r\n                        isValid = isValid && (subscriber.handler.call(subscriber.thisArg, snd, eventData, subscriber.state) === false ? false : true);\r\n                    } catch (ex) {\r\n                        console.log(\"unhandled exception in event handler. exception suppressed\");\r\n                        console.dir(ex);\r\n                    }\r\n                });\r\n            }\r\n            return isValid;\r\n        };\r\n    }\r\n});\r\n\r\n\r\nvar EventData = $data.Class.define(\"EventData\", null, null, {\r\n    eventName: {}\r\n});\r\n\r\nvar PropertyChangeEventData = $data.Class.define(\"PropertyChangeEventData\", EventData, null, {\r\n    constructor: function (propertyName, oldValue, newValue) {\r\n        this.propertyName = propertyName;\r\n        this.oldValue = oldValue;\r\n        this.newValue = newValue;\r\n    },\r\n    propertyName: {},\r\n    oldValue: {},\r\n    newValue: {}\r\n});\r\n\r\nvar PropertyValidationEventData = $data.Class.define(\"PropertyValidationEventData\", EventData, null, {\r\n    constructor: function (propertyName, oldValue, newValue, errors) {\r\n        this.propertyName = propertyName;\r\n        this.oldValue = oldValue;\r\n        this.newValue = newValue;\r\n        this.errors = errors;\r\n        this.cancel = false;\r\n    },\r\n    propertyName: {},\r\n    oldValue: {},\r\n    newValue: {},\r\n    errors: {},\r\n    cancel: {}\r\n});\r\n\r\n\r\n\r\n$data.Entity = $data.Class.define(\"$data.Entity\", null, null, {\r\n    constructor: function (initData, newInstanceOptions) {\r\n        /// <description>\r\n        ///     This class provide a light weight, object-relational interface between\r\n        ///     your javascript code and database.\r\n        /// </description>\r\n        ///\r\n        /// <signature>\r\n        ///     <param name=\"initData\" type=\"Object\">initialization data</param>\r\n        ///     <example>\r\n        ///         var category = new $news.Types.Category({ Title: 'Tech' });\r\n        ///         $news.context.Categories.add(category);\r\n        ///     </example>\r\n        /// </signature>\r\n        ///\r\n        /// <field name=\"initData\" type=\"Object\">initialization data</field>\r\n        /// <field name=\"context\" type=\"$data.EntityContext\"></field>\r\n        /// <field name=\"propertyChanging\" type=\"$data.Event\"></field>\r\n        /// <field name=\"propertyChanged\" type=\"$data.Event\"></field>\r\n        /// <field name=\"propertyValidationError\" type=\"$data.Event\"></field>\r\n        /// <field name=\"isValidated\" type=\"Boolean\">Determines the current $data.Entity is validated.</field>\r\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of $data.Validation.ValidationError</field>\r\n        /// <field name=\"ValidationErrors\" type=\"Array\">array of MemberDefinition</field>\r\n        /// <field name=\"entityState\" type=\"Integer\"></field>\r\n        /// <field name=\"changedProperties\" type=\"Array\">array of MemberDefinition</field>\r\n\r\n        this.initData = {};\r\n        var thisType = this.getType();\r\n        if (thisType.__copyPropertiesToInstance) {\r\n            $data.typeSystem.writePropertyValues(this);\r\n        }\r\n\r\n        var ctx = null;\r\n        this.context = ctx;\r\n        if (\"setDefaultValues\" in thisType) {\r\n            if (!newInstanceOptions || newInstanceOptions.setDefaultValues !== false) {\r\n                if (!initData || Object.keys(initData).length < 1) {\r\n                    initData = thisType.setDefaultValues(initData);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (typeof initData === \"object\") {\r\n            var typeMemDefs = thisType.memberDefinitions;\r\n            var memDefNames = typeMemDefs.getPublicMappedPropertyNames();\r\n\r\n            for (var i in initData) {\r\n                if (memDefNames.indexOf(i) > -1) {\r\n                    var memberDef = typeMemDefs.getMember(i);\r\n                    var type = Container.resolveType(memberDef.type);\r\n                    var value = initData[i];\r\n\r\n                    if (memberDef.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                        this.initData[i] = value;\r\n                    } else {\r\n                        if (newInstanceOptions && newInstanceOptions.converters) {\r\n                            var converter = newInstanceOptions.converters[Container.resolveName(type)];\r\n                            if (converter)\r\n                                value = converter(value);\r\n                        }\r\n\r\n                        this.initData[i] = Container.convertTo(value, type, memberDef.elementType, newInstanceOptions);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        if (newInstanceOptions && newInstanceOptions.entityBuilder) {\r\n            newInstanceOptions.entityBuilder(this, thisType.memberDefinitions.asArray(), thisType);\r\n        }\r\n\r\n        this.changedProperties = undefined;\r\n        this.entityState = undefined;\r\n\r\n    },\r\n    toString: function () {\r\n        /// <summary>Returns a string that represents the current $data.Entity</summary>\r\n        /// <returns type=\"String\"/>\r\n\r\n        return this.getType().fullName + \"(\" + (this.Id || this.Name || '') + \")\"\r\n    },\r\n    toJSON: function () {\r\n        /// <summary>Creates pure JSON object from $data.Entity.</summary>\r\n        /// <returns type=\"Object\">JSON representation</returns>\r\n\r\n        var result = {};\r\n        var self = this;\r\n        this.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            if (self[memDef.name] instanceof Date && memDef.type && Container.resolveType(memDef.type) === $data.DateTimeOffset) {\r\n                result[memDef.name] = new $data.DateTimeOffset(self[memDef.name]);\r\n            } else {\r\n                result[memDef.name] = self[memDef.name];\r\n            }\r\n        });\r\n        return result;\r\n    },\r\n    equals: function (entity) {\r\n        /// <summary>Determines whether the specified $data.Entity is equal to the current $data.Entity.</summary>\r\n        /// <returns type=\"Boolean\">[b]true[/b] if the specified $data.Entity is equal to the current $data.Entity; otherwise, [b]false[/b].</returns>\r\n\r\n        if (entity.getType() !== this.getType()) {\r\n            return false;\r\n        }\r\n        var entityPk = this.getType().memberDefinitions.getKeyProperties();\r\n        for (var i = 0; i < entityPk.length; i++) {\r\n            if (this[entityPk[i].name] != entity[entityPk[i].name]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n\r\n    propertyChanging: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyChanging)\r\n                this._propertyChanging = new $data.Event('propertyChanging', this);\r\n\r\n            return this._propertyChanging;\r\n        },\r\n        set: function (value) { this._propertyChanging = value; }\r\n    },\r\n\r\n    propertyChanged: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyChanged)\r\n                this._propertyChanged = new $data.Event('propertyChanged', this);\r\n\r\n            return this._propertyChanged;\r\n        },\r\n        set: function (value) { this._propertyChanged = value; }\r\n    },\r\n\r\n    propertyValidationError: {\r\n        dataType: $data.Event, storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, prototypeProperty: true,\r\n        get: function () {\r\n            if (!this._propertyValidationError)\r\n                this._propertyValidationError = new $data.Event('propertyValidationError', this);\r\n\r\n            return this._propertyValidationError;\r\n        },\r\n        set: function (value) { this._propertyValidationError = value; }\r\n    },\r\n\r\n    // protected\r\n    storeProperty: function (memberDefinition, value) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"value\" />\r\n\r\n        if (memberDefinition.concurrencyMode !== $data.ConcurrencyMode.Fixed) {\r\n            value = Container.convertTo(value, memberDefinition.type, memberDefinition.elementType);\r\n        }\r\n\r\n        var eventData = null;\r\n        if (memberDefinition.monitorChanges != false && (this._propertyChanging || this._propertyChanged || \"instancePropertyChanged\" in this.constructor)) {\r\n            var origValue = this[memberDefinition.name];\r\n            eventData = new PropertyChangeEventData(memberDefinition.name, origValue, value);\r\n            if (this._propertyChanging)\r\n                this.propertyChanging.fire(eventData);\r\n        }\r\n\r\n        if (memberDefinition.monitorChanges != false && (this._propertyValidationError || \"instancePropertyValidationError\" in this.constructor)) {\r\n            var errors = $data.Validation.Entity.ValidateEntityField(this, memberDefinition, value);\r\n            if (errors.length > 0) {\r\n                var origValue = this[memberDefinition.name];\r\n                var errorEventData = new PropertyValidationEventData(memberDefinition.name, origValue, value, errors);\r\n\r\n                if (this._propertyValidationError)\r\n                    this.propertyValidationError.fire(errorEventData);\r\n                if (\"instancePropertyValidationError\" in this.constructor)\r\n                    this.constructor[\"instancePropertyValidationError\"].fire(errorEventData, this);\r\n\r\n                if (errorEventData.cancel == true)\r\n                    return;\r\n            }\r\n        }\r\n\r\n        if (memberDefinition.storeOnObject == true) {\r\n            //TODO refactor to Base.getBackingFieldName\r\n            var backingFieldName = \"_\" + memberDefinition.name;\r\n            this[backingFieldName] = value;\r\n        } else {\r\n            this.initData[memberDefinition.name] = value;\r\n        }\r\n        this.isValidated = false;\r\n\r\n        if (memberDefinition.monitorChanges != false && this.entityState == $data.EntityState.Unchanged)\r\n            this.entityState = $data.EntityState.Modified;\r\n\r\n        this._setPropertyChanged(memberDefinition);\r\n\r\n        if (memberDefinition.monitorChanges != false) {\r\n            //if (!this.changedProperties) {\r\n            //    this.changedProperties = [];\r\n            //}\r\n\r\n            //if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\r\n            //    this.changedProperties.push(memberDefinition);\r\n\r\n            if (this._propertyChanged)\r\n                this.propertyChanged.fire(eventData);\r\n\r\n            //TODO mixin framework\r\n            if (\"instancePropertyChanged\" in this.constructor) {\r\n                this.constructor[\"instancePropertyChanged\"].fire(eventData, this);\r\n            }\r\n        }\r\n    },\r\n    _setPropertyChanged: function (memberDefinition) {\r\n        if (memberDefinition.monitorChanges != false && memberDefinition.name != \"ValidationErrors\") {\r\n            if (!this.changedProperties) {\r\n                this.changedProperties = [];\r\n            }\r\n\r\n            if (!this.changedProperties.some(function (memDef) { return memDef.name == memberDefinition.name }))\r\n                this.changedProperties.push(memberDefinition);\r\n        }\r\n    },\r\n\r\n    // protected\r\n    retrieveProperty: function (memberDefinition) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n\r\n        if (memberDefinition.storeOnObject == true) {\r\n            //TODO refactor to Base.getBackingFieldName\r\n            var backingFieldName = \"_\" + memberDefinition.name;\r\n            return this[backingFieldName];\r\n        } else {\r\n            return this.initData[memberDefinition.name];\r\n        }\r\n    },\r\n\r\n    // protected\r\n    getProperty: function (memberDefinition, callback, tran) {\r\n        /// <summary>Retrieve value of member</summary>\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"callback\" type=\"Function\">\r\n        ///     <signature>\r\n        ///         <param name=\"value\" />\r\n        ///     </signature>\r\n        /// </param>\r\n        /// <returns>value associated for [i]memberDefinition[/i]</returns>\r\n\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        if (this[memberDefinition.name] != undefined) {\r\n            if (tran instanceof $data.Transaction)\r\n                callback.success(this[memberDefinition.name], tran);\r\n            else\r\n                callback.success(this[memberDefinition.name]);\r\n            return;\r\n        }\r\n\r\n        var context = this.context;\r\n        if (!this.context) {\r\n            try {\r\n                var that = this;\r\n                var storeToken = this.storeToken || this.getType().storeToken;\r\n                if (storeToken && typeof storeToken.factory === 'function') {\r\n                    var ctx = storeToken.factory();\r\n                    return ctx.onReady().then(function (context) {\r\n                        return context.loadItemProperty(that, memberDefinition, callback);\r\n                    });\r\n                }\r\n            } catch (e) { }\r\n\r\n            Guard.raise(new Exception('Entity not in context', 'Invalid operation'));\r\n        } else {\r\n            return context.loadItemProperty(this, memberDefinition, callback, tran);\r\n        }\r\n    },\r\n    // protected\r\n    setProperty: function (memberDefinition, value, callback, tran) {\r\n        /// <param name=\"memberDefinition\" type=\"MemberDefinition\" />\r\n        /// <param name=\"value\" />\r\n        /// <param name=\"callback\" type=\"Function\">done</param>\r\n        this[memberDefinition.name] = value;\r\n\r\n        //callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n        var pHandler = new $data.PromiseHandler();\r\n        callback = pHandler.createCallback(callback);\r\n        callback.success(this[memberDefinition.name]);\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    isValid: function () {\r\n        /// <summary>Determines the current $data.Entity is validated and valid.</summary>\r\n        /// <returns type=\"Boolean\" />\r\n\r\n        if (!this.isValidated) {\r\n            this.ValidationErrors = $data.Validation.Entity.ValidateEntity(this);\r\n            this.isValidated = true;\r\n        }\r\n        return this.ValidationErrors.length == 0;\r\n    },\r\n    isValidated: { dataType: \"bool\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false, value: false },\r\n    ValidationErrors: {\r\n        dataType: Array,\r\n        elementType: $data.Validation.ValidationError,\r\n        storeOnObject: true,\r\n        monitorChanges: true,\r\n        notMapped: true,\r\n        enumerable: false\r\n    },\r\n\r\n    resetChanges: function () {\r\n        /// <summary>reset changes</summary>\r\n\r\n        delete this._changedProperties;\r\n    },\r\n\r\n    changedProperties: {\r\n        dataType: Array,\r\n        elementType: MemberDefinition,\r\n        storeOnObject: true,\r\n        monitorChanges: false,\r\n        notMapped: true,\r\n        enumerable: false\r\n    },\r\n\r\n    entityState: { dataType: \"integer\", storeOnObject: true, monitorChanges: false, notMapped: true, enumerable: false },\r\n    /*\r\n    toJSON: function () {\r\n        if (this.context) {\r\n            var itemType = this.getType();\r\n            var storageModel = this.context._storageModel[itemType.name];\r\n            var o = new Object();\r\n            for (var property in this) {\r\n                if (typeof this[property] !== \"function\") {\r\n                    var excludedFields = storageModel.Associations.every(function (association) {\r\n                        return association.FromPropertyName == property && (association.FromMultiplicity == \"0..1\" || association.FromMultiplicity == \"1\");\r\n                    }, this);\r\n                    if (!excludedFields) {\r\n                        o[property] = this[property];\r\n                    }\r\n                }\r\n            }\r\n            return o;\r\n        }\r\n        return this;\r\n    }   */\r\n    //,\r\n\r\n    //onReady: function (callback) {\r\n    //    this.__onReadyList = this.__onReadyList || [];\r\n    //    this.__onReadyList.push(callback);\r\n    //},\r\n\r\n    remove: function () {\r\n        if ($data.ItemStore && 'EntityInstanceRemove' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceRemove.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    save: function () {\r\n        if ($data.ItemStore && 'EntityInstanceSave' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceSave.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    refresh: function () {\r\n        if ($data.ItemStore && 'EntityInstanceRefresh' in $data.ItemStore)\r\n            return $data.ItemStore.EntityInstanceRefresh.apply(this, arguments);\r\n        else\r\n            throw 'not implemented'; //todo\r\n    },\r\n    storeToken: { type: Object, monitorChanges: false, notMapped: true, storeOnObject: true },\r\n\r\n    getFieldUrl: function (field) {\r\n        if (this.context) {\r\n            return this.context.getFieldUrl(this, field);\r\n        } else if (this.getType().storeToken && typeof this.getType().storeToken.factory === 'function') {\r\n            var context = this.getType().storeToken.factory();\r\n            return context.getFieldUrl(this, field);\r\n        } else if (this.getType().storeToken){\r\n            try {\r\n                var ctx = $data.ItemStore._getContextPromise('default', this.getType());\r\n                if (ctx instanceof $data.EntityContext) {\r\n                    return ctx.getFieldUrl(this, field);\r\n                }\r\n            } catch (e) {\r\n            }\r\n        }\r\n        return '#';\r\n    }\r\n},\r\n{\r\n    //create get_[property] and set_[property] functions for properties\r\n    __setPropertyfunctions: { value: true, notMapped: true, enumerable: false, storeOnObject: true },\r\n    //copy public properties to current instance\r\n    __copyPropertiesToInstance: { value: false, notMapped: true, enumerable: false, storeOnObject: true },\r\n\r\n    inheritedTypeProcessor: function (type) {\r\n        if ($data.ItemStore && 'EntityInheritedTypeProcessor' in $data.ItemStore)\r\n            $data.ItemStore.EntityInheritedTypeProcessor.apply(this, arguments);\r\n\r\n        //default value setter method factory\r\n        type.defaultValues = {};\r\n\r\n        type.memberDefinitions.asArray().forEach(function (pd) {\r\n            if (pd.hasOwnProperty(\"defaultValue\")) {\r\n                type.defaultValues[pd.name] = pd.defaultValue;\r\n            }\r\n        });\r\n\r\n        if (Object.keys(type.defaultValues).length > 0) {\r\n            type.setDefaultValues = function (initData, instance) {\r\n                initData = initData || {};\r\n                var dv = type.defaultValues;\r\n                for (var n in dv) {\r\n                    if (!(n in initData)) {\r\n                        var value = dv[n];\r\n                        if (\"function\" === typeof value) {\r\n                            initData[n] = dv[n](n, instance);\r\n                        } else {\r\n                            initData[n] = dv[n];\r\n                        }\r\n                    }\r\n                }\r\n                return initData;\r\n            }\r\n        }\r\n    },\r\n\r\n\r\n    //Type Events\r\n    addEventListener: function(eventName, fn) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            this[delegateName] = new $data.Event(eventName, this);\r\n        }\r\n        this[delegateName].attach(fn);\r\n    },\r\n    removeEventListener: function(eventName, fn) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            return;\r\n        }\r\n        this[delegateName].detach(fn);\r\n    },\r\n    raiseEvent: function(eventName, data) {\r\n        var delegateName = \"on\" + eventName;\r\n        if (!(delegateName in this)) {\r\n            return;\r\n        }\r\n        this[delegateName].fire(data);\r\n    },\r\n\r\n    getFieldNames: function () {\r\n        return this.memberDefinitions.getPublicMappedPropertyNames();\r\n    },\r\n\r\n    'from$data.Object': function (value, type, t, options) {\r\n        if (!Guard.isNullOrUndefined(value)) {\r\n            var newInstanceOptions;\r\n            if (options && options.converters) {\r\n                newInstanceOptions = {\r\n                    converters: options.converters\r\n                }\r\n            }\r\n\r\n            return new this(value, newInstanceOptions);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n});\r\n\r\n\r\n$data.define = function (name, container, definition) {\r\n    if (container && !(container instanceof $data.ContainerClass)) {\r\n        definition = container;\r\n        container = undefined;\r\n    }\r\n    if (!definition) {\r\n        throw new Error(\"json object type is not supported yet\");\r\n    }\r\n    var _def = {};\r\n    var hasKey = false;\r\n    var keyFields = [];\r\n    Object.keys(definition).forEach(function (fieldName) {\r\n        var propDef = definition[fieldName];\r\n        if (typeof propDef === 'object' && (\"type\" in propDef || \"get\" in propDef || \"set\" in propDef)) {\r\n\r\n            _def[fieldName] = propDef;\r\n            if (propDef.key) {\r\n                keyFields.push(propDef);\r\n            }\r\n\r\n            if ((\"get\" in propDef || \"set\" in propDef) && (!('notMapped' in propDef) || propDef.notMapped === true)) {\r\n                propDef.notMapped = true;\r\n                propDef.storeOnObject = true;\r\n            }\r\n            if (\"get\" in propDef && !(\"set\" in propDef)) {\r\n                propDef.set = function () { };\r\n            } else if (\"set\" in propDef && !(\"get\" in propDef)) {\r\n                propDef.get = function () { };\r\n            }\r\n\r\n        } else {\r\n            _def[fieldName] = { type: propDef };\r\n        }\r\n    });\r\n\r\n    if (keyFields.length < 1) {\r\n        var keyProp;\r\n        switch (true) {\r\n            case \"id\" in _def:\r\n                keyProp = \"id\";\r\n                break;\r\n            case \"Id\" in _def:\r\n                keyProp = \"Id\"\r\n                break;\r\n            case \"ID\" in _def:\r\n                keyProp = \"ID\"\r\n                break;\r\n        }\r\n        if (keyProp) {\r\n            _def[keyProp].key = true;\r\n            var propTypeName = $data.Container.resolveName(_def[keyProp].type);\r\n            _def[keyProp].computed = true;\r\n            //if (\"$data.Number\" === propTypeName || \"$data.Integer\" === propTypeName) {\r\n            //}\r\n        } else {\r\n            _def.Id = { type: \"int\", key: true, computed: true }\r\n        }\r\n    }\r\n\r\n\r\n    var entityType = $data.Entity.extend(name, container, _def);\r\n    return entityType;\r\n}\r\n$data.implementation = function (name) {\r\n    return Container.resolveType(name);\r\n};\r\n\r\nexport var Event = $data.Event\r\nexport var Entity = $data.Entity\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.EntityAttachMode\", null, null, {}, {\r\n    defaultMode: 'Default',\r\n    AllChanged: function (data) {\r\n        var memDefs = data.getType().memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < memDefs.length; i++) {\r\n            data._setPropertyChanged(memDefs[i]);\r\n        }\r\n        data.entityState = $data.EntityState.Modified;\r\n    },\r\n    KeepChanges: function (data) {\r\n        if (data.changedProperties && data.changedProperties.length > 0) {\r\n            data.entityState = $data.EntityState.Modified;\r\n        } else {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n        }\r\n    },\r\n    Default: function (data) {\r\n        data.entityState = $data.EntityState.Unchanged;\r\n        data.changedProperties = undefined;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n(function () {\r\n\r\n    $data.defaults = $data.defaults || {};\r\n    $data.defaults.defaultDatabaseName = 'JayDataDefault';\r\n    $data.defaults.enableRelatedEntityReadMethods = true;\r\n    $data.defaults.relatedEntityReadMethodPrefix = 'get';\r\n    $data.defaults.relatedEntityProxyPrefix = '$relatedProxy';\r\n\r\n})();\r\n\r\n\r\n$data.Class.define('$data.StorageModel', null, null, {\r\n    constructor: function () {\r\n        ///<field name=\"LogicalType\" type=\"$data.Entity\">User defined type</field>\r\n        this.ComplexTypes = [];\r\n        this.Enums = [];\r\n        this.Associations = [];\r\n    },\r\n    LogicalType: {},\r\n    LogicalTypeName: {},\r\n    PhysicalType: {},\r\n    PhysicalTypeName: {},\r\n    EventHandlers: {},\r\n    TableName: {},\r\n    TableOptions: { value: undefined },\r\n    ComplexTypes: {},\r\n    Enums: {},\r\n    Associations: {},\r\n    ContextType: {},\r\n    Roles: {}\r\n}, null);\r\n$data.Class.define('$data.Association', null, null, {\r\n    constructor: function (initParam) {\r\n        if (initParam) {\r\n            this.From = initParam.From;\r\n            this.FromType = initParam.FromType;\r\n            this.FromMultiplicity = initParam.FromMultiplicity;\r\n            this.FromPropertyName = initParam.FromPropertyName;\r\n            this.To = initParam.To;\r\n            this.ToType = initParam.ToType;\r\n            this.ToMultiplicity = initParam.ToMultiplicity;\r\n            this.ToPropertyName = initParam.ToPropertyName;\r\n        }\r\n    },\r\n    From: {},\r\n    FromType: {},\r\n    FromMultiplicity: {},\r\n    FromPropertyName: {},\r\n    To: {},\r\n    ToType: {},\r\n    ToMultiplicity: {},\r\n    ToPropertyName: {},\r\n    ReferentialConstraint: {}\r\n}, null);\r\n$data.Class.define('$data.ComplexType', $data.Association, null, {}, null);\r\n\r\n/**\r\n * @public\r\n * @module $data.EntityContext\r\n */\r\n/**\r\n* Provides facilities for querying and working with entity data as objects\r\n*/\r\n$data.Class.define('$data.EntityContext', null, null,\r\n{\r\n    /**\r\n     * @constructs $data.EntityContext\r\n     * Provides facilities for querying and working with entity data as objects\r\n     * @param {Object} storageProviderCfg - Storage provider specific configuration object\r\n     * @param {string} storageProviderCfg.provider - Storage provider type name: 'oData', 'indexedDb', 'webSql', 'sqLite', 'mongoDB'\r\n     * @param {string} [storageProviderCfg.oDataServiceHost=/odata.svc] - URI of OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.maxDataServiceVersion=4.0] - Maximal OData version. Provider: OData\r\n     * @param {string} [storageProviderCfg.dataServiceVersion] - version of your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.user] - login name for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.password] - password for basic auth. Provider: OData\r\n     * @param {string} [storageProviderCfg.UpdateMethod=PATCH] - HTTP verb used while updating entities, this should be configured according the accepted verb by your OData endpoint. Provider: OData\r\n     * @param {string} [storageProviderCfg.databaseName] - database name created by the following providers: webSql, sqLite, indexedDb, mongoDB\r\n     * @example <caption>initialize OData context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'oData',\r\n     *  oDataServiceHost: '/api/odata.svc'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     *\r\n     * @example <caption>initialize webSql context</caption>\r\n     * var northwind = new Northwind({\r\n     *  provider: 'webSql',\r\n     *  databaseName: 'Northwind'\r\n     * });\r\n     * northwind.onReady(function() {\r\n     *  //work with your context\r\n     * });\r\n     */\r\n    constructor: function (storageProviderCfg) {\r\n        if ($data.ItemStore && 'ContextRegister' in $data.ItemStore)\r\n            $data.ItemStore.ContextRegister.apply(this, arguments);\r\n\r\n        if (storageProviderCfg.queryCache)\r\n            this.queryCache = storageProviderCfg.queryCache;\r\n\r\n        if (\"string\" === typeof storageProviderCfg) {\r\n            if (0 === storageProviderCfg.indexOf(\"http\")) {\r\n                storageProviderCfg = {\r\n                    name: \"oData\",\r\n                    oDataServiceHost: storageProviderCfg\r\n                }\r\n            } else {\r\n                storageProviderCfg = {\r\n                    name: \"local\",\r\n                    databaseName: storageProviderCfg\r\n                }\r\n            }\r\n        }\r\n\r\n        if (\"provider\" in storageProviderCfg) {\r\n            storageProviderCfg.name = storageProviderCfg.provider;\r\n        }\r\n\r\n        //Initialize properties\r\n        this.lazyLoad = false;\r\n        this.trackChanges = false;\r\n        this._entitySetReferences = {};\r\n        this._storageModel = [];\r\n\r\n        var ctx = this;\r\n        ctx._isOK = false;\r\n\r\n        var origSuccessInitProvider = this._successInitProvider;\r\n        this._successInitProvider = function (errorOrContext) {\r\n            if (errorOrContext instanceof $data.EntityContext) {\r\n                origSuccessInitProvider(ctx);\r\n            } else {\r\n                origSuccessInitProvider(ctx, errorOrContext);\r\n            }\r\n        }\r\n\r\n        this._storageModel.getStorageModel = function (typeName) {\r\n            var name = Container.resolveName(typeName);\r\n            return ctx._storageModel[name];\r\n        };\r\n        if (typeof storageProviderCfg.name === 'string') {\r\n            var tmp = storageProviderCfg.name;\r\n            storageProviderCfg.name = [tmp];\r\n        }\r\n        var i = 0, providerType;\r\n        var providerList = [].concat(storageProviderCfg.name);\r\n        var callBack = $data.PromiseHandlerBase.createCallbackSettings({ success: this._successInitProvider, error: this._successInitProvider });\r\n\r\n        this._initStorageModelSync();\r\n        ctx._initializeEntitySets(ctx.getType());\r\n\r\n        $data.StorageProviderLoader.load(providerList, {\r\n            success: function (providerType) {\r\n                ctx.storageProvider = new providerType(storageProviderCfg, ctx);\r\n                ctx.storageProvider.setContext(ctx);\r\n                ctx.stateManager = new $data.EntityStateManager(ctx);\r\n\r\n                var contextType = ctx.getType();\r\n                if (providerType.name in contextType._storageModelCache) {\r\n                    ctx._storageModel = contextType._storageModelCache[providerType.name];\r\n                } else {\r\n                    $data.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToTypes();\r\n                    ctx._initializeStorageModel();\r\n                    contextType._storageModelCache[providerType.name] = ctx._storageModel;\r\n                }\r\n                $data.defaults.enableRelatedEntityReadMethods && ctx._applyRelatedEntityMethodsToContext();\r\n\r\n                //ctx._initializeEntitySets(contextType);\r\n                if (storageProviderCfg && storageProviderCfg.user) Object.defineProperty(ctx, 'user', { value: storageProviderCfg.user, enumerable: true });\r\n                if (storageProviderCfg && storageProviderCfg.checkPermission) Object.defineProperty(ctx, 'checkPermission', { value: storageProviderCfg.checkPermission, enumerable: true });\r\n\r\n                //ctx._isOK = false;\r\n                ctx._initializeStore(callBack);\r\n            },\r\n            error: function () {\r\n                callBack.error('Provider fallback failed!');\r\n            }\r\n        });\r\n\r\n\r\n\r\n        this.addEventListener = function (eventName, fn) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                this[delegateName] = new $data.Event(eventName, this);\r\n            }\r\n            this[delegateName].attach(fn);\r\n        };\r\n\r\n        this.removeEventListener = function (eventName, fn) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                return;\r\n            }\r\n            this[delegateName].detach(fn);\r\n        };\r\n\r\n        this.raiseEvent = function (eventName, data) {\r\n            var delegateName = \"on\" + eventName;\r\n            if (!(delegateName in this)) {\r\n                return;\r\n            }\r\n            this[delegateName].fire(data);\r\n        };\r\n\r\n\r\n        this.ready = this.onReady({\r\n            success: $data.defaultSuccessCallback,\r\n            error: function () {\r\n                if ($data.PromiseHandler !== $data.PromiseHandlerBase) {\r\n                    $data.defaultErrorCallback.apply(this, arguments);\r\n                } else {\r\n                    $data.Trace.error(arguments);\r\n                }\r\n            }\r\n        });\r\n    },\r\n    beginTransaction: function () {\r\n        var tables = null;\r\n        var callBack = null;\r\n        var isWrite = false;\r\n\r\n        function readParam(value) {\r\n            if (Guard.isNullOrUndefined(value)) return;\r\n\r\n            if (typeof value === 'boolean') {\r\n                isWrite = value;\r\n            } else if (Array.isArray(value)) {\r\n                tables = value;\r\n            } else {\r\n                callBack = value;\r\n            }\r\n        }\r\n\r\n        readParam(arguments[0]);\r\n        readParam(arguments[1]);\r\n        readParam(arguments[2]);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        callBack = pHandler.createCallback(callBack);\r\n\r\n        //callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        this.storageProvider._beginTran(tables, isWrite, callBack);\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n    _isReturnTransaction: function (transaction) {\r\n        return transaction instanceof $data.Base || transaction === 'returnTransaction';\r\n    },\r\n    _applyTransaction: function (scope, cb, args, transaction, isReturnTransaction) {\r\n        if (isReturnTransaction === true) {\r\n            if (transaction instanceof $data.Transaction) {\r\n                Array.prototype.push.call(args, transaction);\r\n                cb.apply(scope, args);\r\n            } else {\r\n                this.beginTransaction(function (tran) {\r\n                    Array.prototype.push.call(args, tran);\r\n                    cb.apply(scope, args);\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            cb.apply(scope, args);\r\n        }\r\n    },\r\n\r\n    getDataType: function (dataType) {\r\n        // Obsolate\r\n        if (typeof dataType == \"string\") {\r\n            var memDef_dataType = this[dataType];\r\n            if (memDef_dataType === undefined || memDef_dataType === null) { memDef_dataType = eval(dataType); }\r\n            return memDef_dataType;\r\n        }\r\n        return dataType;\r\n    },\r\n    _initializeEntitySets: function (ctor) {\r\n\r\n        for (var i = 0, l = this._storageModel.length; i < l; i++){\r\n            var storageModel = this._storageModel[i];\r\n            this[storageModel.ItemName] = new $data.EntitySet(storageModel.LogicalType, this, storageModel.ItemName, storageModel.EventHandlers, storageModel.Roles);\r\n            var sm = this[storageModel.ItemName];\r\n            sm.name = storageModel.ItemName;\r\n            sm.tableName = storageModel.TableName;\r\n            sm.tableOptions = storageModel.TableOptions;\r\n            sm.eventHandlers = storageModel.EventHandlers;\r\n            this._entitySetReferences[storageModel.LogicalType.name] = sm;\r\n\r\n            this._initializeActions(sm, ctor, ctor.getMemberDefinition(storageModel.ItemName));\r\n\r\n        }\r\n\r\n    },\r\n    _initializeStore: function (callBack) {\r\n        if (this.storageProvider) {\r\n            this.storageProvider.initializeStore(callBack);\r\n        }\r\n    },\r\n\r\n    _initStorageModelSync: function() {\r\n        var _memDefArray = this.getType().memberDefinitions.asArray();\r\n\r\n\r\n        for (var i = 0; i < _memDefArray.length; i++) {\r\n            var item = _memDefArray[i];\r\n            if ('dataType' in item) {\r\n                var itemResolvedDataType = Container.resolveType(item.dataType);\r\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(item.elementType);\r\n                    var storageModel = new $data.StorageModel();\r\n                    storageModel.TableName = item.tableName || item.name;\r\n                    storageModel.TableOptions = item.tableOptions;\r\n                    storageModel.ItemName = item.name;\r\n                    storageModel.LogicalType = elementType;\r\n                    storageModel.LogicalTypeName = elementType.name;\r\n                    storageModel.PhysicalTypeName = $data.EntityContext._convertLogicalTypeNameToPhysical(storageModel.LogicalTypeName);\r\n                    storageModel.ContextType = this.getType();\r\n                    storageModel.Roles = item.roles;\r\n\t\t    if (item.indices) {\r\n                        storageModel.indices = item.indices;\r\n                    }\r\n                    if (item.beforeCreate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeCreate = item.beforeCreate;\r\n                    }\r\n                    if (item.beforeRead) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeRead = item.beforeRead;\r\n                    }\r\n                    if (item.beforeUpdate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeUpdate = item.beforeUpdate;\r\n                    }\r\n                    if (item.beforeDelete) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.beforeDelete = item.beforeDelete;\r\n                    }\r\n                    if (item.afterCreate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterCreate = item.afterCreate;\r\n                    }\r\n                    if (item.afterRead) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterRead = item.afterRead;\r\n                    }\r\n                    if (item.afterUpdate) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterUpdate = item.afterUpdate;\r\n                    }\r\n                    if (item.afterDelete) {\r\n                        if (!storageModel.EventHandlers) storageModel.EventHandlers = {};\r\n                        storageModel.EventHandlers.afterDelete = item.afterDelete;\r\n                    }\r\n                    this._storageModel.push(storageModel);\r\n                    var name = Container.resolveName(elementType);\r\n                    this._storageModel[name] = storageModel;\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    _initializeStorageModel: function () {\r\n\r\n\r\n        var _memDefArray = this.getType().memberDefinitions.asArray();\r\n\r\n\r\n        if (typeof intellisense !== 'undefined')\r\n            return;\r\n\r\n\r\n        for (var i = 0; i < this._storageModel.length; i++) {\r\n            var storageModel = this._storageModel[i];\r\n\r\n            ///<param name=\"storageModel\" type=\"$data.StorageModel\">Storage model item</param>\r\n            var dbEntityInstanceDefinition = {};\r\n\r\n            storageModel.Associations = storageModel.Associations || [];\r\n            storageModel.ComplexTypes = storageModel.ComplexTypes || [];\r\n            storageModel.Enums = storageModel.Enums || [];\r\n            for (var j = 0; j < storageModel.LogicalType.memberDefinitions.getPublicMappedProperties().length; j++) {\r\n                var memDef = storageModel.LogicalType.memberDefinitions.getPublicMappedProperties()[j];\r\n                ///<param name=\"memDef\" type=\"MemberDefinition\">Member definition instance</param>\r\n\r\n                var memDefResolvedDataType = Container.resolveType(memDef.dataType);\r\n\r\n                if (((this.storageProvider.supportedDataTypes.indexOf(memDefResolvedDataType) > -1) || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.Enum)))\r\n                    && Guard.isNullOrUndefined(memDef.inverseProperty))\r\n                {\r\n                    //copy member definition\r\n                    var t = JSON.parse(JSON.stringify(memDef));\r\n                    //change datatype to resolved type\r\n                    t.dataType = memDefResolvedDataType;\r\n                    dbEntityInstanceDefinition[memDef.name] = t;\r\n\r\n                    if(memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.Enum)){\r\n                         this._build_EnumDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef)\r\n                    }\r\n\r\n                    continue;\r\n                }\r\n\r\n                this._buildDbType_navigationPropertyComplite(memDef, memDefResolvedDataType, storageModel);\r\n\r\n                //var memDef_dataType = this.getDataType(memDef.dataType);\r\n                if ((memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) &&\r\n                    (memDef.inverseProperty && memDef.inverseProperty !== '$$unbound')) {\r\n                    this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                } else {\r\n                    if (memDef.inverseProperty) {\r\n                        if (memDef.inverseProperty === '$$unbound') {\r\n                            //member definition is navigation but not back reference\r\n                            if (memDefResolvedDataType === $data.Array) {\r\n                                this._buildDbType_Collection_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                            } else {\r\n                                this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                            }\r\n                        } else {\r\n                            //member definition is navigation property one..one or one..many case\r\n                            var fields = memDefResolvedDataType.memberDefinitions.getMember(memDef.inverseProperty);\r\n                            if (fields) {\r\n                                if (fields.elementType) {\r\n                                    //member definition is one..many connection\r\n                                    var referealResolvedType = Container.resolveType(fields.elementType);\r\n                                    if (referealResolvedType === storageModel.LogicalType) {\r\n                                        this._buildDbType_ElementType_OneManyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                                    } else {\r\n                                        if (typeof intellisense === 'undefined') {\r\n                                            Guard.raise(new Exception('Inverse property not valid, refereed item element type not match: ' + storageModel.LogicalTypeName, ', property: ' + memDef.name));\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    //member definition is one..one connection\r\n                                    this._buildDbType_ElementType_OneOneDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                                }\r\n                            } else {\r\n                                if (typeof intellisense === 'undefined') {\r\n                                    Guard.raise(new Exception('Inverse property not valid'));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        //member definition is a complex type\r\n                        this._buildDbType_addComplexTypePropertyDefinition(dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef);\r\n                    }\r\n                }\r\n            }\r\n            this._buildDbType_modifyInstanceDefinition(dbEntityInstanceDefinition, storageModel, this);\r\n            var dbEntityClassDefinition = {};\r\n            dbEntityClassDefinition.convertTo = this._buildDbType_generateConvertToFunction(storageModel, this);\r\n            this._buildDbType_modifyClassDefinition(dbEntityClassDefinition, storageModel, this);\r\n\r\n            //create physical type\r\n            //TODO\r\n            storageModel.PhysicalType = $data.Class.define(storageModel.PhysicalTypeName, $data.Entity, storageModel.LogicalType.container, dbEntityInstanceDefinition, dbEntityClassDefinition);\r\n        }\r\n    },\r\n    _initializeActions: function (es, ctor, esDef) {\r\n        if (esDef && esDef.actions) {\r\n            var actionKeys = Object.keys(esDef.actions);\r\n            for (var i = 0; i < actionKeys.length; i++) {\r\n                var actionName = actionKeys[i];\r\n                var action = esDef.actions[actionName];\r\n                if (typeof action === 'function') {\r\n                    es[actionName] = action;\r\n                } else {\r\n                    var actionDef = $data.MemberDefinition.translateDefinition(action, actionName, ctor);\r\n                    if (actionDef instanceof $data.MemberDefinition && actionDef.kind === $data.MemberTypes.method) {\r\n                        es[actionName] = actionDef.method;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _buildDbType_navigationPropertyComplite: function (memDef, memDefResolvedDataType, storageModel) {\r\n        if (!memDef.inverseProperty) {\r\n            var refMemDefs = null;\r\n            if (memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) {\r\n                var refStorageModel = this._storageModel.getStorageModel(Container.resolveType(memDef.elementType));\r\n                if (refStorageModel) {\r\n                    refMemDefs = [];\r\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < pubDefs.length; i++) {\r\n                        var m = pubDefs[i];\r\n                        if ((m.inverseProperty == memDef.name) && (Container.resolveType(m.dataType) === Container.resolveType(storageModel.LogicalType)))\r\n                            refMemDefs.push(m);\r\n                    }\r\n                }\r\n            } else {\r\n                var refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\r\n                if (refStorageModel) {\r\n                    refMemDefs = [];\r\n                    var pubDefs = refStorageModel.LogicalType.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < pubDefs.length; i++) {\r\n                        var m = pubDefs[i];\r\n                        if (m.elementType && ((m.inverseProperty == memDef.name) && (Container.resolveType(m.elementType) === storageModel.LogicalType)))\r\n                            refMemDefs.push(m);\r\n                        else if ((m.inverseProperty == memDef.name) && (Container.resolveType(m.dataType) === storageModel.LogicalType))\r\n                            refMemDefs.push(m);\r\n                    }\r\n                }\r\n            }\r\n            if (refMemDefs) {\r\n                if (refMemDefs.length > 1) {\r\n                    if (typeof intellisense !== 'undefined') {\r\n                        Guard.raise(new Exception('More than one inverse property refer to this member definition: ' + memDef.name + ', type: ' + Container.resolveName(storageModel.LogicalType)));\r\n                    }\r\n                }\r\n                var refMemDef = refMemDefs.pop();\r\n                if (refMemDef) {\r\n                    memDef.inverseProperty = refMemDef.name;\r\n                }\r\n            }\r\n        } else {\r\n            var refStorageModel = null;\r\n            if (memDefResolvedDataType === $data.Array || (memDefResolvedDataType.isAssignableTo && memDefResolvedDataType.isAssignableTo($data.EntitySet))) {\r\n                refStorageModel = this._storageModel.getStorageModel(Container.resolveType(memDef.elementType));\r\n\r\n            } else {\r\n                refStorageModel = this._storageModel.getStorageModel(memDefResolvedDataType);\r\n            }\r\n\r\n            var p = refStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\r\n            if (p) {\r\n                if (p.inverseProperty) {\r\n                    if (p.inverseProperty != memDef.name) {\r\n                        if (typeof intellisense === 'undefined') {\r\n                            Guard.raise(new Exception('Inverse property mismatch'));\r\n                        }\r\n                    }\r\n                } else {\r\n                    p.inverseProperty = memDef.name;\r\n                }\r\n            }\r\n\r\n        }\r\n    },\r\n    _buildDbType_generateConvertToFunction: function (storageModel) { return function (instance) { return instance; }; },\r\n    _buildDbType_modifyInstanceDefinition: function (instanceDefinition, storageModel) { return; },\r\n    _buildDbType_modifyClassDefinition: function (classDefinition, storageModel) { return; },\r\n    _buildDbType_addComplexTypePropertyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name, $data.MemberTypes.complexProperty);\r\n        var complexType = this._createComplexElement(storageModel.LogicalType, \"\", memDef.name, memDef_dataType, \"\", \"\");\r\n        storageModel.ComplexTypes[memDef.name] = complexType;\r\n        storageModel.ComplexTypes.push(complexType);\r\n    },\r\n    _buildDbType_Collection_OneManyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.elementType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '0..1';\r\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"*\", memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _buildDbType_ElementType_OneManyDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.dataType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition for the following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n        var associationType = memDef.inverseProperty === '$$unbound' ? '$$unbound' : '*';\r\n        var association = this._addAssociationElement(storageModel.LogicalType, associationType, memDef.name, refereedStorageModel.LogicalType, \"0..1\", memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _buildDbType_ElementType_OneOneDefinition: function (dbEntityInstanceDefinition, storageModel, memDef_dataType, memDef) {\r\n        var refereedType = Container.resolveType(memDef.dataType);\r\n        if (refereedType === undefined || refereedType === null) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"Element type definition error\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n        var refereedStorageModel = this._storageModel.getStorageModel(refereedType);;\r\n        //var refereedStorageModel = this._storageModel.filter(function (s) { return s.LogicalType === refereedType; })[0];\r\n        if (!refereedStorageModel) {\r\n            if (typeof intellisense === 'undefined') {\r\n                Guard.raise(new Exception(\"No EntitySet definition following element type\", \"Field definition\", memDef));\r\n            }\r\n        }\r\n\r\n        var refereedMemberDefinition = refereedStorageModel.LogicalType.memberDefinitions.getMember(memDef.inverseProperty);\r\n        if (!refereedMemberDefinition.required && !memDef.required) { if (typeof intellisense === 'undefined') { if (typeof intellisense === 'undefined') { Guard.raise(new Exception('In one to one connection, one side must required!', 'One to One connection', memDef)); } } }\r\n\r\n        this._addNavigationPropertyDefinition(dbEntityInstanceDefinition, memDef, memDef.name);\r\n\r\n        var association = this._addAssociationElement(storageModel.LogicalType,\r\n                                                 memDef.required ? \"0..1\" : \"1\",\r\n                                                 memDef.name,\r\n                                                 refereedStorageModel.LogicalType,\r\n                                                 memDef.required ? \"1\" : \"0..1\",\r\n                                                 memDef.inverseProperty);\r\n        storageModel.Associations[memDef.name] = association;\r\n        storageModel.Associations.push(association);\r\n    },\r\n    _addNavigationPropertyDefinition: function (definition, member, associationName, kind) {\r\n        var t = JSON.parse(JSON.stringify(member));\r\n        t.dataType = $data.EntitySet;\r\n        t.notMapped = true;\r\n        t.kind = kind ? kind : $data.MemberTypes.navProperty;\r\n        t.association = associationName;\r\n        definition[member.name] = t;\r\n    },\r\n    _addAssociationElement: function (fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\r\n        return new $data.Association({\r\n            From: fromType.name,\r\n            FromType: fromType,\r\n            FromMultiplicity: fromMultiplicity,\r\n            FromPropertyName: fromPropName,\r\n            To: toType.name,\r\n            ToType: toType,\r\n            ToMultiplicity: toMultiplicity,\r\n            ReferentialConstraint: [],\r\n            ToPropertyName: toPropName\r\n        });\r\n    },\r\n    _createComplexElement: function (fromType, fromMultiplicity, fromPropName, toType, toMultiplicity, toPropName) {\r\n        return new $data.ComplexType({\r\n            From: fromType.name,\r\n            FromType: fromType,\r\n            FromMultiplicity: fromMultiplicity,\r\n            FromPropertyName: fromPropName,\r\n            To: toType.name,\r\n            ToType: toType,\r\n            ToMultiplicity: toMultiplicity,\r\n            ReferentialConstraint: [],\r\n            ToPropertyName: toPropName\r\n        });\r\n    },\r\n    _build_EnumDefinition: function (dbEntityInstanceDefinition, storageModel, memDefResolvedDataType, memDef) {\r\n        storageModel.Enums.push(memDefResolvedDataType);\r\n\r\n        var typeName = Container.resolveName(memDefResolvedDataType);\r\n        var converterGroups = this.storageProvider.fieldConverter;\r\n\r\n        var createEnumConverter = function(converterGroup){\r\n            converterGroup[typeName] = function(value){\r\n                return converterGroup[\"$data.Enum\"].call(this, value, memDefResolvedDataType);\r\n            }\r\n        }\r\n\r\n        for (var i in converterGroups) {\r\n            if (!converterGroups[i][typeName] && converterGroups[i][\"$data.Enum\"]) {\r\n                createEnumConverter(converterGroups[i])\r\n            }\r\n        }\r\n    },\r\n\r\n    _successInitProvider: function (context, error) {\r\n        if (context instanceof $data.EntityContext && context._isOK !== undefined) {\r\n            if (!error) {\r\n                context._isOK = true;\r\n                if (context.onReadyFunction) {\r\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\r\n                        context.onReadyFunction[i].success(context);\r\n                    }\r\n                    context.onReadyFunction = undefined;\r\n                }\r\n            } else {\r\n                context._isOK = error;\r\n                if (context.onReadyFunction) {\r\n                    for (var i = 0; i < context.onReadyFunction.length; i++) {\r\n                        context.onReadyFunction[i].error(error);\r\n                    }\r\n                    context.onReadyFunction = undefined;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * Sets the callback function to be called when the initialization of the {@link $data.EntityContext} has successfully finished.\r\n     * @event $data.EntityContext#onReady\r\n     * @param {function|function[]} fn - Success callback\r\n     * @returns {$.Deferred}\r\n     */\r\n    onReady: function (fn) {\r\n        /// <signature>\r\n        ///     <summary>\r\n        ///\r\n        ///     </summary>\r\n        ///     <param name=\"successCallback\" type=\"Function\">\r\n        ///         <summary>Success callback</summary>\r\n        ///         <param name=\"entityContext\" type=\"$data.EntityContext\">Current entityContext object</param>\r\n        ///     </param>\r\n        ///     <returns type=\"\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>\r\n        ///         Sets the callback functions to be called when the initialization of the EntityContext has finished.\r\n        ///     </summary>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        var pHandler = new $data.PromiseHandler();\r\n        var callBack = pHandler.createCallback(fn);\r\n        if (this._isOK === true) {\r\n            callBack.success(this);\r\n        } else if (this._isOK !== false) {\r\n            callBack.error(this._isOK);\r\n        } else {\r\n            this.onReadyFunction = this.onReadyFunction || [];\r\n            this.onReadyFunction.push(callBack);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n    ready: { type: $data.Promise },\r\n    getEntitySetFromElementType: function (elementType) {\r\n        /// <signature>\r\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\r\n        ///     <param name=\"elementType\" type=\"Function\" />\r\n        ///     <returns type=\"$data.EntitySet\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Gets the matching EntitySet for an element type.</summary>\r\n        ///     <param name=\"elementType\" type=\"String\" />\r\n        ///     <returns type=\"$data.EntitySet\" />\r\n        /// </signature>\r\n        var result = this._entitySetReferences[elementType];\r\n        if (!result) {\r\n            try {\r\n                result = this._entitySetReferences[eval(elementType).name];\r\n            } catch (ex) { }\r\n        }\r\n        return result;\r\n    },\r\n    executeQuery: function (queryable, callBack, transaction) {\r\n        var query = new $data.Query(queryable.expression, queryable.defaultType, this);\r\n        query.transaction = transaction instanceof $data.Transaction ? transaction : undefined;\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        var that = this;\r\n        var clbWrapper = {};\r\n        clbWrapper.success = that.executeQuerySuccess(that, returnTransaction, callBack);\r\n        clbWrapper.error = that.executeQueryError(that, returnTransaction, callBack);\r\n\r\n        var sets = query.getEntitySets();\r\n\r\n        var authorizedFn = function () {\r\n            var ex = true;\r\n            var wait = false;\r\n            var ctx = that;\r\n\r\n            var readyFn = function (cancel) {\r\n                if (cancel === false) ex = false;\r\n\r\n                if (ex) {\r\n                    if (query.transaction) {\r\n                        if ($data.QueryCache && $data.QueryCache.isInCache(that, query)) {\r\n                            $data.QueryCache.executeQuery(that, query, clbWrapper);\r\n                        } else {\r\n                            ctx.storageProvider.executeQuery(query, clbWrapper);\r\n                        }\r\n                    } else {\r\n                        ctx.beginTransaction(function (tran) {\r\n                            query.transaction = tran;\r\n                            if ($data.QueryCache && $data.QueryCache.isInCache(that, query)) {\r\n                                $data.QueryCache.executeQuery(that, query, clbWrapper);\r\n                            } else {\r\n                                ctx.storageProvider.executeQuery(query, clbWrapper);\r\n                            }\r\n                        });\r\n                    }\r\n                } else {\r\n                    query.rawDataList = [];\r\n                    query.result = [];\r\n                    clbWrapper.success(query);\r\n                }\r\n            };\r\n\r\n            var i = 0;\r\n            var callbackFn = function (cancel) {\r\n                if (cancel === false) ex = false;\r\n\r\n                var es = sets[i];\r\n                if (es.beforeRead) {\r\n                    i++;\r\n                    var r = es.beforeRead.call(this, sets, query);\r\n                    if (typeof r === 'function') {\r\n                        r.call(this, (i < sets.length && ex) ? callbackFn : readyFn, sets, query);\r\n                    } else {\r\n                        if (r === false) ex = false;\r\n\r\n                        if (i < sets.length && ex) {\r\n                            callbackFn();\r\n                        } else readyFn();\r\n                    }\r\n                } else readyFn();\r\n            };\r\n\r\n            if (sets.length) callbackFn();\r\n            else readyFn();\r\n        };\r\n\r\n        if (this.user && this.checkPermission) {\r\n            this.checkPermission(query.expression.nodeType === $data.Expressions.ExpressionType.BatchDelete ? $data.Access.DeleteBatch : $data.Access.Read, this.user, sets, {\r\n                success: authorizedFn,\r\n                error: clbWrapper.error\r\n            });\r\n        } else authorizedFn();\r\n    },\r\n    executeQuerySuccess: function (that, returnTransaction, callBack) {\r\n        return function (query) {\r\n            if ($data.QueryCache && $data.QueryCache.isCacheable(that, query)) {\r\n                $data.QueryCache.addToCache(that, query);\r\n            }\r\n\r\n            query.buildResultSet(that);\r\n\r\n            if ($data.ItemStore && 'QueryResultModifier' in $data.ItemStore)\r\n                $data.ItemStore.QueryResultModifier.call(that, query);\r\n\r\n            var successResult;\r\n\r\n            if (query.expression.nodeType === $data.Expressions.ExpressionType.Single ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Find ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Count ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.BatchDelete ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Some ||\r\n                query.expression.nodeType === $data.Expressions.ExpressionType.Every) {\r\n                if (query.result.length !== 1) {\r\n                    callBack.error(new Exception('result count failed'));\r\n                    return;\r\n                }\r\n\r\n                successResult = query.result[0];\r\n            } else if (query.expression.nodeType === $data.Expressions.ExpressionType.First) {\r\n                if (query.result.length === 0) {\r\n                    callBack.error(new Exception('result count failed'));\r\n                    return;\r\n                }\r\n\r\n                successResult = query.result[0];\r\n            } else {\r\n                if (typeof query.__count === 'number' && query.result)\r\n                    query.result.totalCount = query.__count;\r\n\r\n                that.storageProvider._buildContinuationFunction(that, query);\r\n\r\n                successResult = query.result;\r\n            }\r\n\r\n            var readyFn = function () {\r\n                that._applyTransaction(callBack, callBack.success, [successResult], query.transaction, returnTransaction);\r\n\r\n                /*if (returnTransaction === true) {\r\n                    if (query.transaction)\r\n                        callBack.success(successResult, query.transaction);\r\n                    else {\r\n                        that.beginTransaction(function (tran) {\r\n                            callBack.success(successResult, tran);\r\n                        });\r\n                    }\r\n                }\r\n                else\r\n                    callBack.success(successResult);*/\r\n            };\r\n\r\n            var i = 0;\r\n            var sets = query.getEntitySets();\r\n\r\n            var callbackFn = function () {\r\n                var es = sets[i];\r\n                if (es.afterRead) {\r\n                    i++;\r\n                    var r = es.afterRead.call(this, successResult, sets, query);\r\n                    if (typeof r === 'function') {\r\n                        r.call(this, i < sets.length ? callbackFn : readyFn, successResult, sets, query);\r\n                    } else {\r\n                        if (i < sets.length) {\r\n                            callbackFn();\r\n                        } else readyFn();\r\n                    }\r\n                } else readyFn();\r\n            }\r\n\r\n            if (sets.length) callbackFn();\r\n            else readyFn();\r\n        };\r\n    },\r\n    executeQueryError: function (that, returnTransaction, callBack) {\r\n        return function () {\r\n            if (returnTransaction)\r\n                callBack.error.apply(this, arguments);\r\n            else\r\n                callBack.error.apply(this, Array.prototype.filter.call(arguments, function (p) { return !(p instanceof $data.Transaction); }));\r\n        };\r\n    },\r\n\r\n\r\n    batchExecuteQuery: function (queryableOptions, callBack, transaction) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(callBack);\r\n\r\n        var self = this;\r\n        var methodOperationMappings = {\r\n            count: 'length',\r\n            length: 'length',\r\n            forEach: 'forEach',\r\n            toArray: 'toArray',\r\n            single: 'single',\r\n            some: 'some',\r\n            every: 'every',\r\n            first: 'first',\r\n            removeAll: 'batchDelete'\r\n        };\r\n        var methodFrameMappings = {\r\n            count: 'CountExpression',\r\n            length: 'CountExpression',\r\n            forEach: 'ForEachExpression',\r\n            toArray: 'ToArrayExpression',\r\n            single: 'SingleExpression',\r\n            some: 'SomeExpression',\r\n            every: 'EveryExpression',\r\n            first: 'FirstExpression',\r\n            removeAll: 'BatchDeleteExpression'\r\n        };\r\n\r\n\r\n        var returnFunc = function () {\r\n            return pHandler.getPromise();\r\n        }\r\n\r\n        if (typeof queryableOptions.length != \"number\") {\r\n            cbWrapper.error(new Exception('QueryableOptions array parameter missing', 'Invalid arguments'));\r\n            return returnFunc();\r\n        }\r\n\r\n        var qOptions = [];\r\n        for (var i = 0; i < queryableOptions.length; i++) {\r\n            var queryOption = {};\r\n            if (queryableOptions[i] instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i];\r\n                queryOption.method = 'toArray';\r\n            } else if (queryableOptions[i].queryable instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i].queryable;\r\n                queryOption.method = queryableOptions[i].method || 'toArray';\r\n            } else if (queryableOptions[i][0] instanceof $data.Queryable) {\r\n                queryOption.queryable = queryableOptions[i][0];\r\n                queryOption.method = queryableOptions[i][1] || 'toArray';\r\n            } else {\r\n                cbWrapper.error(new Exception('$data.Queryable is missing in queryableOptions at index ' + i, 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n\r\n            if (queryOption.queryable.entityContext !== self) {\r\n                cbWrapper.error(new Exception('Queryable at index ' + i + ' contains different entity context', 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n\r\n            queryOption.queryable._checkOperation(methodOperationMappings[queryOption.method] || queryOption.method);\r\n            qOptions.push(queryOption);\r\n        }\r\n\r\n\r\n        var executableQueries = [];\r\n        for (var i = 0; i < qOptions.length; i++) {\r\n            var queryOption = qOptions[i];\r\n\r\n            var frameExpressionName = methodFrameMappings[queryOption.method] || queryOption.method;\r\n            if (frameExpressionName && $data.Expressions[frameExpressionName] && $data.Expressions[frameExpressionName].isAssignableTo($data.Expressions.FrameOperator)) {\r\n\r\n                var queryExpression = Container['create' + frameExpressionName](queryOption.queryable.expression);\r\n                var preparator = Container.createQueryExpressionCreator(queryOption.queryable.entityContext);\r\n\r\n                try {\r\n                    var expression = preparator.Visit(queryExpression);\r\n                    queryOption.queryable.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n                    var queryable = Container.createQueryable(queryOption.queryable, expression);\r\n                    executableQueries.push(queryable);\r\n                } catch (e) {\r\n                    cbWrapper.error(e);\r\n                    return returnFunc();\r\n                }\r\n            } else {\r\n                cbWrapper.error(new Exception('Invalid frame method \\'' + frameExpressionName + '\\' in queryableOptions at index ' + i, 'Invalid arguments'));\r\n                return returnFunc();\r\n            }\r\n        }\r\n\r\n        var queryResults = [];\r\n        if (self.storageProvider.supportedContextOperation && self.storageProvider.supportedContextOperation.batchExecuteQuery) {\r\n            //wrap queries\r\n            var batchExecuteQueryExpression = Container.createBatchExecuteQueryExpression(executableQueries.map(function (queryable) {\r\n                return new $data.Query(queryable.expression, queryable.defaultType, self);\r\n            }));\r\n\r\n            var batchExecuteQuery = Container.createQueryable(self, batchExecuteQueryExpression);\r\n            self.executeQuery(batchExecuteQuery, {\r\n                success: function (results) {\r\n                    var batchResult = [];\r\n                    var hasError = false;\r\n                    var errorValue = null;\r\n                    for (var i = 0; i < results.length && !hasError; i++) {\r\n                        var query = results[i];\r\n                        self.executeQuerySuccess(self, returnTransaction, {\r\n                            success: function (result) {\r\n                                batchResult.push(result);\r\n                            },\r\n                            error: function (err) {\r\n                                hasError = true;\r\n                                errorValue = err;\r\n                            }\r\n                        })(query);\r\n                    }\r\n                    if (!hasError) {\r\n                        self._applyTransaction(cbWrapper, cbWrapper.success, [batchResult], batchExecuteQuery.transaction, returnTransaction);\r\n                    } else {\r\n                        cbWrapper.error(errorValue);\r\n                    }\r\n\r\n                },\r\n                error: cbWrapper.error\r\n            }, transaction);\r\n        } else {\r\n            var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n            var readIterator = function (queries, index, iteratorCallback, itTransaction) {\r\n                var query = queries[index];\r\n                if (!query) {\r\n                    return iteratorCallback.success(itTransaction);\r\n                }\r\n\r\n                self.executeQuery(executableQueries[index], {\r\n                    success: function (result, tr) {\r\n                        queryResults.push(result);\r\n                        readIterator(executableQueries, index + 1, iteratorCallback, tr);\r\n                    },\r\n                    error: iteratorCallback.error\r\n                }, itTransaction);\r\n            }\r\n\r\n            readIterator(executableQueries, 0, {\r\n                success: function (lastTran) {\r\n                    self._applyTransaction(cbWrapper, cbWrapper.success, [queryResults], lastTran, returnTransaction);\r\n                },\r\n                error: cbWrapper.error\r\n            }, transaction)\r\n        }\r\n        return returnFunc();\r\n    },\r\n\r\n    /**\r\n     * Saves the changes made to the context.\r\n     *\r\n     * @memberof $data.EntityContext\r\n     * @instance\r\n     * @param {Function|Object} callback - callback function or callback object with success & error properties\r\n     * @param {$data.Transaction} transaction - Transaction object\r\n     * @returns $.Deferred\r\n     *\r\n     * @example <caption>saveChanges with simple callback function</caption>\r\n     * context.saveChanges(function(db) {\r\n     *  //success\r\n     * });\r\n     *\r\n     * @example <caption>saveChanges with callback object</caption>\r\n     * var myCallback = {\r\n     *  success: function(db) { //succeess },\r\n     *  error: function(errors) { console.log(errors); }\r\n     * }\r\n     * context.saveChanges(myCallback);\r\n     */\r\n    saveChanges: function (callback, transaction) {\r\n        if ($data.QueryCache) {\r\n            $data.QueryCache.reset(this);\r\n        }\r\n\r\n        var changedEntities = [];\r\n        var trackedEntities = this.stateManager.trackedEntities;\r\n        var pHandler = new $data.PromiseHandler();\r\n        var clbWrapper = pHandler.createCallback(callback);\r\n        var pHandlerResult = pHandler.getPromise();\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        var skipItems = [];\r\n        while (trackedEntities.length > 0) {\r\n            var additionalEntities = [];\r\n            //trackedEntities.forEach(function (entityCachedItem) {\r\n            for (var i = 0; i < trackedEntities.length; i++) {\r\n                var entityCachedItem = trackedEntities[i];\r\n\r\n                var sModel = this._storageModel.getStorageModel(entityCachedItem.data.getType());\r\n                if (entityCachedItem.data.entityState == $data.EntityState.Unchanged) {\r\n                    entityCachedItem.skipSave = true;\r\n                    skipItems.push(entityCachedItem.data);\r\n                } else {\r\n                    if (entityCachedItem.data.entityState == $data.EntityState.Modified) {\r\n                        if (entityCachedItem.data.changedProperties) {\r\n                            var changeStoredProperty = entityCachedItem.data.changedProperties.some(function (p) {\r\n                                var pMemDef = sModel.PhysicalType.memberDefinitions.getMember(p.name);\r\n                                if (pMemDef.kind == $data.MemberTypes.navProperty) {\r\n                                    var a = sModel.Associations[pMemDef.association];\r\n                                    var multiplicity = a.FromMultiplicity + a.ToMultiplicity;\r\n                                    return ((multiplicity == '*0..1') || (multiplicity == '0..11'))\r\n                                }\r\n                                return true;\r\n                            });\r\n                            if (!changeStoredProperty) {\r\n                                entityCachedItem.skipSave = true;\r\n                                skipItems.push(entityCachedItem.data);\r\n                            }\r\n                        } else {\r\n                            entityCachedItem.skipSave = true;\r\n                            skipItems.push(entityCachedItem.data);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //type before events with items\r\n                this.processEntityTypeBeforeEventHandler(skipItems, entityCachedItem);\r\n\r\n                var navigationProperties = [];\r\n                var smPhyMemDefs = sModel.PhysicalType.memberDefinitions.asArray();\r\n                for (var ism = 0; ism < smPhyMemDefs.length; ism++) {\r\n                    var p = smPhyMemDefs[ism];\r\n                    if (p.kind == $data.MemberTypes.navProperty)\r\n                        navigationProperties.push(p);\r\n                }\r\n                //var navigationProperties = sModel.PhysicalType.memberDefinitions.asArray().filter(function (p) { return p.kind == $data.MemberTypes.navProperty; });\r\n                //navigationProperties.forEach(function (navProp) {\r\n                for (var j = 0; j < navigationProperties.length; j++) {\r\n                    var navProp = navigationProperties[j];\r\n\r\n                    var association = sModel.Associations[navProp.name]; //eg.:\"Profile\"\r\n                    var name = navProp.name; //eg.: \"Profile\"\r\n                    var navPropertyName = association.ToPropertyName; //eg.: User\r\n\r\n                    var connectedDataList = [].concat(entityCachedItem.data[name]);\r\n                    //connectedDataList.forEach(function (data) {\r\n                    for (var k = 0; k < connectedDataList.length; k++) {\r\n                        var data = connectedDataList[k];\r\n\r\n                        if (data) {\r\n                            var value = data[navPropertyName];\r\n                            var associationType = association.FromMultiplicity + association.ToMultiplicity;\r\n                            if (association.FromMultiplicity === '$$unbound') {\r\n                                if (data instanceof $data.Array) {\r\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                    //data.forEach(function (dataItem) {\r\n                                    for (var l = 0; l < data.length; l++) {\r\n                                        var dataItem = data[l];\r\n\r\n                                        if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                            entityCachedItem.dependentOn.push(data);\r\n                                        }\r\n                                    }\r\n                                    //}, this);\r\n                                } else {\r\n                                    entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                    if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                        entityCachedItem.dependentOn.push(data);\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                switch (associationType) {\r\n                                    case \"*0..1\": //Array\r\n                                        if (value) {\r\n                                            if (value instanceof Array) {\r\n                                                if (value.indexOf(entityCachedItem.data) == -1) {\r\n                                                    value.push(entityCachedItem.data);\r\n                                                    data.initData[navPropertyName] = value;\r\n                                                    data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                                }\r\n                                            } else {\r\n                                                if (typeof intellisense === 'undefined') {\r\n                                                    Guard.raise(\"Item must be array or subtype of array\");\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            data.initData[navPropertyName] = [entityCachedItem.data];\r\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                        }\r\n                                        break;\r\n                                    default: //Item\r\n                                        if (value) {\r\n                                            if (value !== entityCachedItem.data) {\r\n                                                if (typeof intellisense === 'undefined') {\r\n                                                    Guard.raise(\"Integrity check error! Item assigned to another entity!\");\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            data.initData[navPropertyName] = entityCachedItem.data; //set back reference for live object\r\n                                            data._setPropertyChanged(association.ToType.getMemberDefinition(navPropertyName));\r\n                                        }\r\n                                        break;\r\n                                }\r\n                                switch (associationType) {\r\n                                    case \"*0..1\":\r\n                                    case \"0..11\":\r\n                                        entityCachedItem.dependentOn = entityCachedItem.dependentOn || [];\r\n                                        if ((entityCachedItem.dependentOn.indexOf(data) < 0) && (data.skipSave !== true)) {\r\n                                            entityCachedItem.dependentOn.push(data);\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            }\r\n                            if (!data.entityState) {\r\n                                //if (data.storeToken === this.storeToken) {\r\n                                //    data.entityState = $data.EntityState.Modified;\r\n                                //} else {\r\n                                //    data.entityState = $data.EntityState.Added;\r\n                                //}\r\n                                this.discoverDependentItemEntityState(data);\r\n                            }\r\n                            if (additionalEntities.indexOf(data) == -1) {\r\n                                additionalEntities.push(data);\r\n                            }\r\n                        }\r\n                    }\r\n                    //}, this);\r\n                }\r\n                //}, this);\r\n            }\r\n            //}, this);\r\n\r\n            //trackedEntities.forEach(function (entity) {\r\n            for (var i = 0; i < trackedEntities.length; i++) {\r\n                var entity = trackedEntities[i];\r\n\r\n                if (entity.skipSave !== true) { changedEntities.push(entity); }\r\n            }\r\n            //});\r\n\r\n            trackedEntities = [];\r\n            //additionalEntities.forEach(function (item) {\r\n            for (var i = 0; i < additionalEntities.length; i++) {\r\n                var item = additionalEntities[i];\r\n\r\n                if (!skipItems.some(function (entity) { return entity == item; })) {\r\n                    if (!changedEntities.some(function (entity) { return entity.data == item; })) {\r\n                        trackedEntities.push({ data: item, entitySet: this.getEntitySetFromElementType(item.getType().name) });\r\n                    }\r\n                }\r\n            }\r\n            //}, this);\r\n        }\r\n\r\n\r\n        //changedEntities.forEach(function (d) {\r\n        for (var j = 0; j < changedEntities.length; j++) {\r\n            var d = changedEntities[j];\r\n\r\n            if (d.dependentOn) {\r\n                var temp = [];\r\n                for (var i = 0; i < d.dependentOn.length; i++) {\r\n                    if (skipItems.indexOf(d.dependentOn[i]) < 0) {\r\n                        temp.push(d.dependentOn[i]);\r\n                    } else {\r\n                        d.additionalDependentOn = d.additionalDependentOn || [];\r\n                        d.additionalDependentOn.push(d.dependentOn[i]);\r\n                    }\r\n                }\r\n                d.dependentOn = temp;\r\n            }\r\n        }\r\n        //});\r\n        skipItems = null;\r\n        var ctx = this;\r\n        if (changedEntities.length == 0) {\r\n            this.stateManager.trackedEntities.length = 0;\r\n            ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\r\n\r\n            /*if (returnTransaction) {\r\n                clbWrapper.success(0, transaction);\r\n            } else {\r\n                clbWrapper.success(0);\r\n            }*/\r\n            return pHandlerResult;\r\n        }\r\n\r\n        //validate entities\r\n        var errors = [];\r\n        //changedEntities.forEach(function (entity) {\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var entity = changedEntities[i];\r\n\r\n            if (entity.data.entityState === $data.EntityState.Added) {\r\n                //entity.data.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                for (var j = 0; j < entity.data.getType().memberDefinitions.getPublicMappedProperties().length; j++) {\r\n                    var memDef = entity.data.getType().memberDefinitions.getPublicMappedProperties()[j];\r\n\r\n                    var memDefType = Container.resolveType(memDef.type);\r\n                    if (memDef.required && !memDef.computed && !entity.data[memDef.name] && !memDef.isDependentProperty) {\r\n                        switch (memDefType) {\r\n                            case $data.String:\r\n                            case $data.Number:\r\n                            case $data.Float:\r\n                            case $data.Decimal:\r\n                            case $data.Integer:\r\n                            case $data.Int16:\r\n                            case $data.Int32:\r\n                            case $data.Int64:\r\n                            case $data.Byte:\r\n                            case $data.SByte:\r\n                            case $data.Date:\r\n                            case $data.Boolean:\r\n                                entity.data[memDef.name] = Container.getDefault(memDef.dataType);\r\n                                break;\r\n                            default:\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n                //}, this);\r\n            }\r\n            if ((entity.data.entityState === $data.EntityState.Added || entity.data.entityState === $data.EntityState.Modified)\r\n                && !entity.data.isValid()) {\r\n                errors.push({ item: entity.data, errors: entity.data.ValidationErrors });\r\n            }\r\n        }\r\n        //});\r\n        if (errors.length > 0) {\r\n            clbWrapper.error(errors);\r\n            return pHandlerResult;\r\n        }\r\n\r\n        var access = $data.Access.None;\r\n\r\n        var eventData = {};\r\n        var sets = [];\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var it = changedEntities[i];\r\n            var n = it.entitySet.elementType.name;\r\n            if (sets.indexOf(it.entitySet) < 0) sets.push(it.entitySet);\r\n            var es = this._entitySetReferences[n];\r\n            if (es.beforeCreate || es.beforeUpdate || es.beforeDelete || (this.user && this.checkPermission)) {\r\n                if (!eventData[n]) eventData[n] = {};\r\n\r\n                switch (it.data.entityState) {\r\n                    case $data.EntityState.Added:\r\n                        access |= $data.Access.Create;\r\n                        if (es.beforeCreate) {\r\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\r\n                            eventData[n].createAll.push(it);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        access |= $data.Access.Update;\r\n                        if (es.beforeUpdate) {\r\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\r\n                            eventData[n].modifyAll.push(it);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        access |= $data.Access.Delete;\r\n                        if (es.beforeDelete) {\r\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\r\n                            eventData[n].deleteAll.push(it);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        var readyFn = function (cancel) {\r\n            if (cancel === false) {\r\n                cancelEvent = 'async';\r\n                changedEntities.length = 0;\r\n            }\r\n\r\n            if (changedEntities.length) {\r\n                //console.log('changedEntities: ', changedEntities.map(function(it){ return it.data.initData; }));\r\n\r\n                var innerCallback = {\r\n                    success: function (tran) {\r\n                        ctx._postProcessSavedItems(clbWrapper, changedEntities, tran, returnTransaction);\r\n                    },\r\n                    error: function () {\r\n                        //TODO remove trans from args;\r\n                        if (returnTransaction)\r\n                            clbWrapper.error.apply(this, arguments);\r\n                        else\r\n                            clbWrapper.error.apply(this, Array.prototype.filter.call(arguments, function (p) { return !(p instanceof $data.Transaction); }));\r\n                    }\r\n                };\r\n\r\n                if (transaction instanceof $data.Transaction){\r\n                    ctx.storageProvider.saveChanges(innerCallback, changedEntities, transaction);\r\n                } else {\r\n                    ctx.beginTransaction(true, function (tran) {\r\n                        ctx.storageProvider.saveChanges(innerCallback, changedEntities, tran);\r\n                    });\r\n                }\r\n            } else if (cancelEvent) {\r\n                clbWrapper.error(new Exception('Cancelled event in ' + cancelEvent, 'CancelEvent'));\r\n            } else {\r\n                ctx._applyTransaction(clbWrapper, clbWrapper.success, [0], transaction, returnTransaction);\r\n\r\n                /*if(returnTransaction)\r\n                    clbWrapper.success(0, transaction);\r\n                else\r\n                    clbWrapper.success(0);*/\r\n            };\r\n\r\n            /*else if (cancelEvent) clbWrapper.error(new $data.Exception('saveChanges cancelled from event [' + cancelEvent + ']'));\r\n            else Guard.raise('No changed entities');*/\r\n        };\r\n\r\n        var cancelEvent;\r\n        var ies = Object.getOwnPropertyNames(eventData);\r\n        var i = 0;\r\n        var cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n        var cmdAll = {\r\n            beforeCreate: 'createAll',\r\n            beforeDelete: 'deleteAll',\r\n            beforeUpdate: 'modifyAll'\r\n        };\r\n\r\n        var callbackFn = function (cancel) {\r\n            if (cancel === false) {\r\n                cancelEvent = 'async';\r\n                changedEntities.length = 0;\r\n\r\n                readyFn(cancel);\r\n                return;\r\n            }\r\n\r\n            var es = ctx._entitySetReferences[ies[i]];\r\n            var c = cmd.pop();\r\n            var ed = eventData[ies[i]];\r\n            var all = ed[cmdAll[c]];\r\n\r\n            if (all) {\r\n                var m = [];\r\n                for (var im = 0; im < all.length; im++) {\r\n                    m.push(all[im].data);\r\n                }\r\n                //var m = all.map(function(it){ return it.data; });\r\n                if (!cmd.length) {\r\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n                    i++;\r\n                }\r\n\r\n                var r = es[c].call(ctx, m);\r\n                if (typeof r === 'function') {\r\n                    r.call(ctx, (i < ies.length && !cancelEvent) ? callbackFn : readyFn, m);\r\n                } else if (r === false) {\r\n                    cancelEvent = (es.name + '.' + c);\r\n                    //all.forEach(function (it) {\r\n                    for (var index = 0; index < all.length; index++) {\r\n                        var it = all[index];\r\n\r\n                        var ix = changedEntities.indexOf(it);\r\n                        changedEntities.splice(ix, 1);\r\n                    }\r\n                    //});\r\n\r\n                    readyFn();\r\n                } else {\r\n                    if (i < ies.length && !cancelEvent) callbackFn();\r\n                    else readyFn();\r\n                }\r\n            } else {\r\n                if (!cmd.length) {\r\n                    cmd = ['beforeUpdate', 'beforeDelete', 'beforeCreate'];\r\n                    i++;\r\n                }\r\n\r\n                if (i < ies.length && !cancelEvent) callbackFn();\r\n                else readyFn();\r\n            }\r\n        };\r\n\r\n        if (this.user && this.checkPermission) {\r\n            this.checkPermission(access, this.user, sets, {\r\n                success: function () {\r\n                    if (i < ies.length) callbackFn();\r\n                    else readyFn();\r\n                },\r\n                error: clbWrapper.error\r\n            });\r\n        } else {\r\n            if (i < ies.length) callbackFn();\r\n            else readyFn();\r\n        }\r\n\r\n        return pHandlerResult;\r\n    },\r\n    discoverDependentItemEntityState: function (data) {\r\n        if (data.storeToken === this.storeToken) {\r\n            data.entityState = (data.changedProperties && data.changedProperties.length) ? $data.EntityState.Modified : $data.EntityState.Unchanged;\r\n        } else if (data.storeToken && this.storeToken && data.storeToken.typeName === this.storeToken.typeName && JSON.stringify(data.storeToken.args) === JSON.stringify(this.storeToken.args)) {\r\n            data.entityState = (data.changedProperties && data.changedProperties.length) ? $data.EntityState.Modified : $data.EntityState.Unchanged;\r\n        } else {\r\n            data.entityState = $data.EntityState.Added;\r\n        }\r\n    },\r\n\r\n    processEntityTypeBeforeEventHandler: function (skipItems, entityCachedItem) {\r\n        if (!entityCachedItem.skipSave) {\r\n            var entity = entityCachedItem.data;\r\n            var entityType = entity.getType();\r\n            var state = entity.entityState;\r\n\r\n            switch (true) {\r\n                case state === $data.EntityState.Added && entityType.onbeforeCreate instanceof $data.Event:\r\n                    if (entityType.onbeforeCreate.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                case state === $data.EntityState.Modified && entityType.onbeforeUpdate instanceof $data.Event:\r\n                    if (entityType.onbeforeUpdate.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                case state === $data.EntityState.Deleted && entityType.onbeforeDelete instanceof $data.Event:\r\n                    if (entityType.onbeforeDelete.fireCancelAble(entity) === false) {\r\n                        entityCachedItem.skipSave = true;\r\n                        skipItems.push(entity);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    },\r\n    processEntityTypeAfterEventHandler: function (entityCachedItem) {\r\n        var entity = entityCachedItem.data;\r\n        var entityType = entity.getType();\r\n        var state = entity.entityState;\r\n\r\n        switch (true) {\r\n            case state === $data.EntityState.Added && entityType.onafterCreate instanceof $data.Event:\r\n                entityType.onafterCreate.fire(entity);\r\n                break;\r\n            case state === $data.EntityState.Modified && entityType.onafterUpdate instanceof $data.Event:\r\n                entityType.onafterUpdate.fire(entity);\r\n                break;\r\n            case state === $data.EntityState.Deleted && entityType.onafterDelete instanceof $data.Event:\r\n                entityType.onafterDelete.fire(entity);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    bulkInsert: function (entitySet, fields, datas, callback) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        callback = pHandler.createCallback(callback);\r\n        if (typeof entitySet === 'string') {\r\n            var currentEntitySet;\r\n\r\n            for (var entitySetName in this._entitySetReferences) {\r\n                var actualEntitySet = this._entitySetReferences[entitySetName];\r\n                if (actualEntitySet.tableName === entitySet) {\r\n                    currentEntitySet = actualEntitySet;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!currentEntitySet)\r\n                currentEntitySet = this[entitySet];\r\n\r\n            entitySet = currentEntitySet;\r\n        }\r\n        if (entitySet) {\r\n            this.storageProvider.bulkInsert(entitySet, fields, datas, callback);\r\n        } else {\r\n            callback.error(new Exception('EntitySet not found'));\r\n        }\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    prepareRequest: function () { },\r\n    _postProcessSavedItems: function (callBack, changedEntities, transaction, returnTransaction) {\r\n        if (this.ChangeCollector && this.ChangeCollector instanceof $data.Notifications.ChangeCollectorBase)\r\n            this.ChangeCollector.processChangedData(changedEntities);\r\n\r\n        var eventData = {};\r\n        var ctx = this;\r\n        //changedEntities.forEach(function (entity) {\r\n        for (var i = 0; i < changedEntities.length; i++) {\r\n            var entity = changedEntities[i];\r\n\r\n            if (!entity.data.storeToken)\r\n                entity.data.storeToken = ctx.storeToken;\r\n\r\n            //type after events with items\r\n            this.processEntityTypeAfterEventHandler(entity);\r\n\r\n            var oes = entity.data.entityState;\r\n\r\n            entity.data.entityState = $data.EntityState.Unchanged;\r\n            entity.data.changedProperties = [];\r\n            entity.physicalData = undefined;\r\n\r\n            var n = entity.entitySet.elementType.name;\r\n            var es = ctx._entitySetReferences[n];\r\n\r\n\r\n            var eventName = undefined;\r\n            switch (oes) {\r\n                case $data.EntityState.Added:\r\n                    eventName = 'added';\r\n                    break;\r\n                case $data.EntityState.Deleted:\r\n                    eventName = 'deleted';\r\n                    break;\r\n                case $data.EntityState.Modified:\r\n                    eventName = 'updated';\r\n                    break;\r\n            }\r\n            if (eventName) {\r\n                this.raiseEvent(eventName, entity);\r\n            }\r\n\r\n            if (es.afterCreate || es.afterUpdate || es.afterDelete) {\r\n                if (!eventData[n]) eventData[n] = {};\r\n\r\n                switch (oes) {\r\n                    case $data.EntityState.Added:\r\n                        if (es.afterCreate) {\r\n                            if (!eventData[n].createAll) eventData[n].createAll = [];\r\n                            eventData[n].createAll.push(entity);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Modified:\r\n                        if (es.afterUpdate) {\r\n                            if (!eventData[n].modifyAll) eventData[n].modifyAll = [];\r\n                            eventData[n].modifyAll.push(entity);\r\n                        }\r\n                        break;\r\n                    case $data.EntityState.Deleted:\r\n                        if (es.afterDelete) {\r\n                            if (!eventData[n].deleteAll) eventData[n].deleteAll = [];\r\n                            eventData[n].deleteAll.push(entity);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        //});\r\n\r\n        var ies = Object.getOwnPropertyNames(eventData);\r\n        var i = 0;\r\n        var ctx = this;\r\n        var cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n        var cmdAll = {\r\n            afterCreate: 'createAll',\r\n            afterDelete: 'deleteAll',\r\n            afterUpdate: 'modifyAll'\r\n        };\r\n\r\n        var readyFn = function () {\r\n            if (!ctx.trackChanges) {\r\n                ctx.stateManager.reset();\r\n            }\r\n\r\n            ctx._applyTransaction(callBack, callBack.success, [changedEntities.length], transaction, returnTransaction);\r\n\r\n            /*if (returnTransaction)\r\n                callBack.success(changedEntities.length, transaction);\r\n            else\r\n                callBack.success(changedEntities.length);*/\r\n        };\r\n\r\n        var callbackFn = function () {\r\n            var es = ctx._entitySetReferences[ies[i]];\r\n            var c = cmd.pop();\r\n            var ed = eventData[ies[i]];\r\n            var all = ed[cmdAll[c]];\r\n            if (all) {\r\n                var m = [];\r\n                for (var im = 0; im < all.length; im++) {\r\n                    m.push(all[im].data);\r\n                }\r\n                //var m = all.map(function(it){ return it.data; });\r\n                if (!cmd.length) {\r\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n                    i++;\r\n                }\r\n\r\n                var r = es[c].call(ctx, m);\r\n                if (typeof r === 'function') {\r\n                    r.call(ctx, i < ies.length ? callbackFn : readyFn, m);\r\n                } else {\r\n                    if (i < ies.length) callbackFn();\r\n                    else readyFn();\r\n                }\r\n            } else {\r\n                if (!cmd.length) {\r\n                    cmd = ['afterUpdate', 'afterDelete', 'afterCreate'];\r\n                    i++;\r\n                }\r\n\r\n                if (i < ies.length) callbackFn();\r\n                else readyFn();\r\n            }\r\n        };\r\n\r\n        if (i < ies.length) callbackFn();\r\n        else readyFn();\r\n    },\r\n    forEachEntitySet: function (fn, ctx) {\r\n        /// <summary>\r\n        ///     Iterates over the entity sets' of current EntityContext.\r\n        /// </summary>\r\n        /// <param name=\"fn\" type=\"Function\">\r\n        ///     <param name=\"entitySet\" type=\"$data.EntitySet\" />\r\n        /// </param>\r\n        /// <param name=\"ctx\">'this' argument for the 'fn' function.</param>\r\n        for (var entitySetName in this._entitySetReferences) {\r\n            var actualEntitySet = this._entitySetReferences[entitySetName];\r\n            fn.call(ctx, actualEntitySet);\r\n        }\r\n    },\r\n\r\n    loadItemProperty: function (entity, property, callback, transaction) {\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>C  allback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        Guard.requireType('entity', entity, $data.Entity);\r\n\r\n        var memberDefinition = typeof property === 'string' ? entity.getType().memberDefinitions.getMember(property) : property;\r\n        var returnTransaction = this._isReturnTransaction(transaction);\r\n\r\n        if (entity[memberDefinition.name] != undefined) {\r\n\r\n            var pHandler = new $data.PromiseHandler();\r\n            var callBack = pHandler.createCallback(callback);\r\n            this._applyTransaction(callback, callback.success, [entity[memberDefinition.name]], transaction, returnTransaction);\r\n            /*if (returnTransaction)\r\n                callback.success(entity[memberDefinition.name], transaction);\r\n            else\r\n                callback.success(entity[memberDefinition.name]);*/\r\n\r\n            return pHandler.getPromise();\r\n        }\r\n\r\n        var isSingleSide = true;\r\n        var storageModel = this._storageModel.getStorageModel(entity.getType().fullName);\r\n        var elementType = Container.resolveType(memberDefinition.dataType);\r\n        if (elementType === $data.Array || (elementType.isAssignableTo && elementType.isAssignableTo($data.EntitySet))) {\r\n            elementType = Container.resolveType(memberDefinition.elementType);\r\n\r\n            isSingleSide = false;\r\n\r\n        } else {\r\n            var associations;\r\n            for (var i = 0; i < storageModel.Associations.length; i++) {\r\n                var assoc = storageModel.Associations[i];\r\n                if (assoc.FromPropertyName == memberDefinition.name) {\r\n                    associations = assoc;\r\n                    break;\r\n                }\r\n            }\r\n            //var associations = storageModel.Associations.filter(function (assoc) { return assoc.FromPropertyName == memberDefinition.name; })[0];\r\n            if (associations && associations.FromMultiplicity === \"0..1\" && associations.ToMultiplicity === \"1\")\r\n                isSingleSide = false;\r\n        }\r\n\r\n        var keyProp = storageModel.LogicalType.memberDefinitions.getKeyProperties();\r\n        if (isSingleSide === true) {\r\n            //singleSide\r\n\r\n            var filterFunc = \"function (e) { return\";\r\n            var filterParams = {};\r\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\r\n            for (var index = 0; index < keyProp.length; index++) {\r\n                var memDefKey = keyProp[index];\r\n\r\n                if (index > 0)\r\n                    filterFunc += ' &&';\r\n                filterFunc += \" e.\" + memDefKey.name + \" == this.key\" + index;\r\n                filterParams['key' + index] = entity[memDefKey.name];\r\n            }\r\n            //});\r\n            filterFunc += \"; }\"\r\n\r\n            var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n            return entitySet\r\n                .map('function (e) { return e.' + memberDefinition.name + ' }')\r\n                .single(filterFunc, filterParams, callback, transaction);\r\n        } else {\r\n            //multipleSide\r\n\r\n            var filterFunc = \"function (e) { return\"\r\n            var filterParams = {};\r\n            //storageModel.LogicalType.memberDefinitions.getKeyProperties().forEach(function (memDefKey, index) {\r\n            for (var index = 0; index < keyProp.length; index++) {\r\n                var memDefKey = keyProp[index];\r\n\r\n                if (index > 0)\r\n                    filterFunc += ' &&';\r\n                filterFunc += \" e.\" + memberDefinition.inverseProperty + \".\" + memDefKey.name + \" == this.key\" + index;\r\n                filterParams['key' + index] = entity[memDefKey.name];\r\n            }\r\n            //});\r\n            filterFunc += \"; }\"\r\n\r\n            var entitySet = this.getEntitySetFromElementType(elementType);\r\n            return entitySet\r\n                .filter(filterFunc, filterParams)\r\n                .toArray(callback, transaction);\r\n        }\r\n\r\n    },\r\n\r\n    getTraceString: function (queryable) {\r\n        /// <summary>\r\n        /// Returns a trace string. Used for debugging purposes!\r\n        /// </summary>\r\n        /// <param name=\"queryable\" type=\"$data.Queryable\" />\r\n        /// <returns>Trace string</returns>\r\n        var query = new $data.Query(queryable.expression, queryable.defaultType, this);\r\n        return this.storageProvider.getTraceString(query);\r\n    },\r\n    log: function (logInfo) {\r\n        //noop as do nothing\r\n    },\r\n\r\n    resolveBinaryOperator: function (operator, expression, frameType) {\r\n        return this.storageProvider.resolveBinaryOperator(operator, expression, frameType);\r\n    },\r\n    resolveUnaryOperator: function (operator, expression, frameType) {\r\n        return this.storageProvider.resolveUnaryOperator(operator, expression, frameType);\r\n    },\r\n    resolveFieldOperation: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveFieldOperation(operation, expression, frameType);\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveSetOperations(operation, expression, frameType);\r\n    },\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveTypeOperations(operation, expression, frameType);\r\n    },\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        return this.storageProvider.resolveContextOperations(operation, expression, frameType);\r\n    },\r\n\r\n    _generateServiceOperationQueryable: function (functionName, returnEntitySet, arg, parameters) {\r\n        if (typeof console !== 'undefined' && console.log)\r\n            console.log('Obsolate: _generateServiceOperationQueryable, $data.EntityContext');\r\n\r\n        var params = [];\r\n        for (var i = 0; i < parameters.length; i++) {\r\n            var obj = {};\r\n            obj[parameters[i]] = Container.resolveType(Container.getTypeName(arg[i]));\r\n            params.push(obj);\r\n        }\r\n\r\n        var tempOperation = $data.EntityContext.generateServiceOperation({ serviceName: functionName, returnType: $data.Queryable, elementType: this[returnEntitySet].elementType, params: params });\r\n        return tempOperation.apply(this, arg);\r\n    },\r\n    attach: function (entity, mode) {\r\n        /// <summary>\r\n        ///     Attaches an entity to its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the attached entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.attach(entity, mode);\r\n    },\r\n    attachOrGet: function (entity, mode) {\r\n        /// <summary>\r\n        ///     Attaches an entity to its matching entity set, or returns if it's already attached.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.attachOrGet(entity, mode);\r\n    },\r\n\r\n    addMany: function (entities) {\r\n        /// <summary>\r\n        ///     Adds several entities to their matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"Array\" />\r\n        /// <returns type=\"Array\">Returns the added entities.</returns>\r\n        var self = this;\r\n        entities.forEach(function (entity) {\r\n            self.add(entity);\r\n        });\r\n        return entities;\r\n    },\r\n\r\n    add: function (entity) {\r\n        /// <summary>\r\n        ///     Adds a new entity to its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the added entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.add(entity);\r\n    },\r\n    remove: function (entity) {\r\n        /// <summary>\r\n        ///     Removes an entity from its matching entity set.\r\n        /// </summary>\r\n        /// <param name=\"entity\" type=\"$data.Entity\" />\r\n        /// <returns type=\"$data.Entity\">Returns the removed entity.</returns>\r\n\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            entity = entity.getEntity();\r\n        }\r\n        var entitySet = this.getEntitySetFromElementType(entity.getType());\r\n        return entitySet.remove(entity);\r\n    },\r\n    storeToken: { type: Object },\r\n\r\n    getFieldUrl: function (entity, member, collection) {\r\n        try {\r\n            var entitySet = typeof collection === 'string' ? this[collection] : collection;\r\n            var fieldName = typeof member === 'string' ? member : member.name;\r\n            if (entity instanceof $data.Entity) {\r\n                entitySet = this.getEntitySetFromElementType(entity.getType());\r\n            } else if (!Guard.isNullOrUndefined(entity) && entity.constructor !== $data.Object) { //just a single key\r\n                var keyDef = entitySet.elementType.memberDefinitions.getKeyProperties()[0];\r\n                var key = {};\r\n                key[keyDef.name] = entity;\r\n                entity = key;\r\n            }\r\n\r\n            //key object\r\n            if (!(entity instanceof $data.Entity)) {\r\n                entity = new entitySet.elementType(entity);\r\n            }\r\n\r\n            return this.storageProvider.getFieldUrl(entity, fieldName, entitySet);\r\n        } catch (e) {}\r\n        return '#';\r\n    },\r\n\r\n    //xxxx\r\n    _applyRelatedEntityMethodsToContext: function () {\r\n        if (this.storageProvider.name === \"oData\") {\r\n            for (var esName in this._entitySetReferences) {\r\n                var es = this._entitySetReferences[esName];\r\n                var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + es.name;\r\n                //EntitiySets\r\n                if (!(newMemberName in es)) {\r\n                    es[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\r\n                }\r\n                //Context\r\n                if (!(newMemberName in this)) {\r\n                    this[newMemberName] = this._relatedEntityGetMethod(es.elementType, undefined, this);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _applyRelatedEntityMethodsToTypes: function () {\r\n        if (this.storageProvider.name === \"oData\") {\r\n            for (var esName in this._entitySetReferences) {\r\n                //add to Type\r\n                var elementType = this._entitySetReferences[esName].elementType;\r\n                var members = elementType.memberDefinitions.getPublicMappedProperties();\r\n                for (var i = 0; i < members.length; i++) {\r\n                    var member = members[i];\r\n                    var memberElementType = null;\r\n                    if (member.inverseProperty && Container.resolveType(member.dataType) === $data.Array && (memberElementType = Container.resolveType(member.elementType)) &&\r\n                        memberElementType.isAssignableTo && memberElementType.isAssignableTo($data.Entity))\r\n                    {\r\n                        var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + member.name;\r\n                        if (!elementType.getMemberDefinition(newMemberName)) {\r\n                            elementType.addMember(newMemberName, this._relatedEntityGetMethod(memberElementType, member))\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _createRelatedEntityProxyClass: function (type) {\r\n        var proxyClassName = type.namespace + $data.defaults.relatedEntityProxyPrefix + type.name;\r\n        if (!Container.isTypeRegistered(proxyClassName)) {\r\n            var definition = {};\r\n            var members = type.memberDefinitions.getPublicMappedProperties();\r\n            for (var i = 0; i < members.length; i++) {\r\n                var member = members[i];\r\n                var memberElementType = null;\r\n                if (member.inverseProperty && Container.resolveType(member.dataType) === $data.Array && (memberElementType = Container.resolveType(member.elementType)) &&\r\n                    memberElementType.isAssignableTo && memberElementType.isAssignableTo($data.Entity))\r\n                {\r\n                    var newMemberName = $data.defaults.relatedEntityReadMethodPrefix + member.name;\r\n                    definition[newMemberName] = this._relatedEntityGetMethod(memberElementType, member)\r\n                }\r\n            }\r\n            $data.Class.define(proxyClassName, $data.RelatedEntityProxy, null, definition, null);\r\n        }\r\n\r\n        return Container.resolveType(proxyClassName);\r\n    },\r\n    _relatedEntityGetMethod: function (targetType, navigation, context){\r\n        var that = this;\r\n        var keys = targetType.memberDefinitions.getKeyProperties();\r\n\r\n        return function (keyValue) {\r\n            var proxyClass = that._createRelatedEntityProxyClass(targetType);\r\n            if (keys.length === 1 && typeof keyValue !== 'object') {\r\n                var keyV = {};\r\n                keyV[keys[0].name] = keyValue;\r\n                keyValue = keyV;\r\n            }\r\n\r\n            if (typeof keyValue !== 'object') {\r\n                throw new Exception('Key parameter is invalid');\r\n            } else {\r\n                return new proxyClass(keyValue, navigation, targetType, this, context || (this.context instanceof $data.EntityContext ? this.context : undefined));\r\n            }\r\n        }\r\n    }\r\n}, {\r\n    inheritedTypeProcessor: function(type) {\r\n        if (type.resolveForwardDeclarations) {\r\n            type.resolveForwardDeclarations();\r\n        }\r\n    },\r\n    generateServiceOperation: function (cfg) {\r\n\r\n        var fn;\r\n        if (cfg.serviceMethod) {\r\n            var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : {};\r\n            if (returnType.isAssignableTo && returnType.isAssignableTo($data.Queryable)) {\r\n                fn = cfg.serviceMethod;\r\n            } else {\r\n                fn = function () {\r\n                    var lastParam = arguments[arguments.length - 1];\r\n\r\n                    var pHandler = new $data.PromiseHandler();\r\n                    var cbWrapper;\r\n\r\n                    var args = arguments;\r\n                    if (typeof lastParam === 'function') {\r\n                        cbWrapper = pHandler.createCallback(lastParam);\r\n                        arguments[arguments.length - 1] = cbWrapper;\r\n                    } else {\r\n                        cbWrapper = pHandler.createCallback();\r\n                        arguments.push(cbWrapper);\r\n                    }\r\n\r\n                    try {\r\n                        var result = cfg.serviceMethod.apply(this, arguments);\r\n                        if (result !== undefined)\r\n                            cbWrapper.success(result);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                    return pHandler.getPromise();\r\n                }\r\n            }\r\n\r\n        } else {\r\n            fn = function () {\r\n                var context = this;\r\n\r\n                var boundItem;\r\n                if (this instanceof $data.Entity) {\r\n                    if (!cfg.method) {\r\n                        cfg.method = 'POST';\r\n                    }\r\n\r\n                    if (this.context) {\r\n                        context = this.context;\r\n                    } else {\r\n                        Guard.raise('entity not attached into context');\r\n                        return;\r\n                    }\r\n\r\n                    boundItem = {\r\n                        data: this,\r\n                        entitySet: context.getEntitySetFromElementType(this.getType())\r\n                    };\r\n                }\r\n\r\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(Container.resolveType(cfg.elementType)) : null;\r\n\r\n                var paramConstExpression = null;\r\n                if (cfg.params) {\r\n                    paramConstExpression = [];\r\n                    for (var i = 0; i < cfg.params.length; i++) {\r\n                        //TODO: check params type\r\n                        for (var name in cfg.params[i]) {\r\n                            paramConstExpression.push(Container.createConstantExpression(arguments[i], Container.resolveType(cfg.params[i][name]), name));\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var ec = Container.createEntityContextExpression(context);\r\n                var memberdef = (boundItem ? boundItem.data : context).getType().getMemberDefinition(cfg.serviceName);\r\n                var es = Container.createServiceOperationExpression(ec,\r\n                        Container.createMemberInfoExpression(memberdef),\r\n                        paramConstExpression,\r\n                        cfg,\r\n                        boundItem);\r\n\r\n                //Get callback function\r\n                var clb = arguments[arguments.length - 1];\r\n                if (typeof clb !== 'function') {\r\n                    clb = undefined;\r\n                }\r\n\r\n                if (virtualEntitySet) {\r\n                    var q = Container.createQueryable(virtualEntitySet, es);\r\n                    if (clb) {\r\n                        es.isTerminated = true;\r\n                        return q._runQuery(clb);\r\n                    }\r\n                    return q;\r\n                }\r\n                else {\r\n                    var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : null;\r\n\r\n                    var q = Container.createQueryable(context, es);\r\n                    q.defaultType = returnType || $data.Object;\r\n\r\n                    if (returnType === $data.Queryable) {\r\n                        q.defaultType = Container.resolveType(cfg.elementType);\r\n                        if (clb) {\r\n                            es.isTerminated = true;\r\n                            return q._runQuery(clb);\r\n                        }\r\n                        return q;\r\n                    }\r\n                    es.isTerminated = true;\r\n                    return q._runQuery(clb);\r\n                }\r\n            };\r\n        };\r\n\r\n        var params = [];\r\n        if (cfg.params) {\r\n            for (var i = 0; i < cfg.params.length; i++) {\r\n                var param = cfg.params[i];\r\n                for (var name in param) {\r\n                    params.push({\r\n                        name: name,\r\n                        type: param[name]\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        $data.typeSystem.extend(fn, cfg, { params: params });\r\n\r\n        return fn;\r\n    },\r\n    _convertLogicalTypeNameToPhysical: function (name) {\r\n        return name + '_$db$';\r\n    },\r\n    _storageModelCache: {\r\n        get: function () {\r\n            if (!this.__storageModelCache)\r\n                this.__storageModelCache = {};\r\n            return this.__storageModelCache;\r\n        },\r\n        set: function () {\r\n            //todo exception\r\n        }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n///EntitySet is responsible for\r\n/// -creating and holding entityType through schema\r\n/// - provide Add method\r\n/// - provide Delete method\r\n/// - provide Update method\r\n/// - provide queryProvider for queryable\r\n\r\n$data.EntitySchemaConfig = function EntitySchemaConfig() {\r\n    this.Name = \"\";\r\n};\r\n$data.entitySetState = { created: 0, defined: 1, active: 2 };\r\n\r\n$data.Class.defineEx('$data.EntitySet',\r\n    [\r\n        { type: $data.Queryable, params: [new $data.Class.ConstructorParameter(1)] }\r\n    ], null,\r\n{\r\n    constructor: function (elementType, context, collectionName, eventHandlers, roles) {\r\n        /// <signature>\r\n        ///     <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations</summary>\r\n        ///     <param name=\"elementType\" type=\"Function\" subClassOf=\"$data.Entity\">Type of entity set elements, elementType must be subclass of $data.Entity</param>\r\n        ///     <param name=\"context\" type=\"$data.EntityContext\">Context of the EntitySet</param>\r\n        ///     <param name=\"collectionName\" type=\"String\">Name of the EntitySet</param>\r\n        /// </signature>\r\n        this.createNew = this[elementType.name] = this.elementType = this.defaultType = elementType;\r\n        var self = this;\r\n        context['createAdd' + elementType.name] = function (initData) {\r\n            var entity  = new elementType(initData);\r\n            return self.add(entity);\r\n        }\r\n        this.stateManager = new $data.EntityStateManager(this);\r\n\r\n        this.collectionName = collectionName;\r\n        this.roles = roles;\r\n\r\n        for (var i in eventHandlers){\r\n            this[i] = eventHandlers[i];\r\n        }\r\n    },\r\n\r\n    addNew: function(item, cb) {\r\n        var callback = $data.PromiseHandlerBase.createCallbackSettings(cb);\r\n        var _item = new this.createNew(item);\r\n        this.entityContext.saveChanges(cb);\r\n        return _item;\r\n    },\r\n\r\n    executeQuery: function (expression, on_ready) {\r\n        //var compiledQuery = this.entityContext\r\n        var callBack = $data.PromiseHandlerBase.createCallbackSettings(on_ready);\r\n        this.entityContext.executeQuery(expression, callBack);\r\n    },\r\n    getTraceString: function (expression) {\r\n        return this.entityContext.getTraceString(expression);\r\n    },\r\n    setContext: function (entityContext) {\r\n        this.entitySetState = $data.entitySetState.active;\r\n        this.entityContext = entityContext;\r\n        this.entityContext[this.schema.name] = this[this.schema.name];\r\n    },\r\n    _trackEntity: function (entity) {\r\n        var trackedEntities = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEntities.length; i++) {\r\n            if (trackedEntities[i].data === entity)\r\n                return;\r\n        }\r\n        trackedEntities.push({ entitySet: this, data: entity });\r\n    },\r\n    add: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the context.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.add({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Adds the given entity to the context.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to add</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.add(new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' }));\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///\r\n        ///         var person = new $news.Types.Person({ Name: 'John', Email: 'john@example.com', Age: 30, Gender: 'Male' });\r\n        ///         Persons.add(person);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n        data.entityState = $data.EntityState.Added;\r\n        data.changedProperties = undefined;\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n        return data;\r\n    },\r\n\r\n    addMany: function(entities) {\r\n        var result = [];\r\n        var self = this;\r\n        entities.forEach(function (entity) {\r\n            result.push(self.add(entity));\r\n        });\r\n        return result;\r\n    },\r\n    remove: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and marks it as Deleted.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///         Person will be marked as Deleted where an id is 5. Id is a key of entity.\r\n        ///         Persons.remove({ Id: 5 });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Marks the given entity as Deleted.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to remove</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.remove(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Person will be marked as Deleted where an Id is 5. Id is a key of entity.\r\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n        data.entityState = $data.EntityState.Deleted;\r\n        data.changedProperties = undefined;\r\n        this._trackEntity(data);\r\n    },\r\n    attach: function (entity, mode) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.attach({ Id: 5, Email: 'newEmail@example.com' });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Adds to the context and sets state Unchanged.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to attach</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.attach(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Set an entity's related entities without loading\r\n        ///\r\n        ///         var categoryPromo = new $news.Types.Category({ Id: 5 });\r\n        ///         Category.attach(categoryPromo);\r\n        ///         var article = new $news.Types.Article({ Title: 'New Article title', Body: 'Article body', Category: [ categoryPromo ] });\r\n        ///         Article.attach(article);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        for (var i = 0; i < this.entityContext.stateManager.trackedEntities.length; i++) {\r\n            var current = this.entityContext.stateManager.trackedEntities[i];\r\n            if (current.data === data)\r\n                break;\r\n            if (current.data.equals(data)) {\r\n                Guard.raise(new Exception(\"Context already contains this entity!!!\"));\r\n            }\r\n        }\r\n\r\n        if (mode === true) {\r\n            if (data.changedProperties && data.changedProperties.length > 0) {\r\n                data.entityState = $data.EntityState.Modified;\r\n            } else {\r\n                data.entityState = $data.EntityState.Unchanged;\r\n            }\r\n        } else {\r\n            if (typeof mode === \"string\") mode = $data.EntityAttachMode[mode];\r\n            var attachMode = mode || $data.EntityAttachMode[$data.EntityAttachMode.defaultMode];\r\n            if (typeof attachMode === \"function\") {\r\n                attachMode.call($data.EntityAttachMode, data);\r\n            } else {\r\n                data.entityState = $data.EntityState.Unchanged;\r\n                data.changedProperties = undefined;\r\n            }\r\n        }\r\n        /*if (!keepChanges) {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }*/\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n    },\r\n    detach: function (entity) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and detach from the Context with Detached state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <example>\r\n        ///         Person will be Detached where an id is 5. Id is a key of entity.\r\n        ///         Persons.detach({ Id: 5 });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Detach from the context and sets state Detached.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\r\n        ///     <example>\r\n        ///\r\n        ///         Persons.detach(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Person will be Detached where an Id is 5. Id is a key of entity.\r\n        ///         Persons.add(new $news.Types.Person({ Id: 5 }));\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        var existsItem;\r\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEnt.length; i++) {\r\n            if (trackedEnt[i].data.equals(data))\r\n                existsItem = trackedEnt[i];\r\n        }\r\n\r\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\r\n        if (existsItem) {\r\n            var idx = this.entityContext.stateManager.trackedEntities.indexOf(existsItem);\r\n            entity.entityState = $data.EntityState.Detached;\r\n            this.entityContext.stateManager.trackedEntities.splice(idx, 1);\r\n            return;\r\n        }\r\n    },\r\n    attachOrGet: function (entity, mode) {\r\n        /// <signature>\r\n        ///     <summary>Creates a typed entity and adds to the Context with Unchanged state.</summary>\r\n        ///     <param name=\"entity\" type=\"Object\">The init parameters whish is based on Entity</param>\r\n        ///     <returns type=\"$data.Entity\" />\r\n        ///     <example>\r\n        ///         Id is a key of entity.\r\n        ///         var person = Persons.attachOrGet({ Id: 5  });\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>If not in context then adds to it and sets state Unchanged.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">The entity to detach</param>\r\n        ///     <returns type=\"$data.Entity\" />\r\n        ///     <example>\r\n        ///\r\n        ///         var attachedPerson = Persons.attachOrGet(person);\r\n        ///\r\n        ///     </example>\r\n        ///     <example>\r\n        ///         Id is a key of entity.\r\n        ///         var p = new $news.Types.Person({ Id: 5 });\r\n        ///         var attachedPerson = Persons.attachOrGet(p);\r\n        ///\r\n        ///     </example>\r\n        /// </signature>\r\n\r\n        var data = entity;\r\n        if (entity instanceof $data.EntityWrapper) {\r\n            data = entity.getEntity();\r\n        } else if (!(entity instanceof this.createNew)) {\r\n            data = new this.createNew(entity);\r\n        }\r\n\r\n        var existsItem;\r\n        var trackedEnt = this.entityContext.stateManager.trackedEntities;\r\n        for (var i = 0; i < trackedEnt.length; i++) {\r\n            if (trackedEnt[i].data.equals(data))\r\n                existsItem = trackedEnt[i];\r\n        }\r\n        //var existsItem = this.entityContext.stateManager.trackedEntities.filter(function (i) { return i.data.equals(data); }).pop();\r\n        if (existsItem) {\r\n            return existsItem.data;\r\n        }\r\n\r\n        if (typeof mode === \"string\") mode = $data.EntityAttachMode[mode];\r\n        var attachMode = mode || $data.EntityAttachMode[$data.EntityAttachMode.defaultMode];\r\n        if (typeof attachMode === \"function\") {\r\n            attachMode.call($data.EntityAttachMode, data);\r\n        } else {\r\n            data.entityState = $data.EntityState.Unchanged;\r\n            data.changedProperties = undefined;\r\n        }\r\n        //data.entityState = $data.EntityState.Unchanged;\r\n        //data.changedProperties = undefined;\r\n        data.context = this.entityContext;\r\n        this._trackEntity(data);\r\n        return data;\r\n    },\r\n    //find: function (keys) {\r\n    //    //todo global scope\r\n    //    if (!this.entityKeys) {\r\n    //        this.entityKeys = this.createNew.memberDefinition.filter(function (prop) { return prop.key; }, this);\r\n    //    }\r\n    //    this.entityContext.stateManager.trackedEntities.forEach(function (item) {\r\n    //        if (item.entitySet == this) {\r\n    //            var isOk = true;\r\n    //            this.entityKeys.forEach(function (item, index) { isOK = isOk && (item.data[item.name] == keys[index]); }, this);\r\n    //            if (isOk) {\r\n    //                return item.data;\r\n    //            }\r\n    //        }\r\n    //    }, this);\r\n    //    //TODO: db call\r\n    //    return null;\r\n    //},\r\n    loadItemProperty: function (entity, memberDefinition, callback) {\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"String\">Property name</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callback\" type=\"Function\">\r\n        ///         <summary>Callback function</summary>\r\n        ///         <param name=\"propertyValue\" />\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n        /// <signature>\r\n        ///     <summary>Loads a property of the entity through the storage provider.</summary>\r\n        ///     <param name=\"entity\" type=\"$data.Entity\">Entity object</param>\r\n        ///     <param name=\"property\" type=\"$data.MemberDefinition\">Property definition</param>\r\n        ///     <param name=\"callbacks\" type=\"Object\">\r\n        ///         Success and error callbacks definition.\r\n        ///         Example: [code]{ success: function(db) { .. }, error: function() { .. } }[/code]\r\n        ///     </param>\r\n        ///     <returns type=\"$.Deferred\" />\r\n        /// </signature>\r\n\r\n        return this.entityContext.loadItemProperty(entity, memberDefinition, callback);\r\n    },\r\n    saveChanges: function () {\r\n        return this.entityContext.saveChanges.apply(this.entityContext, arguments);\r\n    },\r\n    addProperty: function (name, getter, setter) {\r\n        return this.elementType.addProperty.apply(this.elementType, arguments);\r\n    },\r\n    expression: {\r\n        get: function () {\r\n            if (!this._expression) {\r\n                var ec = Container.createEntityContextExpression(this.entityContext);\r\n                //var name = entitySet.collectionName;\r\n                //var entitySet = this.entityContext[entitySetName];\r\n                var memberdef = this.entityContext.getType().getMemberDefinition(this.collectionName);\r\n                var es = Container.createEntitySetExpression(ec,\r\n                    Container.createMemberInfoExpression(memberdef), null,\r\n                    this);\r\n                this._expression = es;\r\n            }\r\n\r\n            return this._expression;\r\n        },\r\n        set: function (value) {\r\n            this._expression = value;\r\n        }\r\n    },\r\n    getFieldUrl: function (keys, field) {\r\n        return this.entityContext.getFieldUrl(keys, field, this);\r\n    },\r\n    bulkInsert: function (fields, datas, callback) {\r\n        return this.entityContext.bulkInsert(this, fields, datas, callback);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.EntityState = {\r\n    Detached:0,\r\n    Unchanged: 10,\r\n    Added: 20,\r\n    Modified: 30,\r\n    Deleted: 40\r\n};\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.EntityStateManager', null, null,\r\n{\r\n    constructor: function (entityContext) {\r\n        this.entityContext = null;\r\n        this.trackedEntities = [];\r\n        this.init(entityContext);\r\n    },\r\n    init: function (entityContext) {\r\n        this.entityContext = entityContext;\r\n    },\r\n    reset: function () {\r\n        this.trackedEntities = [];\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Base.extend('$data.EntityWrapper', {\r\n    getEntity: function () {\r\n        Guard.raise(\"pure object\");\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception, MemberDefinition } from '../TypeSystem/index.js';\r\n\r\n\r\n$data.createEnum = function (name, container, enumType, enumDefinition) {\r\n    return $data.Enum.extend(name, container, enumType, enumDefinition);\r\n}\r\n\r\n\r\n$data.Enum = $data.Class.define(\"$data.Enum\", null, null, {\r\n    constructor: function(){\r\n        return Guard.raise(new Exception(\"Type Error\", \"Cannot create instance from enum type!\"))  \r\n    }\r\n}, {\r\n    extend: function(name, container, enumType, enumDefinition){\r\n        if (!enumDefinition) {\r\n            if(!enumType){\r\n                enumDefinition = container;\r\n                container = undefined;    \r\n            } else {\r\n                enumDefinition = enumType;\r\n                enumType = container;\r\n                container = undefined;    \r\n            }\r\n        }\r\n        \r\n        enumType = enumType || $data.Integer;\r\n        enumType = Container.resolveType(enumType);\r\n        var classDefinition = {\r\n            __enumType: { get: function(){ return enumType }, set: function() { }, enumerable: false, writable: false }\r\n        };\r\n        \r\n        var getEnumDef = function(value, index){\r\n            return { get: function() { return value }, set: function() { }, enumMember: true, index: index }\r\n        }\r\n        \r\n        var defaultValue = 0;\r\n        var isValueCalculation = [$data.Byte, $data.SByte, $data.Int16, $data.Integer, $data.Int64].indexOf(enumType) >= 0;\r\n        var hasIndex = false;\r\n        \r\n        var enumDef = [];\r\n        if (Array.isArray(enumDefinition)) {\r\n            for(var i = 0; i < enumDefinition.length; i++){\r\n                var enumValA = enumDefinition[i];\r\n                if(typeof enumValA === \"object\" && typeof enumValA.name === \"string\"){\r\n                    enumDef.push({ name: enumValA.name, value: enumValA.value, index: enumValA.index });\r\n                    if(typeof enumValA.index !== \"undefined\") {\r\n                         hasIndex = true;\r\n                    }\r\n                } else if(typeof enumValA === \"string\") {\r\n                    enumDef.push({ name: enumValA, value: undefined, index: undefined });\r\n                } else {\r\n                    return Guard.raise(new Exception(\"Type Error\", \"Invalid enum member\"))  \r\n                }\r\n            }\r\n        } else if (typeof enumDefinition === \"object\"){\r\n            for(var enumName in enumDefinition){\r\n                var enumValO = enumDefinition[enumName];\r\n                if(typeof enumValO === \"object\"){\r\n                    enumDef.push({ name: enumName, value: enumValO.value, index: enumValO.index });\r\n                    if(typeof enumValO.index !== \"undefined\") { \r\n                        hasIndex = true;\r\n                    }\r\n                } else {\r\n                    enumDef.push({ name: enumName, value: enumValO, index: undefined });\r\n                }\r\n            }\r\n        }\r\n        \r\n        if(hasIndex){\r\n            enumDef.sort(function (a,b) {\r\n                if (a.index < b.index)\r\n                    return -1;\r\n                if (a.index > b.index)\r\n                    return 1;\r\n                return 0;\r\n            })\r\n        }\r\n        \r\n        var enumOptions = [];\r\n        for (var i = 0; i < enumDef.length; i++) {\r\n            var enumVal = enumDef[i]\r\n            if (isValueCalculation && typeof enumVal.value !== \"number\" && !enumVal.value) {\r\n               enumVal.value = defaultValue;\r\n            }\r\n            if (typeof enumVal.value === \"number\") {\r\n               defaultValue = enumVal.value; \r\n            }\r\n            defaultValue++;\r\n            enumOptions.push(enumVal.name);\r\n            classDefinition[enumVal.name] = getEnumDef(enumVal.value, enumVal.index);\r\n        }\r\n        \r\n        var enumClass = $data.Base.extend.call(this, name, container, {}, classDefinition);\r\n        \r\n        $data.Container.registerConverter(name, {\r\n            'default': function (value) {\r\n                if(typeof value == \"string\" && enumOptions.indexOf(value) >= 0){\r\n                    var enumMember = enumClass.staticDefinitions.getMember(value);\r\n                    if(enumMember){\r\n                        return enumMember.get();\r\n                    }\r\n                } \r\n                \r\n                for (var i = 0; i < enumDef.length; i++) {\r\n                    var enumVal = enumDef[i]\r\n                    if(enumVal.value === value)\r\n                        return value;\r\n                }\r\n        \r\n                throw 0;\r\n            }\r\n        });\r\n        \r\n        return enumClass;\r\n    }\r\n});\r\n\r\n\r\n\r\nexport var Enum = $data.Enum\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ArrayLiteralExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (items) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        ///<field name=\"items\" type=\"Array\" elementType=\"$data.Expression.ExpressionNode\" />\r\n        this.items = items || [];\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ArrayLiteral, writable: true },\r\n\r\n    items: { value: undefined, dataType: Array, elementType: $data.Expressions.ExpressionNode },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        ///<var nam\r\n        var result = \"[\" + this.items.map(function (item) { return item.toString(); }).join(\",\") + \"]\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CallExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, member, args) {\r\n        ///<summary>Represents a call to an object or global method</summary>\r\n        ///<field name=\"object\" type=\"$data.Expressions.ExpressionNode\">The expression for object that has the method</field>\r\n        ///<field name=\"member\" type=\"$data.MemberDefinition\">The member descriptor</field>\r\n        this.expression = expression;\r\n        this.member = member;\r\n        this.args = args;\r\n    },\r\n\r\n    nodeType: {\r\n        value: $data.Expressions.ExpressionType.Call\r\n    },\r\n\r\n    expression: {\r\n        value: undefined,\r\n        dataType: $data.Expressions.ExpressionNode,\r\n        writable: true\r\n    },\r\n\r\n    member: {\r\n        value: undefined,\r\n        dataType: $data.MemberDefinition,\r\n        writable: true\r\n    },\r\n\r\n    type: {\r\n        value: undefined,\r\n        writable: true\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function(thisObj, method, args) {\r\n                if (typeof method !== 'function') {\r\n                    method = thisObj[method];\r\n                }\r\n                Guard.requireType(\"method\", method, Function);\r\n                return method.apply(thisObj, args);\r\n            };\r\n        },\r\n        set: function (value) { Guard.raise(\"Property can not be set\"); }\r\n    },\r\n\r\n    toString: function (debug) {\r\n        return this.object.toString() + \".\" + this.member.toString() + \"(\" + \")\";\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeParser', null, null, {\r\n\r\n    constructor: function (scopeContext) {\r\n        ///<signature>\r\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///</signature>\r\n        this.scopeContext = scopeContext;\r\n        this.lambdaParams = [];\r\n    },\r\n\r\n    log: function(logInfo) {\r\n        if (this.scopeContext)\r\n            this.scopeContext.log(logInfo);\r\n    },\r\n\r\n    parseExpression: function (code, resolver) {\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a parser result with parser information</summary>\r\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n        if (typeof code === 'object') { code = ''; }\r\n        var result = {\r\n            success: true,\r\n            errorMessage: '',\r\n            errorDetails: ''\r\n        };\r\n        ///<var name=\"AST\" type=\"Date\" />\r\n\r\n        //console.log(code.toString());\r\n        if ($data.Acorn){\r\n            //console.log('using acorn.js');\r\n            return { success: true, expression: this.ParserBuild($data.Acorn.parse('(' + code.toString() + ')').body[0]), errors: [] };\r\n        }else if ($data.Esprima){\r\n            //console.log('using esprima.js');\r\n            return { success: true, expression: this.ParserBuild($data.Esprima.parse('(' + code.toString() + ')').body[0]), errors: [] };\r\n        }else{\r\n            //console.log('using JayLint');\r\n            var AST = $data.ASTParser.parseCode(code);\r\n            this.log({ event: \"AST\", data: AST });\r\n            if (!AST.success) {\r\n                return {\r\n                    success: false,\r\n                    error: \"ASTParser error\",\r\n                    errorMessage: (AST.errors) ? JSON.stringify(AST.errors) : \"could not get code\"\r\n                };\r\n            }\r\n            var b = this.Build2(AST.tree.first[0]);\r\n            result = { success: true, expression: b, errors: AST.errors };\r\n            return result;\r\n        }\r\n    },\r\n\r\n    createExpression: function (code, resolver) {\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\r\n        ///<param name=\"code\" type=\"string\">The JavaScript code to parse &#10;ex: \"a + b /c\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Parses the provided code and returns a JavaScript code expression tree</summary>\r\n        ///<param name=\"code\" type=\"Function\">The JavaScript function to parse &#10;ex: \"function (a,b,c) { return a + b /c }\"</param>\r\n        ///<param name=\"resolver\" type=\"string\">The ParameterResolver class that resolves vaiable and parameteres references</param>\r\n        ///<returns type=\"$data.Expressions.ExpressionParserResult\" />\r\n        ///</signature>\r\n\r\n        var result = this.parseExpression(code, resolver);\r\n        if (!result.success) {\r\n            Guard.raise(\"ExpressionParserError: \" + result.errorMessage);\r\n        }\r\n        return result.expression;\r\n    },\r\n\r\n    ParserBuild: function(node){\r\n        //console.log(node);\r\n        return this['Parser' + node.type](node);\r\n    },\r\n\r\n    ParserExpressionStatement: function(node){\r\n        return this.ParserBuild(node.expression);\r\n    },\r\n\r\n    ParserBlockStatement: function(node){\r\n        return this.ParserBuild(node.body[0]);\r\n    },\r\n\r\n    ParserReturnStatement: function(node){\r\n        return this.ParserBuild(node.argument);\r\n    },\r\n\r\n    ParserMemberExpression: function(node){\r\n        return new $data.Expressions.PropertyExpression(\r\n            this.ParserBuild(node.object),\r\n            new $data.Expressions.ConstantExpression(node.property.name || node.property.value, typeof (node.property.name || node.property.value))\r\n        );\r\n    },\r\n\r\n    ParserIdentifier: function(node){\r\n        return this.ParserParameter(node,\r\n            this.lambdaParams.indexOf(node.name) > -1\r\n                ? $data.Expressions.ExpressionType.LambdaParameterReference\r\n                : $data.Expressions.ExpressionType.ParameterReference\r\n            );\r\n    },\r\n\r\n    ParserObjectExpression: function(node){\r\n        var props = new Array(node.properties.length);\r\n        for (var i = 0; i < node.properties.length; i++){\r\n            props[i] = this.ParserProperty(node.properties[i]);\r\n        }\r\n\r\n        return new $data.Expressions.ObjectLiteralExpression(props);\r\n    },\r\n\r\n    ParserArrayExpression: function(node){\r\n        var items = new Array(node.elements.length);\r\n        for (var i = 0; i < node.elements.length; i++){\r\n            items[i] = this.ParserBuild(node.elements[i]);\r\n        }\r\n\r\n        return new $data.Expressions.ArrayLiteralExpression(items);\r\n    },\r\n\r\n    ParserProperty: function(node){\r\n        return new $data.Expressions.ObjectFieldExpression(node.key.name, this.ParserBuild(node.value));\r\n    },\r\n\r\n    ParserArrowFunctionExpression: function(node){\r\n        return this.ParserFunctionExpression(node);\r\n    },\r\n\r\n    ParserFunctionExpression: function(node){\r\n        var params = new Array(node.params.length);\r\n        for (var i = 0; i < node.params.length; i++){\r\n            if(i === 0 || $data.defaults.parameterResolutionCompatibility){\r\n                this.lambdaParams.push(node.params[i].name);\r\n                params[i] = this.ParserParameter(node.params[i], $data.Expressions.ExpressionType.LambdaParameter);\r\n            } else {\r\n                params[i] = this.ParserParameter(node.params[i], $data.Expressions.ExpressionType.Parameter);\r\n            }\r\n            params[i].owningFunction = result;\r\n        }\r\n        var result = new $data.Expressions.FunctionExpression(node.id ? node.id.name : node.id, params, this.ParserBuild(node.body));\r\n\r\n        return result;\r\n    },\r\n\r\n    ParserParameter: function(node, nodeType){\r\n        var result = new $data.Expressions.ParameterExpression(node.name, null, nodeType);\r\n        if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference){\r\n            result.paramIndex = this.lambdaParams.indexOf(node.name);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    ParserLogicalExpression: function(node){\r\n        return this.ParserBinaryExpression(node);\r\n    },\r\n\r\n    ParserOperators: {\r\n        value: {\r\n            \"==\": { expressionType: $data.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function (a, b) { return a == b; } },\r\n            \"===\": { expressionType: $data.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function (a, b) { return a === b; } },\r\n            \"!=\": { expressionType: $data.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function (a, b) { return a != b; } },\r\n            \"!==\": { expressionType: $data.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function (a, b) { return a !== b; } },\r\n            \">\": { expressionType: $data.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function (a, b) { return a > b; } },\r\n            \">=\": { expressionType: $data.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a >= b; } },\r\n            \"<=\": { expressionType: $data.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a <= b; } },\r\n            \"<\": { expressionType: $data.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function (a, b) { return a < b; } },\r\n            \"&&\": { expressionType: $data.Expressions.ExpressionType.And, type: \"boolean\", implementation: function (a, b) { return a && b; } },\r\n            \"||\": { expressionType: $data.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function (a, b) { return a || b; } },\r\n            \"&\": { expressionType: $data.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function (a, b) { return a & b; } },\r\n            \"|\": { expressionType: $data.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function (a, b) { return a | b; } },\r\n            \"+\": { expressionType: $data.Expressions.ExpressionType.Add, type: \"number\", implementation: function (a, b) { return a + b; } },\r\n            \"-\": { expressionType: $data.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function (a, b) { return a - b; } },\r\n            \"/\": { expressionType: $data.Expressions.ExpressionType.Divide, type: \"number\", implementation: function (a, b) { return a / b; } },\r\n            \"%\": { expressionType: $data.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function (a, b) { return a % b; } },\r\n            \"*\": { expressionType: $data.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function (a, b) { return a * b; } },\r\n            \"[\": { expressionType: $data.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function (a, b) { return a[b]; } },\r\n            \"in\": { expressionType: $data.Expressions.ExpressionType.In, type: 'boolean', implementation: function (a, b) { return a in b; } }\r\n        }\r\n    },\r\n\r\n    ParserUnaryOperators: {\r\n        value: {\r\n            \"+\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Positive, type: \"number\", implementation: function (operand) { return +operand; } },\r\n            \"-\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Negative, type: \"number\", implementation: function (operand) { return -operand; } },\r\n            \"++true\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return ++operand; } },\r\n            \"--true\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return --operand; } },\r\n            \"++false\": { arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return operand++; } },\r\n            \"!\": { arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function (operand) { return !operand; } },\r\n            \"--false\": { arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return operand--; } }\r\n        }\r\n    },\r\n\r\n    ParserUnaryExpression: function(node){\r\n        return new $data.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator], this.ParserUnaryOperators[node.operator].expressionType);\r\n    },\r\n\r\n    ParserUpdateExpression: function(node){\r\n        return new $data.Expressions.UnaryExpression(this.ParserBuild(node.argument), this.ParserUnaryOperators[node.operator + node.prefix], this.ParserUnaryOperators[node.operator + node.prefix].nodeType);\r\n    },\r\n\r\n    ParserBinaryExpression: function(node){\r\n        return new $data.Expressions.SimpleBinaryExpression(\r\n            this.ParserBuild(node.left),\r\n            this.ParserBuild(node.right),\r\n            this.ParserOperators[node.operator].expressionType,\r\n            node.operator,\r\n            this.ParserOperators[node.operator].type\r\n        );\r\n    },\r\n\r\n    ParserThisExpression: function(node){\r\n        return new $data.Expressions.ThisExpression();\r\n    },\r\n\r\n    ParserLiteral: function(node){\r\n        return new $data.Expressions.ConstantExpression(node.value, typeof node.value);\r\n    },\r\n\r\n    ParserCallExpression: function(node){\r\n        var method = this.ParserBuild(node.callee);\r\n        var args = new Array(node.arguments.length);\r\n        for (var i = 0; i < node.arguments.length; i++){\r\n            args[i] = this.ParserBuild(node.arguments[i]);\r\n        }\r\n\r\n        var member;\r\n        var expression;\r\n        switch (true){\r\n            case method instanceof $data.Expressions.PropertyExpression:\r\n                expression = method.expression;\r\n                member = method.member;\r\n                break;\r\n            case method instanceof $data.Expressions.ParameterExpression:\r\n                expression = new $data.Expressions.ConstantExpression(null, typeof null);\r\n                member = method;\r\n                break;\r\n        }\r\n\r\n        return new $data.Expressions.CallExpression(expression, member, args);\r\n    }/*,\r\n\r\n    Build2: function (node) {\r\n        ///<param name=\"node\" type=\"Lint\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        var n;\r\n        switch (node.arity) {\r\n            case \"number\":\r\n            case \"string\":\r\n                n = this.BuildConstant(node);\r\n                break;\r\n            case \"prefix\":\r\n                switch (node.value) {\r\n                    case \"{\":\r\n                        n = this.BuildObjectLiteral(node);\r\n                        break;\r\n                    case \"[\":\r\n                        n = this.BuildArrayLiteral(node);\r\n                        break;\r\n                    case $data.unaryOperators.resolve(node.value):\r\n                        n = this.BuildUnary(node);\r\n                        break;\r\n                    //TODO: default case\r\n                }\r\n                break;\r\n            case \"suffix\":\r\n                switch (node.value) {\r\n                    case $data.unaryOperators.resolve(node.value):\r\n                        n = this.BuildUnary(node);\r\n                        break;\r\n                    default:\r\n                        Guard.raise(\"Unknown suffix: \" + node.value);\r\n                }\r\n                break;\r\n            case \"infix\":\r\n                switch (node.value) {\r\n                    case \"[\":\r\n                        n = this.BuildArray(node);\r\n                        break;\r\n                    case $data.binaryOperators.resolve(node.value):\r\n                        n = this.BuildSimpleBinary(node);\r\n                        break;\r\n                    case \"function\":\r\n                        Guard.raise(\"Unexpected function arity\");\r\n                    case \"(\":\r\n                        n = this.BuildCall(node);\r\n                        break;\r\n                    case \".\":\r\n                        n = this.BuildProperty(node);\r\n                        break;\r\n                    default:\r\n                        debugger;\r\n                        //TODO: remove debugger, throw exception or break\r\n                }\r\n                break;\r\n            case \"statement\":\r\n                switch (node.value) {\r\n                    case \"function\":\r\n                        n = this.BuildFunction(node);\r\n                        //TODO: consider adding break\r\n                }\r\n                break;\r\n            default:\r\n                switch (node.value) {\r\n                    case \"function\":\r\n                        n = this.BuildFunction(node);\r\n                        break;\r\n                    case \"true\":\r\n                    case \"false\":\r\n                    case \"null\":\r\n                        n = this.BuildConstant(node);\r\n                        break;\r\n                    case \"this\":\r\n                        n = this.BuildThis(node);\r\n                        break;\r\n                    default:\r\n                        n = this.BuildParameter(node);\r\n                        break;\r\n                }\r\n        }\r\n        return n;\r\n    },\r\n\r\n    BuildThis: function (node) {\r\n        var result = Container.createThisExpression();\r\n        return result;\r\n    },\r\n\r\n    BuildConstant: function (node) {\r\n        ///<param name=\"node\" type=\"ConstantASTNode\" />\r\n        var value = node.value;\r\n        var type = node.type;\r\n        if (node.reserved === true) {\r\n            switch (node.value) {\r\n                case \"true\": value = true; type = typeof true; break;\r\n                case \"false\": value = false; type = typeof false; break;\r\n                case \"null\": value = null; type = typeof null; break;\r\n                //TODO: missing default case\r\n            }\r\n        }\r\n        var result = new $data.Expressions.ConstantExpression(value, type);\r\n        return result;\r\n    },\r\n\r\n    BuildFunctionParameter: function (node) {\r\n\r\n    },\r\n\r\n    BuildArray: function (node) {\r\n        switch (node.second.type) {\r\n            case \"string\":\r\n                return this.BuildProperty(node);\r\n            case \"number\":\r\n            default:\r\n                return this.BuildSimpleBinary(node);\r\n        }\r\n    },\r\n\r\n    BuildParameter: function (node) {\r\n        ///<param name=\"node\" type=\"ParameterASTNode\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n        var paramName = node.value;\r\n        //TODO\r\n        //var paramType = this.resolver.resolveParameterType(node);\r\n        var nodeType = node.funct ? $data.Expressions.ExpressionType.LambdaParameter :\r\n                                    this.lambdaParams.indexOf(node.value) > -1 ?\r\n                                                $data.Expressions.ExpressionType.LambdaParameterReference : $data.Expressions.ExpressionType.Parameter;\r\n        var result = new $data.Expressions.ParameterExpression(node.value, null, nodeType);\r\n\r\n        if (nodeType == $data.Expressions.ExpressionType.LambdaParameterReference) {\r\n            result.paramIndex = this.lambdaParams.indexOf(node.value);\r\n        }\r\n\r\n        return result;\r\n    },\r\n\r\n    BuildArrayLiteral: function(node) {\r\n        var self = this;\r\n        var items = node.first.map(function (item) { return self.Build2(item); });\r\n        var result = new $data.Expressions.ArrayLiteralExpression(items);\r\n        return result;\r\n    },\r\n\r\n    BuildObjectLiteral: function (node) {\r\n        var self = this;\r\n        var fields = node.first.map(function (item) {\r\n            var eItem = self.Build2(item.first);\r\n            var result = new $data.Expressions.ObjectFieldExpression(item.value, eItem);\r\n            return result;\r\n        });\r\n        var result = new $data.Expressions.ObjectLiteralExpression(fields);\r\n        return result;\r\n    },\r\n\r\n    BuildFunction: function (node) {\r\n        ///<param name=\"node\" type=\"FunctionASTNode\"/>\r\n        ///<returns type=\"$data.Expressions.FunctionExpression\" />\r\n        var self = this;\r\n        var paramStack = [];\r\n        var params = node.first && node.first.map(function (paramNode) {\r\n            //paramStack.push(paramNode.value);\r\n            this.lambdaParams.push(paramNode.value);\r\n            return self.BuildParameter(paramNode);\r\n        }, this);\r\n        params = params || [];\r\n\r\n        //skipping return for convenience\r\n        //Possible we should raise an error as predicates and selectors can\r\n        //not be code blocks just expressions\r\n\r\n        var hasReturn = node.block.length == 0 ? false :\r\n            node.block[0].value === \"return\" ? true : false;\r\n        var body = (node.block.length > 0) ? this.Build2(hasReturn ? node.block[0].first : node.block[0]) : null;\r\n\r\n        paramStack.forEach(function () { this.lambdaParams.pop(); }, this);\r\n\r\n        var result = new $data.Expressions.FunctionExpression(node.value, params, body);\r\n        params.forEach(function (param) {\r\n            param.owningFunction = result;\r\n        });\r\n\r\n        //TODO place on prototyope\r\n        result.name = node.name;\r\n        return result;\r\n    },\r\n\r\n    BuildCall: function (node) {\r\n        var self = this;\r\n        var method = self.Build2(node.first);\r\n        var args = node.second.map(function (exp) { return self.Build2(exp); });\r\n        var member;\r\n        var expression;\r\n        switch(true){\r\n            case method instanceof $data.Expressions.PropertyExpression:\r\n                expression = method.expression;\r\n                member = method.member;\r\n                break;\r\n            case method instanceof $data.Expressions.ParameterExpression:\r\n                expression = Container.createConstantExpression(null, typeof null);\r\n                member = method;\r\n                break;\r\n            //TODO: missing default case\r\n        }\r\n\r\n        var result = Container.createCallExpression(expression, member, args);\r\n        return result;\r\n    },\r\n\r\n    BuildProperty: function (node) {\r\n        ///<summary>Builds a PropertyExpression from the AST node</summary>\r\n        ///<param name=\"node\" type=\"MemberAccessASTNode\" />\r\n        ///<returns type=\"$data.Expressions.PropertyExpression\" />\r\n        var expression = this.Build2(node.first);\r\n        //TODO\r\n        //var type = expression.type;\r\n        //var member = type.getMemberDefinition()\r\n        //TODO how to not if?????\r\n        var member;\r\n        if (node.second.identifier) {\r\n            member = new $data.Expressions.ConstantExpression(node.second.value, \"string\");\r\n        } else {\r\n            member = this.Build2(node.second);\r\n        }\r\n        var result = new $data.Expressions.PropertyExpression(expression, member);\r\n        return result;\r\n    },\r\n\r\n\r\n    BuildUnary: function(node) {\r\n        var operator = $data.unaryOperators.getOperator(node.value, node.arity);\r\n        var nodeType = operator.expressionType;\r\n        var operand = this.Build2(node.first);\r\n        var result = new $data.Expressions.UnaryExpression(operand, operator, nodeType);\r\n        return result;\r\n    },\r\n\r\n    BuildSimpleBinary: function (node) {\r\n        ///<param name=\"node\" type=\"LintInflixNode\" />\r\n\r\n        var operator = $data.binaryOperators.getOperator(node.value);\r\n        var nodeType = operator.expressionType;\r\n\r\n        var left = this.Build2(node.first || node.left);\r\n        var right = this.Build2(node.second || node.right);\r\n        var result = new $data.Expressions.SimpleBinaryExpression(left, right, nodeType, node.value, operator.type);\r\n        return result;\r\n    }\r\n\r\n    //Build: function (node, expNode) {\r\n    //    var n;\r\n    //    switch (node.arity) {\r\n    //        case \"ternary\":\r\n    //            if (node.value == \"?\")\r\n    //                n = this.BuildDecision(node, expNode);\r\n    //            else\r\n    //                Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n    //            break;\r\n    //        case null:\r\n    //        default:\r\n    //            Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n    //    }\r\n    //    return n;\r\n    //},*/\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ConstantExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (value, type, name, elementType) {\r\n        this.value = value;\r\n        //TODO\r\n        //this.type = Container.getTypeName(value);\r\n\r\n        this.type = type;\r\n        this.name = name;\r\n        this.elementType = elementType;\r\n        if (!Guard.isNullOrUndefined(this.value)) {\r\n            this.type = Container.resolveType(this.type)\r\n            if ((this.type === $data.Array && this.elementType) || Container.resolveType(Container.getTypeName(this.value)) !== this.type)\r\n                this.value = Container.convertTo(value, this.type, this.elementType);\r\n        }\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Constant, enumerable: true },\r\n    type: { value: Object, writable: true },\r\n    elementType: { value: Object, writable: true },\r\n    value: { value: undefined, writable: true },\r\n    toString: function (debug) {\r\n        //return \"[constant: \" + this.value.toString() + \"]\";\r\n        return this.value.toString();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ContinuationExpressionBuilder', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (mode) {\r\n        this.mode = mode;\r\n    },\r\n    compile: function (query) {\r\n\r\n        var findContext = { mode: \"find\", skipExists: false };\r\n        this.Visit(query.expression, findContext);\r\n\r\n        var result = {\r\n            skip: findContext.skipSize,\r\n            take: findContext.pageSize,\r\n            message: ''\r\n        }\r\n\r\n\r\n        if ('pageSize' in findContext) {\r\n            var expression;\r\n            var context = { mode: this.mode, pageSize: findContext.pageSize };\r\n\r\n            if (!findContext.skipExists && (findContext.pageSize)) {\r\n                context.append = true;\r\n                expression = this.Visit(query.expression, context);\r\n\r\n            } else if (findContext.skipExists) {\r\n                expression = this.Visit(query.expression, context)\r\n            }\r\n\r\n            if (!context.abort) {\r\n                result.expression = expression\r\n            }\r\n            else {\r\n                result.skip = (result.skip || 0) - result.take;\r\n                result.message = 'Invalid skip value!';\r\n            }\r\n        }else{\r\n            result.message = 'take expression not defined in the chain!';\r\n        }\r\n\r\n        return result;\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n\r\n        switch (context.mode) {\r\n            case 'find':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Take) {\r\n                    context.pageSize = expression.amount.value;\r\n                } else {\r\n                    context.skipSize = expression.amount.value;\r\n                    context.skipExists = true;\r\n                }\r\n                break;\r\n            case 'prev':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Skip) {\r\n                    var amount = expression.amount.value - context.pageSize;\r\n                    context.abort = amount < 0 && expression.amount.value >= context.pageSize;\r\n\r\n                    var constExp = Container.createConstantExpression(Math.max(amount, 0), \"number\");\r\n                    return Container.createPagingExpression(expression.source, constExp, expression.nodeType);\r\n                } else if (context.append) {\r\n                    //no skip expression, skip: 0, no prev\r\n                    context.abort = true;\r\n                }\r\n                break;\r\n            case 'next':\r\n                if (expression.nodeType === $data.Expressions.ExpressionType.Skip) {\r\n                    var amount = context.pageSize + expression.amount.value;\r\n                    var constExp = Container.createConstantExpression(amount, \"number\");\r\n                    return Container.createPagingExpression(expression.source, constExp, expression.nodeType);\r\n                } else if (context.append) {\r\n                    //no skip expression, skip: 0\r\n                    var constExp = Container.createConstantExpression(context.pageSize, \"number\");\r\n                    return Container.createPagingExpression(expression, constExp, $data.Expressions.ExpressionType.Skip);\r\n                }\r\n                break;\r\n            default:\r\n        }\r\n\r\n        this.Visit(expression.source, context);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.AssociationInfoExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (associationInfo) {\r\n        this.associationInfo = associationInfo;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.AssociationInfo, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, parameters) {\r\n        if (Container.resolveType(Container.getTypeName(source)) == $data.String && \r\n            source.replace(/^[\\s\\xA0]+/, \"\").match(\"^function\") != \"function\" && \r\n             !/^[^\\.]*(=>)/.test(source.replace(/^[\\s\\xA0]+/, \"\"))) \r\n        {\r\n            source = \"function (it) { return \" + source + \"; }\";\r\n        }\r\n\r\n        this.source = source;\r\n        this.parameters = parameters;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Code, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.CodeToEntityConverter', $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function (scopeContext) {\r\n        ///<summary>This visitor converts a JS language tree into a semantical Entity Expression Tree &#10;This visitor should be invoked on a CodeExpression</summary>\r\n        ///<param name=\"context\">context.thisArg contains parameters, context.lambdaParams should have an array value</param>\r\n        this.scopeContext = scopeContext;\r\n        this.parameters = [];\r\n\r\n    },\r\n\r\n\r\n    VisitBinary: function (expression, context) {\r\n        var left = this.Visit(expression.left, context);\r\n        var right = this.Visit(expression.right, context);\r\n\r\n        if ((!(left instanceof $data.Expressions.ConstantExpression) && right instanceof $data.Expressions.ConstantExpression) ||\r\n            (!(right instanceof $data.Expressions.ConstantExpression) && left instanceof $data.Expressions.ConstantExpression)) {\r\n\r\n            var refExpression, constExpr;\r\n            if (right instanceof $data.Expressions.ConstantExpression) {\r\n                refExpression = left;\r\n                constExpr = right;\r\n            } else {\r\n                refExpression = right;\r\n                constExpr = left;\r\n            }\r\n\r\n            var memInfo;\r\n            if ((memInfo = refExpression.selector) instanceof $data.Expressions.MemberInfoExpression ||\r\n                (memInfo = refExpression.operation) instanceof $data.Expressions.MemberInfoExpression) {\r\n\r\n\r\n                if (memInfo.memberDefinition && (memInfo.memberDefinition.type || memInfo.memberDefinition.dataType)) {\r\n                    var fieldType = Container.resolveType(memInfo.memberDefinition.type || memInfo.memberDefinition.dataType);\r\n                    var constExprType = Container.resolveType(constExpr.type);\r\n\r\n                    if (fieldType !== constExprType) {\r\n\r\n                        var value = constExpr.value;\r\n                        if (expression.operator === $data.Expressions.ExpressionType.In) {\r\n                            if (Array.isArray(value)) {\r\n                                var resultExp = [];\r\n                                for (var i = 0; i < value.length; i++) {\r\n                                    resultExp.push(new $data.Expressions.ConstantExpression(value[i], fieldType));\r\n                                }\r\n                                value = resultExp;\r\n                                fieldType = $data.Array;\r\n                            } else {\r\n                                fieldType = constExprType;\r\n                            }\r\n                        }\r\n\r\n                        if (right === constExpr) {\r\n                            right = new $data.Expressions.ConstantExpression(value, fieldType, right.name);\r\n                        } else {\r\n                            left = new $data.Expressions.ConstantExpression(value, fieldType, left.name);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var operatorResolution = this.scopeContext.resolveBinaryOperator(expression.nodeType, expression, context.frameType);\r\n        var result = Container.createSimpleBinaryExpression(left, right, expression.nodeType, expression.operator, expression.type, operatorResolution);\r\n        return result;\r\n    },\r\n\r\n    VisitUnary: function (expression, context) {\r\n        var operand = this.Visit(expression.operand, context);\r\n        var operatorResolution = this.scopeContext.resolveUnaryOperator(expression.nodeType, expression, context.frameType);\r\n        var result = Container.createUnaryExpression(operand, expression.operator, expression.nodeType, operatorResolution);\r\n        return result;\r\n    },\r\n\r\n    VisitParameter: function (expression, context) {\r\n        Guard.requireValue(\"context\", context);\r\n        var et = $data.Expressions.ExpressionType;\r\n        switch (expression.nodeType) {\r\n            case et.LambdaParameterReference:\r\n                var result = Container.createEntityExpression(context.lambdaParameters[expression.paramIndex], { lambda: expression.name });\r\n                return result;\r\n            case et.LambdaParameter:\r\n                //TODO: throw descriptive exception or return a value\r\n                break;\r\n            default:\r\n                Guard.raise(\"Parameter '\" + expression.name + \"' is missing!\");\r\n                break;\r\n        }\r\n    },\r\n\r\n    VisitThis: function (expression, context) {\r\n        ///<summary>converts the ThisExpression into a QueryParameterExpression tha't value will be evaluated and stored in this.parameters collection</summary>\r\n        var index = this.parameters.push({ name: \"\", value: undefined }) - 1;\r\n        var result = Container.createQueryParameterExpression(\"\", index, context.queryParameters, undefined);\r\n        return result;\r\n    },\r\n\r\n    VisitFunction: function (expression, context) {\r\n        var result = $data.Expressions.ExpressionVisitor.prototype.VisitFunction.apply(this, arguments);\r\n        return result.body;\r\n    },\r\n\r\n    VisitCall: function (expression, context) {\r\n        //var exp = this.Visit(expression.expression);\r\n        var self = this;\r\n        var exp = this.Visit(expression.expression, context);\r\n        var member = this.Visit(expression.member, context);\r\n        var args = expression.args.map(function (arg) {\r\n            if (arg instanceof $data.Expressions.FunctionExpression && \r\n               (exp instanceof $data.Expressions.EntitySetExpression || exp instanceof $data.Expressions.FrameOperationExpression))\r\n            {\r\n                var operation = self.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\r\n                if(!operation){\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                \r\n                var entitySet = self.scopeContext.getEntitySetFromElementType(exp.elementType)\r\n                var setExpr = null;\r\n                if(!entitySet){\r\n                    //TODO\r\n                    Guard.raise(\"Nested operations without entity set is not supported\");\r\n                } else {\r\n                    setExpr = entitySet.expression;\r\n                }\r\n                \r\n                var frameType = context.frameType;\r\n                context.frameType = operation.frameType;\r\n                context.lambdaParameters.push(setExpr);\r\n                var res = self.Visit(arg, context);\r\n                context.lambdaParameters.pop();\r\n                context.frameType = frameType;\r\n                \r\n                if (operation.frameTypeFactory) {\r\n                    return operation.frameTypeFactory(setExpr, res)\r\n                } else {\r\n                    return new operation.frameType(setExpr, res);\r\n                }\r\n            } else {\r\n                return self.Visit(arg, context);\r\n            }\r\n        });\r\n        var result;\r\n\r\n        ///filter=>function(p) { return p.Title == this.xyz.BogusFunction('asd','basd');}\r\n        switch (true) {\r\n            case exp instanceof $data.Expressions.QueryParameterExpression:\r\n                var argValues = args.map(function (a) { return a.value; });\r\n                result = expression.implementation(exp.value, member.value, argValues);\r\n                //var args = expressions\r\n                return Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, result, typeof result);\r\n            case exp instanceof $data.Expressions.EntityFieldExpression:\r\n\r\n            case exp instanceof $data.Expressions.EntityFieldOperationExpression:\r\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFieldOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\r\n                return result;\r\n\r\n            case exp instanceof $data.Expressions.EntitySetExpression:\r\n            case exp instanceof $data.Expressions.FrameOperationExpression:\r\n                var operation = this.scopeContext.resolveSetOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createFrameOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.parameters));\r\n                return result;\r\n\r\n            case exp instanceof $data.Expressions.EntityExpression:\r\n                var operation = this.scopeContext.resolveTypeOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\r\n                }\r\n\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\r\n                return result;\r\n                break;\r\n            case exp instanceof $data.Expressions.EntityContextExpression:\r\n                var operation = this.scopeContext.resolveContextOperations(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity function operation: \" + member.getJSON());\r\n                }\r\n\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createContextFunctionOperationExpression(exp, member, this._resolveFunctionArguments(args, operation.method.params));\r\n                return result;\r\n                break;\r\n            default:\r\n                Guard.raise(\"VisitCall: Only fields can have operations: \" + expression.getType().name);\r\n                //TODO we must not alter the visited tree\r\n        }\r\n\r\n    },\r\n    _resolveFunctionArguments: function (args, params) {\r\n        if (params) // remove current field poz\r\n            params = params.filter(function (p, i) { return p.name !== '@expression'; });\r\n\r\n        //objectArgs\r\n        if (args.length === 1 && args[0] instanceof $data.Expressions.ConstantExpression && typeof args[0].value === 'object' && args[0].value && params && params[0] &&\r\n            args[0].value.constructor === $data.Object && params.some(function (param) { return param.name in args[0].value })) {\r\n\r\n            return params.map(function (p) {\r\n                var type = p.type || p.dataType || args[0].type;\r\n                return new $data.Expressions.ConstantExpression(args[0].value[p.name], Container.resolveType(type), p.name);\r\n            });\r\n\r\n        } else {\r\n            return args.map(function (expr, i) {\r\n                if (expr instanceof $data.Expressions.ConstantExpression && params && params[i]) {\r\n                    var type = params[i].type || params[i].dataType || expr.type;\r\n                    return new $data.Expressions.ConstantExpression(expr.value, Container.resolveType(type), params[i].name);\r\n                } else {\r\n                    return expr;\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    VisitProperty: function (expression, context) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.PropertyExpression\" />\r\n        var exp = this.Visit(expression.expression, context);\r\n        var member = this.Visit(expression.member, context);\r\n\r\n        //Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\r\n        Guard.requireType(\"member\", member, $data.Expressions.ConstantExpression);\r\n\r\n        function isPrimitiveType(memberDefinitionArg) {\r\n\r\n            var t = memberDefinitionArg.dataType;\r\n            if (typeof t === 'function') { return false; }\r\n\r\n\t\t\t// suspicious code\r\n            /*switch (t) {\r\n                //TODO: implement this\r\n            }*/\r\n        }\r\n\r\n        switch (exp.expressionType) {\r\n            case $data.Expressions.EntitySetExpression:\r\n            case $data.Expressions.EntityExpression:\r\n                var memberDefinition = exp.getMemberDefinition(member.value);\r\n                if (!memberDefinition) {\r\n                    Guard.raise(new Exception(\"Unknown member: \" + member.value, \"MemberNotFound\"));\r\n                }\r\n                //var storageMemberDefinition =\r\n                var storageField = memberDefinition.storageModel\r\n                                                   .PhysicalType.memberDefinitions.getMember(memberDefinition.name);\r\n                var res;\r\n                var memberDefinitionExp;\r\n                switch (storageField.kind) {\r\n                    case \"property\":\r\n                        memberDefinitionExp = Container.createMemberInfoExpression(memberDefinition);\r\n                        res = Container.createEntityFieldExpression(exp, memberDefinitionExp);\r\n                        return res;\r\n                    case \"navProperty\":\r\n                        var assocInfo = memberDefinition.storageModel.Associations[memberDefinition.name];\r\n                        var setExpression = Container.createEntitySetExpression(exp, Container.createAssociationInfoExpression(assocInfo));\r\n                        if (assocInfo.ToMultiplicity !== \"*\") {\r\n                            var ee = Container.createEntityExpression(setExpression, {});\r\n                            return ee;\r\n                        }/* else {\r\n                            context.lambdaParameters.push(setExpression);\r\n                        }*/\r\n                        return setExpression;\r\n                    case \"complexProperty\":\r\n                        memberDefinitionExp = Container.createMemberInfoExpression(memberDefinition);\r\n                        res = Container.createComplexTypeExpression(exp, memberDefinitionExp);\r\n                        return res;\r\n                        //TODO: missing default case\r\n                }\r\n\r\n                //s/switch => property or navigationproperty\r\n            case $data.Expressions.ComplexTypeExpression:\r\n                var memDef = exp.getMemberDefinition(member.value);\r\n                if (!(memDef)) {\r\n                    Guard.raise(\"Unknown member \" + member.value + \" on \" + exp.entityType.name);\r\n                }\r\n                var memDefExp = Container.createMemberInfoExpression(memDef);\r\n                var result;\r\n                //TODO!!!!\r\n                if (Container.isPrimitiveType(Container.resolveType(memDef.dataType))) {\r\n                    result = Container.createEntityFieldExpression(exp, memDefExp);\r\n                    return result;\r\n                }\r\n                result = Container.createComplexTypeExpression(exp, memDefExp);\r\n                return result;\r\n            case $data.Expressions.QueryParameterExpression:\r\n                var value = expression.implementation(exp.value, member.value);\r\n                this.parameters[exp.index].name += \"$\" + member.value;\r\n                this.parameters[exp.index].value = value;\r\n                return Container.createQueryParameterExpression(exp.name + \"$\" + member.value, exp.index, value, Container.getTypeName(value));\r\n            case $data.Expressions.EntityFieldExpression:\r\n            case $data.Expressions.EntityFieldOperationExpression:\r\n                var operation = this.scopeContext.resolveFieldOperation(member.value, exp, context.frameType);\r\n                if (!operation) {\r\n                    Guard.raise(\"Unknown entity field operation: \" + member.getJSON());\r\n                }\r\n                member = Container.createMemberInfoExpression(operation);\r\n                result = Container.createEntityFieldOperationExpression(exp, member, []);\r\n\r\n                return result;\r\n            default:\r\n                Guard.raise(\"Unknown expression type to handle: \" + exp.expressionType.name);\r\n        }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ComplexTypeExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.ComplexTypeExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source, [$data.Expressions.EntityExpression, $data.Expressions.ComplexTypeExpression]);\r\n        Guard.requireType(\"selector\", selector, [$data.Expressions.EntityExpression, $data.Expressions.MemberInfoExpression]);\r\n        this.source = source;\r\n        this.selector = selector;\r\n        var dt = source.entityType.getMemberDefinition(selector.memberName).dataType;\r\n        var t = Container.resolveType(dt);\r\n        this.entityType = t;\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        return this.entityType.getMemberDefinition(name);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Com }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityContextExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (instance) {\r\n        ///<param name=\"instance\" type=\"$data.EntityContext\" />\r\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false });\r\n        this.instance = instance;\r\n        //this.storage_type = {};\r\n        //this.typeName = this.type.name;\r\n    },\r\n    instance: { enumerable: false },\r\n    nodeType : { value: $data.Expressions.ExpressionType.EntityContext, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.IndexingExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.AccessorExpression\" />\r\n        ///</signature>\r\n        Guard.requireValue(\"source\", source);\r\n        Guard.requireValue(\"selector\", selector);\r\n        if (!(source instanceof $data.Expressions.EntitySetExpression) && !(source instanceof $data.Expressions.ServiceOperationExpression)) {\r\n            Guard.raise(\"Only EntitySetExpressions can be the source for an EntityExpression\");\r\n        }\r\n\r\n        this.source = source;\r\n        this.selector = selector;\r\n\r\n        this.entityType = this.source.elementType;\r\n        this.storageModel = this.source.storageModel;\r\n\r\n        Guard.requireValue(\"entityType\", this.entityType);\r\n        Guard.requireValue(\"storageModel\", this.storageModel);\r\n\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        var memdef = this.entityType.getMemberDefinition(name);\r\n        if (!(memdef)) {\r\n            Guard.raise(new Exception(\"Unknown member \" + name + \" on type \"+ this.entityType.name, \"MemberNotFound\"));\r\n        };\r\n            memdef.storageModel = this.storageModel;\r\n        return memdef;\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Entity }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityExpressionVisitor', null, null, {\r\n\r\n    constructor: function () {\r\n        this.lambdaTypes = [];\r\n    },\r\n\r\n    canVisit: function (expression) {\r\n        return expression instanceof $data.Expressions.ExpressionNode;\r\n    },\r\n\r\n    Visit: function (expression, context) {\r\n        if (!this.canVisit(expression))\r\n            return expression;\r\n\r\n        var visitorName = \"Visit\" + expression.getType().name;\r\n        if (visitorName in this) {\r\n            var fn = this[visitorName];\r\n            var result = fn.call(this, expression, context);\r\n            if (typeof result === 'undefined') {\r\n                return expression;\r\n            }\r\n            return result;\r\n        }\r\n        //console.log(\"unhandled expression type:\" + expression.getType().name);\r\n        return expression;\r\n    },\r\n    VisitToArrayExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createToArrayExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitForEachExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createForEachExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitMemberInfoExpression: function (expression, context) {\r\n        return expression;\r\n    },\r\n\r\n    VisitSingleExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createSingleExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitFirstExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createFirstExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitSomeExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createSomeExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitFindExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createFindExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitEveryExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createEveryExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source)\r\n            return Container.createCountExpression(source);\r\n        return expression;\r\n    },\r\n\r\n    VisitBatchDeleteExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        if (source !== expression.source) {\r\n            return Container.createBatchDeleteExpression(source);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitBatchExecuteQueryExpression: function (expression, context) {\r\n        var newQueries = expression.members.map(function (expr) {\r\n            return this.Visit(expr, context);\r\n        }, this);\r\n\r\n        var equal = true;\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            equal = equal && (expression.members[i] === newQueries[i]);\r\n        }\r\n        if (!equal) {\r\n            return Container.createBatchExecuteQueryExpression(newQueries);\r\n        }\r\n\r\n        return expression;\r\n    },\r\n\r\n    VisitObjectLiteralExpression: function (expression, context) {\r\n        var newValues = expression.members.map(function (ofe) {\r\n            return this.Visit(ofe, context);\r\n        }, this);\r\n        var equal = true;\r\n        for (var i = 0; i < expression.members.length; i++) {\r\n            equal = equal && (expression.members[i] === newValues[i]);\r\n        }\r\n        if (!equal) {\r\n            return Container.createObjectLiteralExpression(newValues);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitObjectFieldExpression: function (expression, context) {\r\n        var newExpression = this.Visit(expression.expression, context);\r\n        if (expression.expression !== newExpression) {\r\n            return Container.createObjectFieldExpression(expression.fieldName, newExpression);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        var newExpression = this.Visit(expression.source, context);\r\n        if (newExpression !== expression.source) {\r\n            return Container.createIncludeExpression(newExpression, expression.selector);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitUnaryExpression: function(expression, context) {\r\n\r\n    \t/// <param name=\"expression\" type=\"$data.Expressions.UnaryExpression\"></param>\r\n    \t/// <param name=\"context\"></param>\r\n        var operand = this.Visit(expression.operand, context);\r\n        if (expression.operand !== operand) {\r\n            return Container.createUnaryExpression(operand, expression.operator, expression.nodeType, expression.resolution);\r\n        };\r\n        return expression;\r\n    },\r\n\r\n    VisitSimpleBinaryExpression: function (expression, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        //<returns type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n        var left = this.Visit(expression.left, context);\r\n        var right = this.Visit(expression.right, context);\r\n        if (left !== expression.left || right !== expression.right) {\r\n            return new $data.Expressions.SimpleBinaryExpression(left, right, expression.nodeType,\r\n                expression.operator, expression.type, expression.resolution);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityContextExpression: function (expression, context) {\r\n        return expression;\r\n    },\r\n\r\n    VisitCodeExpression: function (expression, context) {\r\n        /// <param name=\"expression\" type=\"$data.Expressions.CodeExpression\"></param>\r\n        /// <param name=\"context\"></param>\r\n        /// <returns type=\"$data.Expressions.CodeExpression\"></returns>\r\n        return expression;\r\n    },\r\n\r\n    VisitComplexTypeExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createComplexTypeExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createEntityExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var result = Container.createEntityFieldExpression(source, selector);\r\n            return result;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitEntityFieldOperationExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var operation = this.Visit(expression.operation, context);\r\n        var parameters = expression.parameters.map(function (p) {\r\n            return this.Visit(p);\r\n        }, this);\r\n        var result = Container.createEntityFieldOperationExpression(source, operation, parameters);\r\n        return result;\r\n    },\r\n\r\n    VisitParametricQueryExpression: function (expression, context) {\r\n        var exp = this.Visit(expression.expression, context);\r\n        var args = expression.parameters.map(function (p) {\r\n            return this.Visit(p);\r\n        }, this);\r\n        var result = Container.createParametricQueryExpression(exp, args);\r\n        return result;\r\n    },\r\n\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createEntitySetExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitFilterExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createFilterExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitProjectionExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n            expr.projectionAs = expression.projectionAs;\r\n            return expr;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitOrderExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createOrderExpression(source, selector, expression.nodeType);\r\n        }\r\n        return expression;\r\n    },\r\n    VisitPagingExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        var amount = this.Visit(expression.amount, context);\r\n        if (source !== expression.source || amount !== expression.amount) {\r\n            return Container.createPagingExpression(source, amount, expression.nodeType);\r\n        }\r\n        return expression;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityFieldExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector) {\r\n        ///<param name=\"source\" type=\"$data.Entity.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Entity.MemberInfoExpression\" />\r\n        this.selector = selector;\r\n        this.source = source;\r\n\r\n\r\n        if (this.selector instanceof $data.Expressions.MemberInfoExpression ||  this.selector.name) {\r\n            this.memberName = this.selector.name;\r\n        }\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityField }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntityFieldOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, operation, parameters) {\r\n        this.source = source;\r\n        this.operation = operation;\r\n        this.parameters = parameters;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityFieldOperation }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.EntitySetExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector, params, instance) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source,\r\n                    [$data.Expressions.EntityContextExpression, $data.Expressions.EntitySetExpression]);\r\n        Guard.requireType(\"selector\", source,\r\n                    [$data.Expressions.MemberInfoExpression, $data.Expressions.CodeExpression, $data.Expressions.ParametricQueryExpression]);\r\n\r\n        this.source = source;\r\n        this.selector = selector;\r\n        this.params = params;\r\n        //Object.defineProperty(this, \"instance\", { value: instance, enumerable: false, writable: true });\r\n        this.instance = instance;\r\n\r\n        function findContext() {\r\n            //TODO: use source from function parameter and return a value at the end of the function\r\n            var r = source;\r\n            while (r) {\r\n                if (r instanceof $data.Expressions.EntityContextExpression) {\r\n                    return r;\r\n                }\r\n                r = r.source;\r\n            }\r\n        }\r\n\r\n        ///TODO!!!\r\n        this.storage_type = {};\r\n        var c = findContext();\r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntityContextExpression:\r\n                Guard.requireType(\"selector\", selector, $data.Expressions.MemberInfoExpression);\r\n                this.elementType = selector.memberDefinition.elementType;\r\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\r\n                break;\r\n            case this.source instanceof $data.Expressions.EntityExpression:\r\n                Guard.requireType(\"selector\", selector, $data.Expressions.AssociationInfoExpression);\r\n                this.elementType = selector.associationInfo.ToType;\r\n                this.storageModel = c.instance._storageModel.getStorageModel(this.elementType);\r\n                break;\r\n            case this.source instanceof $data.Expressions.EntitySetExpression:\r\n                if (selector instanceof $data.Expressions.AssociationInfoExpression) {\r\n                    this.elementType = selector.associationInfo.ToType,\r\n                    this.storageModel = c.instance._storageModel.getStorageModel(selector.associationInfo.ToType)\r\n                } else {\r\n                    this.elementType = this.source.elementType;\r\n                    this.storageModel = this.source.storageModel;\r\n                }\r\n                break;\r\n            case this.source instanceof $data.Expressions.ServiceOperationExpression:\r\n                this.elementType = this.source.elementType;//?????????\r\n                this.storageModel = this.source.storageModel;\r\n                break;\r\n            default:\r\n                Guard.raise(\"take and skip must be the last expressions in the chain!\");\r\n                //Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.getType().name);\r\n                break;\r\n        }\r\n\r\n        // suspicious code\r\n        /*if (this.source instanceof $data.Expressions.EntitySetExpression) {\r\n                //TODO: missing operation\r\n        }*/\r\n        //EntityTypeInfo\r\n\r\n    },\r\n    getMemberDefinition: function (name) {\r\n        var memdef = this.elementType.getMemberDefinition(name);\r\n        if (!(memdef)) {\r\n            Guard.raise(new Exception(\"Unknown member \" + name + \" on type \"+ this.entityType.name, \"MemberNotFound\"));\r\n        };\r\n            memdef.storageModel = this.storageModel;\r\n        return memdef;\r\n    },\r\n    \r\n    instance: { enumerable: false },\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntitySet, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ExpressionMonitor', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (monitorDefinition) {\r\n        this.Visit = function (expression, context) {\r\n\r\n            var result = expression;\r\n            var methodName;\r\n            if (this.canVisit(expression)) {\r\n\r\n                //if (monitorDefinition.FilterExpressionNode) {\r\n\r\n                //};\r\n\r\n                if (monitorDefinition.VisitExpressionNode) {\r\n                    monitorDefinition.VisitExpressionNode.apply(monitorDefinition, arguments);\r\n                };\r\n\r\n                methodName = \"Visit\" + expression.getType().name;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, arguments);\r\n                }\r\n            }\r\n\r\n\r\n            //apply is about 3-4 times faster then call on webkit\r\n\r\n            var args = arguments;\r\n            if (result !== expression) args = [result, context];\r\n            result = $data.Expressions.EntityExpressionVisitor.prototype.Visit.apply(this, args);\r\n\r\n            args = [result, context];\r\n\r\n            if (this.canVisit(result)) {\r\n                var expressionTypeName = result.getType().name;\r\n                if (monitorDefinition.MonitorExpressionNode) {\r\n                    monitorDefinition.MonitorExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Monitor\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n                if (monitorDefinition.MutateExpressionNode) {\r\n                    monitorDefinition.MutateExpressionNode.apply(monitorDefinition, args);\r\n                }\r\n                methodName = \"Mutate\" + expressionTypeName;\r\n                if (methodName in monitorDefinition) {\r\n                    result = monitorDefinition[methodName].apply(monitorDefinition, args);\r\n                }\r\n\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FilterExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.ParametricQueryExpression\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.CodeExpression\" />\r\n        ///</signature>\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Filter, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.InlineCountExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.InlineCount, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.BatchExecuteQueryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (members) {\r\n        this.members = members;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.BatchExecuteQuery, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FrameOperator', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function () {\r\n        this.isTerminated = true;\r\n    }\r\n});\r\n\r\n$C('$data.Expressions.CountExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Integer;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Count, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.SingleExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Single, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FindExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source, params, subMember) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.params = params;\r\n        this.subMember = subMember;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Find, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.FirstExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.First, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.ForEachExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ForEach, enumerable: true }\r\n});\r\n$C('$data.Expressions.ToArrayExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Array;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ToArray, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.SomeExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Some, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.EveryExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Object;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Every, enumerable: true }\r\n});\r\n\r\n$C('$data.Expressions.BatchDeleteExpression', $data.Expressions.FrameOperator, null, {\r\n    constructor: function (source) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntitySetExpression\" />\r\n        ///</signature>\r\n        this.source = source;\r\n        this.resultType = $data.Integer;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.BatchDelete, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FrameOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, operation, parameters) {\r\n        this.source = source;\r\n        this.operation = operation;\r\n        this.parameters = parameters;\r\n        \r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntitySetExpression:\r\n            case this.source instanceof $data.Expressions.FrameOperationExpression:\r\n                this.elementType = this.source.elementType;\r\n                this.storageModel = this.source.storageModel;\r\n                break;\r\n        }\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.FrameOperation }\r\n\r\n});\r\n\r\n$C('$data.Expressions.EntityFunctionOperationExpression', $data.Expressions.FrameOperationExpression, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.EntityFunctionOperation }\r\n});\r\n\r\n$C('$data.Expressions.ContextFunctionOperationExpression', $data.Expressions.FrameOperationExpression, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.ContextFunctionOperation }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.IncludeExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector) {\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Include, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.MemberInfoExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (memberDefinition) {\r\n        this.memberDefinition = memberDefinition;\r\n        this.memberName = memberDefinition.name;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.MemberInfo, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.OrderExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, expression, nType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        //this.source = source;\r\n        //this.selector = expression;\r\n        this.nodeType = nType;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.OrderBy, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParametricQueryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, parameters) {\r\n        this.expression = expression;\r\n        this.parameters = parameters || [];\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ParametricQuery, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ProjectionExpression', $data.Expressions.EntitySetExpression, null, {\r\n    constructor: function (source, selector, params, instance) {\r\n\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Projection, enumerable: true }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.QueryExpressionCreator', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (scopeContext) {\r\n        ///<param name=\"scopeContext\" type=\"$data.Expressions.EntityContext\" />\r\n        Guard.requireValue(\"scopeContext\", scopeContext);\r\n        this.scopeContext = scopeContext;\r\n    },\r\n    VisitEntitySetExpression: function (expression, context) {\r\n        if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n            this.lambdaTypes.push(expression);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitServiceOperationExpression: function (expression, context) {\r\n        if (expression.source instanceof $data.Expressions.EntityContextExpression) {\r\n            this.lambdaTypes.push(expression);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitCodeExpression: function (expression, context) {\r\n        ///<summary>Converts the CodeExpression into an EntityExpression</summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.CodeExpression\" />\r\n        var source = expression.source.toString();\r\n        var jsCodeTree = Container.createCodeParser(this.scopeContext).createExpression(source);\r\n        this.scopeContext.log({ event: \"JSCodeExpression\", data: jsCodeTree });\r\n\r\n        //TODO rename classes to reflex variable names\r\n        //TODO engage localValueResolver here\r\n        //var globalVariableResolver = Container.createGlobalContextProcessor($data.__global);\r\n        var constantResolver = Container.createConstantValueResolver(expression.parameters, $data.__global, this.scopeContext);\r\n        var parameterProcessor = Container.createParameterResolverVisitor();\r\n\r\n        jsCodeTree = parameterProcessor.Visit(jsCodeTree, constantResolver);\r\n\r\n        this.scopeContext.log({ event: \"JSCodeExpressionResolved\", data: jsCodeTree });\r\n        var code2entity = Container.createCodeToEntityConverter(this.scopeContext);\r\n\r\n        ///user provided query parameter object (specified as thisArg earlier) is passed in\r\n        var entityExpression = code2entity.Visit(jsCodeTree, {  queryParameters: expression.parameters, lambdaParameters: this.lambdaTypes, frameType: context.frameType });\r\n\r\n        ///parameters are referenced, ordered and named, also collected in a flat list of name value pairs\r\n        var result = Container.createParametricQueryExpression(entityExpression, code2entity.parameters);\r\n        this.scopeContext.log({ event: \"EntityExpression\", data: entityExpression });\r\n\r\n        return result;\r\n    },\r\n\r\n\r\n    VisitFilterExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createFilterExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitInlineCountExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createInlineCountExpression(source, selector, expression.params, expression.instance);\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitProjectionExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            var expr = Container.createProjectionExpression(source, selector, expression.params, expression.instance);\r\n            expr.projectionAs = expression.projectionAs;\r\n            return expr;\r\n        }\r\n        return expression;\r\n    },\r\n\r\n    VisitOrderExpression: function (expression, context) {\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createOrderExpression(source, selector, expression.nodeType);\r\n        }\r\n        return expression;\r\n    },\r\n    \r\n    VisitIncludeExpression: function(expression, context){\r\n        var source = this.Visit(expression.source, context);\r\n        context = context || {};\r\n        context.frameType = expression.getType();\r\n        var selector = this.Visit(expression.selector, context);\r\n        if (source !== expression.source || selector !== expression.selector) {\r\n            return Container.createIncludeExpression(source, selector);\r\n        }\r\n        return expression;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.QueryParameterExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, index, value, type) {\r\n        this.name = name;\r\n        this.index = index;\r\n        this.value = value;\r\n        //TODO\r\n        this.type = Container.getTypeName(value);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.QueryParameter, writable: false }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.RepresentationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (kind) {\r\n    },\r\n\r\n    getMemberDefinition: function (name) {\r\n        return this.entityType.getMemberDefinition(name);\r\n    },\r\n\r\n    nodeType: { value: $data.Expressions.ExpressionType.Entity }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ServiceOperationExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, selector, params, cfg, boundItem) {\r\n        ///<signature>\r\n        ///<param name=\"source\" type=\"$data.Expressions.EntityContextExpression\" />\r\n        ///<param name=\"selector\" type=\"$data.Expressions.MemberInfoExpression\" />\r\n        ///<param name=\"params\" type=\"$data.Array\" />\r\n        ///<param name=\"cfg\" type=\"$data.Object\" />\r\n        ///</signature>\r\n        Guard.requireType(\"source\", source, [$data.Expressions.EntityContextExpression]);\r\n        Guard.requireType(\"selector\", source, [$data.Expressions.MemberInfoExpression]);\r\n\r\n        this.source = source;\r\n        this.selector = selector\r\n        this.params = params\r\n        this.cfg = cfg;\r\n        this.boundItem = boundItem;\r\n\r\n        function findContext() {\r\n            //TODO: use source from function parameter and return a value at the end of the function\r\n            var r = source;\r\n            while (r) {\r\n                if (r instanceof $data.Expressions.EntityContextExpression) {\r\n                    return r;\r\n                }\r\n                r = r.source;\r\n            }\r\n        }\r\n\r\n        var c = findContext();\r\n        switch (true) {\r\n            case this.source instanceof $data.Expressions.EntityContextExpression:\r\n                this.elementType = cfg.elementType ? Container.resolveType(cfg.elementType) : (this.elementType ? Container.resolveType(cfg.returnType) : null);\r\n                this.storageModel = cfg.elementType ? c.instance._storageModel.getStorageModel(Container.resolveType(cfg.elementType)) : null;\r\n                break;\r\n            default:\r\n                Guard.raise(\"Unknown source type for EntitySetExpression: \" + this.source.getType().name);\r\n        }\r\n\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ServiceOperation, enumerable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n $data.Class.define('$data.Expressions.ExpressionBuilder', null, null,\r\n{\r\n    constructor: function (context) {\r\n        this.context = context;\r\n    },\r\n    _isLambdaParam: function (name) {\r\n        var p = this.context.lambdaParams;\r\n        for (var i = 0; i < p.length; i++) {\r\n            if (p[i] == name)\r\n                return true;\r\n        }\r\n        return false;\r\n    },\r\n    _isParam: function (name) {\r\n        return this.context.paramContext[name] != undefined;\r\n    },\r\n    _isParamRoot: function (name) {\r\n        return this.context.paramsName == name;\r\n    },\r\n    Build: function (node, expNode) {\r\n        var n;\r\n        switch (node.arity) {\r\n            case \"infix\":\r\n                if (\"(\" == node.value)\r\n                    n = this.BuildMethodCall(node, expNode);\r\n                else if (\".\" == node.value)\r\n                    n = this.BuildMember(node, expNode);\r\n                else if ([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildEquality(node, expNode);\r\n                else if ([\"&&\", \"||\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildBinary(node, expNode);\r\n                else if ([\"+\", \"-\", \"*\", \"/\", \"%\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildBinary(node, expNode);\r\n                else if (\"[\" == node.value)\r\n                    n = this.BuildArrayAccess(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of infix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"prefix\":\r\n                if ([\"+\", \"-\", \"!\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildUnary(node, expNode);\r\n                else if ([\"++\", \"--\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildIncDec(node, expNode);\r\n                else if (\"{\" == node.value/* && \"object\" == node.type*/) //TODO: check the second condition necessity\r\n                    n = this.BuildNewExpression(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of prefix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"suffix\":\r\n                if ([\"++\", \"--\"].indexOf(node.value) >= 0)\r\n                    n = this.BuildIncDec(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of suffix node isn't implemented: \" + node.value);\r\n                break;\r\n            case \"string\":\r\n            case \"number\":\r\n                n = this.BuildLiteral(node, expNode); //TODO: more arity to literal?\r\n                break;\r\n            case \"ternary\":\r\n                if (node.value == \"?\")\r\n                    n = this.BuildDecision(node, expNode);\r\n                else\r\n                    Guard.raise(\"Value of ternary node isn't implemented: \" + node.value);\r\n                break;\r\n            case null:\r\n            case undefined:\r\n                if (node.type == \"boolean\" && (node.value == \"true\" || node.value == \"false\"))\r\n                    n = this.BuildBoolLiteral(node, expNode);\r\n                else\r\n                    n = this.BuildVariable(node, expNode);\r\n                break;\r\n            default:\r\n                Guard.raise(\"Arity isn't implemented: \" + node.arity);\r\n        }\r\n        return n;\r\n    },\r\n    BuildNewExpression: function (node, expNode) {\r\n        var newExpression = $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, []);\r\n        var n = node.first;\r\n        for (var i = 0; i < n.length; i++)\r\n            newExpression.values.push(this.Build(n[i], newExpression));\r\n        return newExpression;\r\n    },\r\n    BuildLiteral: function (node, expNode) {\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\r\n    },\r\n    BuildBoolLiteral: function (node, expNode) {\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.type, node.value == \"true\" ? true : false);\r\n    },\r\n    BuildVariable: function (node, expNode) {\r\n        if (!node.first) {\r\n            if (expNode.type == MEMBERACCESS) {\r\n                var subType;\r\n                if (this._isLambdaParam(node.value))\r\n                    subType = \"LAMBDAPARAM\";\r\n                else if (this._isParamRoot(node.value))\r\n                    subType = \"PARAMETERROOT\";\r\n                else if (this._isParam(node.value))\r\n                    subType = \"PARAMETER\";\r\n                else\r\n                    subType = \"PROPERTY\";\r\n            }\r\n            else {\r\n                if (this._isLambdaParam(node.value))\r\n                    subType = \"LAMBDAPARAM\";\r\n                else if (this._isParamRoot(node.value))\r\n                    subType = \"PARAMETERROOT\";\r\n                else if (this._isParam(node.value))\r\n                    subType = \"PARAMETER\";\r\n                else if ($data.__global[node.value] != undefined)\r\n                    subType = \"GLOBALOBJECT\";\r\n                else\r\n\t\t\t\t\tGuard.raise(\r\n\t\t\t\t\t\tnew Exception(\"Unknown variable in '\" + this.context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + node.value + \"'.\",\r\n                        \"InvalidOperation\", { operationName: this.context.operation, missingParameterName: node.value })\r\n\t\t\t\t\t\t);\r\n            }\r\n            return $data.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, node.value, subType);\r\n        }\r\n\r\n        var left = $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, \"name\", node.value);\r\n\r\n        var jsonAssign = $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true);\r\n        var right = this.Build(node.first, jsonAssign);\r\n        //left.parent = jsonAssign;\r\n        jsonAssign.left = left;\r\n        jsonAssign.right = right;\r\n\r\n        left.JSONASSIGN = true;\r\n        right.JSONASSIGN = true;\r\n\r\n        return jsonAssign;\r\n    },\r\n    BuildMember: function (node, expNode) {\r\n        if (node.value != \".\" || node.arity != \"infix\") {\r\n            if (node.type == \"string\") { //TODO: more types?\r\n                return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, node.arity, node.value);\r\n            }\r\n            return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true, null, node.value);\r\n        }\r\n        var result = $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(true);\r\n        var expression = this.Build(node.first, result);\r\n        var member = this.Build(node.second, result);\r\n        result.expression = expression;\r\n        result.member = member;\r\n        return result;\r\n    },\r\n    BuildUnary: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(true, node.value);\r\n        result.operand = this.Build(node.first, result);\r\n        return result;\r\n    },\r\n    BuildIncDec: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(true, node.value, null, node.arity == \"suffix\");\r\n        result.operand = this.Build(node.first, result);\r\n        return result;\r\n    },\r\n    BuildBinary: function (node, expNode) {\r\n        if (!node.first) Guard.raise(\"Cannot build binary: node.first is null\");\r\n        if (!node.second) Guard.raise(\"Cannot build binary: node.second is null\");\r\n        var result = $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(true, node.value);\r\n        result.left = this.Build(node.first, result);\r\n        result.right = this.Build(node.second, result);\r\n        return result;\r\n    },\r\n    BuildEquality: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(true, node.value);\r\n        result.left = this.Build(node.first, result);\r\n        result.right = this.Build(node.second, result);\r\n        return result;\r\n    },\r\n    BuildDecision: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(true);\r\n        result.expression = this.Build(node.first, result);\r\n        result.left = this.Build(node.second, result);\r\n        result.right = this.Build(node.third, result);\r\n        return result;\r\n    },\r\n    BuildMethodCall: function (node, expNode) {\r\n        var result = $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(true);\r\n        if (node.first.type == \"function\") {\r\n            //-- object's function\r\n            result.object = this.Build(node.first.first, result);\r\n            result.method = node.first.second.value;\r\n        }\r\n        else {\r\n            //-- global function\r\n            if (node.first.type != null)\r\n                Guard.raise(\"Cannot build MethodCall because type is \" + type);\r\n            result.object = null;\r\n            result.method = node.first.value;\r\n        }\r\n        var argNodes = node.second;\r\n        var args = [];\r\n        for (var i = 0; i < argNodes.length; i++) {\r\n            var arg = argNodes[i];\r\n            args[i] = this.Build(arg, result);\r\n        }\r\n        result.args = args;\r\n        return result;\r\n    },\r\n    BuildArrayAccess: function (node, expNode) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var result = $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true);\r\n        result.array = this.Build(node.first, result);\r\n        result.index = this.Build(node.second, result);\r\n        return result;\r\n    }\r\n}, null);\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n//TODO: Finish refactoring ExpressionNode.js\r\n\r\n$data.Class.define(\"$data.Expressions.ExpressionType\", null, null, {}, {\r\n    Constant: \"constant\", // { type:LITERAL, executable:true, valueType:, value: }\r\n    Variable: \"variable\", // { type:VARIABLE, executable:true, name: }\r\n    MemberAccess: \"memberAccess\",    // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n    Call: \"call\",\r\n\r\n    /* binary operators */\r\n    Equal: \"equal\",\r\n    NotEqual: \"notEqual\",\r\n    EqualTyped: \"equalTyped\",\r\n    NotEqualTyped: \"notEqualTyped\",\r\n    GreaterThen: \"greaterThan\",\r\n    LessThen: \"lessThan\",\r\n    GreaterThenOrEqual: \"greaterThanOrEqual\",\r\n    LessThenOrEqual: \"lessThenOrEqual\",\r\n    Or: \"or\",\r\n    OrBitwise: \"orBitwise\",\r\n    And: \"and\",\r\n    AndBitwise: \"andBitwise\",\r\n\r\n\r\n    In: \"in\",\r\n\r\n    Add: \"add\",\r\n    Divide: \"divide\",\r\n    Multiply: \"multiply\",\r\n    Subtract: \"subtract\",\r\n    Modulo: \"modulo\",\r\n    ArrayIndex: \"arrayIndex\",\r\n\r\n    /* unary operators */\r\n    New: \"new\",\r\n    Positive: \"positive\",\r\n    Negative: \"negative\",\r\n    Increment: \"increment\",\r\n    Decrement: \"decrement\",\r\n    Not: \"not\",\r\n\r\n\r\n    This: \"this\",\r\n    LambdaParameterReference: \"lambdaParameterReference\",\r\n    LambdaParameter: \"lambdaParameter\",\r\n    ParameterReference: \"parameterReference\",\r\n    Parameter: \"parameter\",\r\n\r\n    ArrayLiteral: \"arrayLiteral\",\r\n    ObjectLiteral: \"objectLiteral\",\r\n    ObjectField: \"objectField\",\r\n    Function: \"Function\",\r\n    Unknown: \"UNKNOWN\",\r\n\r\n    EntitySet: \"EntitySet\",\r\n    ServiceOperation: \"ServiceOperation\",\r\n    EntityField: \"EntityField\",\r\n    EntityContext: \"EntityContext\",\r\n    Entity: \"Entity\",\r\n    Filter: \"Filter\",\r\n    First: \"First\",\r\n    Count: \"Count\",\r\n    InlineCount: \"InlineCount\",\r\n    BatchExecuteQuery: \"BatchExecuteQuery\",\r\n    Single: \"Single\",\r\n    Find: \"Find\",\r\n    Some: \"Some\",\r\n    Every: \"Every\",\r\n    ToArray: \"ToArray\",\r\n    BatchDelete: \"BatchDelete\",\r\n    ForEach: \"ForEach\",\r\n    Projection: \"Projection\",\r\n    EntityMember: \"EntityMember\",\r\n    EntityFieldOperation: \"EntityFieldOperation\",\r\n    FrameOperation: \"FrameOperation\",\r\n    EntityFunctionOperation: \"EntityFunctionOperation\",\r\n    ContextFunctionOperation: \"ContextFunctionOperation\",\r\n    EntityBinary: \"EntityBinary\",\r\n    Code: \"Code\",\r\n    ParametricQuery: \"ParametricQuery\",\r\n    MemberInfo: \"MemberInfo\",\r\n    QueryParameter: \"QueryParameter\",\r\n    ComplexEntityField: \"ComplexEntityField\",\r\n\r\n    Take: \"Take\",\r\n    Skip: \"Skip\",\r\n    OrderBy: \"OrderBy\",\r\n    OrderByDescending: \"OrderByDescending\",\r\n    Include: \"Include\",\r\n\r\n    IndexedPhysicalAnd:\"IndexedDBPhysicalAndFilterExpression\",\r\n    IndexedLogicalAnd:\"IndexedDBLogicalAndFilterExpression\",\r\n    IndexedLogicalOr: \"IndexedDBLogicalOrFilterExpression\",\r\n    IndexedLogicalIn: \"IndexedDBLogicalInFilterExpression\"\r\n});\r\n\r\n$data.BinaryOperator = function () {\r\n    ///<field name=\"operator\" type=\"string\" />\r\n    ///<field name=\"expressionType\" type=\"$data.ExpressionType\" />\r\n    ///<field name=\"type\" type=\"string\" />\r\n}\r\n\r\n$data.binaryOperators = [\r\n    { operator: \"==\", expressionType: $data.Expressions.ExpressionType.Equal, type: \"boolean\", implementation: function (a, b) { return a == b; } },\r\n    { operator: \"===\", expressionType: $data.Expressions.ExpressionType.EqualTyped, type: \"boolean\", implementation: function (a, b) { return a === b; } },\r\n    { operator: \"!=\", expressionType: $data.Expressions.ExpressionType.NotEqual, type: \"boolean\", implementation: function (a, b) { return a != b; } },\r\n    { operator: \"!==\", expressionType: $data.Expressions.ExpressionType.NotEqualTyped, type: \"boolean\", implementation: function (a, b) { return a !== b; } },\r\n    { operator: \">\", expressionType: $data.Expressions.ExpressionType.GreaterThen, type: \"boolean\", implementation: function (a, b) { return a > b; } },\r\n    { operator: \">=\", expressionType: $data.Expressions.ExpressionType.GreaterThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a >= b; } },\r\n    { operator: \"<=\", expressionType: $data.Expressions.ExpressionType.LessThenOrEqual, type: \"boolean\", implementation: function (a, b) { return a <= b; } },\r\n    { operator: \"<\", expressionType: $data.Expressions.ExpressionType.LessThen, type: \"boolean\", implementation: function (a, b) { return a < b; } },\r\n    { operator: \"&&\", expressionType: $data.Expressions.ExpressionType.And, type: \"boolean\", implementation: function (a, b) { return a && b; } },\r\n    { operator: \"||\", expressionType: $data.Expressions.ExpressionType.Or, type: \"boolean\", implementation: function (a, b) { return a || b; } },\r\n    { operator: \"&\", expressionType: $data.Expressions.ExpressionType.AndBitwise, type: \"number\", implementation: function (a, b) { return a & b; } },\r\n    { operator: \"|\", expressionType: $data.Expressions.ExpressionType.OrBitwise, type: \"number\", implementation: function (a, b) { return a | b; } },\r\n    { operator: \"+\", expressionType: $data.Expressions.ExpressionType.Add, type: \"number\", implementation: function (a, b) { return a + b; } },\r\n    { operator: \"-\", expressionType: $data.Expressions.ExpressionType.Subtract, type: \"number\", implementation: function (a, b) { return a - b; } },\r\n    { operator: \"/\", expressionType: $data.Expressions.ExpressionType.Divide, type: \"number\", implementation: function (a, b) { return a / b; } },\r\n    { operator: \"%\", expressionType: $data.Expressions.ExpressionType.Modulo, type: \"number\", implementation: function (a, b) { return a % b; } },\r\n    { operator: \"*\", expressionType: $data.Expressions.ExpressionType.Multiply, type: \"number\", implementation: function (a, b) { return a * b; } },\r\n    { operator: \"[\", expressionType: $data.Expressions.ExpressionType.ArrayIndex, type: \"number\", implementation: function (a, b) { return a[b]; } },\r\n    { operator: \"in\", expressionType: $data.Expressions.ExpressionType.In, type: 'boolean', implementation: function (a, b) { return a in b; } }\r\n];\r\n\r\n\r\n$data.binaryOperators.resolve = function (operator) {\r\n    var result = $data.binaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length > 0)\r\n        return operator;\r\n    //Guard.raise(\"Unknown operator: \" + operator);\r\n};\r\n\r\n$data.binaryOperators.contains = function (operator) {\r\n    return $data.binaryOperators.some(function (item) { return item.operator == operator; });\r\n};\r\n\r\n$data.binaryOperators.getOperator = function (operator) {\r\n    ///<returns type=\"BinaryOperator\" />\r\n    var result = $data.binaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length < 1)\r\n        Guard.raise(\"Unknown operator: \" + operator);\r\n    return result[0];\r\n};\r\n\r\n\r\n$data.unaryOperators = [\r\n    { operator: \"+\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Positive, type: \"number\", implementation: function (operand) { return +operand; } },\r\n    { operator: \"-\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Negative, type: \"number\", implementation: function (operand) { return -operand; } },\r\n    { operator: \"++\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return ++operand; } },\r\n    { operator: \"--\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return --operand; } },\r\n    { operator: \"++\", arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Increment, type: \"number\", implementation: function (operand) { return operand++; } },\r\n    { operator: \"!\", arity: \"prefix\", expressionType: $data.Expressions.ExpressionType.Not, type: \"boolean\", implementation: function (operand) { return !operand; } },\r\n    { operator: \"--\", arity: \"suffix\", expressionType: $data.Expressions.ExpressionType.Decrement, type: \"number\", implementation: function (operand) { return operand--; } }\r\n\r\n    //{ operator: \"new\", expressionType : $data.Expressions.ExpressionType.New, type: \"object\", implementation: function(operand) { return new operand; }\r\n];\r\n\r\n$data.unaryOperators.resolve = function (operator) {\r\n    var result = $data.unaryOperators.filter(function (item) { return item.operator == operator; });\r\n    if (result.length > 0)\r\n        return operator;\r\n    //Guard.raise(\"Unknown operator: \" + operator);\r\n};\r\n\r\n$data.unaryOperators.contains = function (operator) {\r\n    return $data.unaryOperators.some(function (item) { return item.operator == operator; });\r\n};\r\n\r\n$data.unaryOperators.getOperator = function (operator, arity) {\r\n    ///<returns type=\"BinaryOperator\" />\r\n    var result = $data.unaryOperators.filter(function (item) { return item.operator == operator && (!arity || item.arity == arity); });\r\n    if (result.length < 1)\r\n        Guard.raise(\"Unknown operator: \" + operator);\r\n    return result[0];\r\n};\r\n\r\n\r\n$data.timeIt = function (fn, iterations) {\r\n    iterations = iterations || 1;\r\n\r\n    console.time(\"!\");\r\n    for (var i = 0; i < iterations; i++) {\r\n        fn();\r\n    }\r\n    console.timeEnd(\"!\");\r\n}\r\n\r\n$data.Expressions.OperatorTypes = {\r\n    UNARY: \"UNARY\",                  // { type:UNARY, executable:true, operator:, operand: }\r\n    INCDEC: \"INCDEC\",                // { type:INCDEC, executable:true, operator:, operand:, suffix: }\r\n    DECISION: \"DECISION\",            // { type:DECISION, executable:true, expression:, left:, right: }\r\n    METHODCALL: \"METHODCALL\",        // { type:METHODCALL, executable:true, object:, method:, args: }\r\n    NEW: \"NEW\",                      // { type:NEW, executable:true, values: [] };\r\n    JSONASSIGN: \"JSONASSIGN\",        // { type:JSONASSIGN, executable:true, left:, right: }\r\n    ARRAYACCESS: \"ARRAYACCESS\",      // { type:ARRAYACCESS, executable:true, array:, index: }\r\n    UNKNOWN: \"UNKNOWN\"\r\n};\r\n\r\n$data.executable = true;\r\n\r\nfunction jsonify(obj) { return JSON.stringify(obj, null, \"\\t\"); }\r\n\r\n$C('$data.Expressions.ExpressionNode', null, null, {\r\n    constructor: function () {\r\n        ///<summary>Provides a base class for all Expressions.</summary>\r\n        ///<field name=\"nodeType\" type=\"string\">Represents the expression type of the node&#10;\r\n        ///For the list of expression node types refer to $data.Expressions.ExpressionType\r\n        ///</field>\r\n        ///<field name=\"type\" type=\"Function\">The result type of the expression</field>\r\n        ///<field name=\"executable\" type=\"boolean\">True if the expression can be evaluated to yield a result</field>\r\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\r\n        ///this.type = type;\r\n        ///this.nodeType = $data.Expressions.ExpressionType.Unknown;\r\n        ///this.executable = (executable === undefined || executable === null) ? true : executable;\r\n        ///TODO\r\n        this.expressionType = this.constructor;\r\n    },\r\n    toJSON: function(){\r\n      var res = JSON.parse(JSON.stringify(this))\r\n      res.expressionType = Container.resolveName(this._expressionType);\r\n      return res\r\n    },\r\n    getJSON: function () { return jsonify(this); },\r\n\r\n    //TOBLOG maybe\r\n    /*expressionType: {\r\n        value: undefined,\r\n        ////OPTIMIZE\r\n        set: function (value) {\r\n            var _expressionType;\r\n            Object.defineProperty(this, \"expressionType\", {\r\n                set: function (value) {\r\n                    if (typeof value === 'string') {\r\n                        value = Container.resolveType(value);\r\n                    }\r\n                    _expressionType = value;\r\n                },\r\n                get: function (value) {\r\n                    //IE ommits listing JSON.stringify in call chain\r\n\r\n                        if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n                        return Container.resolveName(_expressionType);\r\n                    }\r\n                    return _expressionType;\r\n                },\r\n                enumerable: true\r\n            });\r\n\r\n            this.expressionType = value;\r\n        },\r\n        get: function () { return undefined; },\r\n        enumerable: true\r\n    },*/\r\n    expressionType: {\r\n        set: function (value) {\r\n            if (typeof value === 'string') {\r\n                value = Container.resolveType(value);\r\n            }\r\n            this._expressionType = value;\r\n        },\r\n        get: function (value) {\r\n            //IE ommits listing JSON.stringify in call chain\r\n\r\n            // if (arguments.callee.caller == jsonify || arguments.callee.caller == JSON.stringify) {\r\n            //     return Container.resolveName(this._expressionType);\r\n            // }\r\n            return this._expressionType;\r\n        },\r\n        enumerable: true\r\n    },\r\n    ///toString: function () { },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Unknown, writable: false },\r\n\r\n    type: {},\r\n\r\n    isTerminated: { value: false },\r\n\r\n    toString: function () {\r\n        return this.value;\r\n    }\r\n}, null);\r\n\r\n\r\n$C('$data.Expressions.UnaryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (operand, operator, nodeType, resolution) {\r\n        /// <summary>\r\n        /// Represents an operation with only one operand and an operator\r\n        /// </summary>\r\n        /// <param name=\"operand\"></param>\r\n        /// <param name=\"operator\"></param>\r\n        /// <param name=\"nodeType\"></param>\r\n        /// <param name=\"resolution\"></param>\r\n        this.operand = operand;\r\n        this.operator = operator;\r\n        this.nodeType = nodeType;\r\n        this.resolution = resolution;\r\n    },\r\n\r\n    operator: { value: undefined, writable: true },\r\n    operand: { value: undefined, writable: true },\r\n    nodeType: { value: undefined, writable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.FunctionExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, parameters, body) {\r\n        ///<signature>\r\n        ///<summary>Represents a function declaration.</summary>\r\n        ///<param name=\"name\" type=\"String\">Function name</param>\r\n        ///<param name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</param>\r\n        ///<param name=\"body\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///</signature>\r\n        ///<field name=\"parameters\" type=\"Array\" elementType=\"$data.Expressions.ParameterExpression\">The list of function parameters</field>\r\n        ///<field name=\"body\" type=\"$data.Expressions.ExpressionNode\">The function body</field>\r\n\r\n        this.parameters = parameters || [];\r\n        this.name = name;\r\n        this.body = body;\r\n    },\r\n\r\n    toString: function (debug) {\r\n        var paramStrings = this.parameters.map(function (p) {\r\n            return p.toString();\r\n        });\r\n        paramStrings = paramStrings.join(\",\");\r\n        var bodyString = (this.body ? this.body.toString(debug) : '');\r\n        return \"function \" + this.name + \"(\" + paramStrings + \") { \" + bodyString + \"}\";\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Function, writable: true },\r\n    parameters: { value: undefined, dataType: Array, elementType: $data.Expressions.ParameterExpression },\r\n    body: { value: undefined, dataType: $data.Expressions.ExpressionNode },\r\n    type: {}\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ObjectFieldExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (fieldName, expression) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        this.fieldName = fieldName;\r\n        this.expression = expression;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ObjectField, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ObjectLiteralExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (members) {\r\n        ///<summary>Represent an object initializer literal expression &#10;Ex: { prop: value}</summary>\r\n        ///<param name=\"member\" type=\"Array\" elementType=\"$data.Expressions.ObjectFieldExpression\" />\r\n        this.members = members;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.ObjectLiteral, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function(namesAndValues) {\r\n                var result = { };\r\n                namesAndValues.forEach(function(item) {\r\n                    result[item.name] = item.value;\r\n                });\r\n                return result;\r\n            };\r\n        },\r\n        set: function () {\r\n        }\r\n    }\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.PagingExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (source, expression, nType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        this.source = source;\r\n        this.amount = expression;\r\n        this.nodeType = nType;\r\n    },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Unknown, writable: true },\r\n\r\n    toString: function (debug) {\r\n        //var result;\r\n        //result = debug ? this.type + \" \" : \"\";\r\n        //result = result + this.name;\r\n        var result = \"unimplemented\";\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParameterExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (name, type, nodeType) {\r\n        ///<param name=\"name\" type=\"string\" />\r\n        ///<field name=\"name\" type=\"string\" />\r\n        //this.writePropertyValue(\"name\", name);\r\n        //this.writePropertyValue(\"type\", type);\r\n        this.nodeType = nodeType || $data.Expressions.ExpressionType.Parameter;\r\n        this.name = name;\r\n        this.type = type || \"unknown\";\r\n        var _owningFunction;\r\n    },\r\n\r\n    owningFunction: { value: undefined, enumerable: false },\r\n    nodeType: { value: $data.Expressions.ExpressionType.Parameter, writable: true },\r\n    name: { value: undefined, dataType: String, writable: true },\r\n    type: { value: undefined, dataType: \"object\", writable: true},\r\n    toString: function (debug) {\r\n        var result;\r\n        result = debug ? this.type + \" \" : \"\";\r\n        result = result + this.name;\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.PropertyExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (expression, member) {\r\n        ///<summary>Represents accessing a property or field of an object</summary>\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</param>\r\n        ///<param name=\"member\" type=\"$data.Expressions.ConstantExpression\">The member descriptor</param>\r\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\">The expression for the property owner object</field>\r\n        ///<field name=\"member\" type=\"$data.Expression.ConstantExpression\">The member descriptor</field>\r\n\r\n        this.expression = expression;\r\n        this.member = member;\r\n\r\n        this.type = member.dataType;\r\n    },\r\n\r\n    nodeType: {\r\n        value: $data.Expressions.ExpressionType.MemberAccess\r\n    },\r\n\r\n    expression: {\r\n        value: undefined,\r\n        dataType: $data.Expressions.ExpressionNode,\r\n        writable: true\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return function (holder, memberName) {\r\n                if (holder[memberName] === undefined)\r\n                    Guard.raise(new Exception(\"Parameter '\" + memberName + \"' not found in context\", 'Property not found!'));\r\n                return holder[memberName];\r\n            };\r\n        },\r\n        set: function () {\r\n        }\r\n    },\r\n\r\n    member: {\r\n        value: undefined,\r\n        dataType: $data.MemberDefinition,\r\n        writable: true\r\n    },\r\n\r\n    type: {\r\n        value: undefined,\r\n        writable: true\r\n    },\r\n\r\n    toString: function (debug) {\r\n        return this.expression.toString() + \".\" + this.member.toString();\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.SimpleBinaryExpression', $data.Expressions.ExpressionNode, null, {\r\n    constructor: function (left, right, nodeType, operator, type, resolution) {\r\n        ///<summary>Represents a bin operation with left and right operands and an operator///</summary>\r\n        ///<param name=\"left\" type=\"$data.Expression.ExpressionNode\">The left element of the binary operation</param>\r\n        ///<param name=\"right\" type=\"$data.Expression.ExpressionNode\">The right element of the binary operation</param>\r\n        ///<field name=\"implementation\" type=\"function\" />\r\n        this.left = left;\r\n        this.right = right;\r\n        this.nodeType = nodeType;\r\n        this.operator = operator;\r\n        this.type = type;\r\n        this.resolution = resolution;\r\n    },\r\n\r\n    implementation: {\r\n        get: function () {\r\n            return $data.binaryOperators.getOperator(this.operator).implementation;\r\n        },\r\n        set: function () { }\r\n\r\n    },\r\n    //nodeType: { value: $data.Expressions.ExpressionType },\r\n    type: { value: \"number\", writable: true }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ThisExpression', $data.Expressions.ExpressionNode, null, {\r\n    nodeType: { value: $data.Expressions.ExpressionType.This }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.ExecutorVisitor', $data.Expressions.ExpTreeVisitor, null,\r\n{\r\n    //--\r\n    VisitVariable: function (eNode, context) {\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        var value = (eNode.name == context.paramsName) ? context.paramContext : $data.__global[eNode.name];\r\n        if (typeof value == 'undefined')\r\n\t\t\tGuard.raise(\r\n\t\t\t\tnew Exception(\"Unknown variable in '\" + context.operation + \"' operation. The variable isn't referenced in the parameter context and it's not a global variable: '\" + eNode.name + \"'.\",\r\n                \"InvalidOperation\", { operationName: context.operation, missingParameterName: eNode.name })\r\n\t\t\t\t);\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitMember: function (eNode, context) {\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        var chain = this.GetMemberChain(eNode);\r\n        var value;\r\n        for (var i = 0; i < chain.length; i++) {\r\n            if (i == 0)\r\n                value = context.paramContext;\r\n            else\r\n                value = value[chain[i].name];\r\n        }\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n\r\n\r\n    },\r\n    VisitUnary: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand !== eNode.operand)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var operandValue = ((operand.valueType == \"string\") ? (\"'\" + operand.value + \"'\") : operand.value);\r\n        src = \"value = \" + eNode.operator + \" \" + operandValue;\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitIncDec: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand !== eNode.operand)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        if (eNode.suffix)\r\n            value = eNode.operator == \"++\" ? operand.value++ : operand.value--;\r\n        else\r\n            value = eNode.operator == \"++\" ? ++operand.value : --operand.value;\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitBinary: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var leftValue = ((left.valueType == \"string\") ? (\"'\" + left.value + \"'\") : left.value);\r\n        var rightValue = ((right.valueType == \"string\") ? (\"'\" + right.value + \"'\") : right.value);\r\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitEquality: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value;\r\n        var src;\r\n        var leftValue = ((left.valueType == \"string\") ? (\"'\" + left.value + \"'\") : left.value);\r\n        var rightValue = ((right.valueType == \"string\") ? (\"'\" + right.value + \"'\") : right.value);\r\n        src = \"value = \" + leftValue + \" \" + eNode.operator + \" \" + rightValue;\r\n        eval(src);\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitDecision: function (eNode, context) {\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (expression !== eNode.expression || left !== eNode.left || right !== eNode.right)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var value = expression.value ? left.value : right.value;\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitMethodCall: function (eNode, context) {\r\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n        var args = this.VisitArray(eNode.args, context);\r\n        if (object !== eNode.object || args != eNode.args)\r\n            eNode = $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\r\n        if (!eNode.executable)\r\n            return eNode;\r\n        // executing and returning with result as a literal\r\n        var a = [];\r\n        for (var i = 0; i < args.length; i++) {\r\n            var arg = args[i];\r\n            var t = typeof arg.value;\r\n            a.push((t == \"string\") ? (\"'\" + arg.value + \"'\") : arg.value);\r\n        }\r\n        var value;\r\n        var src = object ?\r\n\t\t\t\"value = object.value[eNode.method](\" + a.join(\",\") + \");\"\r\n\t\t\t:\r\n\t\t\t\"value = \" + eNode.method + \"(\" + a.join(\",\") + \");\";\r\n        eval(src);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    },\r\n    VisitArrayAccess: function (eNode, context) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var arrayNode = this.Visit(eNode.array, context);\r\n        var indexNode = this.Visit(eNode.index, context);\r\n        var value = arrayNode.value[indexNode.value];\r\n        return $data.Expressions.ExpressionNodeTypes.LiteralExpressionNode.create(true, typeof value, value);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.ExpTreeVisitor',\r\n    null, null,\r\n    {\r\n        constructor: function () {\r\n            this._deep = 0;\r\n        },\r\n        Visit: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ExpressionNode\"/>\r\n            this._deep = this._deep + 1;\r\n            var result = null;\r\n            switch (eNode.type) {\r\n                case LITERAL: result = this.VisitLiteral(eNode, context); break;\r\n                case VARIABLE: result = this.VisitVariable(eNode, context); break;\r\n                case MEMBERACCESS: result = this.VisitMember(eNode, context); break;\r\n                case BINARY: result = this.VisitBinary(eNode, context); break;\r\n                case UNARY: result = this.VisitUnary(eNode, context); break;\r\n                case INCDEC: result = this.VisitIncDec(eNode, context); break;\r\n                case EQUALITY: result = this.VisitEquality(eNode, context); break;\r\n                case DECISION: result = this.VisitDecision(eNode, context); break;\r\n                case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\r\n                case NEW: result = this.VisitNew(eNode, context); break;\r\n                case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\r\n                case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\r\n                default:\r\n                    Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n            }\r\n            this._deep = this._deep - 1;\r\n            return result;\r\n        },\r\n        VisitLiteral: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.LiteralExpressionNode\"/>\r\n\r\n            return eNode;\r\n        },\r\n        VisitVariable: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.VariableExpressionNode\"/>\r\n\r\n            return eNode;\r\n        },\r\n        VisitMember: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            if (expression === eNode.expression && member === eNode.member)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(eNode.executable, expression, member);\r\n        },\r\n        VisitBinary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        },\r\n        VisitUnary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.UnaryExpressionNode\"/>\r\n\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(eNode.executable, eNode.operator, operand);\r\n        },\r\n        VisitIncDec: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.IncDecExpressionNode\"/>\r\n\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(eNode.executable, eNode.operator, operand, eNode.suffix);\r\n        },\r\n        VisitEquality: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.EqualityExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(eNode.executable, eNode.operator, left, right);\r\n        },\r\n        VisitDecision: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (expression === eNode.expression && left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        },\r\n        VisitMethodCall: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode\"/>\r\n\r\n            var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n            var args = this.VisitArray(eNode.args, context);\r\n            if (object === eNode.object && args === eNode.args)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(eNode.executable, object, eNode.method, args);\r\n        },\r\n        VisitNew: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n\r\n            var values = this.VisitArray(eNode.values, context);\r\n            if (values === eNode.values)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n        },\r\n        VisitJsonAssign: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            left.JSONASSIGN = true;\r\n            right.JSONASSIGN = true;\r\n            return $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\r\n        },\r\n        VisitArrayAccess: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n\r\n            var array = this.Visit(eNode.array, context);\r\n            var index = this.Visit(eNode.index, context);\r\n            if (array === eNode.array && index === eNode.index)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n        },\r\n        VisitArray: function (eNodes, context) {\r\n            var args = [];\r\n            var ok = true;\r\n            for (var i = 0; i < eNodes.length; i++) {\r\n                args[i] = this.Visit(eNodes[i], context);\r\n                ok = ok && args[i] === eNodes[i];\r\n            }\r\n            return ok ? eNodes : args;\r\n        },\r\n        GetMemberChain: function (memberAccess, context) {\r\n            // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n            if (memberAccess.expression.type == MEMBERACCESS) {\r\n                var a = this.GetMemberChain(memberAccess.expression, context);\r\n                a.push(memberAccess.member);\r\n                return a;\r\n            }\r\n            return [memberAccess.expression, memberAccess.member];\r\n        }\r\n    }, {});\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ExpressionVisitor', null, null,\r\n    {\r\n        constructor: function () {\r\n            this._deep = 0;\r\n        },\r\n\r\n        Visit: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNode\"/>\r\n\r\n            //this._deep = this._deep + 1;\r\n            if (!eNode) {\r\n                return eNode;\r\n            }\r\n\r\n            var result = null;\r\n\r\n                switch (eNode.expressionType) {\r\n                    case $data.Expressions.ParameterExpression:\r\n                        result = this.VisitParameter(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ConstantExpression:\r\n                        result = this.VisitConstant(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.FunctionExpression:\r\n                        result = this.VisitFunction(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.CallExpression:\r\n                        result = this.VisitCall(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.SimpleBinaryExpression:\r\n                        result = this.VisitBinary(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.PropertyExpression:\r\n                        result = this.VisitProperty(eNode, context);\r\n                        break;\r\n                        //result = th\r\n                    case $data.Expressions.ThisExpression:\r\n                        if ($data.defaults.parameterResolutionCompatibility) {\r\n                            result = this.VisitThis(eNode, context);\r\n                        } else {\r\n                            Guard.raise(\"Keyword 'this' is not allowed. You should get value from parameter. (it, p1) => it.Title == p1\");\r\n                        }\r\n                        break;\r\n                    case $data.Expressions.ObjectLiteralExpression:\r\n                        result = this.VisitObjectLiteral(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ObjectFieldExpression:\r\n                        result = this.VisitObjectField(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.ArrayLiteralExpression:\r\n                        result = this.VisitArrayLiteral(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.UnaryExpression:\r\n                        result = this.VisitUnary(eNode, context);\r\n                        break;\r\n                    case $data.Expressions.EntityContextExpression:\r\n                        result = this.VisitEntityContext(eNode, context);\r\n                        break;\r\n                    default:\r\n                        debugger;\r\n                        break;\r\n                    //case VARIABLE:\r\n\r\n                    //    result = this.VisitVariable(eNode, context);\r\n                    //    break;\r\n                    //case MEMBERACCESS:\r\n                    //    result = this.VisitMember(eNode, context);\r\n                    //    break;\r\n                    //case BINARY:\r\n                    //    result = this.VisitBinary(eNode, context);\r\n                    //    break;\r\n                    //case UNARY:\r\n                    //    result = this.VisitUnary(eNode, context);\r\n                    //    break;\r\n                    //case INCDEC:\r\n                    //    result = this.VisitIncDec(eNode, context);\r\n                    //    break;\r\n                    //case EQUALITY: result = this.VisitEquality(eNode, context); break;\r\n                    //case DECISION: result = this.VisitDecision(eNode, context); break;\r\n                    //case METHODCALL: result = this.VisitMethodCall(eNode, context); break;\r\n                    //case NEW: result = this.VisitNew(eNode, context); break;\r\n                    //case JSONASSIGN: result = this.VisitJsonAssign(eNode, context); break;\r\n                    //case ARRAYACCESS: result = this.VisitArrayAccess(eNode, context); break;\r\n                    //default:\r\n                    //    Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n                }\r\n\r\n            this._deep = this._deep - 1;\r\n            return result;\r\n        },\r\n\r\n        VisitArrayLiteral: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ArrayLiteralExpression\" />\r\n            var self = this;\r\n            var items = eNode.items.map(function (item) {\r\n                return self.Visit(item, context);\r\n            });\r\n            var result = Container.createArrayLiteralExpression(items);\r\n            return result;\r\n        },\r\n\r\n        VisitObjectLiteral: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\r\n            var self = this;\r\n            var members = eNode.members.map(function (member) {\r\n                return self.Visit(member, context);\r\n            });\r\n            var result = Container.createObjectLiteralExpression(members);\r\n            return result;\r\n        },\r\n\r\n        VisitObjectField: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ObjectLiteralExpression\" />\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var result = Container.createObjectFieldExpression(eNode.fieldName, expression);\r\n            return result;\r\n        },\r\n\r\n        VisitThis: function (eNode, context) {\r\n            return eNode;\r\n        },\r\n        VisitCall: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\r\n            var self = this;\r\n            var args = eNode.args.map(function (arg) { return this.Visit(arg, context); }, this);\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            return new $data.Expressions.CallExpression(expression, member, args);\r\n        },\r\n\r\n        VisitParameter: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitConstant: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitFunction: function(eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\r\n            var self = this;\r\n\r\n            var params = eNode.parameters.map(function (p, i) {\r\n                return self.Visit(p, context);\r\n            });\r\n\r\n            var body = self.Visit(eNode.body, context);\r\n            var result = new $data.Expressions.FunctionExpression(eNode.name, params, body);\r\n            return result;\r\n        },\r\n\r\n        VisitBinary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.SimpleBinaryExpression\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            return new $data.Expressions.SimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\r\n        },\r\n\r\n        VisitProperty: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var member = this.Visit(eNode.member, context);\r\n            return new $data.Expressions.PropertyExpression(expression, member);\r\n            //var member =\r\n        },\r\n\r\n        VisitUnary: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.UnaryExpression\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            ///<returns type=\"$data.Expressions.UnaryExpression\"/>\r\n            var operand = this.Visit(eNode.operand, context);\r\n            if (operand === eNode.operand)\r\n                return eNode;\r\n            return new $data.Expressions.UnaryExpression(operand, eNode.operator, eNode.nodeType);\r\n        },\r\n\r\n        VisitEntityContext: function (eNode, context) {\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.EntityContextExpression\" />\r\n            //var result  = new $data.Expressions.ParameterExpression(eNode.name, eNode.type, eNode.nodeType);\r\n            return eNode;\r\n        },\r\n\r\n        VisitDecision: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.DecisionExpressionNode\"/>\r\n\r\n            var expression = this.Visit(eNode.expression, context);\r\n            var left = this.Visit(eNode.left, context);\r\n            var right = this.Visit(eNode.right, context);\r\n            if (expression === eNode.expression && left === eNode.left && right === eNode.right)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(eNode.executable, expression, left, right);\r\n        },\r\n\r\n        VisitNew: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.NewExpressionNode\"/>\r\n\r\n            var values = this.VisitArray(eNode.values, context);\r\n            if (values === eNode.values)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n        },\r\n        VisitArrayAccess: function (eNode, context) {\r\n            ///<summary></summary>\r\n            ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n            ///<param name=\"context\" type=\"Object\"/>\r\n            //<return type=\"$data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode\"/>\r\n\r\n            var array = this.Visit(eNode.array, context);\r\n            var index = this.Visit(eNode.index, context);\r\n            if (array === eNode.array && index === eNode.index)\r\n                return eNode;\r\n            return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n        },\r\n        VisitArray: function (eNodes, context) {\r\n            var args = [];\r\n            var ok = true;\r\n            for (var i = 0; i < eNodes.length; i++) {\r\n                args[i] = this.Visit(eNodes[i], context);\r\n                ok = ok && args[i] === eNodes[i];\r\n            }\r\n            return ok ? eNodes : args;\r\n        },\r\n        GetMemberChain: function (memberAccess, context) {\r\n            // { type:MEMBERACCESS, executable:true, expression:, member: }\r\n            if (memberAccess.expression.type == MEMBERACCESS) {\r\n                var a = this.GetMemberChain(memberAccess.expression, context);\r\n                a.push(memberAccess.member);\r\n                return a;\r\n            }\r\n            return [memberAccess.expression, memberAccess.member];\r\n        }\r\n    }, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.GlobalContextProcessor\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (global) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.global = global;\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        return (paramExpression.nodeType == $data.Expressions.ExpressionType.Parameter || ($data.defaults.parameterResolutionCompatibility && paramExpression.nodeType == $data.Expressions.ExpressionType.ParameterReference)) && \r\n               this.global && typeof this.global === 'object' &&\r\n               paramExpression.name in this.global;\r\n    },\r\n\r\n    resolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        var resultValue = this.global[paramExpression.name];\r\n        var expression = Container.createConstantExpression(resultValue, typeof resultValue, paramExpression.name);\r\n        return expression;\r\n    }\r\n\r\n});\r\n\r\n\r\n\r\n$C(\"$data.Expressions.ConstantValueResolver\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (paramsObject, global, scopeContext) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.globalResolver = Container.createGlobalContextProcessor(global);\r\n        this.paramResolver = Container.createGlobalContextProcessor(paramsObject);\r\n        this.paramsObject = paramsObject;\r\n        this.scopeContext = scopeContext;\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        if($data.defaults.parameterResolutionCompatibility){\r\n            return (paramExpression.name === '$context') || (paramExpression.nodeType == $data.Expressions.ExpressionType.This && this.paramsObject)\r\n                    ? true : (this.paramResolver.canResolve(paramExpression) || this.globalResolver.canResolve(paramExpression));\r\n        }\r\n        return (paramExpression.name === '$context') ? true : this.paramResolver.canResolve(paramExpression);\r\n    },\r\n\r\n    resolve: function (paramExpression) {\r\n        ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n        if (paramExpression.name === '$context') {\r\n            return Container.createEntityContextExpression(this.scopeContext);\r\n        }\r\n        if ($data.defaults.parameterResolutionCompatibility) {\r\n            if (paramExpression.nodeType == $data.Expressions.ExpressionType.This) {\r\n                return Container.createConstantExpression(this.paramsObject, typeof this.paramsObject, 'this');\r\n            }\r\n            return this.paramResolver.canResolve(paramExpression) ? this.paramResolver.resolve(paramExpression) : this.globalResolver.resolve(paramExpression);\r\n        }\r\n        return this.paramResolver.resolve(paramExpression);\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.LambdaParameterProcessor\", $data.Expressions.ParameterProcessor, null, {\r\n    constructor: function (lambdaParameterTypeInfos) {\r\n        ///<param name=\"global\" />\r\n        ///<param name=\"evalMethod\" />\r\n        var paramIndices = {};\r\n        var $idx = \"name\";\r\n\r\n        this.canResolve = function (paramExpression, context) {\r\n            if (paramExpression.nodeType == $data.Expressions.ExpressionType.LambdaParameter) {\r\n                var fnParams = paramExpression.owningFunction.parameters;\r\n\r\n                if (fnParams.length == 1 && paramExpression.name == fnParams[0].name) {\r\n                    paramIndices[paramExpression.name] = lambdaParameterTypeInfos[0];\r\n                    return true;\r\n                }\r\n\r\n                for (var j = 0; j < fnParams.length; j++) {\r\n                    if (fnParams[j].name == paramExpression.name) {\r\n                        paramIndices[paramExpression.name] = lambdaParameterTypeInfos[j];\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        this.resolve = function(paramExpression, context) {\r\n            var lambdaParamType = paramIndices[paramExpression.name];\r\n            var result = Container.createParameterExpression(paramExpression.name,\r\n                lambdaParamType,\r\n                $data.Expressions.ExpressionType.LambdaParameter);\r\n            result.owningFunction = paramExpression.owningFunction;\r\n            return result;\r\n        };\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.LocalContextProcessor\", $data.Expressions.GlobalContextProcessor, null, {\r\n    constructor: function (evalMethod) {\r\n        ///<param name=\"global\" type=\"object\" />\r\n        this.canResolve = function (paramExpression) {\r\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n            return paramExpression.nodeType == $data.Expressions.ExpressionType.Parameter &&\r\n                (evalMethod(\"typeof \" + paramExpression.name) !== 'undefined');\r\n        };\r\n        this.resolve = function(paramExpression) {\r\n            ///<param name=\"paramExpression\" type=\"$data.Expressions.ParameterExpression\" />\r\n            ///<returns type=\"$data.Expressions.ExpressionNode\" />\r\n            var resultValue = evalMethod(paramExpression.name);\r\n            var expression = Container.createConstantExpression(resultValue, typeof resultValue);\r\n            return expression;\r\n        };\r\n\r\n    }\r\n    });\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n//\"use strict\"; // suspicious code\r\n\r\n$C('$data.Expressions.LogicalSchemaBinderVisitor',\r\n    $data.Expressions.ExpressionVisitor, null,\r\n    {\r\n        constructor: function (expression, binder) {\r\n\r\n        },\r\n\r\n        VisitProperty: function (expression, context) {\r\n            ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n            var exp = this.Visit(expression.expression, context);\r\n            var mem = this.Visit(expression.member, context);\r\n\r\n            var type = exp.type;\r\n            var memberType = context.memberResolver.resolve(type, mem.value);\r\n            mem.type = memberType;\r\n            return Container.createPropertyExpression(exp, mem);\r\n        }\r\n\r\n    }, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C(\"$data.Expressions.ParameterProcessor\", $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function () {\r\n        ///<summary>Provides a base class for several ParameterProcessors like GlobalParameterProcessor or LambdaParameterProcessor</summary>\r\n    },\r\n\r\n    Visit: function (node, context) {\r\n        if ((node instanceof $data.Expressions.ParameterExpression ||\r\n            node instanceof $data.Expressions.ThisExpression)\r\n            && this.canResolve(node)) {\r\n            var result = this.resolve(node, context);\r\n            if (result !== node)\r\n                result[\"resolvedBy\"] = this.constructor.name;\r\n            return result;\r\n        } else {\r\n            return node;\r\n        }\r\n    },\r\n\r\n    canResolve: function (paramExpression) {\r\n        ///<returns type=\"boolean\" />\r\n        Guard.raise(\"Pure method\");\r\n    },\r\n    resolve: function (paramExpression) {\r\n        ///<returns type=\"XXX\" />\r\n        Guard.raise(\"Pure method\");\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$C('$data.Expressions.ParameterResolverVisitor', $data.Expressions.ExpressionVisitor, null, {\r\n\r\n    constructor: function (expression, resolver) {\r\n    \t/// <summary>\r\n    \t/// ParameterResolverVisitor traverses the JavaScript Code Expression tree and converts\r\n        /// outer but otherwise execution local variable references into ConstantExpressions-t.\r\n        /// for example: context.Persons.filter(function(p) { return p.Name == document.location.href })\r\n        /// is transformed into a constant that has the current href as its value\r\n    \t/// </summary>\r\n    \t/// <param name=\"expression\"></param>\r\n    \t/// <param name=\"resolver\"></param>\r\n        this.lambdaParamCache = {};\r\n        this.paramCache = {};\r\n    },\r\n\r\n    Visit: function (expression, resolver) {\r\n        ///<param name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///<param name=\"resolver\" type=\"$data.Expressions.Resolver\" />\r\n        //TODO base call is just ugly\r\n        return $data.Expressions.ExpressionVisitor.prototype.Visit.call(this, expression, resolver);\r\n\r\n    },\r\n\r\n\r\n    VisitArrayLiteral: function(eNode, context) {\r\n        var self = this;\r\n        var items = eNode.items.map(function (item) { return self.Visit(item, context); });\r\n        var allLocal = items.every(function (item) {\r\n            return item instanceof $data.Expressions.ConstantExpression;\r\n        });\r\n\r\n        if (allLocal) {\r\n            items = items.map(function (item) { return item.value });\r\n            return Container.createConstantExpression(items, \"array\");\r\n        } else {\r\n            return Container.createArrayLiteralExpression(items);\r\n        }\r\n    },\r\n\r\n    VisitObjectLiteral: function(eNode, context) {\r\n        var self = this;\r\n        var members = eNode.members.map(function (item) { return self.Visit(item, context); });\r\n        var allLocal = members.every(function (member) {\r\n            return member.expression instanceof $data.Expressions.ConstantExpression;\r\n        });\r\n\r\n        if (allLocal) {\r\n            var params = members.map(function (member) { return { name: member.fieldName, value: member.expression.value }; });\r\n            var value = eNode.implementation(params);\r\n            return Container.createConstantExpression(value, typeof value);\r\n        } else {\r\n            return Container.createObjectLiteralExpression(members);\r\n        }\r\n    },\r\n\r\n    VisitThis: function(eNode, resolver) {\r\n        return resolver.Visit(eNode, resolver);\r\n    },\r\n\r\n    VisitParameter: function(eNode, resolver) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<param name=\"resovler\" type=\"$data.Expressions.ParameterResolver\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n\r\n        var node;\r\n        ///TODO let the resolver handle lambdaReferences if it wants to deal with it\r\n        switch(eNode.nodeType){\r\n            case $data.Expressions.ExpressionType.Parameter:\r\n                node = resolver.Visit(eNode, resolver);\r\n                this.paramCache[node.name] = node;\r\n                return node;\r\n            case $data.Expressions.ExpressionType.ParameterReference:\r\n                if ($data.defaults.parameterResolutionCompatibility) {\r\n                    return resolver.Visit(eNode, resolver);\r\n                }\r\n            \r\n                var paramNode = this.paramCache[eNode.name];\r\n                if (paramNode) {\r\n                    return paramNode;\r\n                } else {\r\n                    Guard.raise(\"Missing parameter '\" + eNode.name + \"'\");\r\n                }\r\n                break;\r\n            case $data.Expressions.ExpressionType.LambdaParameter:\r\n                node = resolver.Visit(eNode, resolver);\r\n                this.lambdaParamCache[node.name] = node;\r\n                return node;\r\n            case $data.Expressions.ExpressionType.LambdaParameterReference:\r\n                var lambdaParam = this.lambdaParamCache[eNode.name];\r\n                if (lambdaParam) {\r\n                    node = Container.createParameterExpression(eNode.name,\r\n                            lambdaParam.type,\r\n                            $data.Expressions.ExpressionType.LambdaParameterReference);\r\n                    node.paramIndex = eNode.paramIndex;\r\n                    //node.typeName = lambdaParam.type.name || lambdaParam.type;\r\n                    return node;\r\n                }\r\n                break;\r\n            default:\r\n                return eNode;\r\n\r\n        }\r\n\r\n\r\n        return eNode;\r\n    },\r\n\r\n    VisitConstant: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ParameterExpression\" />\r\n        ///<returns type=\"$data.Expressions.ParameterExpression\" />\r\n        return eNode;\r\n    },\r\n\r\n    VisitFunction: function(eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.FunctionExpression\" />\r\n\r\n        var self = this;\r\n        var params = eNode.parameters.map(function (p, i) {\r\n            var result = self.Visit(p, context);\r\n            return result;\r\n        });\r\n        var body = self.Visit(eNode.body, context);\r\n        var result = new $data.Expressions.FunctionExpression(eNode.name, params, body);\r\n\r\n        return result;\r\n    },\r\n\r\n    VisitBinary: function (eNode, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        var expr = $data.Expressions;\r\n\r\n        if (left instanceof expr.ConstantExpression && right instanceof expr.ConstantExpression)\r\n        {\r\n                var result = eNode.implementation(left.value, right.value);\r\n                return Container.createConstantExpression(result, typeof result);\r\n        }\r\n        return new Container.createSimpleBinaryExpression(left, right, eNode.nodeType, eNode.operator, eNode.type);\r\n    },\r\n\r\n    VisitUnary: function (eNode, context) {\r\n        ///<summary></summary>\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n        ///<param name=\"context\" type=\"Object\"/>\r\n        ///<return type=\"$data.Expressions.ExpressionNodeTypes.BinaryExpressionNode\"/>\r\n\r\n        var operand = this.Visit(eNode.operand, context);\r\n        //var imp = $data.unaryOperators.getOperator(\r\n        var expr = $data.Expressions;\r\n        if (operand  instanceof expr.ConstantExpression)\r\n        {\r\n                var result = eNode.operator.implementation(operand.value);\r\n                return Container.createConstantExpression(result, typeof result);\r\n        }\r\n        return new Container.createUnaryExpression(operand, eNode.operator, eNode.nodeType);\r\n    },\r\n\r\n    VisitProperty: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.PropertyExpression\" />\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var member = this.Visit(eNode.member, context);\r\n        var result;\r\n        if (expression instanceof $data.Expressions.ConstantExpression &&\r\n            member instanceof $data.Expressions.ConstantExpression) {\r\n            ///TODO implement checking for the member, throw on error\r\n            result = eNode.implementation(expression.value, member.value);\r\n\r\n            //Method call processed before\r\n            //if (typeof result === 'function') {\r\n            //    return new $data.Expressions.ConstantExpression(\r\n            //        function () { return result.apply(expression.value, arguments); });\r\n            //}\r\n            return Container.createConstantExpression(result, typeof result, expression.name + '$' + member.value);\r\n        }\r\n        if (expression === eNode.expression && member === eNode.member)\r\n            return eNode;\r\n\r\n        result = Container.createPropertyExpression(expression, member);\r\n        return result;\r\n    },\r\n\r\n    VisitCall: function (eNode, context) {\r\n        ///<param name=\"eNode\" type=\"$data.Expressions.CallExpression\" />\r\n        function isExecutable(args, body, obj) {\r\n            return body instanceof $data.Expressions.ConstantExpression &&\r\n                //global methods will not have a this.\r\n                (!obj || obj instanceof $data.Expressions.ConstantExpression) &&\r\n                args.every(function(item) {\r\n                    return item instanceof $data.Expressions.ConstantExpression;\r\n                });\r\n        }\r\n        var call = $data.Expressions.ExpressionVisitor.prototype.VisitCall.apply(this, arguments);\r\n        var obj = call.expression;\r\n        var body  = call.member;\r\n        var args = call.args;\r\n\r\n        function convertToValue(arg) {\r\n            if (arg instanceof $data.Expressions.ConstantExpression)\r\n                return arg.value;\r\n            return arg;\r\n        };\r\n\r\n        if (isExecutable(args, body, obj)) {\r\n            var fn = body.value;\r\n            if (typeof fn === 'string' && obj.value) {\r\n                fn = obj.value[fn];\r\n            }\r\n            if (typeof fn !== 'function') {\r\n                //TODO dig that name out from somewhere\r\n                Guard.raise(\"Constant expression is not a method...\");\r\n            }\r\n            var value = eNode.implementation(obj.value, fn, args.map(convertToValue));\r\n            return new $data.Expressions.ConstantExpression(value, typeof value);\r\n        }\r\n        return call;\r\n    }\r\n}, {});\r\n$C(\"$data.Expressions.AggregatedVisitor\", $data.Expressions.ExpressionVisitor, null, {\r\n    constructor: function (visitors) {\r\n        ///<param name=\"resolver\" type=\"Array\" elementType=\"$data.Expression.ParameterResolver\" />\r\n\r\n        this.Visit = function (node, context) {\r\n            for (var i = 0; i < visitors.length; i++) {\r\n                var n = visitors[i].Visit(node, context);\r\n                if (n !== node)\r\n                    return n;\r\n            }\r\n            return node;\r\n        };\r\n    }\r\n\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Expressions.SetExecutableVisitor', $data.Expressions.ExpTreeVisitor, null,\r\n{\r\n    Visit: function (eNode, context) {\r\n        switch (eNode.type) {\r\n            case LITERAL: return this.VisitLiteral(eNode, context);\r\n            case VARIABLE: return this.VisitVariable(eNode, context);\r\n            case MEMBERACCESS: return this.VisitMember(eNode, context);\r\n            case BINARY: return this.VisitBinary(eNode, context);\r\n            case UNARY: return this.VisitUnary(eNode, context);\r\n            case INCDEC: return this.VisitIncDec(eNode, context);\r\n            case EQUALITY: return this.VisitEquality(eNode, context);\r\n            case DECISION: return this.VisitDecision(eNode, context);\r\n            case METHODCALL: return this.VisitMethodCall(eNode, context);\r\n            case NEW: return this.VisitNew(eNode, context);\r\n            case JSONASSIGN: return this.VisitJsonAssign(eNode, context);\r\n            case ARRAYACCESS: return this.VisitArrayAccess(eNode, context);\r\n            default:\r\n                Guard.raise(\"Type isn't implemented: \" + eNode.type);\r\n        }\r\n    },\r\n\r\n    VisitBinary: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right && (left.executable && right.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.BinaryExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\r\n    },\r\n    VisitUnary: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand === eNode.operand)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.UnaryExpressionNode.create(operand.executable, eNode.operator, operand);\r\n    },\r\n    VisitIncDec: function (eNode, context) {\r\n        var operand = this.Visit(eNode.operand, context);\r\n        if (operand === eNode.operand)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.IncDecExpressionNode.create(operand.executable, eNode.operator, operand, eNode.suffix);\r\n    },\r\n    VisitEquality: function (eNode, context) {\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right && (left.executable && right.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.EqualityExpressionNode.create(left.executable && right.executable, eNode.operator, left, right);\r\n    },\r\n    VisitDecision: function (eNode, context) {\r\n        var expression = this.Visit(eNode.expression, context);\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (expression === eNode.expression && left === eNode.left && right === eNode.right && (left.executable && right.executable && expression.executable == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.DecisionExpressionNode.create(left.executable && right.executable && expression.executable, expression, left, right);\r\n    },\r\n    VisitMethodCall: function (eNode, context) {\r\n        var object = eNode.object ? this.Visit(eNode.object, context) : null;\r\n        var args = this.VisitArray(eNode.args, context);\r\n        if (object === eNode.object && args === eNode.args && ((object == null ? true : object.executable) == eNode.executable))\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.MethodcallExpressionNode.create(object == null ? true : object.executable, object, eNode.method, args);\r\n    },\r\n    VisitNew: function (eNode, context) {\r\n        // { type:NEW, executable:true, values: [] };\r\n        var values = this.VisitArray(eNode.values, context);\r\n        if (values === eNode.values)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.NewExpressionNode.create(true, values);\r\n    },\r\n    VisitJsonAssign: function (eNode, context) {\r\n        // { type:JSONASSIGN, executable:true, left: variable, right: right }\r\n        var left = this.Visit(eNode.left, context);\r\n        var right = this.Visit(eNode.right, context);\r\n        if (left === eNode.left && right === eNode.right)\r\n            return eNode;\r\n        left.JSONASSIGN = true;\r\n        right.JSONASSIGN = true;\r\n        return $data.Expressions.ExpressionNodeTypes.JsonAssignExpressionNode.create(true, left, right);\r\n    },\r\n    VisitArrayAccess: function (eNode, context) {\r\n        // { type:ARRAYACCESS, executable:true, array:, index: }\r\n        var array = this.Visit(eNode.array, context);\r\n        var index = this.Visit(eNode.index, context);\r\n        if (array === eNode.array && index === eNode.index)\r\n            return eNode;\r\n        return $data.Expressions.ExpressionNodeTypes.ArrayAccessExpressionNode.create(true, array, index);\r\n    },\r\n    VisitArray: function (eNodes, context) {\r\n        var args = [];\r\n        var ok = true;\r\n        for (var i = 0; i < eNodes.length; i++) {\r\n            args[i] = this.Visit(eNodes[i], context);\r\n            ok = ok && args[i] === eNodes[i];\r\n        }\r\n        return ok ? eNodes : args;\r\n    },\r\n\r\n    VisitLiteral: function (eNode, context) {\r\n        return { type: eNode.type, executable: true, value: eNode.value, valueType: eNode.valueType };\r\n    },\r\n    VisitVariable: function (eNode, context) {\r\n        if (typeof context.paramContext[eNode.name] == undefined) // isn't param  //TODO: check ParamContext\r\n            Guard.raise(\"Variable is not defined in the paramContext: \" + eNode.name);\r\n        //this._setExecutable(eNode, true);\r\n        return $data.Expressions.ExpressionNodeTypes.VariableExpressionNode.create(true, \"Math\", \"GLOBALOBJECT\");\r\n    },\r\n    VisitMember: function (eNode, context) {\r\n        var chain = this.GetMemberChain(eNode);\r\n        var firstMember = chain[0].name;\r\n        var isLambdaParam = context.lambdaParams.indexOf(firstMember) >= 0;\r\n        var isLocalParam = firstMember == context.paramsName; //TODO: check ParamContext // old: typeof context.paramContext[firstMember] != \"undefined\";\r\n        if (!isLocalParam && !isLambdaParam)\r\n            Guard.raise(\"Variable is not defined in the paramContext or the lambda parameters: \" + firstMember);\r\n\r\n        return $data.Expressions.ExpressionNodeTypes.MemberAccessExpressionNode.create(isLocalParam, eNode.expression, eNode.member);\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data from '../../TypeSystem/index.js';\r\n\r\n$data.defaults = $data.defaults || {};\r\n$data.defaults.parameterResolutionCompatibility = true;\r\n\r\n\r\nimport ExpressionNode2 from './ExpressionNode2.js';\r\nimport ArrayLiteralExpression from './ArrayLiteralExpression.js';\r\nimport CallExpression from './CallExpression.js';\r\nimport CodeParser from './CodeParser.js';\r\nimport ConstantExpression from './ConstantExpression.js';\r\nimport FunctionExpression from './FunctionExpression.js';\r\nimport ObjectFieldExpression from './ObjectFieldExpression.js';\r\nimport ObjectLiteralExpression from './ObjectLiteralExpression.js';\r\nimport PagingExpression from './PagingExpression.js';\r\nimport ParameterExpression from './ParameterExpression.js';\r\nimport PropertyExpression from './PropertyExpression.js';\r\nimport SimpleBinaryExpression from './SimpleBinaryExpression.js';\r\nimport ThisExpression from './ThisExpression.js';\r\nimport ExpressionVisitor from './Visitors/ExpressionVisitor.js';\r\nimport ParameterProcessor from './Visitors/ParameterProcessor.js';\r\nimport GlobalContextProcessor from './Visitors/GlobalContextProcessor.js';\r\nimport LocalContextProcessor from './Visitors/LocalContextProcessor.js';\r\nimport LambdaParameterProcessor from './Visitors/LambdaParameterProcessor.js';\r\nimport ParameterResolverVisitor from './Visitors/ParameterResolverVisitor.js';\r\nimport LogicalSchemaBinderVisitor from './Visitors/LogicalSchemaBinderVisitor.js';\r\nimport ExpTreeVisitor from './Visitors/ExpTreeVisitor.js';\r\nimport SetExecutableVisitor from './Visitors/SetExecutableVisitor.js';\r\nimport ExecutorVisitor from './Visitors/ExecutorVisitor.js';\r\nimport ExpressionBuilder from './ExpressionBuilder.js';\r\nimport AssociationInfoExpression from './EntityExpressions/AssociationInfoExpression.js';\r\nimport CodeExpression from './EntityExpressions/CodeExpression.js';\r\nimport CodeToEntityConverter from './EntityExpressions/CodeToEntityConverter.js';\r\nimport ComplexTypeExpression from './EntityExpressions/ComplexTypeExpression.js';\r\nimport EntityContextExpression from './EntityExpressions/EntityContextExpression.js';\r\nimport EntityExpression from './EntityExpressions/EntityExpression.js';\r\nimport EntityExpressionVisitor from './EntityExpressions/EntityExpressionVisitor.js';\r\nimport ExpressionMonitor from './EntityExpressions/ExpressionMonitor.js';\r\nimport EntityFieldExpression from './EntityExpressions/EntityFieldExpression.js';\r\nimport EntityFieldOperationExpression from './EntityExpressions/EntityFieldOperationExpression.js';\r\nimport EntitySetExpression from './EntityExpressions/EntitySetExpression.js';\r\nimport FrameOperationExpression from './EntityExpressions/FrameOperationExpression.js';\r\nimport FilterExpression from './EntityExpressions/FilterExpression.js';\r\nimport IncludeExpression from './EntityExpressions/IncludeExpression.js';\r\nimport MemberInfoExpression from './EntityExpressions/MemberInfoExpression.js';\r\nimport OrderExpression from './EntityExpressions/OrderExpression.js';\r\nimport ParametricQueryExpression from './EntityExpressions/ParametricQueryExpression.js';\r\nimport ProjectionExpression from './EntityExpressions/ProjectionExpression.js';\r\nimport QueryExpressionCreator from './EntityExpressions/QueryExpressionCreator.js';\r\nimport QueryParameterExpression from './EntityExpressions/QueryParameterExpression.js';\r\nimport RepresentationExpression from './EntityExpressions/RepresentationExpression.js';\r\nimport ServiceOperationExpression from './EntityExpressions/ServiceOperationExpression.js';\r\nimport ContinuationExpressionBuilder from './ContinuationExpressionBuilder.js';\r\n\r\n\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ItemStoreClass', null, null, {\r\n    constructor: function () {\r\n        var self = this;\r\n        self.itemStoreConfig = {\r\n            aliases: {},\r\n            contextTypes: {}\r\n        }\r\n\r\n        self.resetStoreToDefault('local', true);\r\n        $data.addStore = function () {\r\n            return self.addItemStoreAlias.apply(self, arguments);\r\n        };\r\n        $data.implementation = self.implementation;\r\n\r\n        $data.Entity.addMember('storeToken', {\r\n            get: function () {\r\n                if (this.storeConfigs && this.storeConfigs['default'])\r\n                    return this.storeConfigs.stores[this.storeConfigs['default']];\r\n            },\r\n            set: function (value) {\r\n                self._setTypeStoreConfig(this, 'default', value);\r\n            }\r\n        }, true);\r\n    },\r\n    itemStoreConfig: {},\r\n    attachMode: $data.EntityAttachMode ? $data.EntityAttachMode.KeepChanges : true,\r\n\r\n    addItemStoreAlias: function (name, contextFactoryOrToken, isDefault) {\r\n        var self = this;\r\n        var promise = new $data.PromiseHandler();\r\n        var callback = promise.createCallback();\r\n\r\n        if ('string' === typeof name) {\r\n            //storeToken\r\n            if ('object' === typeof contextFactoryOrToken && 'factory' in contextFactoryOrToken) {\r\n                var type = Container.resolveType(contextFactoryOrToken.typeName);\r\n\r\n                self.itemStoreConfig.aliases[name] = contextFactoryOrToken.factory;\r\n                self.itemStoreConfig.contextTypes[name] = type;\r\n                if (isDefault) {\r\n                    self.itemStoreConfig['default'] = name;\r\n                }\r\n\r\n                callback.success();\r\n                return promise.getPromise();\r\n            }\r\n                //contextFactory\r\n            else if ('function' === typeof contextFactoryOrToken) {\r\n                var preContext = contextFactoryOrToken();\r\n                var contextPromise;\r\n                if (preContext && preContext instanceof $data.EntityContext) {\r\n                    callback.success(preContext);\r\n                    contextPromise = promise.getPromise();\r\n                } else {\r\n                    contextPromise = preContext;\r\n                }\r\n\r\n                return contextPromise.then(function (ctx) {\r\n                    if (typeof ctx === 'function') {\r\n                        //factory resolve factory\r\n                        return self.addItemStoreAlias(name, ctx, isDefault);\r\n                    }\r\n\r\n                    if (ctx instanceof $data.EntityContext) {\r\n                        return ctx.onReady()\r\n                            .then(function (ctx) {\r\n                                self.itemStoreConfig.aliases[name] = contextFactoryOrToken;\r\n                                self.itemStoreConfig.contextTypes[name] = ctx.getType();\r\n                                if (isDefault) {\r\n                                    self.itemStoreConfig['default'] = name;\r\n                                }\r\n\r\n                                return ctx;\r\n                            });\r\n                    } else {\r\n                        promise = new $data.PromiseHandler();\r\n                        callback = promise.createCallback();\r\n                        callback.error(new Exception('factory dont have context instance', 'Invalid arguments'));\r\n                        return promise.getPromise();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        callback.error(new Exception('Name or factory missing', 'Invalid arguments'));\r\n        return promise.getPromise();\r\n    },\r\n    resetStoreToDefault: function (name, isDefault) {\r\n        this.itemStoreConfig.aliases[name] = this._getDefaultItemStoreFactory;\r\n        delete this.itemStoreConfig.contextTypes[name];\r\n        if (isDefault) {\r\n            this.itemStoreConfig['default'] = name;\r\n        }\r\n    },\r\n    _setStoreAlias: function (entity, storeToken) {\r\n        if ('object' === typeof storeToken && !entity.storeToken)\r\n            entity.storeToken = storeToken\r\n        return entity;\r\n    },\r\n    _getStoreAlias: function (entity, storeAlias) {\r\n        var type;\r\n        if (entity instanceof $data.Entity) {\r\n            var alias = storeAlias || entity.storeToken;\r\n            if (alias) {\r\n                return alias;\r\n            } else {\r\n                type = entity.getType();\r\n            }\r\n        } else {\r\n            type = entity;\r\n        }\r\n\r\n        return storeAlias || (type.storeConfigs ? type.storeConfigs['default'] : undefined) || type.storeToken;\r\n    },\r\n    _getStoreContext: function (aliasOrToken, type, nullIfInvalid) {\r\n        var contextPromise = this._getContextPromise(aliasOrToken, type);\r\n\r\n        if (!contextPromise || contextPromise instanceof $data.EntityContext) {\r\n            var promise = new $data.PromiseHandler();\r\n            var callback = promise.createCallback();\r\n            callback.success(contextPromise);\r\n            contextPromise = promise.getPromise();\r\n        }\r\n\r\n        return contextPromise.then(function (context) {\r\n            if (context instanceof $data.EntityContext) {\r\n                return context.onReady();\r\n            } else if (nullIfInvalid) {\r\n                return null;\r\n            } else {\r\n                var promise = new $data.PromiseHandler();\r\n                var callback = promise.createCallback();\r\n                callback.error(new Exception('factory return type error', 'Error'));\r\n                return promise.getPromise();\r\n            }\r\n        });\r\n    },\r\n    _getContextPromise: function (aliasOrToken, type) {\r\n        /*Token*/\r\n        if (aliasOrToken && 'object' === typeof aliasOrToken && 'function' === typeof aliasOrToken.factory) {\r\n            return aliasOrToken.factory(type);\r\n        } else if (aliasOrToken && 'object' === typeof aliasOrToken && 'object' === typeof aliasOrToken.args && 'string' === typeof aliasOrToken.typeName) {\r\n            var type = Container.resolveType(aliasOrToken.typeName);\r\n            return new type(JSON.parse(JSON.stringify(aliasOrToken.args)));\r\n        }\r\n            /*resolve alias from type (Token)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken] && typeof type.storeConfigs.stores[aliasOrToken].factory === 'function') {\r\n            return type.storeConfigs.stores[aliasOrToken].factory();\r\n        }\r\n            /*resolve alias from type (constructor options)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && type.storeConfigs && type.storeConfigs.stores[aliasOrToken]) {\r\n            return this._getDefaultItemStoreFactory(type, type.storeConfigs.stores[aliasOrToken]);\r\n        }\r\n            /*resolve alias from ItemStore (factories)*/\r\n        else if (aliasOrToken && 'string' === typeof aliasOrToken && this.itemStoreConfig.aliases[aliasOrToken]) {\r\n            return this.itemStoreConfig.aliases[aliasOrToken](type);\r\n        }\r\n            /*token is factory*/\r\n        else if (aliasOrToken && 'function' === typeof aliasOrToken) {\r\n            return aliasOrToken();\r\n        }\r\n            /*default no hint*/\r\n        else {\r\n            return this.itemStoreConfig.aliases[this.itemStoreConfig['default']](type);\r\n        }\r\n\r\n    },\r\n    _getStoreEntitySet: function (storeAlias, instanceOrType) {\r\n        var aliasOrToken = this._getStoreAlias(instanceOrType, storeAlias);\r\n        var type = (\"function\" === typeof instanceOrType) ? instanceOrType : instanceOrType.getType();;\r\n\r\n        return this._getStoreContext(aliasOrToken, type)\r\n            .then(function (ctx) {\r\n                var entitySet = ctx.getEntitySetFromElementType(type);\r\n                if (!entitySet) {\r\n                    var d = new $data.PromiseHandler();\r\n                    var callback = d.createCallback();\r\n                    callback.error(\"EntitySet not exist for \" + type.fullName);\r\n                    return d.getPromise();\r\n                }\r\n                return entitySet;\r\n            });\r\n    },\r\n    _getDefaultItemStoreFactory: function (instanceOrType, initStoreConfig) {\r\n        if (instanceOrType) {\r\n            var type = (\"function\" === typeof instanceOrType) ? instanceOrType : instanceOrType.getType();\r\n            var typeName = $data.Container.resolveName(type) + \"_items\";\r\n            var typeName = typeName.replace(/\\./g, \"_\");\r\n\r\n            var storeConfig = $data.typeSystem.extend({\r\n                collectionName: initStoreConfig && initStoreConfig.collectionName ? initStoreConfig.collectionName : 'Items',\r\n                tableName: typeName,\r\n                initParam: { provider: 'local', databaseName: typeName }\r\n            }, initStoreConfig);\r\n\r\n            var contextDef = {};\r\n            contextDef[storeConfig.collectionName] = { type: $data.EntitySet, elementType: type }\r\n            if (storeConfig.tableName)\r\n                contextDef[storeConfig.collectionName]['tableName'] = storeConfig.tableName;\r\n\r\n            var inMemoryType = $data.EntityContext.extend(typeName, contextDef);\r\n            var ctx = new inMemoryType(storeConfig.initParam);\r\n            if (initStoreConfig && typeof initStoreConfig === 'object')\r\n                initStoreConfig.factory = ctx._storeToken.factory;\r\n            return ctx;\r\n        }\r\n        return undefined;\r\n    },\r\n    implementation: function (name, contextOrAlias) {\r\n        var self = $data.ItemStore;\r\n        var result;\r\n\r\n        if (typeof contextOrAlias === 'string') {\r\n            contextOrAlias = self.itemStoreConfig.contextTypes[contextOrAlias]\r\n        } else if (contextOrAlias instanceof $data.EntityContext) {\r\n            contextOrAlias = contextOrAlias.getType();\r\n        } else if (!(typeof contextOrAlias === 'function' && contextOrAlias.isAssignableTo)) {\r\n            contextOrAlias = self.itemStoreConfig.contextTypes[self.itemStoreConfig['default']];\r\n        }\r\n\r\n        if (contextOrAlias) {\r\n            result = self._resolveFromContext(contextOrAlias, name);\r\n        }\r\n\r\n        if (!result) {\r\n            result = Container.resolveType(name);\r\n        }\r\n\r\n        return result;\r\n    },\r\n    _resolveFromContext: function (contextType, name) {\r\n        var memDefs = contextType.memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < memDefs.length; i++) {\r\n            var memDef = memDefs[i];\r\n            if (memDef.type) {\r\n                var memDefType = Container.resolveType(memDef.type);\r\n                if (memDefType.isAssignableTo && memDefType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(memDef.elementType);\r\n                    if (elementType.name === name) {\r\n                        return elementType;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n\r\n    //Entity Instance\r\n    EntityInstanceSave: function (storeAlias, hint, attachMode) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        return self._getStoreEntitySet(storeAlias, entity)\r\n            .then(function (entitySet) {\r\n                return self._getSaveMode(entity, entitySet, hint, storeAlias)\r\n                    .then(function (mode) {\r\n                        mode = mode || 'add';\r\n                        switch (mode) {\r\n                            case 'add':\r\n                                entitySet.add(entity);\r\n                                break;\r\n                            case 'attach':\r\n                                entitySet.attach(entity, attachMode || true);\r\n                                break;\r\n                            default:\r\n                                var d = new $data.PromiseHandler();\r\n                                var callback = d.createCallback();\r\n                                callback.error('save mode not supported: ' + mode);\r\n                                return d.getPromise();\r\n                        }\r\n\r\n                        return entitySet.entityContext.saveChanges()\r\n                            .then(function () { self._setStoreAlias(entity, entitySet.entityContext.storeToken); return entity; });\r\n                    });\r\n            });\r\n    },\r\n    EntityInstanceRemove: function (storeAlias) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        return self._getStoreEntitySet(storeAlias, entity)\r\n            .then(function (entitySet) {\r\n                entitySet.remove(entity);\r\n\r\n                return entitySet.entityContext.saveChanges()\r\n                    .then(function () { return entity; });\r\n            });\r\n    },\r\n    EntityInstanceRefresh: function (storeAlias, keepStore) {\r\n        var self = $data.ItemStore;\r\n        var entity = this;\r\n        var entityType = entity.getType();\r\n\r\n        var key = self._getKeyObjectFromEntity(entity, entityType);\r\n\r\n        return entityType.read(key, storeAlias)\r\n            .then(function (loadedEntity) {\r\n                entityType.memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n                    entity[memDef.name] = loadedEntity[memDef.name];\r\n                });\r\n                entity.storeToken = (keepStore ? entity.storeToken : undefined) || loadedEntity.storeToken;\r\n                entity.changedProperties = undefined;\r\n                return entity;\r\n            });\r\n    },\r\n\r\n    //Entity Type\r\n    EntityInheritedTypeProcessor: function (type) {\r\n        var self = $data.ItemStore;\r\n        type.readAll = self.EntityTypeReadAll(type);\r\n        type.read = self.EntityTypeRead(type);\r\n        type.removeAll = self.EntityTypeRemoveAll(type);\r\n        type.remove = self.EntityTypeRemove(type);\r\n        type.get = self.EntityTypeGet(type); //Not complete\r\n        type.save = self.EntityTypeSave(type);\r\n        type.addMany = self.EntityTypeAddMany(type);\r\n        type.itemCount = self.EntityTypeItemCount(type);\r\n        type.query = self.EntityTypeQuery(type);\r\n        type.takeFirst = self.EntityTypeTakeFirst(type);\r\n\r\n        type.setStore = self.EntityTypeSetStore(type);\r\n    },\r\n    EntityTypeReadAll: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.forEach(function (item) { self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRemoveAll: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.toArray().then(function (items) {\r\n                        items.forEach(function (item) {\r\n                            entitySet.remove(item);\r\n                        });\r\n\r\n                        return entitySet.entityContext.saveChanges()\r\n                            .then(function () { return items; });\r\n                    });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRead: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    try {\r\n                        var singleParam = self._findByIdQueryable(entitySet, key);\r\n                        return entitySet.single(singleParam.predicate, singleParam.thisArgs)\r\n                            .then(function (item) { return self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                    } catch (e) {\r\n                        var d = new $data.PromiseHandler();\r\n                        var callback = d.createCallback();\r\n                        callback.error(e);\r\n                        return d.getPromise();\r\n                    }\r\n                });\r\n        };\r\n    },\r\n    EntityTypeGet: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            var item = new type(self._getKeyObjectFromEntity(key));\r\n            item.refresh(storeAlias);\r\n            return item;\r\n        };\r\n    },\r\n    EntityTypeSave: function (type) {\r\n        return function (initData, storeAlias, hint) {\r\n\r\n            var self = $data.ItemStore;\r\n            var instance = new type(initData);\r\n            return instance.save(storeAlias, hint);\r\n        }\r\n    },\r\n    EntityTypeAddMany: function (type) {\r\n        return function (initDatas, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    var items = entitySet.addMany(initDatas);\r\n                    return entitySet.entityContext.saveChanges()\r\n                        .then(function () {\r\n                            return items;\r\n                        });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeRemove: function (type) {\r\n        return function (key, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            var entityPk = type.memberDefinitions.getKeyProperties();\r\n            var entity;\r\n            if (entityPk.length === 1) {\r\n                var obj = {};\r\n                obj[entityPk[0].name] = key;\r\n                entity = new type(obj);\r\n            } else {\r\n                entity = new type(key);\r\n            }\r\n            return entity.remove(storeAlias);\r\n        }\r\n    },\r\n    EntityTypeItemCount: function (type) {\r\n        return function (storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.length();\r\n                });\r\n        }\r\n    },\r\n    EntityTypeQuery: function (type) {\r\n        return function (predicate, thisArg, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.filter(predicate, thisArg).forEach(function (item) { self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n    EntityTypeTakeFirst: function (type) {\r\n        return function (predicate, thisArg, storeAlias) {\r\n            var self = $data.ItemStore;\r\n            return self._getStoreEntitySet(storeAlias, type)\r\n                .then(function (entitySet) {\r\n                    return entitySet.first(predicate, thisArg)\r\n                        .then(function (item) { return self._setStoreAlias(item, entitySet.entityContext.storeToken); });\r\n                });\r\n        }\r\n    },\r\n\r\n    EntityTypeSetStore: function (type) {\r\n        return function (name, config) {\r\n            if (typeof name === 'object' && typeof config === 'undefined') {\r\n                config = name;\r\n                name = 'default';\r\n            }\r\n\r\n            var self = $data.ItemStore;\r\n\r\n            var defStoreConfig = {};\r\n            if (config) {\r\n                if (config.tableName) {\r\n                    defStoreConfig.tableName = config.tableName;\r\n                    delete config.tableName;\r\n                }\r\n\r\n                if (config.collectionName) {\r\n                    defStoreConfig.collectionName = config.collectionName;\r\n                    delete config.collectionName;\r\n                }\r\n\r\n                if (typeof config.dataSource === 'string') {\r\n                    var ds = config.dataSource;\r\n                    if (ds.lastIndexOf('/') === ds.length - 1) {\r\n                        ds = ds.substring(0, ds.lastIndexOf('/'));\r\n                    }\r\n                    var parsedApiUrl = ds.substring(0, ds.lastIndexOf('/'));\r\n                    if (!defStoreConfig.tableName)\r\n                        defStoreConfig.tableName = ds.substring(ds.lastIndexOf('/') + 1);\r\n\r\n                    var provider = config.provider || config.name;\r\n                    switch (provider) {\r\n                        case 'oData':\r\n                            config.oDataServiceHost = config.oDataServiceHost || parsedApiUrl;\r\n                            break;\r\n                        case 'webApi':\r\n                            config.apiUrl = config.apiUrl || parsedApiUrl;\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                }\r\n\r\n\r\n            } else {\r\n                config = { name: 'local' };\r\n            }\r\n\r\n            defStoreConfig.initParam = config;\r\n            self._setTypeStoreConfig(type, name, defStoreConfig);\r\n\r\n            return type;\r\n        }\r\n    },\r\n    _setTypeStoreConfig: function(type, name, config){\r\n        if (!type.storeConfigs) {\r\n            type.storeConfigs = {\r\n                stores: {}\r\n            };\r\n        }\r\n        type.storeConfigs.stores[name] = config;\r\n        if (name === 'default') {\r\n            type.storeConfigs['default'] = name;\r\n        }\r\n    },\r\n\r\n    _findByIdQueryable: function (set, keys) {\r\n        var keysProps = set.defaultType.memberDefinitions.getKeyProperties();\r\n        if (keysProps.length > 1 && keys && 'object' === typeof keys) {\r\n            var predicate = \"\", thisArgs = {};\r\n            for (var i = 0; i < keysProps.length; i++) {\r\n                if (i > 0) predicate += \" && \";\r\n\r\n                var key = keysProps[i];\r\n                predicate += \"it.\" + key.name + \" == this.\" + key.name;\r\n                thisArgs[key.name] = keys[key.name];\r\n            }\r\n\r\n            return {\r\n                predicate: predicate,\r\n                thisArgs: thisArgs\r\n            };\r\n        } else if (keysProps.length === 1) {\r\n            return {\r\n                predicate: \"it.\" + keysProps[0].name + \" == this.value\",\r\n                thisArgs: { value: keys }\r\n            };\r\n        } else {\r\n            throw 'invalid keys';\r\n        }\r\n    },\r\n    _getKeyObjectFromEntity: function (obj, entityType) {\r\n        var key;\r\n        var keyDefs = entityType.memberDefinitions.getKeyProperties();\r\n        if (keyDefs.length === 1)\r\n            key = obj && typeof obj === 'object' ? obj[keyDefs[0].name] : obj;\r\n        else {\r\n            key = {};\r\n\r\n            for (var i = 0; i < keyDefs.length; i++) {\r\n                key[keyDefs[0].name] = obj ? obj[keyDefs[0].name] : obj;\r\n            }\r\n        }\r\n\r\n        return key;\r\n    },\r\n    _getSaveMode: function (entity, entitySet, hint, storeAlias) {\r\n        var self = this;\r\n        var promise = new $data.PromiseHandler();\r\n        var callback = promise.createCallback();\r\n        var entityType = entity.getType();\r\n\r\n        switch (true) {\r\n            case hint === 'update':\r\n                callback.success('attach'); break;\r\n            case hint === 'new':\r\n                callback.success('add'); break;\r\n            case false === entityType.memberDefinitions.getKeyProperties().every(function (keyDef) { return entity[keyDef.name]; }):\r\n                callback.success('add'); break;\r\n            case !!entity.storeToken:\r\n                callback.success('attach'); break;\r\n                break;\r\n            default:\r\n                //use the current entity store informations\r\n                storeAlias = this._getStoreAlias(entity, storeAlias);\r\n                entityType.read(self._getKeyObjectFromEntity(entity, entityType), storeAlias)\r\n                    .then(function () { callback.success('attach'); }, function () { callback.success('add'); });\r\n                break;\r\n        }\r\n\r\n        return promise.getPromise();\r\n    },\r\n\r\n    //EntityContext\r\n    ContextRegister: function (storageProviderCfg) {\r\n        //context instance\r\n        var self = this;\r\n        if (typeof storageProviderCfg.name === \"string\") {\r\n            storageProviderCfg.name = [storageProviderCfg.name];\r\n        }\r\n\r\n        var args = JSON.parse(JSON.stringify(storageProviderCfg));\r\n        this.storeToken = {\r\n            typeName: this.getType().fullName,\r\n            args: args,\r\n            factory: function () {\r\n                return new (self.getType())(args);\r\n            }\r\n        }\r\n\r\n        //set elementType storetoken\r\n        var members = this.getType().memberDefinitions.getPublicMappedProperties();\r\n        for (var i = 0; i < members.length; i++) {\r\n            var item = members[i];\r\n            if (item.type) {\r\n                var itemResolvedDataType = Container.resolveType(item.type);\r\n                if (itemResolvedDataType && itemResolvedDataType.isAssignableTo && itemResolvedDataType.isAssignableTo($data.EntitySet)) {\r\n                    var elementType = Container.resolveType(item.elementType);\r\n                    if (!elementType.storeToken) {\r\n                        elementType.storeToken = this.storeToken;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    },\r\n    QueryResultModifier: function (query) {\r\n        var self = $data.ItemStore;\r\n        var context = query.context;\r\n        var type = query.modelBinderConfig.$type;\r\n        if ('string' === typeof type) {\r\n            type = Container.resolveType(type);\r\n        }\r\n\r\n        if (type === $data.Array && query.modelBinderConfig.$item && query.modelBinderConfig.$item.$type) {\r\n            type = query.modelBinderConfig.$item.$type;\r\n        }\r\n\r\n        //TODO: runs when model binding missed (inmemory)\r\n        if ((typeof type === 'undefined' && query.result && query.result[0] instanceof $data.Entity)) {\r\n            var navProps = !type ? [] : type.memberDefinitions.getPublicMappedProperties().filter(function (memDef) {\r\n                return !!memDef.inverseProperty;\r\n            });\r\n\r\n            for (var i = 0; i < query.result.length; i++) {\r\n                self._setStoreAlias(query.result[i], context.storeToken);\r\n\r\n                for (var j = 0; j < navProps.length; j++) {\r\n                    var navProp = navProps[j];\r\n                    if (query.result[i][navProp.name] instanceof $data.Entity) {\r\n                        self._setStoreAlias(query.result[i][navProp.name], context.storeToken);\r\n                    } else if (Array.isArray(query.result[i][navProp.name])) {\r\n                        for (var k = 0; k < query.result[i][navProp.name].length; k++) {\r\n                            if (query.result[i][navProp.name][k] instanceof $data.Entity) {\r\n                                self._setStoreAlias(query.result[i][navProp.name][k], context.storeToken);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n$data.ItemStore = new $data.ItemStoreClass();\r\n\r\n$data.Entity.addMember('field', function (propName) {\r\n    var def = this.memberDefinitions.getMember(propName);\r\n    if (def) {\r\n        if (def.definedBy === this) {\r\n            return new $data.MemberWrapper(def);\r\n        } else {\r\n            Guard.raise(new Exception(\"Member '\" + propName + \"' defined on '\" + def.definedBy.fullName + \"'!\", 'Invalid Operation'));\r\n        }\r\n    } else {\r\n        Guard.raise(new Exception(\"Member '\" + propName + \"' not exists!\", 'Invalid Operation'));\r\n    }\r\n\r\n    return this;\r\n}, true);\r\n\r\n\r\n$data.Class.define('$data.MemberWrapper', null, null, {\r\n    constructor: function (memberDefinition) {\r\n        this.memberDefinition = memberDefinition;\r\n    },\r\n    setKey: function (value) {\r\n        this.memberDefinition.key = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setComputed: function (value) {\r\n        this.memberDefinition.computed = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setRequired: function (value) {\r\n        this.memberDefinition.required = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    setNullable: function (value) {\r\n        this.memberDefinition.nullable = value || value === undefined ? true : false;\r\n        return this;\r\n    },\r\n    changeDefinition: function (attr, value) {\r\n        this.memberDefinition[attr] = value;\r\n        return this;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ModelBinder', null, null, {\r\n\r\n    constructor: function (context) {\r\n        this.context = context;\r\n        this.providerName = null;\r\n        if (this.context.storageProvider && typeof this.context.storageProvider.getType === 'function') {\r\n            this.references = !(this.context.storageProvider.providerConfiguration.modelBinderOptimization || false);\r\n            this.providerName = this.context.storageProvider.providerName;\r\n            if (!this.providerName) {\r\n                for (var i in $data.RegisteredStorageProviders) {\r\n                    if ($data.RegisteredStorageProviders[i] === this.context.storageProvider.getType()) {\r\n                        this.providerName = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    _deepExtend: function (o, r) {\r\n        if (o === null || o === undefined) {\r\n            return r;\r\n        }\r\n        for (var i in r) {\r\n            if (o.hasOwnProperty(i)) {\r\n                if (typeof r[i] === 'object') {\r\n                    if (Array.isArray(r[i])) {\r\n                        for (var j = 0; j < r[i].length; j++) {\r\n                            if (o[i].indexOf(r[i][j]) < 0) {\r\n                                o[i].push(r[i][j]);\r\n                            }\r\n                        }\r\n                    } else this._deepExtend(o[i], r[i]);\r\n                }\r\n            } else {\r\n                o[i] = r[i];\r\n            }\r\n        }\r\n        return this._finalize(o);\r\n    },\r\n\r\n    _finalize: function(o){\r\n        if (o instanceof $data.Entity) {\r\n            o.changedProperties = undefined;\r\n            o.storeToken = this.context.storeToken;\r\n        }\r\n        return o;\r\n    },\r\n\r\n    _buildSelector: function (meta, context) {\r\n        if (meta.$selector) {\r\n            if (!(Array.isArray(meta.$selector))) {\r\n                meta.$selector = [meta.$selector];\r\n            }\r\n\r\n            for (var i = 0; i < meta.$selector.length; i++) {\r\n                var selector = meta.$selector[i].replace('json:', '');\r\n                context.src += 'if(';\r\n                var path = selector.split('.');\r\n                for (var j = 0; j < path.length; j++) {\r\n                    context.src += 'di[\"' + path.slice(0, j + 1).join('\"][\"') + '\"]' + (j < path.length - 1 ? ' && ' : ' !== undefined && typeof di.' + selector + ' === \"object\"');\r\n                }\r\n                context.src += '){di = di[\"' + path.join('\"][\"') + '\"];}' + (i < meta.$selector.length - 1 ? 'else ' : '');\r\n            }\r\n\r\n            context.src += 'if (di === null){';\r\n            if (context.iter) context.src += context.iter + ' = null;';\r\n            context.src += 'return null;';\r\n            context.src += '}';\r\n        }\r\n    },\r\n\r\n    _buildKey: function (name, type, keys, context, data) {\r\n        if (keys) {\r\n            var type = Container.resolveType(type);\r\n            var typeIndex = Container.getIndex(type);\r\n            type = type.fullName || type.name;\r\n            context.src += 'var ' + name + 'Fn = function(di){';\r\n            if (!(Array.isArray(keys)) || keys.length == 1) {\r\n                if (typeof keys !== 'string') keys = keys[0];\r\n                context.src += 'if (typeof di[\"' + keys + '\"] === \"undefined\") return undefined;';\r\n                context.src += 'if (di[\"' + keys + '\"] === null) return null;';\r\n                context.src += 'var key = (\"' + type + '_' + typeIndex + '_' + keys + '#\" + di[\"' + keys + '\"]);';\r\n            } else {\r\n                context.src += 'var key = \"\";';\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var id = typeof keys[i] !== 'object' ? keys[i] : keys[i].$source;\r\n                    context.src += 'if (typeof di[\"' + id + '\"] === \"undefined\") return undefined;';\r\n                    context.src += 'if (di[\"' + id + '\"] === null) return null;';\r\n                    context.src += 'key += (\"' + type + '_' + typeIndex + '_' + id + '#\" + di[\"' + id + '\"]);';\r\n                }\r\n            }\r\n\r\n            context.src += 'return key;};';\r\n        }\r\n\r\n        context.src += 'var ' + name + ' = ' + (keys ? name + 'Fn(' + (data || 'di') + ')' : 'undefined') + ';';\r\n    },\r\n\r\n    build: function (meta, context) {\r\n        if (meta.$selector) {\r\n            if (!(Array.isArray(meta.$selector))) meta.$selector = [meta.$selector];\r\n            for (var i = 0; i < meta.$selector.length; i++) {\r\n                meta.$selector[i] = meta.$selector[i].replace('json:', '');\r\n            }\r\n        }\r\n\r\n        if (meta.$value) {\r\n            if (typeof meta.$value === 'function') {\r\n                context.src += 'var di = di || data;';\r\n                context.src += 'var fn = function(){ return meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + '.$value.call(self, meta' + (context.meta.length ? '.' + context.meta.join('.') : '') + ', di); };';\r\n                if (meta.$type) {\r\n                    var type = Container.resolveName(Container.resolveType(meta.$type));\r\n                    var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n                    var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                    if (converter) {\r\n                        context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](fn())';\r\n                    } else {\r\n                        context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(fn())';\r\n                    }\r\n                } else context.item = 'fn()';\r\n            } else if (meta.$type) {\r\n                var type = Container.resolveName(Container.resolveType(meta.$type));\r\n                var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                if (converter) {\r\n                    context.item = 'self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](' + meta.$value + ')';\r\n                } else {\r\n                    context.item = 'new (Container.resolveByIndex(' + typeIndex + '))(' + meta.$value + ')';\r\n                }\r\n            } else context.item = meta.$value;\r\n        } else if (meta.$source) {\r\n            var type = Container.resolveName(Container.resolveType(meta.$type));\r\n            var typeIndex = Container.getIndex(Container.resolveType(meta.$type));\r\n            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\r\n            if (!context.forEach) context.src += 'var di = data;';\r\n            context.item = item;\r\n            this._buildSelector(meta, context);\r\n            if (converter) {\r\n                context.src += 'var ' + item + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta.$source + '\"]);';\r\n            } else {\r\n                context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta.$source + '\"]);';\r\n            }\r\n        } else if (meta.$item) {\r\n            context.meta.push('$item');\r\n            var iter = (context.item && context.current ? context.item + '.' + context.current : (context.item ? context.item : 'result'));\r\n            context.iter = iter;\r\n            if (iter.indexOf('.') < 0) context.src += 'var ' + iter + ';';\r\n            context.src += 'var fn = function(di){';\r\n            if (meta.$selector) {\r\n                context.src += 'if (typeof di !== \"undefined\" && !(Array.isArray(di))){';\r\n                this._buildSelector(meta, context);\r\n                context.src += '}';\r\n            }\r\n            if (this.references && meta.$keys) this._buildKey('forKey', meta.$type, meta.$keys, context);\r\n            context.src += iter + ' = typeof ' + iter + ' == \"undefined\" ? [] : ' + iter + ';';\r\n            if (this.references && meta.$item.$keys) {\r\n                var keycacheName = 'keycache_' + iter.replace(/\\./gi, '_');\r\n                context.src += 'var ' + keycacheName + ';';\r\n                context.src += 'var kci = keycacheIter.indexOf(' + iter + ');';\r\n                context.src += 'if (kci < 0){';\r\n                context.src += keycacheName + ' = [];';\r\n                context.src += 'keycache.push(' + keycacheName + ');';\r\n                context.src += 'keycacheIter.push(' + iter + ');';\r\n                context.src += '}else{';\r\n                context.src += keycacheName + ' = keycache[kci];';\r\n                context.src += '}';\r\n            }\r\n            context.iter = undefined;\r\n            context.forEach = true;\r\n            var itemForKey = 'itemForKey_' + iter.replace(/\\./gi, '_');\r\n            context.src += 'var forEachFn = function(di, i){';\r\n            context.src += 'var diBackup = di;';\r\n            if (this.providerName == \"sqLite\" && this.references && meta.$item.$keys) this._buildKey(itemForKey, meta.$type, meta.$item.$keys, context);\r\n            var item = context.item || 'iter';\r\n            context.item = item;\r\n            if (!meta.$item.$source) {\r\n                this._buildSelector(meta.$item, context);\r\n            }\r\n            this.build(meta.$item, context);\r\n            if (this.references && meta.$keys) {\r\n                context.src += 'if (forKey){';\r\n                context.src += 'if (cache[forKey]){';\r\n                context.src += iter + ' = cache[forKey];';\r\n                context.src += 'if (' + iter + '.indexOf(' + (context.item || item) + ') < 0){';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += '}}else{';\r\n                context.src += 'cache[forKey] = ' + iter + ';';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += '}}else{';\r\n                if (this.references && meta.$item.$keys) this._buildKey('cacheKey', meta.$type, meta.$item.$keys, context, 'diBackup');\r\n                context.src += 'if (typeof cacheKey != \"undefined\" && cacheKey !== null){';\r\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + ' && cacheKey){';\r\n                context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(cacheKey) < 0){';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(cacheKey);';\r\n                context.src += '}';\r\n                context.src += '}else{';\r\n                context.src += iter + '.push(' + (context.item || item) + ');';\r\n                context.src += '}';\r\n                context.src += '}';\r\n                context.src += '}';\r\n            } else {\r\n                if (this.references && meta.$item.$keys) {\r\n                    context.src += 'if (typeof ' + itemForKey + ' !== \"undefined\" && ' + itemForKey + ' !== null){';\r\n                    context.src += 'if (typeof keycache_' + iter.replace(/\\./gi, '_') + ' !== \"undefined\" && ' + itemForKey + '){';\r\n                    context.src += 'if (keycache_' + iter.replace(/\\./gi, '_') + '.indexOf(' + itemForKey + ') < 0){';\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                    context.src += 'keycache_' + iter.replace(/\\./gi, '_') + '.push(' + itemForKey + ');'\r\n                    context.src += '}}else{';\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                    context.src += '}}else{';\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                    context.src += '}';\r\n                } else {\r\n                    context.src += iter + '.push(' + (context.item || item) + ');';\r\n                }\r\n            }\r\n            context.src += '};';\r\n            context.src += 'if (Array.isArray(di)) di.forEach(forEachFn);';\r\n            context.src += 'else forEachFn(di, 0);';\r\n            context.forEach = false;\r\n            context.item = null;\r\n            context.src += '};fn(typeof di === \"undefined\" ? data : di);'\r\n            context.meta.pop();\r\n        } else if (meta.$type) {\r\n            if (!context.forEach) {\r\n                context.src += 'if (typeof di === \"undefined\"){';\r\n                context.src += 'var di = data;';\r\n                this._buildSelector(meta, context);\r\n                context.src += '}';\r\n            }\r\n            var resolvedType = Container.resolveType(meta.$type);\r\n            var type = Container.resolveName(resolvedType);\r\n            var typeIndex = Container.getIndex(resolvedType);\r\n            var isEntityType = resolvedType.isAssignableTo && resolvedType.isAssignableTo($data.Entity);\r\n            var item = '_' + type.replace(/\\./gi, '_') + '_';\r\n            if (context.item == item) item += 'new_';\r\n            context.item = item;\r\n\r\n\r\n            var isPrimitive = false;\r\n            if (!meta.$source && !meta.$value && resolvedType !== $data.Array && resolvedType !== $data.Object && !resolvedType.isAssignableTo)\r\n                isPrimitive = true;\r\n            if (resolvedType === $data.Object || resolvedType === $data.Array) {\r\n                var keys = Object.keys(meta);\r\n                if (keys.length == 1 || (keys.length == 2 && meta.$selector)) isPrimitive = true;\r\n            }\r\n\r\n            if (isPrimitive) {\r\n                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                if (converter) {\r\n                    context.src += 'var ' + item + ' = di != undefined ? self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di) : di;';\r\n                } else {\r\n                    context.src += 'var ' + item + ' = di;';\r\n                }\r\n            } else {\r\n                if (this.references && meta.$keys) {\r\n                    this._buildKey('itemKey', meta.$type, meta.$keys, context);\r\n                    context.src += 'if (itemKey === null) return null;';\r\n                    context.src += 'var ' + item + ';';\r\n                    context.src += 'if (itemKey && cache[itemKey]){';\r\n                    context.src += item + ' = cache[itemKey];';\r\n                    context.src += '}else{';\r\n                    if (isEntityType) {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\r\n                    } else {\r\n                        context.src += item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\r\n                    }\r\n                    context.src += 'if (itemKey){';\r\n                    context.src += 'cache[itemKey] = ' + item + ';';\r\n                    context.src += '}';\r\n                    context.src += '}';\r\n                } else {\r\n                    if (isEntityType) {\r\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))(undefined, { setDefaultValues: false });';\r\n                    } else {\r\n                        context.src += 'var ' + item + ' = new (Container.resolveByIndex(' + typeIndex + '))();';\r\n                    }\r\n                }\r\n            }\r\n            var openTypeProperty = null;\r\n            if (this.providerName == \"oData\" && resolvedType && resolvedType.openType){\r\n                openTypeProperty = (resolvedType.openType === true ? $data.defaults.openTypeDefaultPropertyName : resolvedType.openType);\r\n                context.src += item + '.' + openTypeProperty + ' = {};';\r\n                context.src += 'for (var prop in di){ if ([' + resolvedType.memberDefinitions.getPublicMappedPropertyNames().map(function(prop){\r\n                    return '\"' + prop + '\"';\r\n                }).join(',') + '].indexOf(prop) < 0 && prop.indexOf(\"@\") < 0 && prop.indexOf(\"#\") < 0){ ' + item + '.' + openTypeProperty + '[prop] = di[prop]; } };';\r\n            }\r\n            for (var i in meta) {\r\n                if (i.indexOf('$') < 0 && i != openTypeProperty) {\r\n                    context.current = i;\r\n                    if (!meta[i].$item) {\r\n                        if (meta[i].$value) {\r\n                            context.meta.push(i);\r\n                            var item = context.item;\r\n                            this.build(meta[i], context);\r\n                            context.src += item + '.' + i + ' = ' + context.item + ';';\r\n                            context.item = item;\r\n                            context.meta.pop();\r\n                        } else if (meta[i].$source) {\r\n                            context.src += 'var fn = function(di){';\r\n                            this._buildSelector(meta[i], context);\r\n                            if (meta[i].$type) {\r\n                                var type = Container.resolveName(Container.resolveType(meta[i].$type));\r\n                                var typeIndex = Container.getIndex(Container.resolveType(meta[i].$type));\r\n                                var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                                if (converter) {\r\n                                    context.src += 'return self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i].$source + '\"]);';\r\n                                } else {\r\n                                    context.src += 'return new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i].$source + '\"]);';\r\n                                }\r\n                            } else {\r\n                                context.src += item + '.' + i + ' = di[\"' + meta[i].$source + '\"];';\r\n                            }\r\n                            context.src += '};';\r\n                            if (meta[i].$type) context.src += item + '.' + i + ' = fn(di);';\r\n                            else context.src += 'fn(di);';\r\n                        } else if (meta[i].$type) {\r\n                            context.meta.push(i);\r\n                            context.src += 'var fn = function(di){';\r\n                            this._buildSelector(meta[i], context);\r\n                            this.build(meta[i], context);\r\n                            context.src += 'return ' + context.item + ';};';\r\n                            if (meta[i].$type === $data.Object) context.src += item + '.' + i + ' = self._deepExtend(' + item + '.' + i + ', fn(di));';\r\n                            else context.src += item + '.' + i + ' = fn(di);';\r\n                            context.item = item;\r\n                            context.meta.pop();\r\n                        } else if (meta.$type) {\r\n                            var memDef = Container.resolveType(meta.$type).memberDefinitions.getMember(i);\r\n                            var type = Container.resolveName(memDef.type);\r\n                            var entityType = Container.resolveType(meta.$type);\r\n                            var entityTypeIndex = Container.getIndex(meta.$type);\r\n                            var converter = this.context.storageProvider.fieldConverter.fromDb[type];\r\n                            if (this.providerName && memDef && memDef.converter && memDef.converter[this.providerName] && typeof memDef.converter[this.providerName].fromDb == 'function') {\r\n                                context.src += item + '.' + i + ' = Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\").converter.' + this.providerName + '.fromDb(di[\"' + meta[i] + '\"], Container.resolveByIndex(\"' + entityTypeIndex + '\").memberDefinitions.getMember(\"' + i + '\"), self.context, Container.resolveByIndex(\"' + entityTypeIndex + '\"));';\r\n                            } else if (converter) {\r\n                                context.src += item + '.' + i + ' = self.context.storageProvider.fieldConverter.fromDb[\"' + type + '\"](di[\"' + meta[i] + '\"]);';\r\n                            } else {\r\n                                var typeIndex = Container.getIndex(Container.resolveType(type.memberDefinitions.getMember(i).type));\r\n                                context.src += item + '.' + i + ' = new (Container.resolveByIndex(' + typeIndex + '))(di[\"' + meta[i] + '\"]);';\r\n                            }\r\n                        }\r\n                    } else {\r\n                        context.meta.push(i);\r\n                        this.build(meta[i], context);\r\n                        context.item = item;\r\n                        context.meta.pop();\r\n                    }\r\n                }\r\n            }\r\n            context.src += item + ' = self._finalize(' + item + ');';\r\n        }\r\n    },\r\n\r\n    call: function (data, meta) {\r\n        if (!Object.getOwnPropertyNames(meta).length) {\r\n            return data;\r\n        }\r\n        var context = {\r\n            src: '',\r\n            meta: []\r\n        };\r\n        context.src += 'var self = this;';\r\n        context.src += 'var result;';\r\n        context.src += 'var cache = {};';\r\n        context.src += 'var keycache = [];';\r\n        context.src += 'var keycacheIter = [];';\r\n        this.build(meta, context);\r\n        if (context.item) context.src += 'if (typeof result === \"undefined\") result = ' + context.item + ';';\r\n        context.src += 'return result;';\r\n\r\n        var fn = new Function('meta', 'data', 'Container', context.src).bind(this);\r\n        var ret = fn(meta, data, Container);\r\n        return ret;\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeCollector', $data.Notifications.ChangeCollectorBase, null, {\r\n    buildData: function (entities) {\r\n        var result = [];\r\n        entities.forEach(function (element) {\r\n            var resObj = { entityState: element.data.entityState, typeName: element.data.getType().name };\r\n            var enumerableMemDefCollection = [];\r\n\r\n            switch (element.data.entityState) {\r\n                case $data.EntityState.Added:\r\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getPublicMappedProperties();\r\n                    break;\r\n                case $data.EntityState.Modified:\r\n                    enumerableMemDefCollection = element.data.changedProperties;\r\n                    break;\r\n                case $data.EntityState.Deleted:\r\n                    enumerableMemDefCollection = element.data.getType().memberDefinitions.getKeyProperties();\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            enumerableMemDefCollection.forEach(function (memDef) {\r\n                resObj[memDef.name] = element.data[memDef.name];\r\n            });\r\n\r\n            result.push(resObj);\r\n        });\r\n\r\n        return result;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeCollectorBase', null, null, {\r\n    buildData: function (entityContextData) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    processChangedData: function (entityData) {\r\n        if (this.Distrbutor && this.Distrbutor.distributeData)\r\n            this.Distrbutor.distributeData(this.buildData(entityData));\r\n    },\r\n    Distrbutor: { enumerable: false, dataType: $data.Notifications.ChangeDistributorBase, storeOnObject: true }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeDistributor', $data.Notifications.ChangeDistributorBase, null, {\r\n    constructor: function (broadcastUrl) {\r\n        this.broadcastUrl = broadcastUrl;\r\n    },\r\n    distributeData: function (data) {\r\n        $data.ajax({\r\n            url: this.broadcastUrl,\r\n            type: \"POST\",\r\n            data: 'data=' + JSON.stringify(data),\r\n            succes: this.success,\r\n            error: this.error\r\n        });\r\n    },\r\n    broadcastUrl: { dataType: \"string\" },\r\n    success: function () { },\r\n    error: function () { }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Notifications.ChangeDistributorBase', null, null, {\r\n    distributeData: function (collectorData) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$C('$data.Query', null, null,\r\n{\r\n    constructor: function (expression, defaultType, context) {\r\n        ///<param name=\"context\" type=\"$data.EntityContext\" />\r\n        ///<field name=\"expression\" type=\"$data.Expressions.ExpressionNode\" />\r\n        ///<field name=\"context\" type=\"$data.EntityContext\" />\r\n\r\n        this.expression = expression;\r\n        this.context = context;\r\n\r\n        //TODO: expressions get as JSON string?!\r\n\r\n        this.expressions = expression;\r\n        this.defaultType = defaultType;\r\n        this.result = [];\r\n        this.rawDataList = [];\r\n        this.modelBinderConfig = {};\r\n        this.context = context;\r\n    },\r\n\r\n    rawDataList: { dataType: \"Array\" },\r\n    result: { dataType: \"Array\" },\r\n    resultType: {},\r\n    buildResultSet: function (ctx) {\r\n        var converter = new $data.ModelBinder(this.context);\r\n        this.result = converter.call(this.rawDataList, this.modelBinderConfig);\r\n        return;\r\n    },\r\n    getEntitySets: function(){\r\n        var ret = [];\r\n        var ctx = this.context;\r\n\r\n        var fn = function(expression){\r\n            if (expression instanceof $data.Expressions.EntitySetExpression){\r\n                if (ret.indexOf(ctx._entitySetReferences[expression.elementType.name]) < 0)\r\n                    ret.push(ctx._entitySetReferences[expression.elementType.name]);\r\n            }\r\n            if (expression.source) fn(expression.source);\r\n            if (expression.members) {\r\n                for (var i = 0; i < expression.members.length; i++) {\r\n                    fn(expression.members[i].expression);\r\n                }\r\n            }\r\n        };\r\n\r\n        fn(this.expression);\r\n\r\n        return ret;\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$C('$data.queryBuilder', null, null, {\r\n    constructor: function () {\r\n        this._fragments = {};\r\n        this.selectedFragment = null;\r\n        this._binderConfig = {};\r\n        this.modelBinderConfig = this._binderConfig;\r\n        this._binderConfigPropertyStack = [];\r\n    },\r\n    selectTextPart: function (name) {\r\n        if (!this._fragments[name]) {\r\n            this._fragments[name] = { text: '', params: [] };\r\n        }\r\n        this.selectedFragment = this._fragments[name];\r\n    },\r\n    getTextPart: function (name) {\r\n        return this._fragments[name];\r\n    },\r\n    addText: function (textParticle) {\r\n        this.selectedFragment.text += textParticle;\r\n    },\r\n    addParameter: function (param) {\r\n        this.selectedFragment.params.push(param);\r\n    },\r\n    selectModelBinderProperty: function (name) {\r\n        this._binderConfigPropertyStack.push(this.modelBinderConfig);\r\n        if (!(name in this.modelBinderConfig)) {\r\n            this.modelBinderConfig[name] = {};\r\n        }\r\n        this.modelBinderConfig = this.modelBinderConfig[name];\r\n    },\r\n    popModelBinderProperty: function () {\r\n        if (this._binderConfigPropertyStack.length === 0) {\r\n            this.modelBinderConfig = this._binderConfig();\r\n        } else {\r\n            this.modelBinderConfig = this._binderConfigPropertyStack.pop();\r\n        }\r\n    },\r\n    resetModelBinderProperty: function (name) {\r\n        this._binderConfigPropertyStack = [];\r\n        this.modelBinderConfig = this._binderConfig;\r\n    },\r\n    addKeyField: function (name) {\r\n        if(!this.modelBinderConfig['$keys']){\r\n            this.modelBinderConfig['$keys'] = new Array();\r\n        }\r\n        this.modelBinderConfig['$keys'].push(name);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.QueryProvider', null, null,\r\n{\r\n    //TODO: instance member?????\r\n    constructor: function () { this.requiresExpressions= false },\r\n    executeQuery: function (queryable, resultHandler) {\r\n    },\r\n    getTraceString: function (queryable) {\r\n    }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Queryable', null, null,\r\n{\r\n    constructor: function (source, rootExpression) {\r\n        ///\t<signature>\r\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\r\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\r\n        /// <param name=\"source\" type=\"$data.EntitySet\" />\r\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        /// <summary>Provides a base class for classes supporting JavaScript Language Query.</summary>\r\n        /// <description>Provides a base class for classes supporting JavaScript Language Query.</description>\r\n        /// <param name=\"source\" type=\"$data.EntityContext\" />\r\n        /// <param name=\"rootExpression\" type=\"$data.Expressions.ExpressionNode\"></param>\r\n        ///\t</signature>\r\n\r\n        var context = source instanceof $data.EntityContext ? source : source.entityContext;\r\n        this.defaultType = source instanceof $data.EntityContext ? null : source.defaultType;\r\n        this.entityContext = context;\r\n        this.expression = rootExpression;\r\n    },\r\n\r\n    filter: function (predicate, thisArg) {\r\n        ///<summary>Filters a set of entities using a boolean expression.</summary>\r\n        ///<param name=\"predicate\" type=\"Function\">A boolean query expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Filters a set of entities using a boolean expression formulated as string.</summary>\r\n        ///<param name=\"predicate\" type=\"string\">\r\n        ///The expression body of the predicate function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: filter(\"it.Title == 'Hello'\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Filters a set of entities using a bool expression formulated as a JavaScript function.</summary>\r\n        ///<param name=\"predicate\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.filter( function( person ) { return person.Gender == 'Male' } );\r\n        ///</example>\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate function and parameters&#10;\r\n        ///var draftables = Persons.filter( function( person ) {\r\n        ///     return person.Gender == this.gender &amp;&amp; person.Age &gt; this.age\r\n        /// }, { gender: 'Male',  age: 21 });\r\n        ///</example>\r\n        ///<example>\r\n        ///Filtering a set of entities with a predicate as a string and parameters&#10;\r\n        ///var draftables = Persons.filter(\"it.Gender == this.gender &amp;&amp;  it.Age &gt; this.age\",\r\n        /// { gender: 'Male',  age: 21 });\r\n        ///</example>\r\n        ///</signature>\r\n        if (arguments.length === 3) {\r\n            predicate = \"it.\" + arguments[0] +\r\n                (arguments[1][0] === \".\" ? (arguments[1] + \"(param)\") : (\" \" + arguments[1] + \" param\"));\r\n            thisArg = { param : arguments[2] }\r\n        }\r\n        this._checkOperation('filter');\r\n        var expression = Container.createCodeExpression(predicate, thisArg);\r\n        var expressionSource = this.expression;\r\n        if (this.expression instanceof $data.Expressions.FilterExpression) {\r\n            expressionSource = this.expression.source;\r\n\r\n            var operatorResolution = this.entityContext.storageProvider.resolveBinaryOperator(\"and\");\r\n            expression = Container.createSimpleBinaryExpression(this.expression.selector, expression, \"and\", \"filter\", \"boolean\", operatorResolution);\r\n        }\r\n        var exp = Container.createFilterExpression(expressionSource, expression);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    where: function (predicate, params) {\r\n        ///<summary>Where is a convenience alias for C# developers. Use filter instead.</summary>\r\n\t\t///<returns type=\"$data.Queryable\" />\r\n        return this.filter(predicate, params);\r\n    },\r\n\r\n    map: function (projection, thisArg, mappedTo) {\r\n\t\t///\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t<param name=\"projection\" type=\"Function\">A projection expression</param>\r\n        ///\t<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t\t<param name=\"projection\" type=\"string\">\r\n        ///\t\t\tThe expression body of the projection function in string. &#10;\r\n\t\t///\t\t\tTo reference the lambda parameter use the 'it' context variable. &#10;\r\n\t\t///\t\t\tExample: map(\"{ i: it.Id, t: it.Title }\")\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"thisArg\" type=\"Object\" />\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Map specifies the shape or type of each returned element. You can specify whether your results will consist of complete Person objects, just one member, a subset of members, or some completely different result type based on a computation or new object creation. When map produces something other than a copy of the source element, the operation is called a projection. The use of projections to transform data is a powerful capability of JavaScript Language Query expressions.</summary>\r\n        ///\t\t<param name=\"projection\" type=\"Function\">\r\n        ///\t\t\tProjection function to specify the shape or type of each returned element.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///\t\t\tContains the projection parameters.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tProjection to get an array of the full name property of a set of Person entities&#10;\r\n        ///\t\t\tvar personFullNames = Persons.map( function( person ) { return person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t\t<example>\r\n\t\t///\t\t\tProjection to get an array of the required fields of Person entities in an anonymous type.&#10;\r\n        ///\t\t\tvar custom = Persons.map( function( person ) {\r\n        ///\t\t\t\treturn { FullName: person.FullName, Info: { Address: person.Location.Address, Phone: person.Phone } };\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('map');\r\n        var codeExpression = Container.createCodeExpression(projection, thisArg);\r\n        var exp = Container.createProjectionExpression(this.expression, codeExpression);\r\n\r\n        if (mappedTo === 'default')\r\n            exp.projectionAs = this.defaultType;\r\n        else if (mappedTo)\r\n            exp.projectionAs = Container.resolveType(mappedTo);\r\n        else\r\n            exp.projectionAs = $data.Object;\r\n\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    select: function (projection, thisArg, mappedTo) {\r\n\t\t///<summary>Select is a convenience alias for C# developers. Use map instead.</summary>\r\n\t\t///<returns type=\"$data.Queryable\" />\r\n        return this.map(projection, thisArg, mappedTo);\r\n    },\r\n\r\n    length: function (onResult, transaction) {\r\n\t\t///\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the number of entities (or projected object) in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n\t\t///\t\t\tExample: { success: function(cnt) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet the count of Person entities. &#10;\r\n        ///\t\t\tPersons.length( function( cnt ) { alert(\"There are \" + cnt + \" person(s) in the database.\"); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('length');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var countExpression = Container.createCountExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(countExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\tcount: function (onResult, transaction) {\r\n\t\t///<summary>Count is a convenience alias for C# developers. Use length instead.</summary>\r\n\t\t///<returns type=\"$data.Integer\" />\r\n\t    return this.length(onResult, transaction);\r\n    },\r\n\r\n\tforEach: function (iterator, transaction) {\r\n\t\t///\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\r\n        ///\t<param name=\"iterator\" type=\"Function\">Iterator function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Calls the iterator function for all entity (or projected object) in the query.</summary>\r\n        ///\t\t<param name=\"iterator\" type=\"Function\">\r\n        ///\t\t\tIterator function to handle the result elements.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('forEach');\r\n        var pHandler = new $data.PromiseHandler();\r\n        function iteratorFunc(items) { items.forEach(iterator); }\r\n        var cbWrapper = pHandler.createCallback(iteratorFunc);\r\n\r\n        var forEachExpression = Container.createForEachExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(forEachExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\ttoArray: function (onResult_items, transaction) {\r\n\t\t///\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult_items\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the query result as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult_items\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n\t\t///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet all Person entities. &#10;\r\n        ///\t\t\tPersons.toArray( function( result ) { console.dir(result); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        if (onResult_items instanceof $data.Array)\r\n        {\r\n            return this.toArray(function (results) {\r\n                onResult_items.length = 0;\r\n                results.forEach(function (item, idx) {\r\n                    onResult_items.push(item);\r\n                });\r\n            });\r\n        }\r\n\r\n        this._checkOperation('toArray');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n        var toArrayExpression = Container.createToArrayExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(toArrayExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n\t},\r\n\ttoLiveArray: function (onResult, transaction) {\r\n\t    var self = this;\r\n\t    var result = [];\r\n\r\n\t    var doAction = function (action) {\r\n\t        return function (onResult) {\r\n\t            var pHandler = new $data.PromiseHandler();\r\n\t            var callback = pHandler.createCallback(onResult);\r\n\r\n\t            var successFunc = function (res) {\r\n\t                result.length = 0;\r\n\r\n\t                var data = res;\r\n\t                $data.typeSystem.extend(result, data);\r\n\r\n\t                result.prev = doAction(function (cb) {\r\n\t                    data.prev(cb);\r\n\t                });\r\n\t                result.next = doAction(function (cb) {\r\n\t                    data.next(cb);\r\n\t                });\r\n\r\n\t                callback.success.apply(this, [result].concat(Array.prototype.slice.call(arguments, 1)));\r\n\t            }\r\n\r\n\t            action({\r\n\t                success: successFunc,\r\n\t                error: callback.error\r\n\t            }, transaction);\r\n\r\n\t            var promise = pHandler.getPromise();\r\n\t            $data.typeSystem.extend(result, promise);\r\n\r\n\t            return result;\r\n\t        }\r\n\t    }\r\n\r\n\t    result.refresh = doAction(function (cb) {\r\n\t        self.toArray(cb);\r\n\t    });\r\n\r\n\t    return result.refresh.apply(result, arguments);\r\n\t},\r\n\r\n\tsingle: function (filterPredicate, thisArg, onResult, transaction) {\r\n\t\t///\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n\t\t///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet \"George\" from the Person entity set. &#10;\r\n        ///\t\t\tPersons.single( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\r\n\t\t///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n\t\t///\t\t\t\terror: function () { ... }\r\n\t\t///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('single');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(2);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var singleExpression = Container.createSingleExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(singleExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\tsome: function (filterPredicate, thisArg, onResult, transaction) {\r\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\r\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns true if the query has any result element.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///         Is there any person who's first name is \"George\"? &#10;\r\n        ///\t\t\tPersons.some( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, {&#10;\r\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n        ///\t\t\t\terror: function () { ... }\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('some');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var someExpression = Container.createSomeExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(someExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\tevery: function (filterPredicate, thisArg, onResult, transaction) {\r\n        ///\t<summary>Filters a set of entities using a boolean expression and returns true if all elements of the EntitySet is in the result set.</summary>\r\n        ///\t<param name=\"filterPredicate\" type=\"Function\">Filter function</param>\r\n        ///\t<param name=\"thisArg\" type=\"Function\">The query parameters for filter function</param>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a </summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns a single element or throws an error if more than one element is filtered.</summary>\r\n        ///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n        ///\t\t\tSame as in filter.\r\n        ///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///\t\t\tResult is true when all person are married. &#10;\r\n        ///\t\t\tPersons.every( function( person ) { return person.Married == true; }, null, {&#10;\r\n        ///\t\t\t\tsuccess: function ( result ){ ... },&#10;\r\n        ///\t\t\t\terror: function () { ... }\r\n        ///\t\t\t});\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('every');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var everyExpression = Container.createEveryExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(everyExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\r\n    take: function (amount) {\r\n\t\t///\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\r\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to return.</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns only a specified number of elements from the start of the result set.</summary>\r\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\r\n        ///\t\t\tThe number of elements to skip.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.take(10).forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('take');\r\n        var constExp = Container.createConstantExpression(amount, \"integer\");\r\n        var takeExp = Container.createPagingExpression(this.expression, constExp, $data.Expressions.ExpressionType.Take);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n    skip: function (amount) {\r\n\t\t///\t<summary>Skip a specified number of elements from the start of the result set.</summary>\r\n        ///\t<param name=\"amount\" type=\"$data.Integer\">The number of elements to skip.</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Skip a specified number of elements from the start of the result set.</summary>\r\n        ///\t\t<param name=\"amount\" type=\"$data.Integer\">\r\n        ///\t\t\tThe number of elements to skip.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tLog the full name of each Person. &#10;\r\n        ///\t\t\tPersons.skip(1).take(5).forEach( function( person ) { console.log(person.FullName; } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('skip');\r\n        var constExp = Container.createConstantExpression(amount, \"integer\");\r\n        var takeExp = Container.createPagingExpression(this.expression, constExp, $data.Expressions.ExpressionType.Skip);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n\r\n    order: function(selector) {\r\n       if (selector === '' || selector === undefined || selector === null) {\r\n           return this;\r\n       }\r\n       if(selector[0] === \"-\") {\r\n           var orderString = \"it.\" + selector.replace(\"-\",\"\");\r\n           return this.orderByDescending(orderString);\r\n       } else {\r\n           return this.orderBy(\"it.\" + selector);\r\n       }\r\n\r\n    },\r\n\r\n    orderBy: function (selector, thisArg) {\r\n\t\t///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"string\">\r\n        ///The expression body of the order function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: orderBy(\"it.Id\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Order a set of entities using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Ordering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.orderBy( function( person ) { return person.Id; } );\r\n        ///</example>\r\n        ///</signature>\r\n\r\n        this._checkOperation('orderBy');\r\n        var codeExpression = Container.createCodeExpression(selector, thisArg);\r\n        var exp = Container.createOrderExpression(this.expression, codeExpression, $data.Expressions.ExpressionType.OrderBy);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n    orderByDescending: function (selector, thisArg) {\r\n\t\t///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">An order expression</param>\r\n        ///<param name=\"thisArg\" type=\"Object\">The query parameters</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<signature>\r\n        ///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"string\">\r\n        ///The expression body of the order function in string. &#10;\r\n        ///To reference the lambda parameter use the 'it' context variable. &#10;\r\n        ///Example: orderBy(\"it.Id\")\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" />\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///</signature>\r\n        ///<signature>\r\n        ///<summary>Order a set of entities descending using an expression.</summary>\r\n        ///<param name=\"selector\" type=\"Function\">\r\n        ///</param>\r\n        ///<param name=\"thisArg\" type=\"Object\" optional=\"true\">\r\n        ///Contains the predicate parameters\r\n        ///</param>\r\n        ///<returns type=\"$data.Queryable\" />\r\n        ///<example>\r\n        ///Ordering a set of entities with a predicate function&#10;\r\n        ///var males = Persons.orderByDescending( function( person ) { return person.Id; } );\r\n        ///</example>\r\n        ///</signature>\r\n\r\n        this._checkOperation('orderByDescending');\r\n        var codeExpression = Container.createCodeExpression(selector, thisArg);\r\n        var exp = Container.createOrderExpression(this.expression, codeExpression, $data.Expressions.ExpressionType.OrderByDescending);\r\n        var q = Container.createQueryable(this, exp);\r\n        return q;\r\n    },\r\n\r\n    first: function (filterPredicate, thisArg, onResult, transaction) {\r\n\t\t///\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n        ///\t<param name=\"onResult_items\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n\t\t///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"string\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Filters a set of entities using a boolean expression and returns the first element.</summary>\r\n\t\t///\t\t<param name=\"filterPredicate\" type=\"Function\">\r\n\t\t///\t\t\tSame as in filter.\r\n\t\t///\t\t</param>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result, same as in toArray.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n\t\t///\t\t\tGet \"George\" from the Person entity set. &#10;\r\n        ///\t\t\tPersons.first( function( person ) { return person.FirstName == this.name; }, { name: \"George\" }, function ( result ){ ... });\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('first');\r\n        var q = this;\r\n        if (filterPredicate) {\r\n            q = this.filter(filterPredicate, thisArg);\r\n        }\r\n        q = q.take(1);\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var firstExpression = Container.createFirstExpression(q.expression);\r\n        var preparator = Container.createQueryExpressionCreator(q.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(firstExpression);\r\n            q.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            q.entityContext.executeQuery(Container.createQueryable(q, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    find: function (keyValue, onResult, transaction) {\r\n\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var keys = this.defaultType.memberDefinitions.getKeyProperties();\r\n\r\n        try {\r\n\r\n            if (keys.length === 1 && typeof keyValue !== 'object') {\r\n                var keyV = {};\r\n                keyV[keys[0].name] = keyValue;\r\n                keyValue = keyV;\r\n            }\r\n\r\n            if (typeof keyValue !== 'object') {\r\n                throw new Exception('Key parameter is invalid');\r\n            } else {\r\n\r\n\r\n                var parameters = [];\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    var keyProp = keys[i];\r\n                    if (!(keyProp.name in keyValue)) {\r\n                        throw new Exception('Key value missing');\r\n                    }\r\n                    parameters.push(Container.createConstantExpression(keyValue[keyProp.name], keyProp.type, keyProp.name));\r\n                }\r\n\r\n                var operation = this.entityContext.storageProvider.supportedSetOperations['find'];\r\n                if (operation) {\r\n\r\n                    var findExpression = Container.createFindExpression(this.expression, parameters);\r\n                    var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n                    try {\r\n                        var expression = preparator.Visit(findExpression);\r\n                        this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n                        this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                } else {\r\n                    var predicate = '';\r\n                    var params = {}\r\n                    for (var i = 0; i < parameters.length; i++) {\r\n                        var param = parameters[i];\r\n                        params[param.name] = param.value;\r\n                        if (i > 0) predicate += ' && ';\r\n                        predicate += \"it.\" + param.name + \" == this.\" + param.name;\r\n                    }\r\n\r\n                    this.single(predicate, params, cbWrapper, transaction);\r\n                }\r\n            }\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    include: function (selector) {\r\n\t\t///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\r\n        ///\t\t\tThe name of the entity set you want to include in the query.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tInclude the Category on every Article. &#10;\r\n        ///\t\t\tArticles.include(\"Category\");\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n        \r\n        if(this.entityContext && this.entityContext.storageProvider && this.entityContext.storageProvider.name === \"oData\"){\r\n            return this.include2.apply(this, arguments);\r\n        }\r\n\r\n        this._checkOperation('include');\r\n        var constExp = Container.createConstantExpression(selector, \"string\");\r\n        var takeExp = Container.createIncludeExpression(this.expression, constExp);\r\n        return Container.createQueryable(this, takeExp);\r\n    },\r\n    include2: function (selector, thisArg) {\r\n\t\t///\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t<param name=\"selector\" type=\"$data.String\">Entity set name</param>\r\n        ///\t<returns type=\"$data.Queryable\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Includes the given entity set in the query if it's an inverse property.</summary>\r\n        ///\t\t<param name=\"selector\" type=\"$data.String\">\r\n        ///\t\t\tThe name of the entity set you want to include in the query.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Queryable\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tInclude the Category on every Article. &#10;\r\n        ///\t\t\tArticles.include(\"Category\");\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('include');\r\n        if(typeof selector === 'string' && (selector.length < 3 || selector.substr(0, 3) !== 'it.') && !/^[^\\.]*(=>)/.test(selector)){\r\n            selector = 'it.' + selector;\r\n        }\r\n        var expression = Container.createCodeExpression(selector, thisArg);\r\n        var includeExp = Container.createIncludeExpression(this.expression, expression);\r\n        \r\n        return Container.createQueryable(this, includeExp);\r\n    },\r\n\r\n    withInlineCount: function (selector) {\r\n        this._checkOperation('withInlineCount');\r\n        var constExp = Container.createConstantExpression(selector || 'allpages', \"string\");\r\n        var inlineCountExp = Container.createInlineCountExpression(this.expression, constExp);\r\n        return Container.createQueryable(this, inlineCountExp);\r\n    },\r\n    withCount: function (selector) {\r\n        return this.withInlineCount(selector);\r\n    },\r\n\r\n    removeAll: function (onResult, transaction) {\r\n        ///\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t<param name=\"onResult\" type=\"Function\">A callback function</param>\r\n        ///\t<returns type=\"$data.Promise\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Function\">\r\n        ///\t\t\tThe callback function to handle the result.\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t</signature>\r\n        ///\t<signature>\r\n        ///\t\t<summary>Delete the query result and returns the number of deleted entities in a query as the callback parameter.</summary>\r\n        ///\t\t<param name=\"onResult\" type=\"Object\">\r\n        ///\t\t\tObject of callback functions to handle success and error. &#10;\r\n        ///\t\t\tExample: { success: function(result) { ... }, error: function() { alert(\"Something went wrong...\"); } }\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.Promise\" />\r\n        ///\t\t<example>\r\n        ///\t\t\tDelete all People who are younger than 18 years old. &#10;\r\n        ///\t\t\tPersons.filter( function( p ){ return p.Age &#60; 18; } ).removeAll( function( result ) { console.dir(result); } );\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        this._checkOperation('batchDelete');\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n\r\n        var batchDeleteExpression = Container.createBatchDeleteExpression(this.expression);\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(batchDeleteExpression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n\r\n    _runQuery: function (onResult_items, transaction) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        try {\r\n            var expression = preparator.Visit(this.expression);\r\n            this.entityContext.log({ event: \"EntityExpression\", data: expression });\r\n\r\n            this.entityContext.executeQuery(Container.createQueryable(this, expression), cbWrapper, transaction);\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n\r\n        return pHandler.getPromise();\r\n    },\r\n\r\n    toTraceString: function (name) {\r\n\t\t///\t<summary>Returns the trace string of the query.</summary>\r\n        ///\t<param name=\"name\" type=\"$data.String\">Name of the execution method (toArray, length, etc.).</param>\r\n        ///\t<returns type=\"$data.String\" />\r\n        ///\t<signature>\r\n        ///\t\t<summary>Returns the trace string of the query.</summary>\r\n        ///\t\t<param name=\"name\" type=\"$data.String\">\r\n        ///\t\t\tName of the execution method (toArray, length, etc.). Optional. Default value is \"toArray\".\r\n        ///\t\t</param>\r\n        ///\t\t<returns type=\"$data.String\" />\r\n\t\t///\t\t<example>\r\n\t\t///\t\t\tGet the trace string for Articles.toArray() &#10;\r\n        ///\t\t\tArticles.toTraceString();\r\n        ///\t\t</example>\r\n        ///\t</signature>\r\n\r\n        var expression = this.expression;\r\n\r\n        if (name) {\r\n            expression = Container['create' + name + 'Expression'](expression);\r\n        } else {\r\n            expression = Container.createToArrayExpression(expression);\r\n        }\r\n\r\n        var preparator = Container.createQueryExpressionCreator(this.entityContext);\r\n        expression = preparator.Visit(expression);\r\n\r\n        //this.expression = expression;\r\n        var q = Container.createQueryable(this, expression)\r\n        return q.entityContext.getTraceString(q);\r\n    },\r\n\r\n    _checkOperation: function (name) {\r\n        var operation = this.entityContext.resolveSetOperations(name);\r\n        if (operation.invokable != undefined && !operation.invokable)\r\n            Guard.raise(new Exception(\"Operation '\" + name + \"' is not invokable with the provider\"));\r\n    },\r\n    defaultType: {}\r\n\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define(\"$data.RelatedEntityProxy\", null, null, {\r\n    constructor: function (entityKeyObject, navigationProperty, type, parent, context) {\r\n        this._entityKeyObject = entityKeyObject;\r\n        this._navigationProperty = navigationProperty;\r\n        this._type = type;\r\n        this._parent = parent;\r\n        this._context = context;\r\n    },\r\n    _entityKeyObject: { type: $data.Object },\r\n    _ctxFactory: {},\r\n    _type: {},\r\n    _navigationProperty: { type: $data.String },\r\n    _parent: { type: '$data.RelatedEntityProxy' },\r\n    _context: { type: '$data.EntityContext' },\r\n    \r\n    read: function (onResult) {\r\n        var pHandler = new $data.PromiseHandler();\r\n        var cbWrapper = pHandler.createCallback(onResult);\r\n        \r\n        try {\r\n            var proxyChains = this._chainToArray();\r\n            var firstProxy = proxyChains[0];\r\n            var context = firstProxy._context;\r\n            if (!context) {\r\n                var storeToken = firstProxy._parent instanceof $data.Entity ? firstProxy._parent.storeToken : firstProxy._type.storeToken;\r\n                if (storeToken && typeof storeToken.factory === 'function') {\r\n                    context = storeToken.factory();\r\n                }\r\n            }\r\n            \r\n            if (!context) throw new Exception('ContextNotExists');\r\n            \r\n            \r\n            var entitySet = null;\r\n            var expression = null;\r\n            if (firstProxy._parent instanceof $data.Entity) {\r\n                entitySet = context.getEntitySetFromElementType(firstProxy._parent.getType());\r\n                \r\n                var proxyClass = context._createRelatedEntityProxyClass(entitySet.elementType);\r\n                proxyChains.unshift(new proxyClass(firstProxy._parent, undefined, entitySet.elementType));\r\n            } else {\r\n                entitySet = context.getEntitySetFromElementType(firstProxy._type);\r\n            }\r\n            \r\n            expression = entitySet.expression;\r\n            var returnType = null;\r\n            \r\n            for (var i = 0; i < proxyChains.length; i++) {\r\n                var item = proxyChains[i];\r\n                var keys = item._type.memberDefinitions.getKeyProperties();\r\n                \r\n                var parameters = [];\r\n                for (var j = 0; j < keys.length; j++) {\r\n                    var keyProp = keys[j];\r\n                    if (!(keyProp.name in item._entityKeyObject)) {\r\n                        throw new Exception('Key value missing');\r\n                    }\r\n                    parameters.push(Container.createConstantExpression(item._entityKeyObject[keyProp.name], keyProp.type, keyProp.name));\r\n                }\r\n                \r\n                \r\n                var member = undefined;\r\n                if (item._navigationProperty) {\r\n                    member = Container.createMemberInfoExpression(item._navigationProperty)\r\n                    returnType = item._navigationProperty.elementType;\r\n                }\r\n                expression = Container.createFindExpression(expression, parameters, member);\r\n            }\r\n            \r\n            var preparator = Container.createQueryExpressionCreator(context);\r\n            expression = preparator.Visit(expression);\r\n            //context.log({ event: \"EntityExpression\", data: expression });\r\n            \r\n            var queryable = Container.createQueryable(entitySet , expression);\r\n            queryable.defaultType = returnType || queryable.defaultType;\r\n            context.executeQuery(queryable, cbWrapper);\r\n\r\n        } catch (e) {\r\n            cbWrapper.error(e);\r\n        }\r\n        \r\n        return pHandler.getPromise();\r\n    },\r\n    _chainToArray: function (result) {\r\n        result = result || [];\r\n        if (this._parent instanceof $data.RelatedEntityProxy) {\r\n            this._parent._chainToArray(result);\r\n        }\r\n        \r\n        result.push(this);\r\n        return result;\r\n    }\r\n}, {});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.ServiceOperation', null, null, {}, {\r\n    translateDefinition: function (propertyDef, name, definedBy) {\r\n        propertyDef.serviceName = name;\r\n        var memDef = new $data.MemberDefinition(this.generateServiceOperation(propertyDef), this);\r\n        memDef.name = name;\r\n        return memDef;\r\n    },\r\n    generateServiceOperation: function (cfg) {\r\n\r\n        var fn;\r\n        if (cfg.serviceMethod) {\r\n            var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : {};\r\n            if (returnType.isAssignableTo && returnType.isAssignableTo($data.Queryable)) {\r\n                fn = cfg.serviceMethod;\r\n            } else {\r\n                fn = function () {\r\n                    var lastParam = arguments[arguments.length - 1];\r\n\r\n                    var pHandler = new $data.PromiseHandler();\r\n                    var cbWrapper;\r\n\r\n                    var args = arguments;\r\n                    if (typeof lastParam === 'function') {\r\n                        cbWrapper = pHandler.createCallback(lastParam);\r\n                        arguments[arguments.length - 1] = cbWrapper;\r\n                    } else {\r\n                        cbWrapper = pHandler.createCallback();\r\n                        arguments.push(cbWrapper);\r\n                    }\r\n\r\n                    try {\r\n                        var result = cfg.serviceMethod.apply(this, arguments);\r\n                        if (result !== undefined)\r\n                            cbWrapper.success(result);\r\n                    } catch (e) {\r\n                        cbWrapper.error(e);\r\n                    }\r\n\r\n                    return pHandler.getPromise();\r\n                }\r\n            }\r\n\r\n        } else {\r\n            fn = function () {\r\n                var context = this;\r\n                var memberdef;\r\n\r\n                var boundItem;\r\n                if (this instanceof $data.Entity || this instanceof $data.EntitySet) {\r\n                    var entitySet;\r\n                    if (this instanceof $data.Entity) {\r\n                        if (this.context) {\r\n                            context = this.context;\r\n                            entitySet = context.getEntitySetFromElementType(this.getType());\r\n                        } else if (this.storeToken && typeof this.storeToken.factory === 'function') {\r\n                            context = this.storeToken.factory();\r\n                            entitySet = context.getEntitySetFromElementType(this.getType());\r\n                        } else {\r\n                            Guard.raise(new Exception(\"entity can't resolve context\", 'Not Found!', this));\r\n                            return;\r\n                        }\r\n                    } else if (this instanceof $data.EntitySet) {\r\n                        context = this.entityContext;\r\n                        entitySet = this;\r\n\r\n                        var esDef = context.getType().getMemberDefinition(entitySet.name);\r\n                        memberdef = $data.MemberDefinition.translateDefinition(esDef.actions[cfg.serviceName], cfg.serviceName, entitySet.getType());\r\n                    }\r\n\r\n\r\n                    boundItem = {\r\n                        data: this,\r\n                        entitySet: entitySet\r\n                    };\r\n                }\r\n\r\n                var virtualEntitySet = cfg.elementType ? context.getEntitySetFromElementType(Container.resolveType(cfg.elementType)) : null;\r\n\r\n                var paramConstExpression = null;\r\n                if (cfg.params) {\r\n                    paramConstExpression = [];\r\n                    //object as parameter\r\n                    //FIX: object type parameters with the same property name as the name of the first parameter\r\n                    if (arguments[0] && typeof arguments[0] === 'object' && arguments[0].constructor === $data.Object && cfg.params && cfg.params[0] && cfg.params[0].name in arguments[0]) {\r\n                        var argObj = arguments[0];\r\n                        for (var i = 0; i < cfg.params.length; i++) {\r\n                            var paramConfig = cfg.params[i];\r\n                            if (paramConfig.name && paramConfig.type && paramConfig.name in argObj) {\r\n                                paramConstExpression.push(Container.createConstantExpression(argObj[paramConfig.name], Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\r\n                            }\r\n                        }\r\n                    }\r\n                    //arg params\r\n                    else {\r\n                        for (var i = 0; i < cfg.params.length; i++) {\r\n                            if (typeof arguments[i] == 'function') break;\r\n\r\n                            //TODO: check params type\r\n                            var paramConfig = cfg.params[i];\r\n                            if (paramConfig.name && paramConfig.type && arguments[i] !== undefined) {\r\n                                paramConstExpression.push(Container.createConstantExpression(arguments[i], Container.resolveType(paramConfig.type), paramConfig.name, paramConfig.elementType));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var ec = Container.createEntityContextExpression(context);\r\n                if (!memberdef) {\r\n                    if (boundItem && boundItem.data) {\r\n                        memberdef = boundItem.data.getType().getMemberDefinition(cfg.serviceName);\r\n                    } else {\r\n                        memberdef = context.getType().getMemberDefinition(cfg.serviceName);\r\n                    }\r\n                }\r\n                var es = Container.createServiceOperationExpression(ec,\r\n                        Container.createMemberInfoExpression(memberdef),\r\n                        paramConstExpression,\r\n                        cfg,\r\n                        boundItem);\r\n\r\n                //Get callback function\r\n                var clb = arguments[arguments.length - 1];\r\n                if (!(typeof clb === 'function' || (typeof clb === 'object' /*&& clb.constructor === $data.Object*/ && (typeof clb.success === 'function' || typeof clb.error === 'function')))) {\r\n                    clb = undefined;\r\n                }\r\n\r\n                if (virtualEntitySet) {\r\n                    var q = Container.createQueryable(virtualEntitySet, es);\r\n                    if (clb) {\r\n                        es.isTerminated = true;\r\n                        return q._runQuery(clb);\r\n                    }\r\n                    return q;\r\n                }\r\n                else {\r\n                    var returnType = cfg.returnType ? Container.resolveType(cfg.returnType) : null;\r\n\r\n                    var q = Container.createQueryable(context, es);\r\n                    q.defaultType = returnType || $data.Object;\r\n\r\n                    if (returnType === $data.Queryable) {\r\n                        q.defaultType = Container.resolveType(cfg.elementType);\r\n                        if (clb) {\r\n                            es.isTerminated = true;\r\n                            return q._runQuery(clb);\r\n                        }\r\n                        return q;\r\n                    }\r\n                    es.isTerminated = true;\r\n                    return q._runQuery(clb);\r\n                }\r\n            };\r\n        };\r\n\r\n        var params = cfg.params || [];\r\n        $data.typeSystem.extend(fn, cfg, { params: params });\r\n\r\n        return fn;\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.ServiceAction', $data.ServiceOperation, null, {}, {\r\n    generateServiceOperation: function (cfg) {\r\n        if (!cfg.method) {\r\n            cfg.method = 'POST'; //default Action method is POST\r\n        }\r\n\r\n        return $data.ServiceOperation.generateServiceOperation.apply(this, arguments);\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.ServiceFunction', $data.ServiceOperation, null, {}, {\r\n    generateServiceOperation: function (cfg) {\r\n        if (!cfg.method) {\r\n            cfg.method = 'GET'; //default Function method is GET\r\n        }\r\n\r\n        return $data.ServiceOperation.generateServiceOperation.apply(this, arguments);\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.storageProviders = {\r\n    DbCreationType: {\r\n        Merge: 10,\r\n        DropTableIfChanged: 20,\r\n        DropTableIfChange: 20,\r\n        DropAllExistingTables: 30,\r\n        ErrorIfChange: 40,\r\n        DropDbIfChange: 50\r\n    }\r\n}\r\n\r\n$data.ConcurrencyMode = { Fixed: 'fixed', None: 'none' };\r\n$data.Class.define('$data.StorageProviderBase', null, null,\r\n{\r\n    constructor: function (schemaConfiguration, context) {\r\n        this.providerConfiguration = schemaConfiguration || {};\r\n\r\n        this.name = this.getType().name;\r\n        if ($data.RegisteredStorageProviders) {\r\n            var keys = Object.keys($data.RegisteredStorageProviders);\r\n            for (var i = 0; i < keys.length; i++) {\r\n                if (this instanceof $data.RegisteredStorageProviders[keys[i]]) {\r\n                    this.name = keys[i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    providers: {},\r\n    supportedDataTypes: { value: [], writable: false },\r\n    initializeStore: function (callBack) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n\r\n    executeQuery: function (queryable, callBack) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    loadRawData: function (tableName, callBack) {\r\n        callBack = $data.PromiseHandlerBase.createCallbackSettings(callBack);\r\n        callBack.error(new Exception('loadRawData is not supported', 'Invalid Operation'));\r\n    },\r\n\r\n    buildIndependentBlocks: function (changedItems) {\r\n        /// <summary>\r\n        /// Build and processes a dependency graph from the changed items,\r\n        /// and generates blocks that can be inserted to the database sequentially.\r\n        /// </summary>\r\n        /// <param name=\"changedItems\">Array of changed items to build independent blocks from.</param>\r\n        var edgesTo = [];\r\n        var edgesFrom = [];\r\n\r\n        function hasOwnProperty(obj) {\r\n            /// <summary>\r\n            /// Returns true if object has own property (used for 'hashset'-like objects)\r\n            /// </summary>\r\n            /// <param name=\"obj\">Target object</param>\r\n            /// <returns>True if the object has own property</returns>\r\n            for (var p in obj) {\r\n                if (obj.hasOwnProperty(p))\r\n                    return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // Building edgesTo and edgesFrom arrays (containing only indeces of items in changedItems array.\r\n        for (var i = 0; i < changedItems.length; i++) {\r\n            var current = changedItems[i];\r\n            if (!current.dependentOn || current.dependentOn.length == 0) {\r\n                // This item is independent\r\n                continue;\r\n            }\r\n\r\n            var to = null;\r\n            // Iterating over items 'current' depends on\r\n            for (var j = 0; j < current.dependentOn.length; j++) {\r\n                var currentDependency = current.dependentOn[j];\r\n                if (currentDependency.entityState == $data.EntityState.Unchanged) {\r\n                    continue;\r\n                }\r\n                to = to || {};\r\n                // Getting the index of current dependency\r\n                var ixDependendOn = -1;\r\n                for (var k = 0; k < changedItems.length; k++) {\r\n                    if (changedItems[k].data == currentDependency) {\r\n                        ixDependendOn = k;\r\n                        changedItems[k].referredBy = changedItems[k].referredBy || [];\r\n                        changedItems[k].referredBy.push(current.data)\r\n                        break;\r\n                    }\r\n                }\r\n                // Sanity check\r\n                if (ixDependendOn == -1) {\r\n                    Guard.raise(new Exception('Dependent object not found', 'ObjectNotFound', current.dependentOn[j]));\r\n                }\r\n                // Setting edge in 'to' array\r\n                to[ixDependendOn] = true;\r\n                // Setting edge in 'from' array\r\n                var from = edgesFrom[ixDependendOn] || {};\r\n                from[i] = true;\r\n                edgesFrom[ixDependendOn] = from;\r\n            }\r\n            // Persisting found edges in edgesTo array\r\n            if (to !== null)\r\n                edgesTo[i] = to;\r\n        }\r\n\r\n        // Array of sequentialyl independent blocks (containing objects, not just their id's)\r\n        var independentBlocks = [];\r\n        // Objects getting their dependency resolved in the current cycle.\r\n        var currentBlock = [];\r\n        // Filling currentBlock with initially independent objects.\r\n        for (var x = 0; x < changedItems.length; x++) {\r\n            if (!edgesTo.hasOwnProperty(x)) {\r\n                currentBlock.push(x);\r\n            }\r\n        }\r\n        while (currentBlock.length > 0) {\r\n            // Shifting currentBlock to cbix,\r\n            // and clearing currentBlock for next independent block\r\n            var cbix = [].concat(currentBlock);\r\n            currentBlock = [];\r\n            // Iterating over previous independent block, to generate the new one\r\n            for (var b = 0; b < cbix.length; b++) {\r\n                var dependentNodes = edgesFrom[cbix[b]];\r\n                if (typeof dependentNodes !== 'undefined') {\r\n                    for (var d in dependentNodes) {\r\n                        // Removing edge from 'edgesTo'\r\n                        delete edgesTo[d][cbix[b]];\r\n                        // Check if has any more dependency\r\n                        if (!hasOwnProperty(edgesTo[d])) {\r\n                            // It doesn't, so let's clean up a bit\r\n                            delete edgesTo[d];\r\n                            // and push the item to 'currentBlock'\r\n                            currentBlock.push(d);\r\n                        }\r\n                    }\r\n                }\r\n                // Clearing processed item from 'edgesFrom'\r\n                delete edgesFrom[cbix[b]];\r\n            }\r\n            // Push cbix t to independentBlocks\r\n            var cb = [];\r\n            for (var c = 0; c < cbix.length; c++) {\r\n                var item = changedItems[cbix[c]];\r\n                if (item.data.entityState != $data.EntityState.Unchanged)\r\n                    cb.push(item);\r\n            }\r\n            if (cb.length > 0)\r\n                independentBlocks.push(cb);\r\n        }\r\n        return independentBlocks;\r\n    },\r\n    getTraceString: function (queryable) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    setContext: function (ctx) {\r\n        this.context = ctx;\r\n    },\r\n\r\n    _buildContinuationFunction: function (context, query) {\r\n        if (Array.isArray(query.result)) {\r\n            query.result.next = this._buildPagingMethod(context, query, 'next');\r\n            query.result.prev = this._buildPagingMethod(context, query, 'prev');\r\n        }\r\n    },\r\n    _buildPagingMethod: function (context, query, mode) {\r\n        return function (onResult_items) {\r\n            var pHandler = new $data.PromiseHandler();\r\n            var cbWrapper = pHandler.createCallback(onResult_items);\r\n\r\n            var continuation = new $data.Expressions.ContinuationExpressionBuilder(mode);\r\n            var continuationResult = continuation.compile(query);\r\n            if (continuationResult.expression) {\r\n                var queryable = Container.createQueryable(context, continuationResult.expression);\r\n                queryable.defaultType = query.defaultType;\r\n                context.executeQuery(queryable, cbWrapper);\r\n            } else {\r\n                cbWrapper.error(new Exception(continuationResult.message, 'Invalid Operation', continuationResult));\r\n            }\r\n\r\n            return pHandler.getPromise();\r\n        }\r\n    },\r\n\r\n    buildDbType_modifyInstanceDefinition: function (instanceDefinition, storageModel) {\r\n        var buildDbType_copyPropertyDefinition = function (propertyDefinition, refProp) {\r\n            var cPropertyDef;\r\n            if (refProp) {\r\n                cPropertyDef = JSON.parse(JSON.stringify(instanceDefinition[refProp]));\r\n                cPropertyDef.kind = propertyDefinition.kind;\r\n                cPropertyDef.name = propertyDefinition.name;\r\n                cPropertyDef.notMapped = false;\r\n            } else {\r\n                cPropertyDef = JSON.parse(JSON.stringify(propertyDefinition));\r\n            }\r\n\r\n            cPropertyDef.dataType = Container.resolveType(propertyDefinition.dataType);\r\n            cPropertyDef.type = cPropertyDef.dataType;\r\n            cPropertyDef.key = false;\r\n            cPropertyDef.computed = false;\r\n            return cPropertyDef;\r\n        };\r\n        var buildDbType_createConstrain = function (foreignType, dataType, propertyName, prefix, keyPropertyName) {\r\n            var constrain = new Object();\r\n            constrain[foreignType.name] = propertyName;\r\n            constrain[dataType.name] = keyPropertyName ? keyPropertyName : prefix + '__' + propertyName;\r\n            return constrain;\r\n        };\r\n\r\n        if (storageModel.Associations) {\r\n            storageModel.Associations.forEach(function (association) {\r\n                var addToEntityDef = false;\r\n                var foreignType = association.FromType;\r\n                var dataType = association.ToType;\r\n                var foreignPropName = association.ToPropertyName;\r\n\r\n                var memDef = association.FromType.getMemberDefinition(association.FromPropertyName);\r\n                var keyProperties = [];\r\n                if (memDef && typeof memDef.keys === \"string\" && memDef.keys) {\r\n                    keyProperties = [memDef.keys];\r\n                } else if (memDef && Array.isArray(memDef.keys)) {\r\n                    keyProperties = [].concat(memDef.keys);\r\n                }\r\n\r\n                association.ReferentialConstraint = association.ReferentialConstraint || [];\r\n\r\n                if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") || (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\")) {\r\n                    foreignType = association.ToType;\r\n                    dataType = association.FromType;\r\n                    foreignPropName = association.FromPropertyName;\r\n                    addToEntityDef = true;\r\n                }\r\n\r\n                foreignType.memberDefinitions.getPublicMappedProperties().filter(function (d) { return d.key }).forEach(function (d, i) {\r\n                    var constraint = buildDbType_createConstrain(foreignType, dataType, d.name, foreignPropName, keyProperties[i]);\r\n                    if (addToEntityDef) {\r\n                        //instanceDefinition[foreignPropName + '__' + d.name] = buildDbType_copyPropertyDefinition(d, foreignPropName);\r\n                        instanceDefinition[constraint[dataType.name]] = buildDbType_copyPropertyDefinition(d, foreignPropName);\r\n\r\n                        var dependentMemDef = dataType.getMemberDefinition(keyProperties[i]);\r\n                        if (dependentMemDef) {\r\n                            dependentMemDef.isDependentProperty = true;\r\n                            dependentMemDef.navigationPropertyName = association.FromPropertyName;\r\n                        }\r\n                    }\r\n                    association.ReferentialConstraint.push(constraint);\r\n                }, this);\r\n            }, this);\r\n        }\r\n        //Copy complex type properties\r\n        if (storageModel.ComplexTypes) {\r\n            storageModel.ComplexTypes.forEach(function (complexType) {\r\n                complexType.ReferentialConstraint = complexType.ReferentialConstraint || [];\r\n\r\n                complexType.ToType.memberDefinitions.getPublicMappedProperties().forEach(function (d) {\r\n                    instanceDefinition[complexType.FromPropertyName + '__' + d.name] = buildDbType_copyPropertyDefinition(d);\r\n                    complexType.ReferentialConstraint.push(buildDbType_createConstrain(complexType.ToType, complexType.FromType, d.name, complexType.FromPropertyName));\r\n                }, this);\r\n            }, this);\r\n        }\r\n    },\r\n    buildDbType_generateConvertToFunction: function (storageModel) {\r\n        return function (logicalEntity) {\r\n            var dbInstance = new storageModel.PhysicalType();\r\n            dbInstance.entityState = logicalEntity.entityState;\r\n\r\n            //logicalEntity.changedProperties.forEach(function(memberDef){\r\n            //}, this);\r\n            storageModel.PhysicalType.memberDefinitions.getPublicMappedProperties().forEach(function (property) {\r\n                if (logicalEntity[property.name] !== undefined) {\r\n                    dbInstance[property.name] = logicalEntity[property.name];\r\n                }\r\n            }, this);\r\n\r\n            if (storageModel.Associations) {\r\n                storageModel.Associations.forEach(function (association) {\r\n                    if ((association.FromMultiplicity == \"*\" && association.ToMultiplicity == \"0..1\") || (association.FromMultiplicity == \"0..1\" && association.ToMultiplicity == \"1\")) {\r\n                        var complexInstance = logicalEntity[association.FromPropertyName];\r\n                        if (complexInstance !== undefined) {\r\n                            association.ReferentialConstraint.forEach(function (constrain) {\r\n                                if (complexInstance !== null) {\r\n                                    dbInstance[constrain[association.From]] = complexInstance[constrain[association.To]];\r\n                                } else {\r\n                                    dbInstance[constrain[association.From]] = null;\r\n                                }\r\n                            }, this);\r\n                        }\r\n                    }\r\n                }, this);\r\n            }\r\n            if (storageModel.ComplexTypes) {\r\n                storageModel.ComplexTypes.forEach(function (cmpType) {\r\n                    var complexInstance = logicalEntity[cmpType.FromPropertyName];\r\n                    if (complexInstance !== undefined) {\r\n                        cmpType.ReferentialConstraint.forEach(function (constrain) {\r\n                            if (complexInstance !== null) {\r\n                                dbInstance[constrain[cmpType.From]] = complexInstance[constrain[cmpType.To]];\r\n                            } else {\r\n                                dbInstance[constrain[cmpType.From]] = null;\r\n                            }\r\n                        }, this);\r\n                    }\r\n                }, this);\r\n            }\r\n            return dbInstance;\r\n        };\r\n    },\r\n\r\n    bulkInsert: function (a, b, c, callback) {\r\n        callback.error(new Exception('Not Implemented'));\r\n    },\r\n\r\n    supportedFieldOperations: {\r\n        value: {\r\n            length: { dataType: \"number\", allowedIn: \"filter, map\" },\r\n            substr: { dataType: \"string\", allowedIn: \"filter\", parameters: [{ name: \"startFrom\", dataType: \"number\" }, { name: \"length\", dataType: \"number\" }] },\r\n            toLowerCase: { dataType: \"string\" }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    resolveFieldOperation: function (operationName, expression, frameType) {\r\n        ///<summary></summary>\r\n        var result = this.supportedFieldOperations[operationName];\r\n        if (Array.isArray(result)) {\r\n            var i = 0;\r\n            for (; i < result.length; i++) {\r\n                if (result[i].allowedType === 'default' || Container.resolveType(result[i].allowedType) === Container.resolveType(expression.selector.memberDefinition.type) &&\r\n                    (frameType && result[i].allowedIn &&\r\n                        (\r\n                            (Array.isArray(result[i].allowedIn) && result[i].allowedIn.some(function(type){ return frameType === Container.resolveType(type); })) ||\r\n                            (!Array.isArray(result[i].allowedIn) && (frameType === Container.resolveType(result[i].allowedIn)))\r\n                        )\r\n                    )\r\n                    ) {\r\n                    result = result[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (i === result.length) {\r\n                result = undefined;\r\n            }\r\n        }\r\n\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Field operation '\" + operationName + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operationName + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operationName;\r\n        return result;\r\n    },\r\n\r\n    supportedBinaryOperators: {\r\n        value: {\r\n            equal: { mapTo: 'eq', dataType: \"boolean\" }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n\r\n    resolveBinaryOperator: function (operator, expression, frameType) {\r\n        var result = this.supportedBinaryOperators[operator];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Binary operator '\" + operator + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operator + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operator;\r\n        return result;\r\n    },\r\n\r\n    supportedUnaryOperators: {\r\n        value: {\r\n            not: { mapTo: 'not' }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    resolveUnaryOperator: function (operator, expression, frameType) {\r\n        var result = this.supportedUnaryOperators[operator];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Unary operator '\" + operator + \"' is not supported by the provider\"));\r\n        };\r\n        if (frameType && result.allowedIn) {\r\n            if ((result.allowedIn instanceof Array && !result.allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(result.allowedIn instanceof Array) && frameType !== Container.resolveType(result.allowedIn))) {\r\n                Guard.raise(new Exception(operator + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        result.name = operator;\r\n        return result;\r\n    },\r\n\r\n    supportedSetOperations: {\r\n        value: {\r\n            toArray: { invokable: true, allowedIn: [] }\r\n        },\r\n        enumerable: true,\r\n        writable: true\r\n    },\r\n    resolveSetOperations: function (operation, expression, frameType) {\r\n        var result = this.supportedSetOperations[operation];\r\n        if (!result) {\r\n            Guard.raise(new Exception(\"Operation '\" + operation + \"' is not supported by the provider\"));\r\n        };\r\n        var allowedIn = result.allowedIn || [];\r\n        if (frameType && allowedIn) {\r\n            if ((allowedIn instanceof Array && !allowedIn.some(function (type) { return frameType === Container.resolveType(type); })) ||\r\n                        (!(allowedIn instanceof Array) && frameType !== Container.resolveType(allowedIn))) {\r\n                Guard.raise(new Exception(operation + \" not supported in: \" + frameType.name));\r\n            }\r\n        }\r\n        return result;\r\n    },\r\n\r\n    resolveTypeOperations: function (operation, expression, frameType) {\r\n        Guard.raise(new Exception(\"Entity '\" + expression.entityType.name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n    },\r\n\r\n    resolveContextOperations: function (operation, expression, frameType) {\r\n        Guard.raise(new Exception(\"Context '\" + expression.instance.getType().name + \"' Operation '\" + operation + \"' is not supported by the provider\"));\r\n    },\r\n\r\n    makePhysicalTypeDefinition: function (entityDefinition, association) {\r\n    },\r\n\r\n    _beginTran: function (tables, isWrite, callBack) {\r\n        callBack.success(new $data.Transaction());\r\n    },\r\n\r\n    getFieldUrl: function () {\r\n        return '#';\r\n    },\r\n\r\n    supportedAutoincrementKeys: {\r\n        value: { }\r\n    }\r\n},\r\n{\r\n    onRegisterProvider: { value: new $data.Event() },\r\n    registerProvider: function (name, provider) {\r\n        this.onRegisterProvider.fire({ name: name, provider: provider }, this);\r\n        $data.RegisteredStorageProviders = $data.RegisteredStorageProviders || [];\r\n        $data.RegisteredStorageProviders[name] = provider;\r\n    },\r\n    getProvider: function (name) {\r\n        var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            console.warn(\"Provider not found: '\" + name + \"'\");\r\n        return provider;\r\n        /*var provider = $data.RegisteredStorageProviders[name];\r\n        if (!provider)\r\n            Guard.raise(new Exception(\"Provider not found: '\" + name + \"'\", \"Not Found\"));\r\n        return provider;*/\r\n    },\r\n    isSupported: {\r\n        get: function () { return true; },\r\n        set: function () { }\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.StorageProviderLoaderBase', null, null, {\r\n    isSupported: function (providerName) {\r\n        $data.Trace.log('Detecting ' + providerName + ' provider support');\r\n        var supported = true;\r\n        switch (providerName) {\r\n            case 'indexedDb':\r\n                supported = $data.__global.indexedDB || $data.__global.webkitIndexedDB || $data.__global.mozIndexedDB || ($data.__global.msIndexedDB && !(/^file:/.test($data.__global.location && $data.__global.location.href)));\r\n                break;\r\n            case 'storm':\r\n                supported = 'XMLHttpRequest' in $data.__global;\r\n                break;\r\n            case 'webSql':\r\n            case 'sqLite':\r\n                supported = 'openDatabase' in $data.__global;\r\n                break;\r\n            case 'LocalStore':\r\n                supported = 'localStorage' in $data.__global && $data.__global.localStorage ? true : false;\r\n                break;\r\n            case 'sqLite':\r\n                supported = 'openDatabase' in $data.__global;\r\n                break;\r\n            case 'mongoDB':\r\n                supported = $data.mongoDBDriver;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        $data.Trace.log(providerName + ' provider is ' + (supported ? '' : 'not') + ' supported');\r\n        return supported;\r\n    },\r\n    scriptLoadTimeout: { type: 'int', value: 1000 },\r\n    scriptLoadInterval: { type: 'int', value: 50 },\r\n    npmModules: {\r\n        value: {\r\n            'indexedDb': 'jaydata-indexeddb',\r\n            'InMemory': 'jaydata-inmemory',\r\n            'LocalStore': 'jaydata-inmemory',\r\n            'mongoDB': 'jaydata-mongodb',\r\n            'oData': 'jaydata-odata',\r\n            'webApi': 'jaydata-webapi',\r\n            'sqLite': 'jaydata-sqlite',\r\n            'webSql': 'jaydata-sqlite',\r\n            'storm': 'jaydata-storm'\r\n        }\r\n    },\r\n    ProviderNames: {\r\n        value: {\r\n            'indexedDb': 'IndexedDb',\r\n            'InMemory': 'InMemory',\r\n            'LocalStore': 'InMemory',\r\n            'oData': 'oData',\r\n            'webApi': 'WebApi',\r\n            'sqLite': 'SqLite',\r\n            'webSql': 'SqLite',\r\n            'storm': 'Storm'\r\n        }\r\n    },\r\n    load: function (providerList, callback) {\r\n        $data.RegisteredStorageProviders = $data.RegisteredStorageProviders || {};\r\n\r\n        $data.Trace.log('Loading provider(s): ' + providerList);\r\n        callback = $data.PromiseHandlerBase.createCallbackSettings(callback);\r\n\r\n        var self = this;\r\n        var cacheKey = providerList.join(',');\r\n        self._fallbackCache = self._fallbackCache || {};\r\n\r\n        if (self._fallbackCache[cacheKey]) {\r\n            callback.success(self._fallbackCache[cacheKey]);\r\n        } else {\r\n            this.find(providerList, {\r\n                success: function (provider, selectedProvider) {\r\n                    self._fallbackCache[cacheKey] = provider;\r\n                    callback.success.call(this, provider);\r\n                },\r\n                error: callback.error\r\n            });\r\n        }\r\n    },\r\n    find: function (providerList, callback) {\r\n        var currentProvider = providerList.shift();\r\n        var currentProvider = this.getVirtual(currentProvider);\r\n        if(Array.isArray(currentProvider)){\r\n            providerList = currentProvider;\r\n            currentProvider = providerList.shift();\r\n        }\r\n\r\n        while (currentProvider && !this.isSupported(currentProvider)) {\r\n            currentProvider = providerList.shift();\r\n        }\r\n\r\n        $data.Trace.log('First supported provider is ' + currentProvider);\r\n\r\n        if (!currentProvider){\r\n            $data.Trace.log('Provider fallback failed');\r\n            callback.error();\r\n        }\r\n\r\n        if ($data.RegisteredStorageProviders) {\r\n            $data.Trace.log('Is the ' + currentProvider + ' provider already registered?');\r\n            var provider = $data.RegisteredStorageProviders[currentProvider];\r\n            if (provider) {\r\n                $data.Trace.log(currentProvider + ' provider registered');\r\n                callback.success(provider)\r\n                return;\r\n            }else{\r\n                $data.Trace.log(currentProvider + ' provider not registered');\r\n            }\r\n        }\r\n\r\n        if (!process.browser) {\r\n            // NodeJS\r\n            $data.Trace.log('node.js detected trying to load NPM module');\r\n            this.loadNpmModule(currentProvider, providerList, callback);\r\n        } else {\r\n            $data.Trace.log('Browser detected trying to load provider');\r\n            this.loadProvider(currentProvider, providerList, callback);\r\n        }\r\n    },\r\n    loadProvider: function (currentProvider, providerList, callback) {\r\n        var self = this;\r\n        var mappedName = $data.StorageProviderLoader.ProviderNames[currentProvider] || currentProvider;\r\n        $data.Trace.log(currentProvider + ' provider is mapped to name ' + mappedName + 'Provider');\r\n        if (mappedName) {\r\n            var url = this.getUrl(mappedName);\r\n            $data.Trace.log(currentProvider + ' provider from URL: ' + url);\r\n\r\n            var loader = this.loadScript;\r\n            if (document && document.createElement) {\r\n                $data.Trace.log('document and document.createElement detected, using script element loader method');\r\n                loader = this.loadScriptElement;\r\n            }\r\n\r\n            loader.call(this, url, currentProvider, function (successful) {\r\n                var provider = $data.RegisteredStorageProviders[currentProvider];\r\n                if (successful && provider) {\r\n                    $data.Trace.log(currentProvider + ' provider successfully registered');\r\n                    callback.success(provider);\r\n                } else if (providerList.length > 0) {\r\n                    $data.Trace.log(currentProvider + ' provider failed to load, trying to fallback to ' + providerList + ' provider(s)');\r\n                    self.find(providerList, callback);\r\n                } else {\r\n                    $data.Trace.log(currentProvider + ' provider failed to load');\r\n                    callback.error();\r\n                }\r\n            });\r\n        }\r\n    },\r\n    getUrl: function (providerName) {\r\n        var jaydataScriptMin = document.querySelector('script[src$=\"jaydata.min.js\"]');\r\n        var jaydataScript = document.querySelector('script[src$=\"jaydata.js\"]');\r\n        if (jaydataScriptMin) return jaydataScriptMin.src.substring(0, jaydataScriptMin.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.min.js';\r\n        else if (jaydataScript) return jaydataScript.src.substring(0, jaydataScript.src.lastIndexOf('/') + 1) + 'jaydataproviders/' + providerName + 'Provider.js';\r\n        else return 'jaydataproviders/' + providerName + 'Provider.js';\r\n    },\r\n    loadScript: function (url, currentProvider, callback) {\r\n        if (!url){\r\n            callback(false);\r\n            return;\r\n        }\r\n\r\n        function getHttpRequest() {\r\n            if ($data.__global.XMLHttpRequest)\r\n                return new XMLHttpRequest();\r\n            else if ($data.__global.ActiveXObject !== undefined)\r\n                return new ActiveXObject(\"MsXml2.XmlHttp\");\r\n            else{\r\n                $data.Trace.log('XMLHttpRequest or MsXml2.XmlHttp ActiveXObject not found');\r\n                callback(false);\r\n                return;\r\n            }\r\n        }\r\n\r\n        var oXmlHttp = getHttpRequest();\r\n        oXmlHttp.onreadystatechange = function () {\r\n            $data.Trace.log('HTTP request is in state: ' + oXmlHttp.readyState);\r\n            if (oXmlHttp.readyState == 4) {\r\n                if (oXmlHttp.status == 200 || oXmlHttp.status == 304) {\r\n                    $data.Trace.log('HTTP request succeeded');\r\n                    $data.Trace.log('HTTP request response text: ' + oXmlHttp.responseText);\r\n                    eval.call($data.__global, oXmlHttp.responseText);\r\n                    if (typeof callback === 'function')\r\n                        callback(true);\r\n                    else $data.Trace.log('Callback function is undefined');\r\n                } else {\r\n                    $data.Trace.log('HTTP request status: ', oXmlHttp.status);\r\n                    if (typeof callback === 'function')\r\n                        callback(false);\r\n                    else $data.Trace.log('Callback function is undefined');\r\n                }\r\n            }\r\n        };\r\n        oXmlHttp.open('GET', url, true);\r\n        oXmlHttp.send(null);\r\n    },\r\n    loadScriptElement: function (url, currentProvider, callback) {\r\n        var head = document.getElementsByTagName('head')[0] || document.documentElement;\r\n\r\n        var script = document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.src = url;\r\n        $data.Trace.log('Appending child ' + script + ' to ' + head);\r\n        head.appendChild(script);\r\n\r\n        var loadInterval = this.scriptLoadInterval || 50;\r\n        var iteration = Math.ceil(this.scriptLoadTimeout / loadInterval);\r\n        $data.Trace.log('Script element watcher iterating ' + iteration + ' times');\r\n        function watcher() {\r\n            $data.Trace.log('Script element watcher iteration ' + iteration);\r\n            var provider = $data.RegisteredStorageProviders[currentProvider];\r\n            if (provider) {\r\n                $data.Trace.log(currentProvider + ' provider registered');\r\n                callback(true);\r\n            } else {\r\n                iteration--;\r\n                if (iteration > 0) {\r\n                    $data.Trace.log('Script element watcher next iteration');\r\n                    setTimeout(watcher, loadInterval);\r\n                } else {\r\n                    $data.Trace.log('Script element loader failed');\r\n                    callback(false);\r\n                }\r\n            }\r\n        }\r\n        setTimeout(watcher, loadInterval);\r\n    },\r\n\r\n    loadNpmModule: function (currentProvider, providerList, callback) {\r\n        var provider = null;\r\n        try {\r\n            require(this.npmModules[currentProvider]);\r\n            provider = $data.RegisteredStorageProviders[currentProvider];\r\n            $data.Trace.log('NPM module loader successfully registered ' + currentProvider + ' provider');\r\n        } catch (e) {\r\n            $data.Trace.log('NPM module loader failed for ' + currentProvider + ' provider');\r\n        }\r\n\r\n        if (provider) {\r\n            callback.success(provider);\r\n        } else if (providerList.length > 0) {\r\n            this.find(providerList, callback);\r\n        } else {\r\n            callback.error();\r\n        }\r\n    },\r\n\r\n    virtualProviders: {\r\n        type: $data.Array,\r\n        value: {\r\n            local: {\r\n                fallbacks: ['webSql', 'indexedDb', 'LocalStore']\r\n            }\r\n        }\r\n    },\r\n    getVirtual: function(name){\r\n        if(this.virtualProviders[name])\r\n            return [].concat(this.virtualProviders[name].fallbacks);\r\n\r\n        return name;\r\n    }\r\n});\r\n\r\n$data.StorageProviderLoader = new $data.StorageProviderLoaderBase();\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$C('$data.modelBinder.FindProjectionVisitor', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function(includes){\r\n        this._includes = includes;\r\n    },\r\n    VisitProjectionExpression: function (expression, context) {\r\n        this.projectionExpression = this.projectionExpression || expression;\r\n        context && (context.projectionExpression = context.projectionExpression || expression);\r\n        this.Visit(expression.source, context)\r\n    },\r\n    VisitIncludeExpression: function (expression, context) {\r\n        this.Visit(expression.source, context)\r\n        if(!(expression.selector instanceof $data.Expressions.ConstantExpression)) {\r\n            var selectorContext = {};\r\n            this.Visit(expression.selector.expression, selectorContext);\r\n            \r\n            if(selectorContext.hasIncludeProjectionExpression){\r\n                var include = this._includes.filter(function(it){ return it.name === selectorContext.includePath; })[0];\r\n                if(include){\r\n                    include.projectionExpression = selectorContext.includeProjectionExpression\r\n                }\r\n                \r\n                context && (context.hasIncludeProjectionExpression = true);\r\n            }\r\n        }\r\n    },\r\n    VisitFrameOperationExpression: function(expression, context){\r\n        this.Visit(expression.source, context);\r\n        \r\n        var opDef = expression.operation.memberDefinition;\r\n        if(opDef && opDef.frameType === $data.Expressions.ProjectionExpression){\r\n            var paramCounter = 0;\r\n            var params = opDef.parameters || [{ name: \"@expression\" }];\r\n            \r\n            var args = params.map(function (item, index) {\r\n                if (item.name === \"@expression\") {\r\n                    return expression.source;\r\n                } else {\r\n                    return expression.parameters[paramCounter++]\r\n                };\r\n            });\r\n            \r\n            for (var i = 0; i < args.length; i++) {\r\n                var arg = args[i];\r\n                \r\n                if (arg instanceof $data.Expressions.ConstantExpression && arg.value instanceof $data.Queryable) {\r\n                    var preparator = Container.createQueryExpressionCreator(arg.value.entityContext);\r\n                    arg = preparator.Visit(arg.value.expression);\r\n                    \r\n                }\r\n                \r\n                var visitor = new $data.modelBinder.FindProjectionVisitor(this._inculdes);\r\n                var visitorContext = { };\r\n                var compiled = visitor.Visit(arg, visitorContext);\r\n                \r\n                if(context && visitorContext.projectionExpression){\r\n                    context.hasIncludeProjectionExpression = true;\r\n                    context.includeProjectionExpression = visitorContext.projectionExpression;\r\n                }\r\n            }\r\n        }\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, context) {\r\n        var propName = expression.associationInfo.FromPropertyName;\r\n        \r\n        if(context) {\r\n            context.includePath = context.includePath ? (context.includePath + '.') : \"\";\r\n            context.includePath += propName;\r\n        }\r\n    }\r\n});\r\n\r\n$C('$data.modelBinder.ModelBinderConfigCompiler', $data.Expressions.EntityExpressionVisitor, null, {\r\n    constructor: function (query, includes, oDataProvider) {\r\n        this._query = query;\r\n        this._includes = includes;\r\n        this._isoDataProvider = oDataProvider || false;\r\n        this.depth = [];\r\n    },\r\n    VisitSingleExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitSomeExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFindExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitEveryExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitToArrayExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitFirstExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitForEachExpression: function (expression) {\r\n        this._defaultModelBinder(expression);\r\n    },\r\n    VisitServiceOperationExpression: function (expression) {\r\n        if (expression.cfg.returnType) {\r\n            var returnType = Container.resolveType(expression.cfg.returnType);\r\n            if ((typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo($data.Queryable)) || returnType === $data.Array) {\r\n                this._defaultModelBinder(expression);\r\n            } else {\r\n                var builder = Container.createqueryBuilder();\r\n                builder.modelBinderConfig['$type'] = returnType;\r\n                if (typeof returnType.isAssignableTo === 'function' && returnType.isAssignableTo($data.Entity)) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + expression.cfg.serviceName];\r\n                } else {\r\n                    builder.modelBinderConfig['$type'] = returnType;\r\n                    builder.modelBinderConfig['$value'] = function (a, v) {\r\n                        return (expression.cfg.serviceName in v) ? v[expression.cfg.serviceName] : v.value;\r\n                    }\r\n                }\r\n                this.VisitExpression(expression, builder);\r\n                builder.resetModelBinderProperty();\r\n                this._query.modelBinderConfig = builder.modelBinderConfig;\r\n            }\r\n        }\r\n    },\r\n    VisitCountExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    VisitBatchDeleteExpression: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        builder.selectModelBinderProperty('$item');\r\n        builder.modelBinderConfig['$type'] = $data.Integer;\r\n        builder.modelBinderConfig['$source'] = 'cnt';\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    VisitConstantExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.type;\r\n        builder.modelBinderConfig['$value'] = expression.value;\r\n    },\r\n\r\n    VisitExpression: function (expression, builder) {\r\n        var projVisitor = Container.createFindProjectionVisitor(this._includes);\r\n        var projContext = {};\r\n        projVisitor.Visit(expression, projContext);\r\n\r\n        if (projContext.projectionExpression) {\r\n            this.Visit(projContext.projectionExpression, builder);\r\n        } else {\r\n            this.DefaultSelection(builder, this._query.defaultType, this._includes, projContext.hasIncludeProjectionExpression);\r\n        }\r\n    },\r\n    _defaultModelBinder: function (expression) {\r\n        var builder = Container.createqueryBuilder();\r\n        builder.modelBinderConfig['$type'] = $data.Array;\r\n        if (this._isoDataProvider) {\r\n            builder.modelBinderConfig['$selector'] = ['json:d.results', 'json:d', 'json:results', 'json:value'];\r\n        }\r\n        builder.modelBinderConfig['$item'] = {};\r\n        builder.selectModelBinderProperty('$item');\r\n\r\n        this.VisitExpression(expression, builder);\r\n\r\n        builder.resetModelBinderProperty();\r\n        this._query.modelBinderConfig = builder.modelBinderConfig;\r\n    },\r\n    _addPropertyToModelBinderConfig: function (elementType, builder) {\r\n        var storageModel = this._query.context._storageModel.getStorageModel(elementType);\r\n        if (elementType.memberDefinitions) {\r\n            elementType.memberDefinitions.getPublicMappedProperties().forEach(function (prop) {\r\n                if ((!storageModel) || (storageModel && !storageModel.Associations[prop.name] && !storageModel.ComplexTypes[prop.name])) {\r\n\r\n                    var type = Container.resolveType(prop.dataType);\r\n                    if (!storageModel && this._query.context.storageProvider.supportedDataTypes.indexOf(type) < 0) {\r\n                        //complex type\r\n                        builder.selectModelBinderProperty(prop.name);\r\n                        builder.modelBinderConfig['$type'] = type;\r\n                        if (this._isoDataProvider) {\r\n                            builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\r\n                        } else {\r\n                            builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\r\n                        }\r\n                        this._addPropertyToModelBinderConfig(type, builder);\r\n                        builder.popModelBinderProperty();\r\n                    } else {\r\n                        if (prop.key) {\r\n                            builder.addKeyField(prop.name);\r\n                        }\r\n                        if (prop.concurrencyMode === $data.ConcurrencyMode.Fixed) {\r\n                            builder.modelBinderConfig[prop.name] = { $source: '@odata.etag' }\r\n                        } else if (type === $data.Array && prop.elementType) {\r\n                            builder.selectModelBinderProperty(prop.name);\r\n                            builder.modelBinderConfig['$type'] = type;\r\n                            if (this._isoDataProvider) {\r\n                                builder.modelBinderConfig['$selector'] = ['json:' + prop.name + '.results', 'json:' + prop.name];\r\n                            } else {\r\n                                builder.modelBinderConfig['$selector'] = 'json:' + prop.name;\r\n                            }\r\n                            builder.selectModelBinderProperty('$item');\r\n                            var arrayElementType = Container.resolveType(prop.elementType);\r\n                            builder.modelBinderConfig['$type'] = arrayElementType;\r\n                            this._addPropertyToModelBinderConfig(arrayElementType, builder);\r\n                            builder.popModelBinderProperty();\r\n                            builder.popModelBinderProperty();\r\n                        } else {\r\n                            builder.modelBinderConfig[prop.name] = {\r\n                                $source: prop.name,\r\n                                $type: prop.type\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }, this);\r\n        } else {\r\n            /*builder._binderConfig = {\r\n                $selector: ['json:results'],\r\n                $type: $data.Array,\r\n                $item:{\r\n                    $type: elementType,\r\n                    $value: function (meta, data) { return data; }\r\n                }\r\n            }*/\r\n            if (builder._binderConfig.$type === $data.Array) {\r\n                builder._binderConfig.$item = builder._binderConfig.$item || {};\r\n                builder.modelBinderConfig = builder._binderConfig.$item;\r\n            }\r\n\r\n\r\n        }\r\n        if (storageModel) {\r\n            this._addComplexTypeProperties(storageModel.ComplexTypes, builder);\r\n        }\r\n    },\r\n    _addComplexTypeProperties: function (complexTypes, builder) {\r\n        complexTypes.forEach(function (ct) {\r\n            if (ct.ToType !== $data.Array){\r\n                builder.selectModelBinderProperty(ct.FromPropertyName);\r\n                builder.modelBinderConfig['$type'] = ct.ToType;\r\n                if (this._isoDataProvider) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + ct.FromPropertyName + '.results', 'json:' + ct.FromPropertyName];\r\n                } else {\r\n                    builder.modelBinderConfig['$selector'] = 'json:' + ct.FromPropertyName;\r\n                }\r\n                this._addPropertyToModelBinderConfig(ct.ToType, builder);\r\n\r\n                builder.popModelBinderProperty();\r\n            }else{\r\n                var dt = ct.ToType;\r\n                var et = Container.resolveType(ct.FromType.memberDefinitions.getMember(ct.FromPropertyName).elementType);\r\n                if (dt === $data.Array && et && et.isAssignableTo && et.isAssignableTo($data.Entity)){\r\n                    config = {\r\n                        $type: $data.Array,\r\n                        $selector: 'json:' + ct.FromPropertyName,\r\n                        $item: {\r\n                            $type: et\r\n                        }\r\n                    };\r\n                    var md = et.memberDefinitions.getPublicMappedProperties();\r\n                    for (var i = 0; i < md.length; i++){\r\n                        config.$item[md[i].name] = { $type: md[i].type, $source: md[i].name };\r\n                    }\r\n                    builder.modelBinderConfig[ct.FromPropertyName] = config;\r\n                }else{\r\n                    builder.modelBinderConfig[ct.FromPropertyName] = {\r\n                        $type: ct.ToType,\r\n                        $source: ct.FromPropertyName\r\n                    };\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n    DefaultSelection: function (builder, type, allIncludes, custom) {\r\n        //no projection, get all item from entitySet\r\n        builder.modelBinderConfig['$type'] = custom ? $data.Object : type;\r\n\r\n        var storageModel = this._query.context._storageModel.getStorageModel(type);\r\n        this._addPropertyToModelBinderConfig(type, builder);\r\n        if (allIncludes) {\r\n            let excludeDeepInclude = [];\r\n            allIncludes.forEach(function (include) {\r\n                if(excludeDeepInclude.some(function(incName){ return include.name.length > incName.length && include.name.substr(0, incName.length) === incName })) {\r\n                    return;\r\n                }\r\n                this.depth.push(include.name);\r\n                \r\n                var includes = include.name.split('.');\r\n                var association = null;\r\n                var tmpStorageModel = storageModel;\r\n                var itemCount = 0;\r\n                for (var i = 0; i < includes.length; i++) {\r\n                    if (builder.modelBinderConfig.$item) {\r\n                        builder.selectModelBinderProperty('$item');\r\n                        itemCount++;\r\n                    }\r\n                    builder.selectModelBinderProperty(includes[i]);\r\n                    association = tmpStorageModel.Associations[includes[i]];\r\n                    tmpStorageModel = this._query.context._storageModel.getStorageModel(association.ToType);\r\n                }\r\n                if (this._isoDataProvider) {\r\n                    builder.modelBinderConfig['$selector'] = ['json:' + includes[includes.length - 1] + '.results', 'json:' + includes[includes.length - 1]];\r\n                } else {\r\n                    builder.modelBinderConfig['$selector'] = 'json:' + includes[includes.length - 1];\r\n                }\r\n                if (association.ToMultiplicity === '*') {\r\n                    builder.modelBinderConfig['$type'] = $data.Array;\r\n                    builder.selectModelBinderProperty('$item');\r\n                    builder.modelBinderConfig['$type'] = include.type;\r\n                    if(include.projectionExpression){\r\n                        excludeDeepInclude.push(include.name);\r\n                        this.Visit(include.projectionExpression, builder);\r\n                    } else {\r\n                        this._addPropertyToModelBinderConfig(include.type, builder);\r\n                    }\r\n                    builder.popModelBinderProperty();\r\n                } else {\r\n                    builder.modelBinderConfig['$type'] = include.type;\r\n                    if(include.projectionExpression){\r\n                        excludeDeepInclude.push(include.name);\r\n                        this.Visit(include.projectionExpression, builder);\r\n                    } else {\r\n                        this._addPropertyToModelBinderConfig(include.type, builder);\r\n                    }\r\n                }\r\n\r\n                for (var i = 0; i < includes.length + itemCount; i++) {\r\n                    builder.popModelBinderProperty();\r\n                }\r\n                this.depth.pop();\r\n            }, this);\r\n        }\r\n    },\r\n    VisitProjectionExpression: function (expression, builder) {\r\n        this.hasProjection = true;\r\n        this.Visit(expression.selector, builder);\r\n\r\n        if (expression.selector && expression.selector.expression instanceof $data.Expressions.ObjectLiteralExpression) {\r\n            builder.modelBinderConfig['$type'] = expression.projectionAs || builder.modelBinderConfig['$type'] || $data.Object;\r\n        }\r\n    },\r\n    VisitParametricQueryExpression: function (expression, builder) {\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntityAsProjection(expression, builder);\r\n        } else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n\r\n    },\r\n    VisitEntityAsProjection: function (expression, builder) {\r\n        this.mapping = '';\r\n        this.Visit(expression.expression, builder);\r\n        this.depth.push(this.mapping);\r\n        this.mapping = this.depth.join('.');\r\n        \r\n        var includes;\r\n        var currentInclude;\r\n        if (this.mapping && this._includes instanceof Array) {\r\n            includes = this._includes.filter(function (inc) {\r\n                return inc.name.indexOf(this.mapping + '.') === 0\r\n            }, this);\r\n            includes = includes.map(function (inc) {\r\n                return { name: inc.name.replace(this.mapping + '.', ''), type: inc.type };\r\n            }, this);\r\n\r\n            // if (includes.length > 0){\r\n            //     this.DefaultSelection(builder, expression.expression.entityType, includes);\r\n            //     //console.warn('WARN: include for mapped properties is not supported!');\r\n            // }\r\n            \r\n            currentInclude = this._includes.filter(function (inc) {\r\n                return inc.name === this.mapping;\r\n            }, this)[0];\r\n        }\r\n        \r\n        if (expression.expression instanceof $data.Expressions.EntityExpression) {\r\n            if(currentInclude && currentInclude.projectionExpression){\r\n                let tmpIncludes = this._includes;\r\n                this._includes = includes;\r\n                let tmpDepth = this.depth;\r\n                this.depth = [];\r\n                this.Visit(currentInclude.projectionExpression, builder);\r\n                this._includes = tmpIncludes;\r\n                this.depth = tmpDepth;\r\n            } else {\r\n                this.DefaultSelection(builder, expression.expression.entityType, includes)\r\n            }\r\n        } else if (expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            builder.modelBinderConfig.$type = $data.Array;\r\n            builder.modelBinderConfig.$item = {};\r\n            builder.selectModelBinderProperty('$item');\r\n            if(currentInclude && currentInclude.projectionExpression){\r\n                let tmpIncludes = this._includes;\r\n                this._includes = includes;\r\n                let tmpDepth = this.depth;\r\n                this.depth = [];\r\n                this.Visit(currentInclude.projectionExpression, builder);\r\n                this._includes = tmpIncludes;\r\n                this.depth = tmpDepth;\r\n            } else {\r\n                this.DefaultSelection(builder, expression.expression.elementType, includes)\r\n            }\r\n            builder.popModelBinderProperty();\r\n        }\r\n        this.depth.pop();\r\n    },\r\n\r\n    VisitEntityFieldExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n    },\r\n    VisitMemberInfoExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = expression.memberDefinition.type;\r\n        if (expression.memberDefinition.storageModel && expression.memberName in expression.memberDefinition.storageModel.ComplexTypes) {\r\n            this._addPropertyToModelBinderConfig(Container.resolveType(expression.memberDefinition.type), builder);\r\n        } else {\r\n            if (!(builder.modelBinderConfig.$type && Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo && Container.resolveType(builder.modelBinderConfig.$type).isAssignableTo($data.Entity)))\r\n                builder.modelBinderConfig['$source'] = expression.memberName;\r\n        }\r\n    },\r\n    VisitEntitySetExpression: function (expression, builder) {\r\n        if (expression.source instanceof $data.Expressions.EntityExpression) {\r\n            this.Visit(expression.source, builder);\r\n            this.Visit(expression.selector, builder);\r\n        }\r\n\r\n    },\r\n    VisitComplexTypeExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n        this.Visit(expression.selector, builder);\r\n\r\n\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            if (builder.modelBinderConfig.$selector instanceof $data.Array) {\r\n                var temp = builder.modelBinderConfig.$selector[1];\r\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.selector.memberName + '.results';\r\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.selector.memberName;\r\n            } else {\r\n                builder.modelBinderConfig.$selector += '.' + expression.selector.memberName;\r\n            }\r\n\r\n        } else {\r\n            if (this._isoDataProvider) {\r\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.selector.memberName + '.results', 'json:' + expression.selector.memberName];\r\n            } else {\r\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.selector.memberName;\r\n            }\r\n        }\r\n    },\r\n    VisitEntityExpression: function (expression, builder) {\r\n        this.Visit(expression.source, builder);\r\n    },\r\n    VisitAssociationInfoExpression: function (expression, builder) {\r\n        if (('$selector' in builder.modelBinderConfig) && (builder.modelBinderConfig.$selector.length > 0)) {\r\n            if (builder.modelBinderConfig.$selector instanceof $data.Array) {\r\n                var temp = builder.modelBinderConfig.$selector[1];\r\n                builder.modelBinderConfig.$selector[0] = temp + '.' + expression.associationInfo.FromPropertyName + '.results';\r\n                builder.modelBinderConfig.$selector[1] = temp + '.' + expression.associationInfo.FromPropertyName;\r\n            } else {\r\n                builder.modelBinderConfig.$selector += '.' + expression.associationInfo.FromPropertyName;\r\n            }\r\n\r\n        } else {\r\n            if (this._isoDataProvider) {\r\n                builder.modelBinderConfig['$selector'] = ['json:' + expression.associationInfo.FromPropertyName + '.results', 'json:' + expression.associationInfo.FromPropertyName];\r\n            } else {\r\n                builder.modelBinderConfig['$selector'] = 'json:' + expression.associationInfo.FromPropertyName;\r\n            }\r\n        }\r\n\r\n        if (this.mapping && this.mapping.length > 0) { this.mapping += '.'; }\r\n        this.mapping += expression.associationInfo.FromPropertyName;\r\n    },\r\n    VisitObjectLiteralExpression: function (expression, builder) {\r\n        builder.modelBinderConfig['$type'] = $data.Object;\r\n        expression.members.forEach(function (of) {\r\n            this.Visit(of, builder);\r\n        }, this);\r\n    },\r\n    VisitObjectFieldExpression: function (expression, builder) {\r\n        builder.selectModelBinderProperty(expression.fieldName);\r\n        if (expression.expression instanceof $data.Expressions.EntityExpression || expression.expression instanceof $data.Expressions.EntitySetExpression) {\r\n            this.VisitEntityAsProjection(expression, builder);\r\n        } else {\r\n            this.Visit(expression.expression, builder);\r\n        }\r\n        builder.popModelBinderProperty();\r\n    }\r\n});\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Transaction', null, null, {\r\n    constructor: function () {\r\n        this._objectId = (new Date()).getTime();\r\n        $data.Trace.log(\"create: \", this._objectId);\r\n\r\n        this.oncomplete = new $data.Event(\"oncomplete\", this);\r\n        this.onerror = new $data.Event(\"onerror\", this);\r\n    },\r\n    abort: function () {\r\n        Guard.raise(new Exception('Not Implemented', 'Not Implemented', arguments));\r\n    },\r\n\r\n    _objectId: { type: $data.Integer },\r\n    transaction: { type: $data.Object },\r\n\r\n    oncomplete: { type: $data.Event },\r\n    onerror: { type: $data.Event }\r\n}, null);\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Validation.Defaults', null, null, null, {\r\n    validators: {\r\n        value: {\r\n            required: function (value, definedValue) { return !Guard.isNullOrUndefined(value); },\r\n            customValidator: function (value, definedValue) { return Guard.isNullOrUndefined(value) || typeof definedValue == \"function\" ? definedValue(value) : true; },\r\n\r\n            minValue: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value >= definedValue; },\r\n            maxValue: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value <= definedValue; },\r\n\r\n            minLength: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value.length >= definedValue; },\r\n            maxLength: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value.length <= definedValue; },\r\n            length: function (value, definedValue) { return Guard.isNullOrUndefined(value) || value.length == definedValue; },\r\n            regex: function (value, definedValue) {\r\n                return Guard.isNullOrUndefined(value) ||\r\n                    value.match(typeof definedValue === 'string'\r\n                        ? new RegExp((definedValue.indexOf('/') === 0 && definedValue.lastIndexOf('/') === (definedValue.length - 1)) ? definedValue.slice(1, -1) : definedValue)\r\n                        : definedValue)\r\n            }\r\n        }\r\n    },\r\n\r\n    _getGroupValidations: function (validations) {\r\n        var validators = {};\r\n        if (Array.isArray(validations)) {\r\n            for (var i = 0; i < validations.length; i++) {\r\n                var validator = validations[i];\r\n                if (typeof this.validators[validator] === 'function') {\r\n                    validators[validator] = this.validators[validator];\r\n                }\r\n            }\r\n        }\r\n\r\n        return validators;\r\n    }\r\n});\r\n\r\n$data.Class.define('$data.Validation.EntityValidation', $data.Validation.EntityValidationBase, null, {\r\n\r\n    ValidateEntity: function (entity) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n\r\n        var errors = [];\r\n        entity.getType().memberDefinitions.getPublicMappedProperties().forEach(function (memDef) {\r\n            errors = errors.concat(this.ValidateEntityField(entity, memDef, undefined, true));\r\n        }, this);\r\n        return errors;\r\n    },\r\n    ValidateEntityField: function (entity, memberDefinition, newValue, valueNotSet) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        var errors = [];\r\n        var resolvedType = Container.resolveType(memberDefinition.dataType);\r\n        var typeName = Container.resolveName(resolvedType);\r\n        var value = !valueNotSet ? newValue : entity[memberDefinition.name];\r\n\r\n        if (!memberDefinition.inverseProperty && resolvedType && typeof resolvedType.isAssignableTo === 'function' && resolvedType.isAssignableTo($data.Entity)) {\r\n            typeName = $data.Entity.fullName;\r\n        }\r\n\r\n        this.fieldValidate(entity, memberDefinition, value, errors, typeName);\r\n        return errors;\r\n    },\r\n\r\n    getValidationValue: function (memberDefinition, validationName) {\r\n        var value;\r\n        if (memberDefinition[validationName] && memberDefinition[validationName].value)\r\n            value = memberDefinition[validationName].value;\r\n        else\r\n            value = memberDefinition[validationName];\r\n\r\n        if (this.convertableValidation[validationName]) {\r\n            var typeToConvert;\r\n            if (this.convertableValidation[validationName] === true) {\r\n                typeToConvert = memberDefinition.type;\r\n            } else {\r\n                typeToConvert = this.convertableValidation[validationName];\r\n            }\r\n\r\n            if (typeToConvert)\r\n                value = Container.convertTo(value, typeToConvert, memberDefinition.elementType);\r\n        }\r\n\r\n        return value;\r\n    },\r\n    getValidationMessage: function (memberDefinition, validationName, defaultMessage) {\r\n        var eMessage = defaultMessage;\r\n        if (typeof memberDefinition[validationName] == \"object\" && memberDefinition[validationName].message)\r\n            eMessage = memberDefinition[validationName].message;\r\n        else if (memberDefinition.errorMessage)\r\n            eMessage = memberDefinition.errorMessage;\r\n\r\n        return eMessage;\r\n    },\r\n    createValidationError: function (memberDefinition, validationName, defaultMessage) {\r\n        return new $data.Validation.ValidationError(this.getValidationMessage(memberDefinition, validationName, defaultMessage), memberDefinition, validationName);\r\n    },\r\n\r\n    convertableValidation: {\r\n        value: {\r\n            required: '$data.Boolean',\r\n            minValue: true,\r\n            maxValue: true,\r\n            minLength: '$data.Integer',\r\n            maxLength: '$data.Integer',\r\n            length: '$data.Integer'\r\n        }\r\n\r\n    },\r\n    supportedValidations: {\r\n        value: {\r\n            //'$data.Entity': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.ObjectID': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Byte': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.SByte': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Decimal': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Float': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Number': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int16': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Integer': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int32': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Int64': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.String': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length', 'regex']),\r\n            '$data.Date': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.DateTimeOffset': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Time': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Day': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minValue', 'maxValue']),\r\n            '$data.Duration': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Boolean': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Array': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'length']),\r\n            '$data.Object': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Guid': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.Blob': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator', 'minLength', 'maxLength', 'length']),\r\n            '$data.GeographyPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyMultiPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeographyCollection': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiPoint': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiLineString': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryMultiPolygon': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator']),\r\n            '$data.GeometryCollection': $data.Validation.Defaults._getGroupValidations(['required', 'customValidator'])\r\n        }\r\n    },\r\n\r\n    fieldValidate: function (entity, memberDefinition, value, errors, validationTypeName) {\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        ///<param name=\"value\" type=\"Object\" />\r\n        ///<param name=\"errors\" type=\"Array\" />\r\n        ///<param name=\"validationTypeName\" type=\"string\" />\r\n        if (entity.entityState == $data.EntityState.Modified && entity.changedProperties && entity.changedProperties.indexOf(memberDefinition) < 0)\r\n            return;\r\n\r\n        var validatonGroup = this.supportedValidations[validationTypeName];\r\n        if (validatonGroup) {\r\n            var validations = Object.keys(validatonGroup);\r\n            validations.forEach(function (validation) {\r\n                if (memberDefinition[validation] && validatonGroup[validation] && !validatonGroup[validation].call(entity, value, this.getValidationValue(memberDefinition, validation)))\r\n                    errors.push(this.createValidationError(memberDefinition, validation, 'Validation error!'));\r\n            }, this);\r\n\r\n            if (validationTypeName === $data.Entity.fullName && value instanceof $data.Entity && !value.isValid()) {\r\n                errors.push(this.createValidationError(memberDefinition, 'ComplexProperty', 'Validation error!'));\r\n            }\r\n        }\r\n    }\r\n\r\n}, null);\r\n\r\n$data.Validation.Entity = new $data.Validation.EntityValidation();\r\n\r\nexport default $data\r\n","import $data, { $C, Guard, Container, Exception } from '../../TypeSystem/index.js';\r\n\r\n$data.Class.define('$data.Validation.ValidationError', null, null, {\r\n    constructor: function (message, propertyDefinition, type) {\r\n        ///<param name=\"message\" type=\"string\" />\r\n        ///<param name=\"propertyDefinition\" type=\"$data.MemberDefinition\" />\r\n\r\n        this.Message = message;\r\n        this.PropertyDefinition = propertyDefinition;\r\n        this.Type = type;\r\n    },\r\n    Type: { dataType: 'string' },\r\n    Message: { dataType: \"string\" },\r\n    PropertyDefinition: { dataType: $data.MemberDefinition }\r\n}, null);\r\n\r\n$data.Class.define('$data.Validation.EntityValidationBase', null, null, {\r\n\r\n    ValidateEntity: function (entity) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        return [];\r\n    },\r\n\r\n    ValidateEntityField: function (entity, memberDefinition) {\r\n        ///<param name=\"entity\" type=\"$data.Entity\" />\r\n        ///<param name=\"memberDefinition\" type=\"$data.MemberDefinition\" />\r\n        return [];\r\n    },\r\n\r\n    getValidationValue: function (memberDefinition, validationName) {\r\n        Guard.raise(\"Pure class\");\r\n    },\r\n    getValidationMessage: function (memberDefinition, validationName, defaultMessage) {\r\n        Guard.raise(\"Pure class\");\r\n    }\r\n\r\n}, null);\r\n\r\n$data.Validation = $data.Validation || {};\r\n$data.Validation.Entity = new $data.Validation.EntityValidationBase();\r\n\r\nexport default $data\r\n","import $data from '../TypeSystem/index.js';\r\nimport expressions from './Expressions/index.js';\r\n\r\nimport EntityValidationBase from './Validation/EntityValidationBase.js';\r\nimport EntityValidation from './Validation/EntityValidation.js';\r\nimport ChangeDistributorBase from './Notifications/ChangeDistributorBase.js';\r\nimport ChangeCollectorBase from './Notifications/ChangeCollectorBase.js';\r\nimport ChangeDistributor from './Notifications/ChangeDistributor.js';\r\nimport ChangeCollector from './Notifications/ChangeCollector.js';\r\nimport Transaction from './Transaction.js';\r\nimport Access from './Access.js';\r\n//import Promise from './Promise.js';\r\nimport Entity from './Entity.js';\r\nimport Enum from './Enum.js';\r\nimport RelatedEntityProxy from './RelatedEntityProxy.js';\r\nimport EntityContext from './EntityContext.js';\r\nimport QueryProvider from './QueryProvider.js';\r\nimport ModelBinder from './ModelBinder.js';\r\nimport QueryBuilder from './QueryBuilder.js';\r\nimport Query from './Query.js';\r\nimport Queryable from './Queryable.js';\r\nimport EntitySet from './EntitySet.js';\r\nimport EntityState from './EntityState.js';\r\nimport EntityAttachModes from './EntityAttachModes.js';\r\nimport EntityStateManager from './EntityStateManager.js';\r\nimport ItemStore from './ItemStore.js';\r\nimport StorageProviderLoader from './StorageProviderLoader.js';\r\nimport StorageProviderBase from './StorageProviderBase.js';\r\nimport ServiceOperation from './ServiceOperation.js';\r\nimport EntityWrapper from './EntityWrapper.js';\r\nimport jQueryAjaxWrapper from './Ajax/jQueryAjaxWrapper.js';\r\nimport WinJSAjaxWrapper from './Ajax/WinJSAjaxWrapper.js';\r\nimport ExtJSAjaxWrapper from './Ajax/ExtJSAjaxWrapper.js';\r\nimport AjaxStub from './Ajax/AjaxStub.js';\r\nimport modelBinderConfigCompiler from './StorageProviders/modelBinderConfigCompiler.js';\r\nimport AuthenticationBase from './Authentication/AuthenticationBase.js';\r\nimport Anonymous from './Authentication/Anonymous.js';\r\nimport FacebookAuth from './Authentication/FacebookAuth.js';\r\nimport BasicAuth from './Authentication/BasicAuth.js';\r\n//import JaySvcUtil from '../JaySvcUtil/JaySvcUtil.js';\r\n//import deferred from '../JayDataModules/deferred.js';\r\n//import JayStorm from './JayStorm.js';\r\n\r\nimport { PromiseHandler } from 'jaydata-promise-handler';\r\nPromiseHandler.use($data);\r\n\r\nexport default $data\r\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _index = require('./TypeSystem/index.js');\n\nvar _index2 = _interopRequireDefault(_index);\n\nvar _index3 = require('./Types/Expressions/index.js');\n\nvar _index4 = _interopRequireDefault(_index3);\n\nvar _index5 = require('./JaySvcUtil/index.js');\n\nvar _index6 = _interopRequireDefault(_index5);\n\nvar _index7 = require('./Types/index.js');\n\nvar _index8 = _interopRequireDefault(_index7);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _index2.default;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbXX0="],"sourceRoot":"/source/"}